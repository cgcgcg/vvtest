#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

import sys
import os
import getopt
import pickle
import copy
from ErrorOrder import *
import exotools

version = "vcomp  Version 0.09 2014-11-10"

manpage = \
"""
NAME
      vcomp - verification comparison tool (version """ + version + """)

SYNOPSIS
      vcomp [OPTIONS] <vcomp file>
      vcomp [--mpl_norms=NORMFILE, --mpl_orders=ORDERFILE] PEOFILE
      vcomp [--tex_orders=ORDERFILE] PEOFILE
      
      In the first case, computed solutions (from simulation codes) will
      be compared against a reference solution. Error norms are calculated
      for specified times and variables, and the orders of accuracy will be
      determined when more than one computed solution is provided. The
      results are written to stdout, and to a pickled error order file
      (suffix .peo) for use with vdiff.

      The reference solution can be provided in one or more Exodus files,
      by an analytic solution expressed as a python function, or by
      Richardson Extrapolation using two computed solutions (usually
      the two finest solutions.)

      Solution verification is performed when the reference solution
      is a solution extrapolated from two computed solutions.
      Code verification is performed when the reference solution is
      an exact solution, a solution in which the error can be
      controlled and reduced to an arbitrary precision comparable
      to machine precision.
      
      In the second case, vcomp is used to read a .peo file and write
      the results for easy plotting in matplotlib. The user specifies
      the output file names on the command line; the filenames should
      end in ".py" and not contain the character "." except to delineate
      the suffix. The norms and orders are written to separate files. They
      can be read into a python session using "import". The mesh resolutions
      and time steps are stored in "h" and "dt" lists, and the norms or
      orders are stored as VARNAME[ time_index ][ norm or order name ].
      The simulation times are in "times" and the names of the norms or
      orders are in "cnames". 
      Example:
        # Write the norms to a file for matplotlib plotting
        vcomp --mpl_norms="vcomp_norms_mpl.py"  vcomp.peo 
        python
        >>> import vcomp_norms_mpl as mpl
        >>> import matplotlib.pyplot as plt
        >>> plt.plot(mpl.h, mpl.DENSITY[-1]['L1_norm']

DESCRIPTION
      Vcomp compares each of the computed solutions against the reference
      solution, and writes the error norms and orders of accuracy to
      a file.  Both the absolute and relative norms are reported. The
      error norms and orders of accuracy are calculated for the times and
      variables specified by the user in the input file.

      The reference solution is provided by one of three means: Exodus
      files, an analytic solution, or Richardson Extrapolation.

      The reference solution can be generated from two specified
      solutions (in the form of exodus files) via Richardson
      extrapolation. The two specifed solutions must be have the
      same dimensions, mesh coordinates, connectivity, variables,
      and time stamps. Furthermore, each of the computed solutions
      must also have the same dimensions, coordinates, and connectivity
      as the specified file solutions.

      An analytic solution can be used as the reference solution. The
      analytic solution is provided in the form of a python class or
      module, which contains functions that evaluate the analytic
      expressions for each field variable to be compared. Each function
      accepts position [x, y, z] and time as arguments. For more detail
      see the description of the "analytic solution" command, below.

      Exodus file(s) can be provided as the reference solution(s). If
      a single file is provided, the dimensions, mesh, and connectivity
      must exactly match those of all the computed solutions.
      Alternatively a number of exodus files can be provided, with a one-
      to-one correspondence with computed solution exodus files. Again
      the dimensions, mesh, and connectivity must exactly match between
      corresponding exodus files.

      The error norms are the integrated quanitites over each element,
      assuming constant variation over the dual element for the nodal
      quantities, and constant variation within the element for the
      elemental quantities.
     

OPTIONS
      -h, --help
           Print man page and exit.
      -V, --version
           Print version number and exit
      -p, --procs
           Number of processes to use to compute analytic solution


INPUT FILE COMMANDS
      --------------------------------------------------------------------
      computed solution = <file.exo> <h> <dt>
           Computed solution with the cell size, h, and time step
           size, dt.  The order of these commands is important; list
           the finest resolution first, and increase to the coarsest
           resolution.

      comparison times = { last | all | list_of_times }
           Specify the times in the computed solutions to compare.  This
           assumes that all the computed solutions have the time stamps
           to compare.  The user can specify 'last' to get just the last
           time stamp, 'all' to get all the time stamps, or a list of
           times (floats) to compare.  If not specified the default is
           to compare just the last time stamp.

      reference times = <list_of_times>
           This optional command evaluates the reference solution at times
           which differ from the comparison times. There must be one time
           (<float>) in the list for each time in the list of comparison
           times. For example, if the comparison times are 0.0, 1.0,
           and 2.0, there must be three reference times, say 4.0, 5.0,
           and 6.0. Then the computed solution at times 0.0, 1.0, and 2.0
           will be compared to the reference solution at times 4.0, 5.0,
           and 6.0, respectively. The intended use case is for a solution
           that is periodic, so that at regular time intervals the exact
           solution is identical to the initial (t=0.0) solution. A
           second use case is for time-shifted reference solutions.

      exclude variables = <list of variables>
      include variables = <list of variables>
           Include or exclude variables to be compared. Variable names 
           are case insensitive, and any number of variables can be listed 
           in any order.  Computed and file solution files are checked
           to ensure the variables are present. Both include and exclude
           command lines cannot be active at the same time. If neither
           of these command lines are present, all the variables in the
           computed solution files are compared.

      exclude blocks = <list of block ids>
      include blocks = <list of block ids>
           Include or exclude blocks to be compared. Only element
           variables are affected; for nodal variables, all the nodes
           are included. Block ids are integers Computed and file
           solution files are checked to ensure the blocks are
           present. Both include and exclude command lines cannot be
           active at the same time. If neither of these command lines
           are present, all the blocks in the computed solution files
           are compared.

      calculate orders = { true | false}
           If calculate orders is false, the convergence rates of the
           error norms (the orders of accuracy) will not be calculated.
           If only one computed solution is given, calculate orders
           will be set to false because at least two computed solutions
           are required to compute the orders; otherwise, the default
           value is true.
      --------------------------------------------------------------------
      extrapolated solution = <file.exo> <h> <dt>
           Extrapolated reference solution with the cell size, h, and
           time step size, dt.  Two of these command lines are required
           to calculate the extrapolated solution.  The order of these
           command lines is important; list the finest resolution first.

      expected order = <float>
           The expected order of accuracy to use for the Richardson
           extrapolation.  Only used with 'extrapolated solution'.
           Default is 2.0.

      refinement factor = <float>
           The refinement factor between the first two computed solutions.
           Example: if the dt on the second computed solution is twice
           the dt on the first computed solution, then --refine 2.0.
           Example: if the dt on the second file is four times larger
           than the dt on the first, then -refine 4.0. Default is 2.0.
      --------------------------------------------------------------------
      analytic solution = <python script>
           Specify the analytic solution to be used as the reference
           solution. A "wrapper" python file provides the following 
           attributes:
          exact_class [string]
            The analytic solution is expected to be in the form of a
            python class or module. exact_class is the name of this
            object. exact_class provides methods or functions which
            take as arguments the coordinates and time, and return
            values of the exact solution. 
          instantiator [string]  (optional)
            If exact_class requires an initialization or instantiation,
            the command to do so can be put in the instantiator string
            which will be evaluated, i.e. "eval(instantiator)"
          test_var_list [ [c_var1, a_func1], [c_var2, a_func2], ... ]
            A list of lists, test_var_list,  provides the mapping of
            variables in the computed solution files and the functions
            provided by exact_class. c_varX (a string) is the case-
            sensitive name of the variable in the exodus files.
            a_funcX (a string) is the name of the corresponding function
            in exact_class, with signature ([coordinates], time); it
            will be invoked as, e.g. exact_class.a_func([x, y, z], t)
          zfill [float]  (optional)
            The functions of the analytic class often assume a three-
            dimensional system, e.g. analytic.rho([x, y, z], t). For
            two-dimensional simulations the computed solution only
            provides x- and y-coordinates. Set zfill to specify a
            (single) value for the z-coordinate.
          subel_ints [int]  (optional)
            For element variables, the analytic function will be
            evaluated at a number of points within each element;
            these points form an equispaced mesh within the element.
            subel_ints is the number of subelement intervals in each
            dimension of the element

          Example: The contents of a sample wrapper python file:
            exact_class="CookCabot"
            instantiator="CookCabot.CookCabotCart(0.1, 1.0, 1.0e-3,
                                                  1.0e-6, 5.0/3.0, 0.0)"
            test_var_list=[ ["DENSITY", "rho"],
                            ["PRESSURE", "p"],
                            ["VELOCITY_X", "ux"],
                            ["VELOCITY_Y", "uy"] ]
            zfill=0.0
            subel_ints=4
      --------------------------------------------------------------------
      file solution = <file_solution.exo> <h> <dt>
           Use this Exodus file as a reference solution. If only one
           file_solution command is given, the dimensions, mesh, and
           connectivity must exactly match those in all the computed
           solutions. If there is more than one file_solution command
           then there must be one for each computed solution, and the 
           dimension, mesh, and comectivity must exactly match those
           of the corresponding computed solution. The order of file
           solutions must correspond to the order of the computed
           solutions.


LIMITATIONS
      * Currently only compares Exodus files with the same exact mesh.
      * Only compares elemental and nodal variables.
      * Writing out Richard extrapolation not available yet.
      * Assumes a constant refinement factor between meshes or time
        step sizes.

AUTHORS
      Curtis Ober,   Sandia National Laboratories, ccober@sandia.gov
      Gregory Weirs, Sandia National Laboratories, vgweirs@sandia.gov
"""


############################################################################

# List of valid commands

computed_solution           = "computed solution"
refinement_factor           = "refinement factor"
comparison_times            = "comparison times"
include_variables           = "include variables"
exclude_variables           = "exclude variables"
include_blocks              = "include blocks"
exclude_blocks              = "exclude blocks"
reference_times             = "reference times"
analytic_solution           = "analytic solution"
file_solution               = "file solution"
extrapolated_solution       = "extrapolated solution"
expected_order              = "expected order"
calculate_orders            = "calculate orders"


def ParseCommandFile(args):
    """
    Parse the command file. Check for errors in validity and
    consistency of inputs, but not the input objects themselves -
    those are checked later.
    """

    com_list = {}
    com_list[computed_solution]     = []
    com_list[refinement_factor]     = float(2.0)
    com_list[include_variables]     = []
    com_list[exclude_variables]     = []
    com_list[include_blocks]        = []
    com_list[exclude_blocks]        = []
    com_list[comparison_times]      = 'last'


    com_list[analytic_solution]     = None
    com_list[file_solution]         = []
    com_list[extrapolated_solution] = []
    com_list[expected_order]        = float(2.0)
    com_list[reference_times]       = []

    com_list[calculate_orders]      = True

    found_error = False
    file = open(args[0],"r")
    filecommands = file.readlines()
    for filecommand in filecommands:
       if filecommand.startswith("#"): continue
       if len(filecommand.strip()) == 0: continue
       com_val = filecommand.split("=", 1)
       com = com_val[0].strip().lower()
       if com_list.has_key(com):
         val = com_val[1].strip()
         if (com == extrapolated_solution or
             com == computed_solution or
             com == file_solution):
           slist = com_list[com]
           words = val.split()
           if len(words) != 3:
             print "vcomp: error: Too many words:"
             print "    ", filecommand
             found_error = True
           else:
             val_tuple = tuple(words)
             slist.append(val_tuple)
             com_list[com] = slist
         elif com == analytic_solution:
             com_list[com] = val
         elif com == include_variables or com == exclude_variables:
           slist = com_list[com]
           words = val.split()
           for word in words:
             slist.append(word)
           com_list[com] = slist
         elif com == include_blocks or com == exclude_blocks:
           slist = com_list[com]
           words = val.split()
           for word in words:
             slist.append(int(word))
           com_list[com] = slist
         elif com == expected_order or com == refinement_factor:
           com_list[com] = float(val)
         elif com == comparison_times:
           words = val.split()
           if words[0].lower() == 'last' or words[0].lower() == 'all':
             slist = words[0].lower()
           else:
             slist = []
             for word in words:
               slist.append(float(word))
           com_list[com] = slist
         elif com == reference_times:
           words = val.split()
           if words[0].lower() == 'last' or words[0].lower() == 'all':
             # 'all' is not accepted but will be handled below
             slist = words[0].lower()
           else:
             slist = []
             for word in words:
               slist.append(float(word))
           com_list[com] = slist
         elif com == calculate_orders:
           words = val.split()
           com_list[com] = words[0].lower()
         else:
           com_list[com] = com_val[1]
       else:
         print "vcomp: error: Invalid command:"
         print "    ", filecommand
         found_error = True

    # Computed solution(s).
    n_csols = len(com_list[computed_solution])
    if n_csols == 1:    # can't compute orders, only error norms
      if com_list[calculate_orders] == True:
        print "vcomp: info: only one computed solution; only error " + \
              "norms will be calculated."
        com_list[calculate_orders] = False
    if n_csols == 0:
      print "vcomp: error: No computed solutions specified."
      found_error = True

    # What is the reference solution? Check that.
    found_ref = 0
    if len(com_list[extrapolated_solution]) > 0:
      found_ref = found_ref + 1
      if len(com_list[extrapolated_solution]) != 2:
        print "vcomp: error: extrapolating a solution requires " + \
              "two solutions."
        found_error = True
    if len(com_list[file_solution]) > 0:
      found_ref = found_ref + 1
      n_fsols = len(com_list[file_solution])
      if n_fsols != 1 and n_fsols != n_csols:
        print "vcomp: error: there must be either 1 file solution or ", \
          n_fsols, " file solutions."
        found_error = True
    if com_list[analytic_solution]     != None : found_ref = found_ref + 1
    
    if ( found_ref > 1 ):
      print "vcomp: error: can only specify one reference solution."
      print "     Current options specified:"
      print "       analytic solution     = ", com_list[analytic_solution]
      print "       file solution         = ", com_list[file_solution]
      print "       extrapolated solution = ", com_list[extrapolated_solution]
      found_error = True

    if ( found_ref == 0 ):
      print "vcomp: error: need to specify a reference solution, i.e., "
      print "       analytic solution     = ... "
      print "       file solution         = ... "
      print "       extrapolated solution = ... "
      found_error = True

    # Variables for which error norms and orders will be calculated
    if com_list[include_variables] != [] and \
       com_list[exclude_variables] != []:
      print "vcomp: error: Can not specify both 'include variables' and " \
            "'exclude variables' at the same time."
      found_error = True

    # Block ids for which error norms and orders will be calculated
    if com_list[include_blocks] != [] and \
       com_list[exclude_blocks] != []:
      print "vcomp: error: Can not specify both 'include blocks' and " \
            "'exclude blocks' at the same time."
      found_error = True

    # Times at which to compute error norms and orders
    # Catch 'last' and 'all' in comparison_times
    ctlist = com_list[comparison_times]
    n_ctimes = 0
    if type(ctlist) == type(""):
      if ctlist == 'last':  n_ctimes = 1
      # if ctlist[0] == 'all' then n_ctimes will remain 0
      # only string possibilities should be 'last' and 'all'
    else:
      n_ctimes = len(ctlist)

    rtlist = com_list[reference_times]
    if rtlist == 'last' or rtlist == 'all':
      print "vcomp: error: Can not specify 'last' or 'all' for " + \
            "'reference times'."
      found_error = True
    else:
      n_rtimes = len(rtlist)
      if not n_rtimes == 0: 
        if n_ctimes == 0:   # must have specified 'all' for comparison times
          print "vcomp: warning: Cannot check that the number of " + \
                "comparision times ('all') matches the number of " + \
                "reference times."
        elif not n_rtimes == n_ctimes:
          print "vcomp: error: Number of reference times must equal the " + \
                "number of comparision times."
          found_error = True
##      else:
##        print "vcomp: info: Reference times = ", rtlist

    # Check whether or not the orders should be calculated
    # If calculate_orders is in the input file, cast from string to bool
    if type(com_list[calculate_orders]) == type(""):
      sval = com_list[calculate_orders]
      if sval == 'false': com_list[calculate_orders] = False
      elif sval == 'true': com_list[calculate_orders] = True
      else:
        print "vcomp: error: Value for 'calculate orders' = " + sval + \
              " is not recognized. Must be 'true' or 'false'."
        found_error = True
          
    if found_error:
      print "vcomp: error: List of interpolated commands:"
      print com_list
      sys.exit(1)

    return com_list

def Generate_Extrapolated_Solution(exoapi_0, exoapi_1,
                                   order, refine, times, bid_list=[]):
    """
    Generate the Richardson-extrapolated solution, using the specified
    order of accuracy and refinement factor.  Currently only extrapolate
    element variables.
    """

    error_coeff = 1.0/( pow(refine, order) - 1.0 );

    
    tovb_var_values_e = {}
    for item in times:
      time_index = item[0]
      time       = item[1]

      times_0 = exoapi_0.getTimes()
      time_index_0 = 0
      for index in range(len(times_0)):
        if not exotools.softDiff(time, times_0[index]):
          time_index_0 = index 
          break

      times_1 = exoapi_1.getTimes()
      time_index_1 = 0
      for index in range(len(times_1)):
        if not exotools.softDiff(time, times_1[index]):
          time_index_1 = index 
          break
 
      ovb_var_values_e = {}
      for objtype in [exodus.EX_NODE,exodus.EX_ELEM]:
        varnames = exoapi_0.varNames( objtype )

        vb_var_values_e = {}
        for var in varnames:
          var_index_r  = exoapi_0.findVar( objtype, var, case=0 )
          var_values_r = array.array( exoapi_0.storageType() )
          var_index_c  = exoapi_1.findVar( objtype, var, case=0 )
          var_values_c = array.array( exoapi_1.storageType() )
          var_values_e = array.array( exoapi_0.storageType() )

          b_var_values_e = {}
          bids = []
          if objtype == exodus.EX_NODE : bids.append(0)
          if objtype == exodus.EX_ELEM :
            if bid_list==[]:
              bids = exoapi_0.getIds( exodus.EX_ELEM_BLOCK )
            else:
              bids = bid_list
          for bid in bids:
            exoapi_0.readVar(time_index_0+1, \
                             objtype, bid, var_index_r, var_values_r)
            exoapi_1.readVar(time_index_1+1, \
                             objtype, bid, var_index_c, var_values_c)

            for n in range(len(var_values_r)):
              var_values_e.append( var_values_r[n] \
                                + (var_values_r[n]-var_values_c[n])*error_coeff)
            b_var_values_e[bid] = var_values_e
          vb_var_values_e[var.lower()] = b_var_values_e
        ovb_var_values_e[objtype] = vb_var_values_e
      tovb_var_values_e[time] = ovb_var_values_e

    return tovb_var_values_e

def ValidateAnalytic( pyfile, comp_varnames ):
  """Try to catch any errors in the the wrapper file for the
  analytic solution and the exact solution class and its attributes.
  Also check consistency between the variable names in the vcomp
  command file and the test_var_list in the wrapper file.
  """

  # Expect to find a python file ( python_module.py ) in the cwd
  #   which we will import (with "import python_module" )
  split_name=pyfile.split(".")

  if split_name.pop(-1) != "py":
    print "Analytic solution seems not to be a python file!"
    sys.exit(1)
  else:
    import_target=split_name.pop(0)
    while len(split_name)>0:
      import_target=import_target + "." + split_name.pop(0)

  sys.path.insert(0, "")

  # try/except?
  exec('import ' + import_target + ' as a_module')

  # Successfully imported

  # At some point, we might accept more than one type of analytic solution
  #   interface, each with different properties. Then the following would
  #   be for just one interface
  # Succesfully imported; see if it has what we need
  
  # required attributes: "exact_class", "instantiator", "test_var_list"
  if not hasattr( a_module, "exact_class" ):
      print "Analytic solution file " + pyfile + " does not have " \
             + "attribute 'exact_class'!"
      sys.exit(1)
  else:
      # try/except?
      exec( 'import ' + a_module.exact_class )

  if not hasattr( a_module, "instantiator" ):
      print "Analytic solution file " + pyfile + " does not have " \
             + "attribute 'instantiator'!"
      sys.exit(1)
  else:
      # try/except?
      exact = eval(  a_module.instantiator )

  if not hasattr( a_module, "test_var_list" ):
      print "Analytic solution file " + pyfile + " does not have " \
             + "attribute 'test_var_list'!"
      sys.exit(1)
  else:
      # The first in the pair is the variable name in the computed
      #   solution (exodus file)
      comp_vars_remaining = copy.deepcopy(comp_varnames)
      for pair in a_module.test_var_list:
        missing_cvar = True
        for var in comp_varnames:
           if var == pair[0]:
              missing_cvar = False
              comp_vars_remaining.remove(var)
              break
        if missing_cvar:
           print "Variable '" + pair[0] + "' was not found in the list of " \
             + "included variables in the vcomp command file!"
           print "Ensure correct spelling and matching case. Included variables:"
           for var in comp_varnames:
             print "  " + var
           sys.exit(1)

      if not comp_vars_remaining == []:
         pass
         # Need to print error and list remaining variables
           

      # The second in the pair is the corresponding function in the
      #   analytic solution (exact_class)
      missing_func = False
      for pair in a_module.test_var_list:
        if not hasattr(exact, pair[1]):
           print "Analytic solution class " + a_module.exact_class \
             + " does not have attribute '" + pair[1] + "'!"
           missing_func = True
      if missing_func:
        print "Did you ensure the attribute is spelled correctly?"
        print "Recall that attributes are case sensitive."
        sys.exit(1)

  # optional attributes
  #   set defaults if not present
  if not hasattr(a_module, "zfill"):
    a_module.zfill=None
  if not hasattr(a_module, "subel_ints"):
    a_module.subel_ints=1


  # If we got this far, give it a try....

  return a_module
    
############################################################################

# parsing command line input

if len(sys.argv)  == 0:
  print manpage
  sys.exit(0)

for a in sys.argv:
  if a == '-help' or a == '-h' or a == '-H' :
    print manpage
    sys.exit(0)

try:
  opts, args = getopt.getopt( sys.argv[1:], "hVp:",
                  longopts=[ 'help',
                             'version',
                             'procs=',
                             'mpl_norms=',
                             'mpl_orders=',
                             'tex_orders='
                           ] )
except getopt.error, e:
  sys.stderr.write('*** vcomp: error: ' + str(e) + '\n' )
  sys.exit(1)

D = {}
for op in opts:
  if   op[0] == '--help':      n = '-h'
  elif op[0] == '--version':   n = '-V'
  elif op[0] == '--procs':     n = '-p'
  else:                        n = op[0]
  L = D.get(n,[])
  L.append(op[1])
  D[n] = L
opts = D

if opts.has_key('-V'):
  print version
  sys.exit(0)

if opts.has_key('-p'):
    try:
        processes = int(opts['-p'][0])
    except:
        print >> sys.stderr, 'Error: Option -p or --procs is ', opts['-p'][0],'but must be an integer'
        raise
else:
      processes = 1

if processes < 1:
    print >> sys.stderr, 'Error: Asked for', processes, 'processes, but need at least one.'
    sys.exit(1)

if opts.has_key('--mpl_norms') or opts.has_key('--mpl_orders') or opts.has_key('--tex_orders'):

    # Open the peo file for reading

    # get peo_filename from args?
    peo_file = args[0]
    fpickle = open(peo_file, 'r')
    pickle_handle=pickle.Unpickler(fpickle)
    eo_obj=pickle_handle.load()
 
    print "Opening file " + args[0] + " to export as a python module."


    if opts.has_key('--mpl_norms'):
        norm_file=opts['--mpl_norms'][0]
        eo_obj.WriteNormsToMPL(mpl_fn=norm_file)

    if opts.has_key('--mpl_orders'):
        order_file=opts['--mpl_orders'][0]
        eo_obj.WriteOrdersToMPL(mpl_fn=order_file)

    if opts.has_key('--tex_orders'):
        order_file=opts['--tex_orders'][0]
        eo_obj.WriteOrdersToTex(tex_fn=order_file)

    sys.exit(0)

if len(args) != 1:
  print "*** vcomp: error: Need to specify one command file."
  print "           Command file = ", args
  sys.exit(0)

com_list = ParseCommandFile(args)

############################################################################


# Create ErrorOrder object
if ( com_list[extrapolated_solution] != [] ):
  rfname = 'extrapolated'
elif ( com_list[file_solution] != [] ):
  rfname = 'file'
elif ( com_list[analytic_solution] != None ):
  rfname = 'analytic'
else:
  print" vcomp: error: No reference solutions found!" 
  sys.exit(1)

# Files to compare
eo_obj = ErrorOrder( rfname )
comps = com_list[computed_solution]
for comp in comps:
  eo_obj.SetComparisonFileNames(comp[0], comp[1], comp[2])

# Setup objects
objtypes = []
objtypes.append(exodus.EX_NODE)
objtypes.append(exodus.EX_ELEM)
eo_obj.SetObjectTypes( objtypes )

# Setup times
times = []
computed_filename = eo_obj.computed_filenames[0]
exoapi_c = exodus.ExodusFile(computed_filename)
fulltimes = exoapi_c.getTimes()

if com_list[comparison_times] == [] or com_list[comparison_times] == 'last':
  # Include just last time index.
  time_index = len(fulltimes)-1
  item = [time_index, fulltimes[time_index]]
  times.append(item)
elif com_list[comparison_times] == 'all':
  # Include all times indices.
  for time_index in range(len(fulltimes)):
    item = [time_index, fulltimes[time_index]]
    times.append(item)
else:
  vals = com_list[comparison_times]
  for val in vals:
    found_time = False
    for time_index in range(len(fulltimes)):
      ctime = fulltimes[time_index]
      if not exotools.softDiff(ctime, val, 1.0e-06, 1.0e-06):
        item = [time_index, fulltimes[time_index]]
        times.append(item)
        found_time = True
        break
    if not found_time:
      print "Did not find comparison time = ", val, " in ", \
            computed_filename
  if times == []:
    print "Did not find any comparison times in ", computed_filename
    print "   Requested comparison times:"
    for val in vals:
      print "     ", val
    print "   Times in ", computed_filename, ":"
    for time_index in range(len(fulltimes)):
      print "     ", fulltimes[time_index]
    sys.exit(1)

# Check reference times here

eo_obj.SetTimes( times )

#Setup variables
varnames   = []
varnames_c = []
for objtype in objtypes:
  varnames_c += exoapi_c.varNames( objtype )
exoapi_c.closefile()

if com_list[include_variables] != []:
  inc_vars = com_list[include_variables]
  for inc_var in inc_vars: 
    found_match = False
    for var in varnames_c:
       if inc_var.lower() == var.lower():
         found_match = True
         varnames.append(var)
         break
    if not found_match:
      print "Did not find include variable, ", inc_var, ", in ", \
            computed_filename
      print "Possibilities were: "
      for var in varnames_c:
        print var
      sys.exit(1)

elif com_list[exclude_variables] != []:
  exc_vars = com_list[exclude_variables]
  for exc_var in exc_vars: 
    found_match = False
    for var in varnames_c:
      if exc_var.lower() == var.lower():
        found_match = True
        break
    if not found_match:
      print "Did not find exclude variable, ", exc_var, ", in ", \
            computed_filename
      print "Possibilities were: "
      for varc in varnames_c:
        print varc
      sys.exit(1)

  for var in varnames_c:
    found_match = False
    varnames.append(var)
    for exc_var in exc_vars: 
      if exc_var.lower() == var.lower():
        found_match = True
        varnames.remove(var)
        break

else:
  for var in varnames_c:
    varnames.append(var)

eo_obj.SetVarNames( varnames )

# Setup blocks
# Parse and develop bid_list like varnames above; but do not add to eo_obj.
# Adding an attribute to the eo_obj breaks all existing vcomp tests
bid_list   = []
#bid_list_c = []
bid_list_c = exoapi_c.getIds( exodus.EX_ELEM_BLOCK )
exoapi_c.closefile()

if com_list[include_blocks] != []:
  inc_bids = com_list[include_blocks]
  for inc_bid in inc_bids: 
    found_match = False
    for bid in bid_list_c:
       if inc_bid == bid:
         found_match = True
         bid_list.append(bid)
         break
    if not found_match:
      print "Did not find included block, ", inc_bid, ", in ", \
            computed_filename
      print "Included blocks=", inc_bids
      print "Available blocks=", bid_list_c
      sys.exit(1)

elif com_list[exclude_blocks] != []:
  exc_bids = com_list[exclude_blocks]
  for exc_bid in exc_bids: 
    found_match = False
    for bid in bid_list_c:
      if exc_bid == bid:
        found_match = True
        break
    if not found_match:
      print "Did not find excluded block, ", exc_bid, ", in ", \
            computed_filename
      sys.exit(1)

  for bid in bid_list_c:
    found_match = False
    bid_list.append(bid)
    for exc_bid in exc_bids: 
      if exc_bid == bid:
        found_match = True
        bid_list.remove(bid)
        break

else:
  # Empty bid_list means do them all in exotools spatial norm calcs.
  # eo_obj functions just passes the bid_list through to exotools calls
  bid_list=[]  
#  for bid in bid_list_c:
#    bid_list.append(bid)

# Do not add bid_list to the eo_obj.
# If not all blocks were included, need to add some print output below to indicate that.

#Setup extrapolated solution, if any
if ( com_list[extrapolated_solution] != [] ):
  extraps = com_list[extrapolated_solution]

  filename0 = extraps[0][0]
  exoapi_0 = exodus.ExodusFile(filename0)
  filename1 = extraps[1][0]
  exoapi_1 = exodus.ExodusFile(filename1)

  exotools.compare_exoduses(exoapi_0, filename0,
                            exoapi_1, filename1,
                            times)
  tovb_var_values_e = \
          Generate_Extrapolated_Solution( exoapi_0, exoapi_1, \
                                          com_list[expected_order], \
                                          com_list[refinement_factor], \
                                          times,
                                          bid_list=bid_list )
  exoapi_0.closefile()

  eo_obj.CalculateNormsFromExtrapolated( tovb_var_values_e,
                                         bid_list=bid_list )
  eo_obj.PrintNorms()

  if com_list[calculate_orders]:
    eo_obj.CalculateOrder( com_list[refinement_factor] )
    eo_obj.PrintOrders()

#Setup file solutions, if any
if ( com_list[file_solution] != [] ):

  # Check file solutions
  # check reference times?

  fsols = com_list[file_solution]
  if com_list[reference_times] != []:
    eo_obj.CalculateNormsFromFiles( fsols,
                                    file_times=com_list[reference_times],
                                    bid_list=bid_list )
  else:
    eo_obj.CalculateNormsFromFiles( fsols,
                                    bid_list=bid_list )

  eo_obj.PrintNorms()

  if com_list[calculate_orders]:
    eo_obj.CalculateOrder( com_list[refinement_factor] )
    eo_obj.PrintOrders()

#Setup analytic solution, if any
if ( com_list[analytic_solution] != None ):

  # Expect to find a python file ( python_module.py ) in the cwd
  # Open it, check to see it has what we need, import as a module
  a_module = ValidateAnalytic( com_list[analytic_solution], varnames )

  # Pass the module we imported to the ErrorOrder object for computations
  if com_list[reference_times] != []:
    eo_obj.CalculateNormsFromAnalytic( processes,
                                       a_module,
                                       exact_times=com_list[reference_times],
                                       bid_list=bid_list, )
  else:
    eo_obj.CalculateNormsFromAnalytic( processes,
                                       a_module,
                                       bid_list=bid_list, )
  eo_obj.PrintNorms()

  if com_list[calculate_orders]:
    eo_obj.CalculateOrder( com_list[refinement_factor] )
    eo_obj.PrintOrders()

fpickle = open('vcomp.peo', 'w')
pickle_handle = pickle.Pickler(fpickle)
pickle_handle.dump(eo_obj)

sys.exit(0)
