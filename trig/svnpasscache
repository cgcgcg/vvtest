#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import getopt
import subprocess
import shutil
from os.path import join as pjoin


help_string = """
USAGE
    svnpasscache {-h|--help}
    svnpasscache <repo URL>

SYNOPSIS

    This script caches a subversion config directory in memory which is
initialized with the password to an HTTPS subversion repository.  The cache
area is protected using UNIX permissions, and is never actually written to
disk (except possibly for disk swapping).  This cache is valid across
processes but will not survive reboots.

Do this to get a password-less svn access workflow established:

    1. In a shell on the target machine, run this with your repo URL
        svnpasscache https://mach.sandia.gov/svn/repos/reponame
    2. Copy the svnwrap script into a bin directory in your PATH
    3. Optionally, edit the svnwrap script to set the SVNEXE variable
    4. Use svnwrap in place of the svn program

Note that the algorithm uses /dev/shm to create a directory in RAM.  This
works on Linux; see

    https://unix.stackexchange.com/questions/26364/how-can-i-create-a-tmpfs-as-a-regular-non-root-user

Also note that the cache may not work if it is initialized with one svn version
but used with another svn version.  That is, be consistent with the version of
svn you are using.
"""


def main():
    ""
    optL,argL = getopt.getopt( sys.argv[1:], 'h', ['help'] )

    if ('-h','') in optL or ('--help','') in optL:
        print3( help_string )
        return

    assert len(argL) == 1, 'expected exactly one non-option argument'

    cachedir = create_cache_directory( 'svnpasscache_' )
    print3( 'Cache directory:', cachedir )

    generate_subversion_files( cachedir )

    modify_subversion_servers_file( cachedir )

    initialize_subversion_password( cachedir, argL[0] )

    soft_link_cache_directory( cachedir )


#######################################################################

def soft_link_cache_directory( cachedir ):
    ""
    homedir = os.path.expanduser( '~' )
    mach = os.uname()[1]
    linkdir = os.path.join( homedir, '.subversion_'+mach )

    if os.path.islink( linkdir ) or os.path.isfile( linkdir ):
        os.remove( linkdir )
        time.sleep(1)
    elif os.path.isdir( linkdir ):
        shutil.rmtree( linkdir )
        time.sleep(1)

    os.symlink( cachedir, linkdir )


def create_cache_directory( prefix ):
    ""
    clean_temp_environ_vars()
    import tempfile
    newdir = tempfile.mkdtemp( prefix=prefix, dir='/dev/shm' )
    return newdir


def clean_temp_environ_vars():
    ""
    for var in ['TMPDIR','TEMP','TMP']:
        if var in os.environ:
            del os.environ[var]


def generate_subversion_files( configdir ):
    ""
    print3( 'Generating subversion configuration files...' )

    cmd = 'svn --config-dir ' + configdir + ' --version --quiet'
    print3( cmd )

    x = subprocess.call( cmd, shell=True )

    assert x == 0, 'svn --version command failed'

    cfg = os.path.expanduser( os.path.join( configdir, 'config' ) )
    srv = os.path.expanduser( os.path.join( configdir, 'servers' ) )

    assert os.path.isfile( cfg ) and os.path.isfile( srv ), \
        'Running "svn --version" failed to regenerate files: ' + \
        cfg + ', ' + srv


def modify_subversion_servers_file( configdir ):
    ""
    serv = os.path.join( configdir, 'servers' )

    lineL = read_file_lines( serv )

    done = False

    global_section = False
    for i in range( len(lineL) ):
        sline = lineL[i].strip()

        if not global_section:
            if sline.startswith( '[global]' ):
                global_section = True

        elif sline.startswith( 'store-passwords =' ) or \
             sline.startswith( 'store-passwords=' ) or \
             sline.startswith( '# store-passwords =' ) or \
             sline.startswith( '# store-passwords=' ):
            lineL[i] = 'store-passwords = yes\n'
            done = True

        elif sline.startswith( 'store-plaintext-passwords =' ) or \
             sline.startswith( 'store-plaintext-passwords=' ) or \
             sline.startswith( '# store-plaintext-passwords =' ) or \
             sline.startswith( '# store-plaintext-passwords=' ):
            lineL[i] = 'store-plaintext-passwords = yes\n'

    assert done, 'Failed to set store-passwords in servers file: '+serv

    bak = serv+'.bak_'+str(time.time())
    os.rename( serv, bak )

    write_lines_to_file( serv, lineL )


def read_file_lines( filename ):
    ""
    fp = open( filename, 'r' )
    try:
        lineL = [ line for line in fp.readlines() ]
    finally:
        fp.close()

    return lineL


def write_lines_to_file( fname, linelist ):
    ""
    fp = open( fname, 'w' )
    try:
        fp.write( ''.join( linelist ) )
    finally:
        fp.close()


def initialize_subversion_password( configdir, repo ):
    ""
    cmd = 'svn --config-dir ' + configdir + ' list '+repo

    print3( cmd )
    subprocess.call( cmd, shell=True )

    while True:

        print3( cmd )
        subprocess.call( cmd, shell=True )

        rtn = prompt_for_input( '', 'Run again?', default='n' )

        if not response_is_yes(rtn):
            break


def prompt_for_input( info_string, prompt_string='Continue?', default='y' ):
    """
    """
    if info_string:
        print3( info_string )

    msg = prompt_string.rstrip() + ' '
    if default:
        msg += '['+default+'] '

    try:
        rtn = raw_input( msg )

        if not rtn.strip() and default:
            rtn = default

    except EOFError:
        rtn = ''

    return rtn


def response_is_yes( response ):
    ""
    if response and response.lower() in ['y','yes']:
        return True

    return False


def print3( *args ):
    ""
    sys.stdout.write( ' '.join( [ str(arg) for arg in args ] ) + '\n' )
    sys.stdout.flush()


###########################################################################

if __name__ == "__main__":
    main()
