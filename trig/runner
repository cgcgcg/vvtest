#!/usr/bin/env python

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from getopt import getopt
import time
import subprocess
import shlex
import random


help_string = '''
USAGE:
    runner [OPTIONS] command

SYNOPSIS:
    The runner script launches the given command as a subprocess.  If the
--exclusive-id option is given, then the command is not run if it is already
running.  This is useful for maintaining a running daemon from a cron table.

OPTIONS:
    -h, --help : print help string

    --exclusive-id <unique name> : only runs the given command if a runner is
                                   not currently running with the given id

    --sleep-range <seconds> : upper bound on the random sleep time to help
                              avoid race condition; the longer it is, the
                              lower the probability; default 20

CAVEATS:
    Launching two runners at the same time with --exclusive-id can result in
a race condition, because the runner has to check the process table for
duplicates.  But the time delay in obtaining the process table creates a
window of opportunity.  A random sleep in the runner lowers the probability
for the race condition, but is not a guarantee.
'''


shortopts = 'h'
longopts = ['help','exclusive-id=','sleep-range=']

def main():

    optL,argL = getopt( sys.argv[1:], shortopts, longopts )

    optD = {}
    for n,v in optL:
        if n in ['-h','--help']:
            print3( help_string )
            return
        elif n == '--sleep-range':
            optD[n] = max( 2, int(v) )
        else:
            optD[n] = v

    if len(argL) > 0:

        xid = optD.get( '--exclusive-id', None )

        if xid != None:

            sleeprange = optD.get( '--sleep-range', 20 )
            run_exclusive( argL, xid, sleeprange )


def run_exclusive( cmdL, xid, sleeprange ):
    ""
    running = is_command_id_running( xid, sleeprange )

    if not running:
        x = subprocess.call( cmdL )
        sys.exit(x)


def is_command_id_running( commandid, sleeprange ):
    """
    First sleep between 1 and 'sleeprange' seconds to lower the probability
    of a race condition if two runners are launched at the same time.
    """
    random.seed( os.getpid() * 10 )
    secs = random.randint( 1, sleeprange )
    time.sleep( secs )

    pstab = get_process_table_with_ps()
    ancestry_pidset = get_my_process_ancestry( pstab )

    for pid,ppid,cmdL in pstab:

        if pid not in ancestry_pidset:
            if runner_command_id_match( commandid, cmdL ):
                return True

    return False


def get_my_process_ancestry( pstab ):
    ""
    pidset = set( [ os.getpid() ] )

    prevlen = 0
    while len(pidset) != prevlen:
        prevlen = len(pidset)
        for pid,ppid,cmdL in pstab:
            if pid in pidset:
                pidset.add( ppid )

    return pidset


def runner_command_id_match( commandid, cmdL ):
    ""
    try:
        if len(cmdL) > 1 and os.path.basename( cmdL[0] ) != 'runner':
            cmdL = skip_over_options( cmdL[1:] )

        if len(cmdL) > 1 and os.path.basename( cmdL[0] ) != 'runner':
            cmdL = skip_over_options( cmdL[1:] )

        if len(cmdL) > 1 and os.path.basename( cmdL[0] ) == 'runner':

            optL,argL = getopt( cmdL[1:], shortopts, longopts )

            for n,v in optL:
                if n == '--exclusive-id' and v == commandid:
                    return True

    except Exception:
        pass

    return False


def skip_over_options( cmdL ):
    ""
    newL = []

    for arg in cmdL:
        if len(newL) == 0 and arg.startswith('-'):
            pass
        else:
            newL.append( arg )

    return newL


def get_process_table_with_ps():
    ""
    if sys.platform.lower().startswith( 'darwin' ):
        cmd = 'ps -e -o pid,ppid,command'
    else:
        cmd = 'ps -e -o pid,ppid,args'

    fp = open( os.devnull, 'w' )

    try:
        subp = subprocess.Popen( cmd, shell=True,
                                 stdout=subprocess.PIPE,
                                 stderr=fp.fileno() )

        out,err = subp.communicate()

    finally:
        fp.close()

    if type(out) != type(''):
        out = out.decode()

    pstab = parse_ps_output_into_process_table( out )

    return pstab


def parse_ps_output_into_process_table( psout ):
    ""
    pstab = []

    for line in psout.split( os.linesep ):
        lineL = shlex.split( line.strip() )
        if len(lineL) > 2:
            try:
                pid,ppid = int(lineL[0]), int(lineL[1])
                pstab.append( [ pid, ppid, lineL[2:] ] )
            except Exception:
                pass

    return pstab


def print3( *args ):
    ""
    sys.stdout.write( ' '.join( [ str(x) for x in args ] ) + '\n' )
    sys.stdout.flush()


###########################################################################

if __name__ == "__main__":
    main()
