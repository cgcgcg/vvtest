#!/usr/bin/python

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import getopt
import shutil
import time
import glob


help_rmold = \
"""
USAGE:
    rmold [OPTIONS] [--] <glob pattern>

SYNOPSIS
    Remove old files and/or directories.  If -d is not given, nothing is
removed.

OPTIONS:
    -h, --help
    -d <number> : remove paths older than this number of days
    -v : more verbose informational output
"""


def main():
    ""
    optL,argL = getopt.getopt( sys.argv[1:], 'hd:v', ['help'] )

    optD = {}
    for n,v in optL:
        if n == '-h' or n == '--help':
            print3( help_rmold.strip() )
            return
        optD[n] = v

    if len(argL) == 0:
        print3( help_rmold.strip() )
        errorexit( 'no paths or glob pattern given' )

    verbose = ( '-v' in optD )
    age = get_old_age( optD )

    if age:
        if verbose:
            print3( 'rmold: removing files older than', time.ctime( age ) )
        remove_files( age, argL, verbose )


def get_old_age( optD ):
    ""
    age = None

    val = optD.get( '-d', None )
    if val != None:
        try:
            age = float( val )
        except Exception:
            errorexit( 'invalid -d value:', val )

        age = time.time() - age*24*60*60

    return age


def remove_files( age, globs, verbose ):
    ""
    for pat in globs:
        for fn in glob.glob( pat ):
            mtime = os.path.getmtime( fn )
            if mtime < age:
                if verbose:
                    print3( 'rmold: rm -rf "'+fn+'"' )
                remove_path( fn )


def remove_path( pathname ):
    ""
    try:
        if os.path.islink( pathname ):
            os.remove( pathname )
        elif os.path.isdir( pathname ):
            shutil.rmtree( pathname )
        else:
            os.remove( pathname )

    except Exception as e:
        printerr( '*** rmold: unable to remove path: "'+pathname+'", '+str(e) )


def errorexit( *args ):
    ""
    printerr( '*** rmold error:', *args )
    sys.exit(1)


def printerr( *args ):
    ""
    sys.stderr.write( ' '.join( [ str(arg) for arg in args ] ) + '\n' )
    sys.stderr.flush()


def print3( *args ):
    ""
    sys.stdout.write( ' '.join( [ str(arg) for arg in args ] ) + '\n' )
    sys.stdout.flush()


####################################################################

main()
