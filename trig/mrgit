#!/usr/bin/python

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import getopt

import mrgitlib
from mrgitlib import print3


help_mrgit = \
"""
NAME
    mrgit - Multi-Repository Git

SYNOPSIS
    Subcommands include help, clone, pull, status.

DESCRIPTION
    Blah blah.

mrgit [-v] clone <repository> [<repository> ...] [<directory>]
mrgit [-v] clone -G <repository> [<directory>]

    When cloning a single repository URL, mrgit tries to determine if the
    upstream is an mrgit repo, a Google manifests repo, a genesis repo, or
    just a plain URL.  If you know the URL is a Google manifests repo but
    mrgit is not recognizing it as such, use -G to force it.  If no
    repositories are given and the REPO_MANIFEST_URL variable is set, then
    use that as the Google repo to clone.

    If more than one <repository> is given, an mrgit repository is created
    and populated with clones of each URL.  A single, plain URL is also
    treated this way.

mrgit [-v] pull

    Loop over each repository and issue "git pull".

mrgit [-v] status

    Show a status summary of each repository.
"""


def main():
    ""
    optL,argL = getopt.getopt( sys.argv[1:], 'hv', ['help'] )

    optD = {}
    for n,v in optL:
        if n == '-h' or n == '--help':
            print3( help_mrgit.strip() )
            return
        if n == '-v':
            cnt = int( optD.get( '-v', 0 ) )
            optD['-v'] = cnt+1
        else:
            optD[n] = v

    if len(argL) == 0:
        print3( help_mrgit.strip() )
        mrgitlib.errorexit( 'no command given' )

    verb = determine_verbosity( optD )

    cmd = argL[0]

    if cmd == 'help':
        print3( help_mrgit.strip() )

    elif cmd == 'clone':
        mrgitlib.clone_cmd( argL[1:], verbose=verb )

    elif cmd == 'pull':
        mrgitlib.pull_cmd( argL[1:] )

    elif cmd == 'init':
        mrgitlib.init_cmd( argL[1:] )

    elif cmd == 'add':
        mrgitlib.add_cmd( argL[1:] )

    elif cmd == 'status':
        mrgitlib.status_cmd( argL[1:], verbose=verb )

    else:
        mrgitlib.run_cmd( argL, verbose=verb )


def determine_verbosity( optD ):
    ""
    cnt = optD.get( '-v', 0 )
    return 1+cnt


####################################################################

try:
    main()
except mrgitlib.MRGitExitError as exc:
    print3( '*** mrgit error:', exc )
    sys.exit(1)
