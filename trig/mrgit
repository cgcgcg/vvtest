#!/usr/bin/python

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import getopt

import mrgitlib
from mrgitlib import print3


help_mrgit = \
"""
NAME
    mrgit - Multi-Repository Git

SYNOPSIS
    mrgit help, mrgit -h, mrgit --help
    mrgit clone
    mrgit pull

DESCRIPTION
    clone <repository> [<repository> ...] [<directory>]
    clone -G <repository> [<directory>]

    A single <repository> can be a genesis URL, another mrgit clone URL, or
    one or more Git repository URLs.

    Use the -G option to clone from a Google Repo manifests URL.

    If more than one <repository> is given, an mrgit repository is created
    and populated with those.

    pull

    Loop over each repository and issue "git pull".
"""

notes = """

    mrgit [OPTIONS] clone [repo[,repo,...]] [directory]

Upon clone, set/add to .git/info/exclude
    - the .mrgit subdirectory
    - sub-repositories

multiple repository version control git manager utility tool
tie combine coordinate 
mrgit
git wrapper for multiple repository managment
grap = Git wRAPper
mrgrap
"""


def main():
    ""
    optL,argL = getopt.getopt( sys.argv[1:], 'hv', ['help'] )

    optD = {}
    for n,v in optL:
        if n == '-h' or n == '--help':
            print3( help_mrgit.strip() )
            return
        if n == '-v':
            cnt = int( optD.get( '-v', 0 ) )
            optD['-v'] = cnt+1
        else:
            optD[n] = v

    if len(argL) == 0:
        print3( help_mrgit.strip() )
        mrgitlib.errorexit( 'no command given' )

    verb = determine_verbosity( optD )

    cmd = argL[0]

    if cmd == 'help':
        print3( help_mrgit.strip() )

    elif cmd == 'clone':
        mrgitlib.clone_cmd( argL[1:], verbose=verb )

    elif cmd == 'pull':
        mrgitlib.pull_cmd( argL[1:] )

    elif cmd == 'init':
        mrgitlib.init_cmd( argL[1:] )

    else:
        mrgitlib.errorexit( 'unknown mrgit command:', cmd )


def determine_verbosity( optD ):
    ""
    cnt = optD.get( '-v', 0 )
    return 1+cnt

####################################################################

try:
    main()
except mrgitlib.MRGitExitError as exc:
    print3( '*** mrgit error:', exc )
    sys.exit(1)
