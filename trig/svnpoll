#!/usr/bin/env python

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import getopt
import time
import calendar
import xml.etree.ElementTree as ET
import traceback
import signal

from command import Command


POLL_SLEEP = 60


help_page = """
USAGE:
    svnpoll [OPTIONS]

SYNOPSIS:
    The svnpoll program monitors a subversion repository for commits and
triggers a plugin hook to handle them.

OPTIONS:
    -h,--help : this help page
    --repo <svn repo url> : specify the subversion repository to monitor
    --svnexe <svn path> : specify the path to the svn executable to use
    -n : noop mode; causes additional echoing by the poller, and noop=True
         is sent to the hook

PLUGIN:
    A file called svnpoll_plugin.py is imported and must contain a function
with this signature:

    def trigger( commit_obj, noop_bool ):
        pass

The 'commit_obj' is an instance of the Commit class defined in this file.
If 'noop_bool' is True, then the hook should print what would be done, but
not actually do it.
"""


def main():
    ""
    optL,argL = getopt.getopt( sys.argv[1:], 'hn',
                               ['help','repo=','svnexe='] )

    repo = None
    svnexe = 'svn'
    noop = False
    echo = 'none'

    for n,v in optL:
        if n in ['-h','--help']:
            print3( help_page )
            return
        elif n == '--svnexe':
            svnexe = v
        elif n == '-n':
            noop = True
            echo = 'echo'
        elif n == '--repo':
            repo = v

    if repo:
        ass = Assembler()
        ass.createObjects( repo, svnexe, noop, echo )
        ass.start()


class Assembler:

    def createObjects(self, repo, svnexe,
                            noop=False, echo='none',
                            poll_sleep=POLL_SLEEP ):
        ""
        import svnpoll_plugin as hook

        cmtsrc = self.makeSource( repo, svnexe, echo )

        self.monitor = SubversionRepoMonitor( poll_sleep,
                                              cmtsrc,
                                              hook,
                                              noop,
                                              echo )

    def makeSource(self, repo, svnexe, echo):
        ""
        return CommitSource( repo, svnexe, echo )

    def start(self):
        ""
        self.monitor.pollLoop()


#########################################################################

class Commit:

    def __init__(self, repo, etree_elmt):
        ""
        self.repo = repo
        self.rev = int( etree_elmt.get( 'revision', 0 ) )
        self.author = get_author( etree_elmt )
        self.date = get_date( etree_elmt )
        self.msg = get_message( etree_elmt )
        self.paths = get_paths( etree_elmt )

    def getRepoURL(self):
        ""
        return self.repo

    def getRevision(self):
        ""
        return self.rev

    def getAuthor(self):
        ""
        return self.author

    def getDate(self):
        ""
        return self.date

    def getShortMessage(self):
        ""
        return self.msg.strip().split('\n')[0][:60]

    def getBranch(self):
        """
        If all paths in the commit are in a subdirectory of "branches" then
        that subdirectory name is returned.  Else the first path element is
        returned, such as "/trunk" or "/devel".
        """
        pre = self.getCommonPrefix()
        predirs = pre.split('/')

        if pre.startswith( '/branches' ):
            if len(predirs) > 2:
                return predirs[2]
            return '/branches'

        else:
            return '/'.join( predirs[:2] )

    def getCommonPrefix(self):
        """
        Returns the longest starting directory in common between all files
        in the commit.
        """
        pathlist = [ path for act,path in self.paths ]
        pre = os.path.commonprefix( pathlist ).rpartition( '/' )[0]
        return pre

    def getMessage(self):
        ""
        return self.msg

    def formatFileList(self):
        ""
        L = [ ' '+act+' '+path for act,path in self.paths ]
        return '\n'.join( L ) + '\n'

    def asMultiLineString(self):
        ""
        buf = time.ctime( self.getDate() ) + '\n'
        buf += 'Revision: '+str(self.getRevision()) + '\n'
        buf += 'By '+self.getAuthor() + '\n\n'
        buf += self.getMessage().strip() + '\n\n'
        buf += self.formatFileList().strip() + '\n'

        return buf


#########################################################################

class SubversionRepoMonitor:

    def __init__(self, poll_sleep, commit_source, hook,
                       noop=False, echo='none'):
        ""
        self.poll_sleep = poll_sleep
        self.cmtsrc = commit_source
        self.hook = hook
        self.echo = echo
        self.noop = noop

    def pollLoop(self):
        ""
        commit_cache = set()

        ok = True
        while ok:

            cmtL = self.cmtsrc.getRecent( 5*60 )

            for cmt in cmtL:

                rev = cmt.getRevision()

                if rev not in commit_cache:

                    if self.echo !=  'none':
                        print3( cmt.getRevision(), cmt.getAuthor(),
                                time.ctime(cmt.getDate()),
                                cmt.getBranch(), cmt.getCommonPrefix(),
                                cmt.getShortMessage(),
                                '\n'+cmt.formatFileList() )

                    try:
                        rtn = self.hook.trigger( cmt, self.noop )
                    except Exception:
                        rtn = None
                        traceback.print_exc()

                    if rtn and rtn ==  'break':
                        ok = False
                        break

                    commit_cache.add( rev )

            time.sleep( self.poll_sleep )



class CommitSource:

    def __init__(self, repo, svnexe, echo='none'):
        ""
        self.repo = repo
        self.svnexe = svnexe
        self.echo = echo

    def getRepoURL(self):
        ""
        return self.repo

    def getRecent(self, age):
        ""
        etree = self.svnLogAsXML( age )

        cmtL = []

        if etree != None:

            curtime = time.time()

            for nd in etree:
                cmt = Commit( self.repo, nd )
                if cmt.getDate() >= curtime - age:
                    cmtL.append( cmt )

        return cmtL

    def svnLogAsXML(self, age):
        ""
        tm = time.localtime( time.time() - age )
        ts = time.strftime( '%Y-%m-%d %H:%M:%S', tm )

        etree = None

        try:
            out = self.svnlog( ts )
        except Exception:
            if self.echo != 'none':
                sys.stderr.write( '*** error getting svn log ***\n' )
                traceback.print_exc()
                sys.stderr.write( '*****************************\n' )
            etree = None
        else:
            etree = ET.fromstring( out )

        return etree

    def svnlog(self, timestamp):
        ""
        cmd = Command( self.svnexe + ' log --xml -v -r' )
        cmd.arg( '{$timestamp}:HEAD' ).add( self.repo )

        out = cmd.run_output( shell=False, echo=self.echo )

        return out


##################################################################

def get_author( elmt ):
    ""
    nd = elmt.find( 'author' )
    if nd != None:
        return nd.text.strip()
    return 'unknown'


def get_date( elmt ):
    ""
    nd = elmt.find( 'date' )
    if nd != None:
        datestr = nd.text.strip()
        tup = time.strptime( datestr, '%Y-%m-%dT%H:%M:%S.%fZ' )
        tm = calendar.timegm( tup )
        return tm
    return 0


def get_message( elmt ):
    ""
    nd = elmt.find( 'msg' )
    if nd != None:
        return nd.text
    return ''


def get_paths( elmt ):
    ""
    pathL = []

    nd = elmt.find( 'paths' )
    if nd != None:
        for pnd in nd.findall( 'path' ):
            act = pnd.get( 'action', '?' )
            pathL.append( (act,pnd.text) )

    return pathL


def print3( *args ):
    ""
    sys.stdout.write( ' '.join( [ str(x) for x in args ] ) + '\n' )
    sys.stdout.flush()


#########################################################################

mydir = os.path.dirname( os.path.normpath( os.path.abspath( __file__ ) ) )

if __name__ == "__main__":
    main()
