#!/usr/bin/env python

import os, sys
import subprocess

# This is a wrapper around the svn program which works with svnkeyrings.py.
# It looks for the subversion config directory created by svnkeyrings.py
# then runs a "real" svn program with the --config-dir option.


# this can be set to a full path to svn; this script will always use it
# for the "real" svn program; if not set, PATH is searched
SVNEXE = ""

def get_real_svn_path():
    ""
    if SVNEXE:
        return SVNEXE

    if 'PATH' in os.environ:

        thisfile = os.path.abspath( __file__ )

        for p in os.environ['PATH'].split(':'):
            fp = os.path.abspath( os.path.join( p, 'svn' ) )
            if os.path.exists(fp) and \
               not os.path.samefile( fp, thisfile ) and \
               os.access( fp, os.R_OK ) and \
               os.access( fp, os.X_OK ):
                return fp

    return None


def process_config_directory( ):
    ""
    configdir = os.environ.get( 'SVN_CONFIG_DIR', None )

    if not configdir:
        mach = os.uname()[1]
        d = os.path.expanduser( '~/.subversion_'+mach )
        if os.path.exists(d):
            configdir = d

    assert configdir, "Could not determine config directory for this " + \
                      "machine to use with gnome keyring"

    fname = os.path.join( configdir, 'keyring_vars.py' )

    if os.path.exists( fname ):
        sys.path.insert( 0, configdir )
        import keyring_vars

    return '--config-dir='+configdir


realsvn = get_real_svn_path()

assert realsvn, 'An svn binary was not found'

cmd = [ realsvn, process_config_directory() ] + sys.argv[1:]
x = subprocess.call( cmd )
sys.exit(x)
