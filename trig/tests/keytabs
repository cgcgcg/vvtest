#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import getopt


# this will os.chdir() to a subdirectory
from testutils import *

# the module being tested
import keytab

from command import Command

mydir = os.path.dirname( os.path.abspath( sys.argv[0] ) )
ktfile = os.path.join( os.path.dirname(mydir), 'keytab.py' )


def main():
    ""
    optL,argL = getopt.getopt( sys.argv[1:], '' )

    if len(argL) == 0:
        argL = """man_page
                  generate_keytab
                  delete_keytab_file
                  command_line_init_ticket_should_only_echo_the_cache_file
                  init_ticket_modifies_environment
                  command_line_init_ticket_followed_by_destroy_ticket
                  programmatic_init_ticket_followed_by_destroy_ticket
               """.split()

    savedir = os.getcwd()

    for func in argL:
        os.chdir( savedir )
        rmallfiles()

        os.environ[ 'COMMAND_DRYRUN' ] = ''

        time.sleep(1)
        print3( '====> ', func )
        eval( func+'()' )


######################################################################

def man_page():
    ""
    os.environ.pop( 'COMMAND_DRYRUN' )
    Command( '$ktfile -h' ).run( raise_on_error=True )
    Command( '$ktfile --help' ).run( raise_on_error=True )


def generate_keytab():
    ""
    keytab.generate_keytab()

    os.environ['COMMAND_DRYRUN'] = 'keytab.py'
    Command( '$ktfile generate' ).run( raise_on_error=True )


def delete_keytab_file():
    ""
    os.environ.pop( 'COMMAND_DRYRUN' )

    # does not fail
    keytab.delete_keytab_file( '/foo/bar/baz.txt' )

    writefile( 'junkfile.txt', "contents" )
    time.sleep(1)

    keytab.delete_keytab_file( 'junkfile.txt' )
    time.sleep(1)
    assert not os.path.exists( 'junkfile.txt' )


def command_line_init_ticket_should_only_echo_the_cache_file():
    ""
    run_redirect( ktfile+' init', 'init.log' )

    time.sleep(1)
    fname = readfile( 'init.log' ).strip()
    check_ticket_cache_and_remove_it( fname )


def init_ticket_modifies_environment():
    ""
    os.environ['KRB5CCNAME'] = 'fakevalue'

    return_fname = keytab.init_ticket()

    time.sleep(1)
    assert os.environ['PREVIOUS_KRB5CCNAME'] == 'fakevalue'

    fname = os.environ['KRB5CCNAME']
    assert fname == return_fname
    check_ticket_cache_and_remove_it( fname )

    # should still work if KRB5CCNAME is not defined in the environment

    os.environ.pop( 'KRB5CCNAME' )
    return_fname = keytab.init_ticket()

    fname = os.environ['KRB5CCNAME']
    assert fname == return_fname
    check_ticket_cache_and_remove_it( fname )


def command_line_init_ticket_followed_by_destroy_ticket():
    ""
    run_redirect( ktfile+' init', 'init.log' )

    time.sleep(1)
    fname = readfile( 'init.log' ).strip()
    assert os.path.exists( os.path.dirname(fname) )

    # have to set this manually to test (used in destroy_ticket() )
    os.environ['KRB5CCNAME'] = fname

    writefile( fname, 'junk contents' )

    # allow this one to execute
    os.environ['COMMAND_DRYRUN'] = 'keytab.py'
    Command( ktfile+' destroy' ).run( raise_on_error=True )

    assert not os.path.exists( fname )
    assert not os.path.exists( os.path.dirname(fname) )


def programmatic_init_ticket_followed_by_destroy_ticket():
    ""
    os.environ['KRB5CCNAME'] = 'fakevalue'

    fname = keytab.init_ticket()

    time.sleep(1)
    assert os.path.exists( os.path.dirname(fname) )
    assert os.environ['KRB5CCNAME'] == fname
    assert os.environ['PREVIOUS_KRB5CCNAME'] == 'fakevalue'

    writefile( fname, 'junk contents' )
    time.sleep(1)

    keytab.destroy_ticket()

    time.sleep(1)
    assert not os.path.exists( fname )
    assert not os.path.exists( os.path.dirname(fname) )
    assert 'PREVIOUS_KRB5CCNAME' not in os.environ
    assert os.environ['KRB5CCNAME'] == 'fakevalue'


######################################################################

def check_ticket_cache_and_remove_it( filename ):
    ""
    cachedir,bname = os.path.split( filename )
    assert bname == 'krb5ccache'
    assert os.path.isdir( cachedir )

    fmode = os.stat( cachedir ).st_mode
    assert ( fmode & stat.S_IRWXG ) == 0
    assert ( fmode & stat.S_IRWXO ) == 0

    # if this fails because there is a file in the directory, then that is
    # a real error - the cache file should not have been created in testing
    os.rmdir( cachedir )


######################################################################

main()
