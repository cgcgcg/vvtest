#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import join as pjoin
from os.path import basename
import shutil
import time
import unittest

import trigtestutils as trigutil
import testutils as util
from testutils import print3

import dasherlib


class the_tests( trigutil.trigTestCase ):

    def setUp(self):
        ""
        trigutil.trigTestCase.setUp( self )
        self.webfile = None

    def setWebFile(self, filename):
        ""
        assert os.path.exists( filename )
        self.webfile = filename

    def tearDown(self):
        ""
        if '-i' in util.runoptions:
            import webbrowser
            if self.webfile:
                assert os.path.exists( self.webfile )
                webbrowser.open( self.webfile )
                raw_input( 'Press <Enter> to continue...' )
            elif os.path.exists( 'testpage.htm' ):
                webbrowser.open( 'testpage.htm' )
                raw_input( 'Press <Enter> to continue...' )

    def run_pass_fail_diff_tests(self, giturl, epoch, joblabel=None):
        ""
        util.writefile( 'passfaildiff.vvt', """
            #VVT: parameterize : res = pass fail diff
            import vvtest_util as vvt
            import script_util as util
            if vvt.res == 'fail':
                raise Exception( 'fake exception' )
            elif vvt.res == 'diff':
                util.exit_diff()
            """ )
        time.sleep(1)
        cmd = trigutil.vvtest_file + \
                    ' -w -vv -n 4 --plat '+core_platform_name() + \
                    ' --gitlab '+giturl + \
                    ' --results-date '+str(epoch)
        if joblabel:
            cmd += ' --results-tag '+str(joblabel)
        x,out = util.runcmd( cmd )

    def make_dual_test_results(self, joblabel1=None, joblabel2=None):
        ""
        url = util.create_bare_repo_with_topic_branch( 'resrepo' )

        self.epoch1 = 1561499669.31  # Tue Jun 25 15:54:29 2019
        self.run_pass_fail_diff_tests( url, self.epoch1, joblabel=joblabel1 )

        self.epoch2 = 1564480574.74  # Tue Jul 30 03:56:14 2019
        self.run_pass_fail_diff_tests( url, self.epoch2, joblabel=joblabel2 )

        return url

    def test_reading_results(self):
        ""
        url = self.make_dual_test_results()

        dash = dasherlib.DashboardCreator( url )
        dash.readResults()

        dsL = dash.getDateStamps()
        dsL.sort()
        assert len( dsL ) == 2
        assert abs( dsL[0] - self.epoch1 ) < 70*60
        assert abs( dsL[1] - self.epoch2 ) < 70*60

    def test_formatting_elapsed_time(self):
        ""
        assert dasherlib.format_elapsed_time( 0 ) == '0:00'
        assert dasherlib.format_elapsed_time( 5 ) == '0:05'
        assert dasherlib.format_elapsed_time( 65 ) == '1:05'
        assert dasherlib.format_elapsed_time( 60 ) == '1:00'
        assert dasherlib.format_elapsed_time( 53*60+9 ) == '53:09'
        assert dasherlib.format_elapsed_time( 60*60 ) == '1:00:00'
        assert dasherlib.format_elapsed_time( 60*60+5 ) == '1:00:05'
        assert dasherlib.format_elapsed_time( 60*60+35 ) == '1:00:35'
        assert dasherlib.format_elapsed_time( 60*60+65 ) == '1:01:05'
        assert dasherlib.format_elapsed_time( 60*60+60*25 ) == '1:25:00'
        assert dasherlib.format_elapsed_time( 13*60*60+60*25 ) == '13:25:00'
        assert dasherlib.format_elapsed_time( 26*60*60+60*25+24 ) == '26:25:24'

    def test_writing_history_page(self):
        ""
        url = self.make_dual_test_results()

        dash = dasherlib.DashboardCreator( url )
        dash.readResults()
        dash.writeHistoryPage( 'testpage.htm', title='Nice Results' )

        lines = util.greplines( 'Nice Results', util.readfile( 'testpage.htm' ) )
        assert len( lines ) == 2  # the page title and the heading

    def test_job_label_pattern_matching(self):
        ""
        assert     dasherlib.results_label_match( 'foo bar', None )
        assert     dasherlib.results_label_match( 'foo bar', 'foo' )
        assert not dasherlib.results_label_match( 'foo bar', 'baz' )
        assert not dasherlib.results_label_match( 'foo bar', '^bar' )
        assert     dasherlib.results_label_match( 'foo bar', 'bar$' )
        assert     dasherlib.results_label_match( 'foo bar', 'o+[ ].*' )
        assert not dasherlib.results_label_match( 'foo bar', 'f+[ ].*' )

    def test_history_page_of_a_single_job_label(self):
        ""
        url = self.make_dual_test_results( joblabel1='small', joblabel2='medium' )

        dash = dasherlib.DashboardCreator( url )
        dash.readResults()
        dash.writeHistoryPage( 'small.htm', label_pattern='small' )
        dash.writeHistoryPage( 'medium.htm', label_pattern='med.*m' )

        lines = util.greplines( 'small', util.readfile( 'small.htm' ) )
        assert len( lines ) > 0
        lines = util.greplines( 'medium', util.readfile( 'small.htm' ) )
        assert len( lines ) == 0

        lines = util.greplines( 'small', util.readfile( 'medium.htm' ) )
        assert len( lines ) == 0
        lines = util.greplines( 'medium', util.readfile( 'medium.htm' ) )
        assert len( lines ) > 0

        self.setWebFile( 'medium.htm' )

    def test_getting_latest_results_summaries(self):
        ""
        tm3 = time.time()
        tm2 = tm3 - 60*60
        tm1 = tm2 - 3*60*60

        cache = dasherlib.ResultsCache()
        D = cache.getLatestResults()
        assert len(D) == 0

        resL = [ MockResultsSummary( 'Linux.foo' ),
                 MockResultsSummary( 'Linux.foo' ) ]
        cache = dasherlib.ResultsCache( resL )
        D = cache.getLatestResults()
        assert len(D) == 1 and id( D['Linux.foo'] ) == id( resL[0] )

        resL = [ MockResultsSummary( 'Linux.foo' ),
                 MockResultsSummary( 'Linux.bar' ),
                 MockResultsSummary( 'Linux.foo' ),
                 MockResultsSummary( 'Linux.bar' ) ]
        cache = dasherlib.ResultsCache( resL )
        D = cache.getLatestResults()
        assert len(D) == 2
        assert id( D['Linux.foo'] ) == id( resL[0] )
        assert id( D['Linux.bar'] ) == id( resL[1] )

        resL = [ MockResultsSummary( 'Linux.foo', finished=False ),
                 MockResultsSummary( 'Linux.bar', finished=False ),
                 MockResultsSummary( 'Linux.foo' ),
                 MockResultsSummary( 'Linux.bar' ) ]
        cache = dasherlib.ResultsCache( resL )
        D = cache.getLatestResults()
        assert len(D) == 2
        assert id( D['Linux.foo'] ) == id( resL[2] )
        assert id( D['Linux.bar'] ) == id( resL[3] )

        resL = [ MockResultsSummary( 'Linux.foo', finished=False ),
                 MockResultsSummary( 'Linux.foo', finished=False ) ]
        cache = dasherlib.ResultsCache( resL )
        D = cache.getLatestResults()
        assert len(D) == 1
        assert id( D['Linux.foo'] ) == id( resL[0] )

    def test_count_other_results(self):
        ""
        cnts = { 'pass':1, 'fail':2, 'diff':3 }
        res,cnt = dasherlib.distill_other_results( cnts )
        assert res == 'diff' and cnt == 3

        cnts = { 'pass':0, 'fail':0, 'notdone':3, 'timeout':2 }
        res,cnt = dasherlib.distill_other_results( cnts )
        assert res in [ 'notdone', 'timeout' ] and cnt == 5

        cnts = { 'pass':0, 'fail':0, 'diff':0, 'notdone':0, 'timeout':0, 'notrun':2 }
        res,cnt = dasherlib.distill_other_results( cnts )
        assert res == 'notrun' and cnt == 2

        cnts = { 'pass':0, 'fail':0, 'diff':0, 'notdone':0, 'timeout':0, 'notrun':0 }
        res,cnt = dasherlib.distill_other_results( cnts )
        assert res and cnt == 0

    def test_make_history_filenames(self):
        ""
        fn = dasherlib.filename_for_history_results( 'foo bar' )
        assert fn == 'his_foo_bar.htm'

    def test_writing_summary_page(self):
        ""
        url = self.make_dual_test_results( joblabel1='small', joblabel2='medium' )

        dash = dasherlib.DashboardCreator( url )
        dash.readResults()

        dash.writeSummaryPage( 'testpage.htm', title='Nice Summary' )

        page = util.readfile( 'testpage.htm' )
        lines = util.greplines( 'Nice Summary', page )
        assert len( lines ) == 2  # the page title and the heading

        assert len( util.greplines( '.small', page ) ) > 0
        assert len( util.greplines( '.medium', page ) ) > 0
        assert len( util.greplines( 'Elapsed', page ) ) > 0

        # bad way to look for the label hyperlink
        assert len( util.greplines( 'href*.small', page ) ) > 0
        assert len( util.greplines( 'href*.medium', page ) ) > 0

    def test_writing_summary_and_history_pages(self):
        ""
        url = self.make_dual_test_results( joblabel1='small', joblabel2='medium' )

        dash = dasherlib.DashboardCreator( url )
        dash.readResults()
        dash.writePages( 'index.htm', summary_title='Rollup' )

        self.setWebFile( 'index.htm' )

    def test_dasher_command_line_errors(self):
        ""
        x,out = util.runcmd( trigutil.dasher_file+' -h' )
        assert 'SYNOPSIS' in out

        x,out = util.runcmd( trigutil.dasher_file+' --help' )
        assert 'SYNOPSIS' in out

        x,out = util.runcmd( trigutil.dasher_file, raise_on_error=False )
        x != 0

        x,out = util.runcmd( trigutil.dasher_file+' foobar.htm',
                             raise_on_error=False )
        x != 0

    def test_running_dasher_application(self):
        ""
        os.mkdir( 'webpage1' )
        os.mkdir( 'webpage2' )

        url = self.make_dual_test_results()

        cmd = trigutil.dasher_file + ' --gitlab '+url + ' webpage1/page.htm'
        x,out = util.runcmd( cmd )

        assert os.path.isfile( 'webpage1/page.htm' )

        cmd = trigutil.dasher_file + \
                ' --title "Super duper results"' + \
                ' --gitlab '+url + ' webpage2'
        x,out = util.runcmd( cmd )

        assert os.path.isfile( 'webpage2/index.htm' )
        self.setWebFile( 'webpage2/index.htm' )


def core_platform_name():
    ""
    if os.uname()[0].lower().startswith( 'darwin' ):
        return 'Darwin'
    else:
        return 'Linux'


class MockResultsSummary:

    def __init__(self, label, finished=True, counts={}):
        ""
        self.label = label
        self.fin = finished
        self.cnts = counts

    def getLabel(self):
        return self.label

    def isFinished(self):
        return self.fin

    def getCounts(self):
        return self.cnts


if sys.version_info[0] > 2:
    raw_input = input


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
