#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:
#OPTION: realssh

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import struct
import getopt
import filecmp
import stat
import shutil
import subprocess as sp
import time
import unittest

import trigtestutils as trigutil
import testutils as util
from testutils import print3

# this is the module we are testing
import filesync


# By default, a "fake" ssh script is used that acts like ssh.  To use
# an actual ssh, add the -s option to the unit test command line.  In this
# case, make sure you can ssh to the current machine without a password.


fsynccmd = sys.executable+' '+os.path.dirname(trigutil.testsrcdir)+'/filesync.py'


#######################################################################

class catchall( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def test_compute_SHA1_of_a_file(self):
        ""
        util.writefile( 'file.txt', """
            my file
            """ )
        fn = os.path.abspath( 'file.txt' )
        time.sleep(1)

        sha = filesync.filesha1( fn )
        # can use unix sha1sum to check
        assert sha == '9879be62c33724955d11b8d47868e51a0714c26a'

    def test_list_files(self):
        ""
        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        util.writefile( 'subdir/file.csv', "my,csv\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        time.sleep(1)

        fL = filesync.list_files( sdir )
        fL.sort()
        assert fL == ['file.csv','file.txt','file2.txt']

        fL = filesync.list_files( sdir, 'file*.txt' )
        fL.sort()
        assert fL == ['file.txt','file2.txt']

        fL = filesync.list_files( sdir, ['file2.*','*.csv'] )
        fL.sort()
        assert fL == ['file.csv','file2.txt']

        fL = filesync.list_files( sdir, age=300 )
        fL.sort()
        assert fL == ['file.csv','file.txt']

    def test_long_list_files(self):
        ""
        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        util.writefile( 'subdir/file.csv', "my,csv\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        time.sleep(1)

        fL = filesync.long_list_files( sdir )
        fL.sort()

        assert [ T[0] for T in fL ] == ['file.csv','file.txt','file2.txt']
        assert [ T[2] for T in fL ] == [8, 9, 10]
        assert [ T[3] for T in fL ] == [
            'd6f89c5d41e8f4ae2182252064e2de253a166917',
            '8de2ce31c5fea0a20d780de1205f30f173f289be',
            'e81fbe916c57c4f21b708dc77044a8518e1a21e3' ]
        assert fL[2][1] + 9*60 < fL[0][1] and fL[2][1] + 11*60 > fL[0][1]
        assert abs( fL[0][1] - fL[1][1] ) < 30

    def test_sync_two_local_directories(self):
        ""
        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        time.sleep(1)

        fL = filesync.sync_directories( sdir, tgt )
        fL.sort()
        assert fL == ['file.txt','file2.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_sync_remote_to_local_directory(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        time.sleep(1)

        fL = filesync.sync_directories( sdir, sshmach+':'+tgt, sshexe=sshprog )
        fL.sort()
        assert fL == ['file.txt','file2.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_sync_local_to_remote_directory(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        time.sleep(1)

        fL = filesync.sync_directories( sshmach+':'+sdir, tgt, sshexe=sshprog )
        fL.sort()
        assert fL == ['file.txt','file2.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_sync_two_local_directories_but_exclude_by_age(self):
        ""
        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        time.sleep(1)

        fL = filesync.sync_directories( sdir, tgt, age=5*60 )
        fL.sort()
        assert fL == ['file.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert not os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2

    def test_sync_remote_to_local_directories_but_exclude_by_age(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        time.sleep(1)

        fL = filesync.sync_directories( sdir, sshmach+':'+tgt,
                                        age=5*60, sshexe=sshprog )
        fL.sort()
        assert fL == ['file.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert not os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2

    def test_sync_local_to_remote_directories_but_exclude_by_age(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        time.sleep(1)

        fL = filesync.sync_directories( sshmach+':'+sdir, tgt,
                                        age=5*60, sshexe=sshprog )
        fL.sort()
        assert fL == ['file.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert not os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2

    def test_sync_local_to_local_and_set_permissions(self):
        ""
        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        assert sp.call( 'chmod 0644 subdir/file.txt', shell=True ) == 0
        assert sp.call( 'chmod 0600 subdir/file2.txt', shell=True ) == 0
        time.sleep(1)

        assert     has_fmode( 'subdir/file.txt', stat.S_IRGRP )
        assert not has_fmode( 'subdir/file.txt', stat.S_IWGRP )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IRGRP )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IWGRP )
        assert     has_fmode( 'subdir/file.txt', stat.S_IROTH )
        assert not has_fmode( 'subdir/file.txt', stat.S_IWOTH )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IROTH )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IWOTH )

        fL = filesync.sync_directories( sdir, tgt, permissions='g+w' )
        fL.sort()
        assert fL == ['file.txt','file2.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert     has_fmode( 'targetdir/file.txt', stat.S_IRGRP )
        assert     has_fmode( 'targetdir/file.txt', stat.S_IWGRP )
        assert not has_fmode( 'targetdir/file2.txt', stat.S_IRGRP )
        assert     has_fmode( 'targetdir/file2.txt', stat.S_IWGRP )
        assert     has_fmode( 'targetdir/file.txt', stat.S_IROTH )
        assert not has_fmode( 'targetdir/file.txt', stat.S_IWOTH )
        assert not has_fmode( 'targetdir/file2.txt', stat.S_IROTH )
        assert not has_fmode( 'targetdir/file2.txt', stat.S_IWOTH )

    def test_sync_local_to_local_and_set_multiple_permissions(self):
        ""
        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        assert sp.call( 'chmod 0644 subdir/file.txt', shell=True ) == 0
        assert sp.call( 'chmod 0600 subdir/file2.txt', shell=True ) == 0
        time.sleep(1)

        assert     has_fmode( 'subdir/file.txt', stat.S_IRGRP )
        assert not has_fmode( 'subdir/file.txt', stat.S_IWGRP )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IRGRP )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IWGRP )
        assert     has_fmode( 'subdir/file.txt', stat.S_IROTH )
        assert not has_fmode( 'subdir/file.txt', stat.S_IWOTH )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IROTH )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IWOTH )

        fL = filesync.sync_directories( sdir, tgt, permissions=['g+w','o+r'] )
        fL.sort()
        assert fL == ['file.txt','file2.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert     has_fmode( 'targetdir/file.txt', stat.S_IRGRP )
        assert     has_fmode( 'targetdir/file.txt', stat.S_IWGRP )
        assert not has_fmode( 'targetdir/file2.txt', stat.S_IRGRP )
        assert     has_fmode( 'targetdir/file2.txt', stat.S_IWGRP )
        assert     has_fmode( 'targetdir/file.txt', stat.S_IROTH )
        assert not has_fmode( 'targetdir/file.txt', stat.S_IWOTH )
        assert     has_fmode( 'targetdir/file2.txt', stat.S_IROTH )
        assert not has_fmode( 'targetdir/file2.txt', stat.S_IWOTH )

    def test_sync_local_to_remote_and_set_multiple_permissions(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        assert sp.call( 'chmod 0644 subdir/file.txt', shell=True ) == 0
        assert sp.call( 'chmod 0600 subdir/file2.txt', shell=True ) == 0
        time.sleep(1)

        assert     has_fmode( 'subdir/file.txt', stat.S_IRGRP )
        assert not has_fmode( 'subdir/file.txt', stat.S_IWGRP )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IRGRP )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IWGRP )
        assert     has_fmode( 'subdir/file.txt', stat.S_IROTH )
        assert not has_fmode( 'subdir/file.txt', stat.S_IWOTH )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IROTH )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IWOTH )

        fL = filesync.sync_directories( sdir, sshmach+':'+tgt,
                                        permissions=['g+w','o+r'],
                                        sshexe=sshprog )
        fL.sort()
        assert fL == ['file.txt','file2.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert     has_fmode( 'targetdir/file.txt', stat.S_IRGRP )
        assert     has_fmode( 'targetdir/file.txt', stat.S_IWGRP )
        assert not has_fmode( 'targetdir/file2.txt', stat.S_IRGRP )
        assert     has_fmode( 'targetdir/file2.txt', stat.S_IWGRP )
        assert     has_fmode( 'targetdir/file.txt', stat.S_IROTH )
        assert not has_fmode( 'targetdir/file.txt', stat.S_IWOTH )
        assert     has_fmode( 'targetdir/file2.txt', stat.S_IROTH )
        assert not has_fmode( 'targetdir/file2.txt', stat.S_IWOTH )

    def test_sync_remote_to_local_and_set_multiple_permissions(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        assert sp.call( 'chmod 0644 subdir/file.txt', shell=True ) == 0
        assert sp.call( 'chmod 0600 subdir/file2.txt', shell=True ) == 0
        time.sleep(1)

        assert     has_fmode( 'subdir/file.txt', stat.S_IRGRP )
        assert not has_fmode( 'subdir/file.txt', stat.S_IWGRP )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IRGRP )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IWGRP )
        assert     has_fmode( 'subdir/file.txt', stat.S_IROTH )
        assert not has_fmode( 'subdir/file.txt', stat.S_IWOTH )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IROTH )
        assert not has_fmode( 'subdir/file2.txt', stat.S_IWOTH )

        fL = filesync.sync_directories( sshmach+':'+sdir, tgt,
                                        permissions=['g+w','o+r'],
                                        sshexe=sshprog )
        fL.sort()
        assert fL == ['file.txt','file2.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert     has_fmode( 'targetdir/file.txt', stat.S_IRGRP )
        assert     has_fmode( 'targetdir/file.txt', stat.S_IWGRP )
        assert not has_fmode( 'targetdir/file2.txt', stat.S_IRGRP )
        assert     has_fmode( 'targetdir/file2.txt', stat.S_IWGRP )
        assert     has_fmode( 'targetdir/file.txt', stat.S_IROTH )
        assert not has_fmode( 'targetdir/file.txt', stat.S_IWOTH )
        assert     has_fmode( 'targetdir/file2.txt', stat.S_IROTH )
        assert not has_fmode( 'targetdir/file2.txt', stat.S_IWOTH )

    def test_sync_remote_to_local_using_globbing(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        time.sleep(1)

        fL = filesync.sync_directories( sdir, sshmach+':'+tgt,
                                        '*2.*', sshexe=sshprog )
        fL.sort()
        assert fL == ['file2.txt']
        time.sleep(1)

        assert not os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_sync_local_to_remote_using_globbing(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        time.sleep(1)

        fL = filesync.sync_directories( sshmach+':'+sdir, tgt,
                                        '*2.*', sshexe=sshprog )
        fL.sort()
        assert fL == ['file2.txt']
        time.sleep(1)

        assert not os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_sync_two_local_directories_with_file_overwrite_when_not_the_same(self):
        ""
        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )

        shutil.copy2( 'subdir/file.txt', 'targetdir/file.txt' )
        util.writefile( 'targetdir/file2.txt', "my file2\n" )  # same contents, new date
        time.sleep(1)

        fL = filesync.sync_directories( sdir, tgt )
        fL.sort()
        assert fL == ['file2.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_sync_remote_to_local_with_file_overwrite_when_not_the_same(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )

        shutil.copy2( 'subdir/file.txt', 'targetdir/file.txt' )
        util.writefile( 'targetdir/file2.txt', "my file2\n" )  # same contents, new date
        time.sleep(1)

        fL = filesync.sync_directories( sdir, sshmach+':'+tgt, sshexe=sshprog )
        fL.sort()
        assert fL == ['file2.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_sync_local_to_remote_with_file_overwrite_when_not_the_same(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )

        shutil.copy2( 'subdir/file.txt', 'targetdir/file.txt' )
        util.writefile( 'targetdir/file2.txt', "my file2\n" )  # same contents, new date
        time.sleep(1)

        fL = filesync.sync_directories( sshmach+':'+sdir, tgt, sshexe=sshprog )
        fL.sort()
        assert fL == ['file2.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_sync_local_to_local_with_file_overwrite_when_sha1_not_the_same(self):
        ""
        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )

        shutil.copy2( 'subdir/file.txt', 'targetdir/file.txt' )
        # same time on file but different contents
        util.writefile( 'targetdir/file2.txt', "my_file2\n" )
        t = os.path.getmtime( 'subdir/file2.txt' )
        os.utime( 'targetdir/file2.txt', (t,t) )
        time.sleep(1)

        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2
        assert os.path.getsize('subdir/file2.txt') == \
                    os.path.getsize('targetdir/file2.txt')


        fL = filesync.sync_directories( sdir, tgt )
        fL.sort()
        assert fL == ['file2.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_sync_remote_to_local_with_file_overwrite_when_sha1_not_the_same(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )

        shutil.copy2( 'subdir/file.txt', 'targetdir/file.txt' )
        # same time on file but different contents
        util.writefile( 'targetdir/file2.txt', "my_file2\n" )
        t = os.path.getmtime( 'subdir/file2.txt' )
        os.utime( 'targetdir/file2.txt', (t,t) )
        time.sleep(1)

        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2
        assert os.path.getsize('subdir/file2.txt') == \
                    os.path.getsize('targetdir/file2.txt')

        fL = filesync.sync_directories( sdir, sshmach+':'+tgt, sshexe=sshprog )
        fL.sort()
        assert fL == ['file2.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_sync_local_to_remote_with_file_overwrite_when_sha1_not_the_same(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )

        shutil.copy2( 'subdir/file.txt', 'targetdir/file.txt' )
        # same time on file but different contents
        util.writefile( 'targetdir/file2.txt', "my_file2\n" )
        t = os.path.getmtime( 'subdir/file2.txt' )
        os.utime( 'targetdir/file2.txt', (t,t) )
        time.sleep(1)

        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2
        assert os.path.getsize('subdir/file2.txt') == \
                    os.path.getsize('targetdir/file2.txt')

        fL = filesync.sync_directories( sshmach+':'+sdir, tgt, sshexe=sshprog )
        fL.sort()
        assert fL == ['file2.txt']
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_target_dir_not_exist_error(self):
        ""
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        time.sleep(1)

        try:
            fL = filesync.sync_directories( sdir, tgt )
        except:
            print3( 'exc =', sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )
        time.sleep(1)

        assert not os.path.exists( 'targetdir' )

    def test_remote_to_local_target_dir_not_exist_error(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        time.sleep(1)

        try:
            fL = filesync.sync_directories( sdir, sshmach+':'+tgt, sshexe=sshprog )
        except:
            print3( 'exc =', sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )
        time.sleep(1)

        assert not os.path.exists( 'targetdir' )

    def test_local_to_remote_target_dir_not_exist_error(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        time.sleep(1)

        try:
            fL = filesync.sync_directories( sshmach+':'+sdir, tgt, sshexe=sshprog )
        except:
            print3( 'exc =', sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )
        time.sleep(1)

        assert not os.path.exists( 'targetdir' )

    def test_local_to_local_using_command_line(self):
        ""
        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )

        sshprog,sshmach = util.get_ssh_pair()

        util.runcmd( fsynccmd+' ' + sdir + ' ' + tgt )

        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_remote_to_local_using_command_line(self):
        ""
        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )

        sshprog,sshmach = util.get_ssh_pair()

        util.runcmd( fsynccmd+' --sshexe '+sshprog + \
                      ' ' + sdir + ' ' + sshmach+':'+tgt )

        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_local_to_remote_using_command_line(self):
        ""
        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )

        sshprog,sshmach = util.get_ssh_pair()

        util.runcmd( fsynccmd+' --sshexe '+sshprog + \
                      ' ' + sshmach+':'+sdir + ' ' + tgt )

        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_sync_by_age_using_command_line(self):
        ""
        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )

        sshprog,sshmach = util.get_ssh_pair()

        util.runcmd( fsynccmd+' --sshexe '+sshprog + \
                      ' --age 300' + \
                      ' ' + sshmach+':'+sdir + ' ' + tgt )

        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert not os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2

    def test_sync_using_command_line_with_globbing(self):
        ""
        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file.csv', "my,csv\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )

        sshprog,sshmach = util.get_ssh_pair()

        util.runcmd( fsynccmd+' --sshexe '+sshprog + \
                      ' -g "*.csv" -g "*2.*"' + \
                      ' ' + sshmach+':'+sdir + ' ' + tgt )

        time.sleep(1)

        assert not os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file.csv' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.csv', 'targetdir/file.csv', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.csv') -
                    os.path.getmtime('targetdir/file.csv') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_sync_using_command_line_with_timeout(self):
        ""
        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file.csv', "my,csv\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )

        sshprog,sshmach = util.get_ssh_pair()

        util.runcmd( fsynccmd+' --sshexe '+sshprog + \
                      ' -T 60' + \
                      ' ' + sshmach+':'+sdir + ' ' + tgt )

        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file.csv' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file.csv', 'targetdir/file.csv', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert abs( os.path.getmtime('subdir/file.csv') -
                    os.path.getmtime('targetdir/file.csv') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

    def test_local_to_remote_using_command_line_with_permissions(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        assert sp.call( 'chmod 0644 subdir/file.txt', shell=True ) == 0
        assert sp.call( 'chmod 0600 subdir/file2.txt', shell=True ) == 0
        time.sleep(1)

        util.runcmd( fsynccmd+' --sshexe '+sshprog + \
                      ' --perms g+w --perms o+r' + \
                      ' ' + sshmach+':'+sdir + ' ' + tgt )
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

        assert     has_fmode( 'targetdir/file.txt', stat.S_IRGRP )
        assert     has_fmode( 'targetdir/file.txt', stat.S_IWGRP )
        assert not has_fmode( 'targetdir/file2.txt', stat.S_IRGRP )
        assert     has_fmode( 'targetdir/file2.txt', stat.S_IWGRP )
        assert     has_fmode( 'targetdir/file.txt', stat.S_IROTH )
        assert not has_fmode( 'targetdir/file.txt', stat.S_IWOTH )
        assert     has_fmode( 'targetdir/file2.txt', stat.S_IROTH )
        assert not has_fmode( 'targetdir/file2.txt', stat.S_IWOTH )

    def test_local_to_remote_using_command_line_with_whitespace_separated_permissions(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        os.mkdir( 'targetdir' )
        tgt = os.path.abspath( 'targetdir' )

        util.writefile( 'subdir/file.txt', "my file\n" )
        util.writefile( 'subdir/file2.txt', "my file2\n" )
        sdir = os.path.abspath( 'subdir' )
        t = time.time() - 600  # make modification & access time 10 minutes ago
        os.utime( 'subdir/file2.txt', (t,t) )
        assert sp.call( 'chmod 0644 subdir/file.txt', shell=True ) == 0
        assert sp.call( 'chmod 0600 subdir/file2.txt', shell=True ) == 0
        time.sleep(1)

        util.runcmd( fsynccmd+' --sshexe '+sshprog + \
                      ' --perms "g+w o+r"' + \
                      ' ' + sshmach+':'+sdir + ' ' + tgt )
        time.sleep(1)

        assert os.path.isfile( 'targetdir/file.txt' )
        assert os.path.isfile( 'targetdir/file2.txt' )
        assert filecmp.cmp( 'subdir/file.txt', 'targetdir/file.txt', shallow=False )
        assert filecmp.cmp( 'subdir/file2.txt', 'targetdir/file2.txt', shallow=False )
        assert abs( os.path.getmtime('subdir/file.txt') -
                    os.path.getmtime('targetdir/file.txt') ) < 2
        assert abs( os.path.getmtime('subdir/file2.txt') -
                    os.path.getmtime('targetdir/file2.txt') ) < 2

        assert     has_fmode( 'targetdir/file.txt', stat.S_IRGRP )
        assert     has_fmode( 'targetdir/file.txt', stat.S_IWGRP )
        assert not has_fmode( 'targetdir/file2.txt', stat.S_IRGRP )
        assert     has_fmode( 'targetdir/file2.txt', stat.S_IWGRP )
        assert     has_fmode( 'targetdir/file.txt', stat.S_IROTH )
        assert not has_fmode( 'targetdir/file.txt', stat.S_IWOTH )
        assert     has_fmode( 'targetdir/file2.txt', stat.S_IROTH )
        assert not has_fmode( 'targetdir/file2.txt', stat.S_IWOTH )


#######################################################################

def filemode( path ):
    """
    Returns the permissions file mode for the given path (an integer).
    """
    return stat.S_IMODE( os.stat(path)[stat.ST_MODE] )


def has_fmode( path, fmode ):
    """
    Returns True if the given file path has the given file mode (an integer
    composed with stat.S_IRGRP and stat.S_IWUSR etc).
    """
    m = filemode( path )
    if (m & fmode) == fmode:
        return True
    return False


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
