#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import xml.etree.ElementTree as ET
import unittest

import testutils as util
from testutils import print3


svnpoll_file = os.path.join( os.path.dirname( util.testsrcdir ), 'svnpoll' )
svnpoll_mod = util.create_module_from_filename( svnpoll_file )


class command_line_tests( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_getting_help_page(self):
        ""
        util.runcmd( svnpoll_file+' -h' )


class creating_commits( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def test_nominal_commit(self):
        ""
        etree = ET.fromstring( fake_svn_commit_xml )
        cmt = svnpoll_mod.Commit( 'mach/myrepo', etree )

        assert cmt.getRepoURL() == 'mach/myrepo'
        assert cmt.getAuthor() == 'rrdrake'

    def test_commit_to_trunk(self):
        ""
        etree = ET.fromstring( fake_svn_commit_xml )
        cmt = svnpoll_mod.Commit( 'mach/myrepo', etree )

        assert cmt.getBranch() == '/trunk'

    def test_commit_to_a_branch(self):
        ""
        etree = ET.fromstring( fake_svn_commit_to_branch_xml )
        cmt = svnpoll_mod.Commit( 'mach/myrepo', etree )

        assert cmt.getBranch() == 'somebranch'

    def test_commit_to_arbitrary_root_directory(self):
        ""
        etree = ET.fromstring( fake_svn_commit_to_devel_xml )
        cmt = svnpoll_mod.Commit( 'mach/myrepo', etree )

        assert cmt.getBranch() == '/devel'


class getting_commits( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def tearDown(self):
        ""
        if 'COMMAND_DRYRUN' in os.environ:
            del os.environ['COMMAND_DRYRUN']

    def test_command_noop(self):
        ""
        src = svnpoll_mod.CommitSource( 'myrepo', 'mysvn', echo='echo' )
        os.environ['COMMAND_DRYRUN'] = '1'

        rtn,out,err = util.call_capture_output( src.svnlog, '2025' )

        assert out.strip() == "mysvn log --xml -v -r '{2025}:HEAD' myrepo"

    def test_parse_svn_log_xml_to_xml_element_tree(self):
        ""
        class MockCommitSource( svnpoll_mod.CommitSource ):
            def svnlog(self, timestamp):
                return fake_svn_log_output

        src = MockCommitSource( 'myrepo', 'mysvn', echo='echo' )
        etree = src.svnLogAsXML( 5*60 )

        revL = [ int( nd.get( 'revision' ) ) for nd in etree ]
        assert revL == [ 44242, 44247, 44248 ]

    def test_element_tree_is_None_if_svn_command_fails(self):
        ""
        class MockCommitSource( svnpoll_mod.CommitSource ):
            def svnlog(self, timestamp):
                raise Exception( 'fake exception' )

        src = MockCommitSource( 'myrepo', 'mysvn', echo='echo' )
        etree = src.svnLogAsXML( 5*60 )
        assert etree == None

    def test_get_and_parse_commits(self):
        ""
        class FakeLogCommitSource( svnpoll_mod.CommitSource ):
            def svnlog(self, timestamp):
                return fake_svn_log_output

        src = FakeLogCommitSource( 'myrepo', 'mysvn', echo='echo' )
        cmtL = src.getRecent( 10*365*24*60*60 )

        assert len(cmtL) == 3
        assert_commit_values( cmtL[0], 44242, 'rrdrake', 1539974765,
                              '/trunk', 'only need to send' )
        assert_commit_values( cmtL[1], 44247, 'dmhensi', 1539989531,
                              'only_structured', 'Removing file' )
        assert_commit_values( cmtL[2], 44248, 'ikalash', 1539991495,
                              '/trunk', 'Adding include,' )


def assert_commit_values( cmt, rev, author, cdate, branch, msg_start ):
    ""
    assert cmt.getRevision() == rev
    assert cmt.getAuthor() == author
    assert abs( cmt.getDate() - cdate ) < 2
    assert cmt.getBranch() == branch
    assert cmt.getShortMessage().strip().startswith( msg_start )


class the_monitor_loop( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def test_start_and_stop_the_polling(self):
        ""
        class MockHook:
            def trigger(self, commit, noop):
                return 'break'

        hook = MockHook()

        cmtsrc = SingleCommitSource( 'myrepo', 'mysvn', echo='echo' )

        rmon = svnpoll_mod.SubversionRepoMonitor( 1, cmtsrc, hook, echo='echo' )

        t0 = time.time()
        rmon.pollLoop()
        t1 = time.time()

        assert t1-t0 < 5

    def test_an_exception_does_not_kill_the_polling(self):
        ""
        marks = []

        class MockHook:
            def trigger(self, commit, noop):
                ""
                if len(marks) == 0:
                    marks.append( 'exc' )
                    raise Exception( 'fake exception' )
                else:
                    marks.append( 'brk' )
                    return 'break'

        hook = MockHook()

        cmtsrc = DoubleCommitSource( 'myrepo', 'mysvn', echo='echo' )

        rmon = svnpoll_mod.SubversionRepoMonitor( 1, cmtsrc, hook, echo='echo' )

        # rmon.pollLoop()
        rtn,out,err = util.call_capture_output( rmon.pollLoop )

        print3( out )
        assert 'Traceback' in err and 'fake exception' in err
        assert len( marks ) == 2 and marks[-1] == 'brk'


class integration_tests( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

        # manipulate path to be able to import svnpoll_plugin.py
        self.save_path = list( sys.path )
        sys.path.insert( 0, os.getcwd() )

    def tearDown(self):
        ""
        sys.path[:] = self.save_path

    def test_assemble_and_start(self):
        ""
        # for this test, the hook must return 'break' on the second commit
        util.writefile( 'svnpoll_plugin.py', """
            counter = 0
            def trigger( commit_obj, noop_bool ):
                global counter
                counter += 1
                if counter > 1:
                    return 'break'
            """ )
        time.sleep(1)

        # override the commit source to supply two commits
        class MockAssembler( svnpoll_mod.Assembler ):
            def makeSource(self, repo, svnexe, echo):
                return DoubleCommitSource( repo, svnexe, echo )

        ass = MockAssembler()
        ass.createObjects( 'mach/myrepo', 'mysvn', echo='echo', poll_sleep=1 )
        ass.start()


#########################################################################

class SingleCommitSource( svnpoll_mod.CommitSource ):
    def svnlog(self, timestamp):
        gmt = time.strftime( '%Y-%m-%dT%H:%M:%S.000000Z', time.gmtime() )
        return single_svn_log_template.replace( 'GMTDATE', gmt )


class DoubleCommitSource( svnpoll_mod.CommitSource ):
    def __init__(self, repo, svnexe, echo='none'):
        svnpoll_mod.CommitSource.__init__( self, repo, svnexe, echo )
        self.cnt = 0

    def svnlog(self, timestamp):
        ""
        gmt = time.strftime( '%Y-%m-%dT%H:%M:%S.000000Z', time.gmtime() )
        log = single_svn_log_template.replace( 'GMTDATE', gmt )
        if self.cnt == 0:
            self.cnt += 1
            return log
        return log.replace( '44242', '44243' )


single_svn_log_template = """
<?xml version="1.0" encoding="UTF-8"?>
<log>
<logentry
   revision="44242">
<author>rrdrake</author>
<date>GMTDATE</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/trunk/toolset/admin/svnemail_plugin.py</path>
</paths>
<msg>only need to send commit emails to wg-alegra
</msg>
</logentry>
</log>
""".strip()


fake_svn_commit_xml = """<logentry
   revision="44242">
<author>rrdrake</author>
<date>2018-10-19T18:46:05.360317Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/trunk/toolset/admin/svnemail_plugin.py</path>
</paths>
<msg>only need to send commit emails to wg-alegra
</msg>
</logentry>"""


fake_svn_log_output = """<?xml version="1.0" encoding="UTF-8"?>
<log>
"""+fake_svn_commit_xml+"""
<logentry
   revision="44247">
<author>dmhensi</author>
<date>2018-10-19T22:52:11.100075Z</date>
<paths>
<path
   text-mods="false"
   kind="file"
   action="D"
   prop-mods="false">/branches/only_structured/alegra/src/remap_material_vars.C</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/branches/only_structured/alegra/src/str_remap_nodal_vars.C</path>
</paths>
<msg>Removing file remap_material_vars.C 

</msg>
</logentry>
<logentry
   revision="44248">
<author>ikalash</author>
<date>2018-10-19T23:24:55.003325Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/trunk/nevada/framework/pmesh_ipc.C</path>
</paths>
<msg>Adding include, the lack of which was causing compilation error with newer version of gcc.</msg>
</logentry>
</log>
"""


fake_svn_commit_to_branch_xml = """<logentry
   revision="44242">
<author>rrdrake</author>
<date>2018-10-19T18:46:05.360317Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/branches/somebranch/toolset/admin/svnemail_plugin.py</path>
</paths>
<msg>only need to send commit emails to wg-alegra
</msg>
</logentry>"""


fake_svn_commit_to_devel_xml = """<logentry
   revision="44242">
<author>rrdrake</author>
<date>2018-10-19T18:46:05.360317Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/devel/workspace/toolset/admin/svnemail_plugin.py</path>
</paths>
<msg>only need to send commit emails to wg-alegra
</msg>
</logentry>"""


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
