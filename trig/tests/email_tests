#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import getopt

# this will os.chdir() to a subdirectory
from testutils import *

# this is the module we are testing
import mailmessage as MM


def main():
    """
    """
    optL,argL = getopt.getopt( sys.argv[1:], '' )
    cwd = os.getcwd()

    if len(argL) == 0:
        argL = """test_get_user_name 
                  test_make_sender_address
                  test_make_list
                  test_make_message
                  test_send_basic_text_message
                  test_setting_the_sender_address
                  test_using_html_subtype
               """.split()

    for func in argL:
        os.chdir( cwd )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )
        eval( func+'()' )


#######################################################################

def test_get_user_name():
    ""
    usr = MM.get_current_user_name()
    assert usr and usr != 'unknown'

    usr = MM.get_current_user_name( try_getpass=False )
    assert usr and usr != 'unknown'

    usr = MM.get_current_user_name( try_getpass=False, try_homedir=False )
    assert usr and usr == 'unknown'


def test_make_sender_address():
    ""
    assert MM._make_sender_address( 'foo@bar' ) == 'foo@bar'

    addr = MM._make_sender_address( None )
    assert addr and len( addr.split('@') ) == 2


def test_make_list():
    ""
    assert MM._make_list( 'foobar' ) == [ 'foobar' ]

    assert MM._make_list( [ 'foo', 'bar' ] ) == [ 'foo', 'bar' ]


def test_make_message():
    ""
    msg = MM._make_message( 'line1\nline2\n', 'plain' )
    assert 'line2' in msg.as_string()
    assert msg.get_content_subtype() == 'plain'

    msg = MM._make_message( 'line1\nline2\n', 'html' )
    assert 'line2' in msg.as_string()
    assert msg.get_content_subtype() == 'html'


class MockSMTP:

    cache = {}

    def __init__(self, host):
        ""
        MockSMTP.cache[ 'host' ] = host

    def sendmail(self, sendaddr, recvaddrs, msg_as_string):
        ""
        MockSMTP.cache[ 'sendaddr' ] = sendaddr
        MockSMTP.cache[ 'recvaddrs' ] = recvaddrs
        MockSMTP.cache[ 'msg_as_string' ] = msg_as_string

    def close(self):
        ""
        MockSMTP.cache[ 'close' ] = True


def test_send_basic_text_message():
    ""
    MockSMTP.cache.clear()

    msg = MM.Message( 'foo@bar', 'my subject' )
    msg.setContent( 'my content' )
    msg.send( smtpclass=MockSMTP )

    assert MockSMTP.cache['host'] == 'localhost'

    assert len( MockSMTP.cache['sendaddr'].split('@') ) == 2

    rcv = MockSMTP.cache['recvaddrs']
    assert len(rcv) == 1 and rcv[0] == 'foo@bar'

    assert 'my content' in MockSMTP.cache['msg_as_string']

    assert MockSMTP.cache['close'] == True


def test_setting_the_sender_address():
    ""
    MockSMTP.cache.clear()

    msg = MM.Message( 'foo@bar', 'my subject' )
    msg.set( sendaddr='me@mymachine' )
    msg.send( smtpclass=MockSMTP )

    assert MockSMTP.cache['sendaddr'] == 'me@mymachine'


def test_using_html_subtype():
    ""
    MockSMTP.cache.clear()

    msg = MM.Message( 'foo@bar', 'my subject' )
    msg.setContent( '<h1>My Heading</h1>', subtype='html' )
    msg.send( smtpclass=MockSMTP )

    sm = MockSMTP.cache['msg_as_string']
    assert '<html>' in sm and '<body>' in sm
    assert '</html>' in sm and '</body>' in sm
    assert '<h1>My Heading</h1>' in sm


#######################################################################

main()
