#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
from os.path import join as pjoin
import time
import unittest
import glob
import shutil


import trigtestutils as trigutil
import testutils as util
from testutils import print3

from mrgitlib import MRGitExitError
import mrgitlib as mrlib

mrgit_dir = os.path.dirname( trigutil.testsrcdir )
mrgit_file = os.path.join( mrgit_dir, 'mrgit' )


from gitinterface import GitRepo
from gitinterface import get_remote_branches, clone_repo, create_repo


class help_message( trigutil.trigTestCase ):

    def test_exercise_printing_of_help_message(self):
        ""
        x,out = util.runcmd( mrgit_file+' help', verbose=2 )
        assert 'SYNOPSIS' in out

        x,out = util.runcmd( mrgit_file+' -h' )
        assert 'SYNOPSIS' in out

        x,out = util.runcmd( mrgit_file+' --help' )
        assert 'SYNOPSIS' in out


class cloning( trigutil.trigTestCase ):

    def test_clone_a_single_repository(self):
        ""
        src_url = util.create_bare_repo_with_file_and_branch( 'cool' )

        mrlib.clone( [ src_url ] )
        self.assert_single_clone( '.' )

    def assert_single_clone(self, subdir):
        ""
        assert os.path.isdir( subdir+'/cool' )
        git = GitRepo( subdir+'/cool' )
        assert 'topic' in git.get_branches( remotes=True )

    def test_clone_a_single_repository_into_a_directory(self):
        ""
        src_url = util.create_bare_repo_with_file_and_branch( 'cool' )

        mrlib.clone( [ src_url, 'adir' ] )
        self.assert_single_clone( 'adir' )

    def test_command_line_clone_a_single_repository(self):
        ""
        src_url = util.create_bare_repo_with_file_and_branch( 'cool' )

        x,out = util.runcmd( mrgit_file+' clone '+src_url+' myclone' )
        assert x == 0
        self.assert_single_clone( 'myclone' )

    def test_cloning_two_repos_puts_them_side_by_side(self):
        ""
        cool_url, ness_url = make_coolness_repositories()

        mrlib.clone( [ cool_url, ness_url ] )
        self.assert_dual_clone( '.' )

    def assert_dual_clone(self, subdir):
        ""
        assert os.path.isdir( subdir+'/cool' ) and os.path.isdir( subdir+'/ness' )
        git = GitRepo( subdir+'/cool' )
        assert 'nessie' not in git.get_tags()
        git = GitRepo( subdir+'/ness' )
        assert 'nessie' in git.get_tags()

    def test_command_line_clone_of_two_repos(self):
        ""
        cool_url, ness_url = make_coolness_repositories()

        x,out = util.runcmd( mrgit_file+' clone '+cool_url+' '+ness_url )
        assert x == 0
        self.assert_dual_clone( '.' )

    def test_cloning_two_repos_into_a_directory(self):
        ""
        cool_url, ness_url = make_coolness_repositories()

        mrlib.clone( [ cool_url, ness_url, 'adir' ] )
        self.assert_dual_clone( 'adir' )

    def test_command_line_clone_of_two_repos_into_a_directory(self):
        ""
        cool_url, ness_url = make_coolness_repositories()

        x,out = util.runcmd( mrgit_file+' clone '+cool_url+' '+ness_url+' adir' )
        assert x == 0
        self.assert_dual_clone( 'adir' )

    def test_clone_an_mrgit_clone_by_pointing_to_the_manifests(self):
        ""
        cool_url, ness_url = make_coolness_repositories()

        mrlib.clone( [ cool_url, ness_url, 'clone1' ] )
        mrlib.clone( [ 'clone1/.mrgit', 'clone2' ] )

        self.assert_dual_clone( 'clone2' )

    def test_clone_an_mrgit_clone_via_manifests_with_only_one_repo(self):
        ""
        cool_url, ness_url = make_coolness_repositories()

        mrlib.clone( [ cool_url, 'clone1' ] )
        mrlib.clone( [ 'clone1/.mrgit', 'clone2' ] )

        assert os.path.isdir( 'clone2/cool' )
        git = GitRepo( 'clone2/cool' )
        assert 'clone1' in git.get_remote_URL()

    def test_clone_an_mrgit_clone(self):
        ""
        cool_url, ness_url = make_coolness_repositories()

        mrlib.clone( [ cool_url, ness_url, 'clone1' ] )

        mrlib.clone( [ 'clone1', 'clone2' ] )

        assert os.path.isdir( 'clone2/cool' )
        git = GitRepo( 'clone2/cool' )
        assert 'clone1' in git.get_remote_URL()

        assert os.path.isdir( 'clone2/ness' )
        git = GitRepo( 'clone2/ness' )
        assert 'clone1' in git.get_remote_URL()

    def test_clone_an_mrgit_clone_using_a_file_url(self):
        ""
        cool_url, ness_url = make_coolness_repositories()

        mrlib.clone( [ cool_url, ness_url, 'clone1' ] )

        mrlib.clone( [ 'file://'+abspath('clone1'), 'clone2' ] )

        assert os.path.isdir( 'clone2/cool' )
        git = GitRepo( 'clone2/cool' )
        assert 'nessie' not in git.get_tags()
        git = GitRepo( 'clone2/ness' )
        assert 'nessie' in git.get_tags()

    def test_clone_a_genesis_repo(self):
        ""
        genesis_url, sub_url = create_example_genesis_repo()

        assert len( glob.glob( 'ness*' ) ) == 0
        assert len( glob.glob( 'code*' ) ) == 0
        assert len( glob.glob( 'cool*' ) ) == 0
        git = clone_repo( genesis_url, 'precheck' )
        assert mrlib.REPOMAP_BRANCH not in git.get_branches()

        mrlib.clone( [ genesis_url ] )

        assert len( glob.glob( 'ness*' ) ) == 0
        assert len( glob.glob( 'cool*' ) ) == 0
        assert os.path.isdir( 'code/.mrgit' )
        assert os.path.isdir( 'code/.git' )
        assert os.path.isdir( 'code/ness/.git' )

        git = GitRepo( 'code/.mrgit' )
        assert mrlib.REPOMAP_BRANCH in git.get_branches()

    #   - use case:
    #       - have an mrgit clone with no top level git repo (because
    #         two groups were cloned that have distinct root directories)
    #       - then do a clone of that clone by specifying the top level
    #         directory as the url
    #   - use case: use MRGIT_MANIFESTS to specify the clone url
    #   - use case: use MRGIT_GOOGLE_MANIFESTS to specify the clone url

    # def test_clone_then_update(self):
    #     ""
    #     util.runcmd( mrgit_file, 'clone --server', srv, 'code,plug' )
    #     # TODO: make change
    #     util.runcmd( mrgit_file, 'pull' )

    # def test_the_first_group_is_the_default(self):
    #     ""
    #     util.writefile( 'repos/mymanifest', """
    #         [ code ]
    #             repo=base, path=code
    #             repo=plug, path=code/plugin
    #         [ tests ]
    #             repo=base_tests, path=tests
    #             repo=plug_tests, path=tests/plugins
    #         """ )
    #     time.sleep(1)

    #     util.runcmd( mrgit_file, 'clone -m repos/mymanifest' )

    # def test_clone_a_specific_group(self):
    #     ""
    #     util.writefile( 'repos/mymanifest', """
    #         [ code ]
    #             repo=base, path=code
    #             repo=plug, path=code/plugin
    #         [ tests ]
    #             repo=base_tests, path=tests
    #             repo=plug_tests, path=tests/plugins
    #         """ )
    #     time.sleep(1)

    #     util.runcmd( mrgit_file, 'clone -m repos/mymanifest tests' )


def create_example_genesis_repo():
    ""
    cool_url = util.create_bare_repo_with_file_and_branch( 'cool' )
    ness_url = util.create_bare_repo_with_file_and_branch( 'ness', tag='nessie' )
    gen_url  = util.create_bare_repo( 'gensis' )

    util.push_file_to_repo( gen_url, mrlib.MANIFESTS_FILENAME, """
        [ group code ]
            repo=cool, path=.
            repo=ness, path=ness
        """ )

    util.push_file_to_repo( gen_url, mrlib.GENESIS_FILENAME, """
        repo=cool, url="""+cool_url+"""
        repo=ness, url="""+ness_url+"""
        """ )

    return gen_url, ness_url


class startup_logic( trigutil.trigTestCase ):

    def test_empty_clone_args(self):
        ""
        urls,into = mrlib.parse_url_list( [] )
        assert len( urls ) == 0
        assert into == None

    def test_a_single_clone_arg_is_always_treated_as_a_url(self):
        ""
        urls,into = mrlib.parse_url_list( [ 'reldir' ] )
        assert into == None and len(urls) == 1
        assert urls[0] == abspath( 'reldir' )

        urls,into = mrlib.parse_url_list( [ '/abs/dir' ] )
        assert into == None and len(urls) == 1
        assert urls[0] == '/abs/dir'

        urls,into = mrlib.parse_url_list( [ 'file://rel/dir' ] )
        assert into == None and len(urls) == 1
        assert urls[0] == 'file://'+abspath( 'rel/dir' )

        urls,into = mrlib.parse_url_list( [ 'file:///abs/dir' ] )
        assert into == None and len(urls) == 1
        assert urls[0] == 'file:///abs/dir'

        urls,into = mrlib.parse_url_list( [ 'https://location' ] )
        assert into == None and len(urls) == 1
        assert urls[0] == 'https://location'

        self.assertRaises( MRGitExitError, mrlib.parse_url_list, [ 'file://' ] )

    def test_clone_args_where_a_directory_in_last(self):
        ""
        urls,into = mrlib.parse_url_list( [ 'path1', 'path2' ] )
        assert into == 'path2' and len(urls) == 1
        assert urls[0] == abspath('path1')

        urls,into = mrlib.parse_url_list( [ abspath('path1'), 'path2' ] )
        assert into == 'path2' and len(urls) == 1
        assert urls[0] == abspath('path1')

        urls,into = mrlib.parse_url_list( [ 'file://path1', abspath('path2') ] )
        assert into == abspath('path2') and len(urls) == 1
        assert urls[0] == 'file://'+abspath('path1')

    def test_clone_args_where_a_repo_is_last(self):
        ""
        util.writefile( 'bringit/afile', 'file contents' )
        url1 = util.create_bare_repo_with_file_and_branch( 'bear', 'adir' )
        clone_repo( url1, 'fox' )
        clone_repo( url1, 'bdir/.mrgit' )

        urls,into = mrlib.parse_url_list( [ 'path1', 'bringit' ] )
        assert into == 'bringit' and len(urls) == 1

        urls,into = mrlib.parse_url_list( [ 'path1', abspath('bringit') ] )
        assert into == abspath('bringit') and len(urls) == 1

        urls,into = mrlib.parse_url_list( [ 'path1', 'fox' ] )
        assert into == None and len(urls) == 2
        assert urls[0] == abspath('path1')
        assert urls[1] == abspath('fox')

        urls,into = mrlib.parse_url_list( [ 'path1', 'adir/bear' ] )
        assert into == None and len(urls) == 2
        assert urls[0] == abspath('path1')
        assert urls[1] == abspath('adir/bear')

        urls,into = mrlib.parse_url_list( [ 'path1', 'bdir' ] )
        assert into == None and len(urls) == 2
        assert urls[0] == abspath('path1')
        assert urls[1] == abspath('bdir')

        urls,into = mrlib.parse_url_list( [ 'path1', 'bdir/.mrgit' ] )
        assert into == None and len(urls) == 2
        assert urls[0] == abspath('path1')
        assert urls[1] == abspath('bdir/.mrgit')


class manifests_handling( trigutil.trigTestCase ):

    def test_finding_repo_groups(self):
        ""
        mfest = mrlib.Manifests()
        mfest.addRepo( 'grp1', 'foo', 'bar' )
        mfest.addRepo( 'grp2', 'mars', 'pluto' )

        grp = mfest.findGroup( 'grp2' )
        assert grp.getName() == 'grp2'

        grp = mfest.findGroup( 'grp1' )
        assert grp.getName() == 'grp1'

        grp = mfest.getDefaultGroup()
        assert grp.getName() == 'grp1' or grp.getName() == 'grp2'

        grp = mfest.findGroup( '' )
        assert grp == None

    def test_read_write_and_find_en_empty_group_name(self):
        ""
        mfest = mrlib.Manifests()
        mfest.addRepo( '', 'foo', 'bar' )

        grp = mfest.findGroup( '' )
        assert grp.getName() == ''

        mfest.writeToFile( 'checkme' )

        mf2 = mrlib.Manifests()
        mf2.readFromFile( 'checkme' )

        grp = mf2.findGroup( '' )
        assert grp.getName() == ''
        spec = grp.findRepo( 'foo' )
        assert spec['repo'] == 'foo'
        assert spec['path'] == 'bar'


class google_repo_manifests( trigutil.trigTestCase ):

    def test_parse_prefix_urls(self):
        ""
        util.writefile( 'example.xml', example_xml )

        gmr = mrlib.GoogleManifestReader( 'example.xml' )

        remotes = gmr._collect_remote_prefix_urls()

        assert len( remotes ) == 2
        assert remotes['origin'] == 'file:///some/path/'
        assert remotes['other'] == 'file:///some/other/path'

        name = gmr._get_default_remote_name()
        assert name and name == 'origin'

    def test_collect_repo_name_to_url_map(self):
        ""
        util.writefile( 'example.xml', example_xml )

        gmr = mrlib.GoogleManifestReader( 'example.xml' )
        gmr.createRepoNameToURLMap()

        names = list( gmr.getRepoNames() )
        assert len( names ) == 3
        assert gmr.getRepoURL( 'service.git' ) == 'file:///some/path/service.git'
        assert gmr.getRepoURL( 'airforce.git' ) == 'file:///some/path/airforce.git'
        assert gmr.getRepoURL( 'afrl.git' ) == 'file:///some/other/path/afrl.git'

    def test_primary_url_logic(self):
        ""
        fs = defaults_xml.replace( 'CENTRALPATH', 'file:///default/path/' )
        util.writefile( 'default.xml', fs )
        util.writefile( 'proj1.xml', proj1_xml )
        util.writefile( 'proj2.xml', proj2_xml )
        util.writefile( 'proj3.xml', proj3_xml )

        gconv = mrlib.GoogleConverter( '.' )
        gconv.readManifestFiles()

        gconv.getPrimaryURL( 'service.git' ) == 'file:///default/path/service.git'
        gconv.getPrimaryURL( 'bar.git' ) == 'file:///server/path/bar.git'
        gconv.getPrimaryURL( 'baz.git' ) == 'file:///special/path/baz.git'

    def test_get_list_of_repos_from_manifest_file(self):
        ""
        util.writefile( 'example.xml', example_xml )

        gmr = mrlib.GoogleManifestReader( 'example.xml' )
        gmr.createRepoNameToURLMap()

        projL = list( gmr.getProjectList() )

        projL.sort()
        assert len( projL ) == 3

        assert projL[0][0] == 'afrl.git'
        assert projL[0][1] == 'file:///some/other/path/afrl.git'
        assert projL[0][2] == 'airforce/afrl'

        assert projL[1][0] == 'airforce.git'
        assert projL[1][1] == 'file:///some/path/airforce.git'
        assert projL[1][2] == 'airforce'

        assert projL[2][0] == 'service.git'
        assert projL[2][1] == 'file:///some/path/service.git'
        assert projL[2][2] == '.'

    def test_creation_of_repo_url_map(self):
        ""
        fs = defaults_xml.replace( 'CENTRALPATH', '/special/path/' )
        util.writefile( 'default.xml', fs )
        util.writefile( 'proj1.xml', proj1_xml )

        gconv = mrlib.GoogleConverter( '.' )
        gconv.readManifestFiles()

        rmap = mrlib.RepoMap()
        gconv.fillRepoMap( rmap )

        assert rmap.getRepoURL( 'service.git' ) == 'file:///special/path/service.git'
        assert rmap.getRepoURL( 'afrl.git' ) == 'file:///special/path/afrl.git'
        assert rmap.getRepoURL( 'bar.git' ) == 'file:///special/path/bar.git'
        assert rmap.getRepoURL( 'baz.git' ) == 'file:///server/path/baz.git'

    def test_creation_of_repo_groups(self):
        ""
        fs = defaults_xml.replace( 'CENTRALPATH', '/special/path/' )
        util.writefile( 'default.xml', fs )
        util.writefile( 'proj1.xml', proj1_xml )

        gconv = mrlib.GoogleConverter( '.' )
        gconv.readManifestFiles()

        mfest = mrlib.Manifests()
        gconv.fillManifests( mfest )

        rgrp = mfest.findGroup( 'default' )
        repoL = rgrp.getRepoNames()
        repoL.sort()
        assert repoL == [ 'afrl.git', 'airforce.git', 'navy.git', 'service.git' ]
        assert rgrp.getRepoPath( 'afrl.git' ) == 'airforce/afrl'
        assert rgrp.getRepoPath( 'airforce.git' ) == 'airforce'
        assert rgrp.getRepoPath( 'navy.git' ) == 'navy'
        assert rgrp.getRepoPath( 'service.git' ) == '.'

        rgrp = mfest.findGroup( 'proj1' )
        repoL = rgrp.getRepoNames()
        repoL.sort()
        assert repoL == [ 'bar.git', 'baz.git', 'service.git' ]
        assert rgrp.getRepoPath( 'bar.git' ) == 'bar'
        assert rgrp.getRepoPath( 'baz.git' ) == 'baz'
        assert rgrp.getRepoPath( 'service.git' ) == '.'

    def test_a_group_is_skipped_if_one_of_the_urls_is_not_primary(self):
        """
        see comment in getPrimaryURL() method about "primary URL"
        """
        fs = defaults_xml.replace( 'CENTRALPATH', '/some/path/' )
        util.writefile( 'default.xml', fs )
        util.writefile( 'example.xml', example_xml )

        gconv = mrlib.GoogleConverter( '.' )
        gconv.readManifestFiles()

        mfest = mrlib.Manifests()
        gconv.fillManifests( mfest )

        assert mfest.findGroup( 'default' ) != None
        assert mfest.findGroup( 'example' ) == None

    def test_clone_from_a_google_repo_manifests(self):
        ""
        man_url = create_google_repo_set()

        mrlib.clone( [ '-G', man_url, 'clone1' ] )

        assert 'service' in util.readfile( 'clone1/file.txt' )
        assert 'navy' in util.readfile( 'clone1/navy/file.txt' )
        assert 'airforce' in util.readfile( 'clone1/airforce/file.txt' )
        assert 'afrl' in util.readfile( 'clone1/airforce/afrl/file.txt' )

    def test_if_G_option_given_then_only_one_url_can_be_cloned(self):
        ""
        try:
            mrlib.clone( ['-G', 'https:///foo', 'https:///bar'] )
        except mrlib.MRGitExitError as e:
            assert 'exactly one URL' in str(e)
        else:
            raise Exception( 'expected an MRGitExitError exception' )


def make_coolness_repositories():
    ""
    cool_url = util.create_bare_repo_with_file_and_branch( 'cool' )
    ness_url = util.create_bare_repo_with_file_and_branch( 'ness', tag='nessie' )
    return cool_url, ness_url


def create_google_repo_set():
    ""
    man_url = util.create_bare_repo( 'manifests', 'central' )

    contents = defaults_xml.replace( 'CENTRALPATH', abspath('central') )
    util.push_file_to_repo( man_url, 'default.xml', contents )

    for repo in ['service','navy','army','airforce','afrl','marines']:
        url = util.create_bare_repo( repo+'.git', 'central' )
        util.push_file_to_repo( url, 'file.txt', """
            file in """+repo+""" repository
            """ )

    return man_url


defaults_xml = """\
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <default remote="origin"
           sync-j="4"
           sync-s="true"
           dest-branch="master"
           revision="master" />

  <remote name="origin"
          fetch="file://CENTRALPATH/" />

  <project name="service.git" path="." />
  <project name="navy.git" path="navy" />
  <project name="airforce.git" path="airforce" />
  <project name="afrl.git" path="airforce/afrl" />
</manifest>
"""

example_xml = """\
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <default remote="origin" revision="master" />

  <remote name="origin"
          fetch="file:///some/path/ " />
  <remote name="other"
          fetch="file:///some/other/path" />

  <project name="service.git" path="." />
  <project name="airforce.git" path="airforce" />
  <project name="afrl.git" path="airforce/afrl" remote="other" />
</manifest>
"""

proj1_xml = """\
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <default remote="origin" revision="master" />
  <remote name="origin" fetch="file:///special/path/ " />
  <remote name="server" fetch="file:///server/path/ " />
  <project name="service.git" path="." />
  <project name="bar.git" path="bar" />
  <project name="baz.git" path="baz" remote="server" />
</manifest>
"""

proj2_xml = """\
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <default remote="origin" revision="master" />
  <remote name="origin" fetch="file:///special/path/ " />
  <remote name="server" fetch="file:///server/path/ " />
  <project name="service.git" path="." />
  <project name="bar.git" path="bar" remote="server" />
  <project name="baz.git" path="baz" />
</manifest>
"""

proj3_xml = """\
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <default remote="origin" revision="master" />
  <remote name="origin" fetch="file:///special/path/ " />
  <remote name="server" fetch="file:///server/path/ " />
  <project name="service.git" path="." />
  <project name="bar.git" path="bar" remote="server" />
  <project name="baz.git" path="baz" />
</manifest>
"""


class mrgit_configuration_tests( trigutil.trigTestCase ):

    def test_create_config_from_a_single_url(self):
        ""
        cfg = mrlib.Configuration()
        upstream = mrlib.UpstreamURLs( [ 'file:///one/repo.git' ] )
        upstream.loadManifestsAndRemoteMap( cfg.getManifests(),
                                            cfg.getRemoteMap(),
                                            None )

        repos = cfg.getRemoteRepoList()
        assert len( repos ) == 1
        assert list( repos[0] ) == [ 'file:///one/repo.git', 'repo' ]

    def create_config_with_two_urls(self):
        ""
        cfg = mrlib.Configuration()
        upstream = mrlib.UpstreamURLs( [ 'file:///one/repo.git',
                                         'ssh:///and/two.git' ] )
        upstream.loadManifestsAndRemoteMap( cfg.getManifests(),
                                            cfg.getRemoteMap(),
                                            None )
        cfg.computeLocalRepoMap()

        top = mrlib.path_for_toplevel( cfg.getManifests(), 'foo' )
        assert top == os.getcwd()
        cfg.setTopLevel( abspath('topdir') )

        return cfg

    def test_create_config_from_two_urls(self):
        ""
        cfg = self.create_config_with_two_urls()

        repos = cfg.getRemoteRepoList()
        assert len( repos ) == 2
        assert list( repos[0] ) == [ 'file:///one/repo.git', 'repo' ]
        assert list( repos[1] ) == [ 'ssh:///and/two.git', 'two' ]

    def test_create_initial_mrgit_repository(self):
        ""
        cfg = self.create_config_with_two_urls()
        cfg.createMRGitRepo()
        cfg.commitLocalRepoMap()

        git = clone_repo( 'topdir/.mrgit', 'checkrepo' )
        assert not os.path.isfile( 'checkrepo/'+mrlib.REPOMAP_FILENAME )

        mfest = mrlib.Manifests()
        mfest.readFromFile( 'checkrepo/'+mrlib.MANIFESTS_FILENAME )
        grp = mfest.findGroup( '' )
        assert grp.getName() == '' and grp.findRepo( 'repo' ) != None

        git.checkout_branch( mrlib.REPOMAP_BRANCH )
        rmap = mrlib.RepoMap()
        rmap.readFromFile( 'checkrepo/'+mrlib.REPOMAP_FILENAME, '/fake' )
        assert rmap.getRepoURL( 'two' ) == '/fake/two'

    def test_load_config_from_mrgit_checkout(self):
        ""
        cfg = self.create_config_with_two_urls()
        cfg.createMRGitRepo()

        rmap = mrlib.RepoMap()
        git = create_repo( '.mrgit' )
        mrlib.check_for_mrgit_repo( git )

        repos = cfg.getRemoteRepoList()
        assert len( repos ) == 2
        assert list( repos[0] ) == [ 'file:///one/repo.git', 'repo' ]
        assert list( repos[1] ) == [ 'ssh:///and/two.git', 'two' ]
        assert cfg.getTopLevel() == abspath( 'topdir' )

    def test_cloning_repos_from_config(self):
        ""
        cool_url, ness_url = make_coolness_repositories()

        cfg = mrlib.Configuration()
        cfg.setTopLevel( abspath( 'toplev' ) )

        mrlib.clone_from_multiple_urls( 'toplev',
                                        cfg,
                                        [ cool_url, ness_url ],
                                        'toplev' )

        GitRepo( 'toplev/cool' )
        GitRepo( 'toplev/ness' )

        shutil.rmtree( 'toplev/ness' )

        mrlib.clone_repositories_from_config( cfg )

        GitRepo( 'toplev/cool' )
        GitRepo( 'toplev/ness' )


class mrgit_init( trigutil.trigTestCase ):

    def test_mrgit_init_in_an_empty_directory(self):
        ""
        os.mkdir( 'adir' )
        os.mkdir( 'bdir' )
        time.sleep(1)

        x,out = util.runcmd( mrgit_file+' init', chdir='adir' )
        assert x == 0

        x,out = util.runcmd( mrgit_file+' clone ../adir', chdir='bdir' )
        assert x == 0
        assert os.path.isdir( 'bdir/adir/.mrgit' )


class updating( trigutil.trigTestCase ):

    def test_fetch_within_a_repo_set(self):
        ""
        src_url = util.create_bare_repo_with_file_and_branch( 'cool' )

        mrlib.clone( [ src_url ] )

        util.push_file_to_repo( src_url, 'newfile.txt', 'anything\n' )

        assert not os.path.exists( 'cool/.git/FETCH_HEAD' )

        with util.change_directory( 'cool' ):
            mrlib.fetch( [] )

        x,out = util.runcmd( 'git branch -rv', chdir='cool' )
        assert x == 0
        assert os.path.exists( 'cool/.git/FETCH_HEAD' )

    def test_pull_within_a_repo_set_clone(self):
        ""
        src_url = util.create_bare_repo_with_file_and_branch( 'cool' )

        mrlib.clone( [ src_url ] )

        util.push_file_to_repo( src_url, 'newfile.txt', 'anything\n' )

        with util.change_directory( 'cool' ):
            mrlib.pull( [] )

        assert util.readfile( 'cool/newfile.txt' ).strip() == 'anything'

    def test_pull_within_a_google_repo_clone(self):
        ""
        man_url = create_google_repo_set()

        mrlib.clone( [ '-G', man_url ] )

        util.push_file_to_repo( abspath('central/navy.git'),
                                'newfile.txt', "anything\n" )

        x,out = util.runcmd( mrgit_file+' pull', chdir='default' )
        assert x == 0

        assert util.readfile( 'default/navy/newfile.txt' ).strip() == 'anything'

    def test_pull_within_a_genesis_clone(self):
        ""
        genesis_url, sub_url = create_example_genesis_repo()

        mrlib.clone( [ genesis_url ] )

        util.push_file_to_repo( sub_url, 'newfile.txt', "anything\n" )

        x,out = util.runcmd( mrgit_file+' pull', chdir='code' )
        assert x == 0

        assert util.readfile( 'code/ness/newfile.txt' ).strip() == 'anything'


class commit_and_push( trigutil.trigTestCase ):

    def test_push_to_a_repo_set(self):
        ""
        src_url = util.create_bare_repo_with_file_and_branch( 'cool' )

        mrlib.clone( [ src_url ] )

        with util.change_directory( 'cool' ):
            util.writefile( 'newfile.txt', 'foo bar\n' )
            mrlib.add( [ '.' ] )
            mrlib.commit( ['-m','add new file'] )
            mrlib.push( [] )

        clone_repo( src_url, directory='check', verbose=3 )
        assert len( util.grepfiles( 'foo bar', 'check/newfile.txt' ) ) == 1


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
