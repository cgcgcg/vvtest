#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
from os.path import join as pjoin
import time
import unittest


import trigtestutils as trigutil
import testutils as util
from testutils import print3

import mrgitlib as mrlib

mrgit_dir = os.path.dirname( trigutil.testsrcdir )
mrgit_file = os.path.join( mrgit_dir, 'mrgit' )


from gitinterface import GitInterface


class help_message( trigutil.trigTestCase ):

    def test_exercise_printing_of_help_message(self):
        ""
        x,out = util.runcmd( mrgit_file+' help' )
        assert 'SYNOPSIS' in out

        x,out = util.runcmd( mrgit_file+' -h' )
        assert 'SYNOPSIS' in out

        x,out = util.runcmd( mrgit_file+' --help' )
        assert 'SYNOPSIS' in out


class helper_functions( trigutil.trigTestCase ):
    pass


class cloning( trigutil.trigTestCase ):

    def test_clone_a_single_repository(self):
        ""
        src_url = trigutil.create_bare_repo_with_topic_branch( 'cool' )

        mrlib.clone( [ src_url ] )

        assert os.path.isdir( 'cool' )
        git = GitInterface( rootdir='cool' )
        assert 'topic' in git.listRemoteBranches()

    def test_cloning_a_repository_specified_on_the_command_line(self):
        ""
        src_url = trigutil.create_bare_repo_with_topic_branch( 'cool' )

        x,out = util.runcmd( mrgit_file+' clone '+src_url+' myclone' )

        assert x == 0
        assert os.path.isdir( 'myclone' )
        git = GitInterface( rootdir='myclone' )
        assert 'topic' in git.listRemoteBranches()

    def test_cloning_two_repositories_puts_second_under_the_first(self):
        ""
        cool_url, ness_url = self.make_coolness_repositories()

        mrlib.clone( [ cool_url, ness_url ] )

        assert os.path.isdir( 'cool' )
        git = GitInterface( rootdir='cool' )
        assert 'nessie' not in git.listTags()
        git = GitInterface( rootdir='cool/ness' )
        assert 'nessie' in git.listTags()

    def make_coolness_repositories(self):
        ""
        cool_url = trigutil.create_bare_repo_with_topic_branch( 'cool' )
        ness_url = trigutil.create_bare_repo_with_topic_branch( 'ness',
                                                                tag='nessie' )
        return cool_url, ness_url

    def test_cloning_multiple_repos_from_the_command_line(self):
        ""
        cool_url, ness_url = self.make_coolness_repositories()

        x,out = util.runcmd( mrgit_file+' clone ' + \
                             ness_url+' '+cool_url+' myclone' )

        assert os.path.isdir( 'myclone' )
        git = GitInterface( rootdir='myclone' )
        assert 'nessie' in git.listTags()
        git = GitInterface( rootdir='myclone/cool' )
        assert 'nessie' not in git.listTags()

    def test_clone_an_mrgit_clone_by_pointing_to_the_manifests(self):
        ""
        cool_url, ness_url = self.make_coolness_repositories()

        mrlib.clone( [ cool_url, ness_url, 'clone1' ] )

        mrlib.clone( [ 'clone1/.mrgit', 'clone2' ] )

        assert os.path.isdir( 'clone2' )
        git = GitInterface( rootdir='clone2' )
        assert 'nessie' not in git.listTags()
        git = GitInterface( rootdir='clone2/ness' )
        assert 'nessie' in git.listTags()

    def test_clone_an_mrgit_clone_via_manifests_with_only_one_repo(self):
        ""
        cool_url, ness_url = self.make_coolness_repositories()

        mrlib.clone( [ ness_url, 'clone1' ] )

        mrlib.clone( [ 'clone1/.mrgit', 'clone2' ] )

        assert os.path.isdir( 'clone2' )
        git = GitInterface( rootdir='clone2' )
        assert 'nessie' in git.listTags()

    def test_clone_an_mrgit_clone(self):
        ""
        cool_url, ness_url = self.make_coolness_repositories()

        mrlib.clone( [ cool_url, ness_url, 'clone1' ] )

        mrlib.clone( [ 'clone1', 'clone2' ] )

        assert os.path.isdir( 'clone2' )
        git = GitInterface( rootdir='clone2' )
        assert 'nessie' not in git.listTags()
        git = GitInterface( rootdir='clone2/ness' )
        assert 'nessie' in git.listTags()

    def test_clone_an_mrgit_clone_using_a_file_url(self):
        ""
        cool_url, ness_url = self.make_coolness_repositories()

        mrlib.clone( [ cool_url, ness_url, 'clone1' ] )

        mrlib.clone( [ 'file://'+abspath('clone1'), 'clone2' ] )

        assert os.path.isdir( 'clone2' )
        git = GitInterface( rootdir='clone2' )
        assert 'nessie' not in git.listTags()
        git = GitInterface( rootdir='clone2/ness' )
        assert 'nessie' in git.listTags()


    #   - use case:
    #       - have an mrgit clone with no top level git repo (because
    #         two groups were cloned that have distinct root directories)
    #       - then do a clone of that clone by specifying the top level
    #         directory as the url
    #   - use case: use MRGIT_MANIFESTS to specify the clone url
    #   - use case: use MRGIT_GOOGLE_MANIFESTS to specify the clone url

    # def test_clone_then_update(self):
    #     ""
    #     util.runcmd( mrgit_file, 'clone --server', srv, 'code,plug' )
    #     # TODO: make change
    #     util.runcmd( mrgit_file, 'pull' )

    # def test_the_first_group_is_the_default(self):
    #     ""
    #     util.writefile( 'repos/mymanifest', """
    #         [ code ]
    #             repo=base, path=code
    #             repo=plug, path=code/plugin
    #         [ tests ]
    #             repo=base_tests, path=tests
    #             repo=plug_tests, path=tests/plugins
    #         """ )
    #     time.sleep(1)

    #     util.runcmd( mrgit_file, 'clone -m repos/mymanifest' )

    # def test_clone_a_specific_group(self):
    #     ""
    #     util.writefile( 'repos/mymanifest', """
    #         [ code ]
    #             repo=base, path=code
    #             repo=plug, path=code/plugin
    #         [ tests ]
    #             repo=base_tests, path=tests
    #             repo=plug_tests, path=tests/plugins
    #         """ )
    #     time.sleep(1)

    #     util.runcmd( mrgit_file, 'clone -m repos/mymanifest tests' )


class google_repo_manifests( trigutil.trigTestCase ):

    def create_google_repo_set(self):
        ""
        self.man_url = trigutil.create_local_bare_repository( 'manifests',
                                                              'central' )

        contents = defaults_xml.replace( 'CENTRALPATH', abspath('central') )
        trigutil.push_file_to_repo( self.man_url, 'default.xml', contents )

        for repo in ['service','navy','army','airforce','afrl','marines']:
            url = trigutil.create_local_bare_repository( repo+'.git', 'central' )
            trigutil.push_file_to_repo( url, 'file.txt', """
                file in """+repo+""" repository
                """ )

    def test_parse_prefix_urls(self):
        ""
        util.writefile( 'example.xml', example_xml )

        gmr = mrlib.GoogleManifestReader( 'example.xml' )

        remotes = gmr._collect_remote_prefix_urls()

        assert len( remotes ) == 2
        assert remotes['origin'] == 'file:///some/path/'
        assert remotes['other'] == 'file:///some/other/path'

        name = gmr._get_default_remote_name()
        assert name and name == 'origin'

    def test_collect_repo_name_to_url_map(self):
        ""
        util.writefile( 'example.xml', example_xml )

        gmr = mrlib.GoogleManifestReader( 'example.xml' )
        gmr.createRepoNameToURLMap()

        names = list( gmr.getRepoNames() )
        assert len( names ) == 3
        assert gmr.getRepoURL( 'service.git' ) == 'file:///some/path/service.git'
        assert gmr.getRepoURL( 'airforce.git' ) == 'file:///some/path/airforce.git'
        assert gmr.getRepoURL( 'afrl.git' ) == 'file:///some/other/path/afrl.git'

    def test_primary_url_logic(self):
        ""
        fs = defaults_xml.replace( 'CENTRALPATH', 'file:///default/path/' )
        util.writefile( 'default.xml', fs )
        util.writefile( 'proj1.xml', proj1_xml )
        util.writefile( 'proj2.xml', proj2_xml )
        util.writefile( 'proj3.xml', proj3_xml )

        gconv = mrlib.GoogleConverter( '.' )
        gconv.readManifestFiles()

        gconv.getPrimaryURL( 'service.git' ) == 'file:///default/path/service.git'
        gconv.getPrimaryURL( 'bar.git' ) == 'file:///server/path/bar.git'
        gconv.getPrimaryURL( 'baz.git' ) == 'file:///special/path/baz.git'

    def test_get_list_of_repos_from_manifest_file(self):
        ""
        util.writefile( 'example.xml', example_xml )

        gmr = mrlib.GoogleManifestReader( 'example.xml' )
        gmr.createRepoNameToURLMap()

        projL = list( gmr.getProjectList() )

        projL.sort()
        assert len( projL ) == 3

        assert projL[0][0] == 'afrl.git'
        assert projL[0][1] == 'file:///some/other/path/afrl.git'
        assert projL[0][2] == 'airforce/afrl'

        assert projL[1][0] == 'airforce.git'
        assert projL[1][1] == 'file:///some/path/airforce.git'
        assert projL[1][2] == 'airforce'

        assert projL[2][0] == 'service.git'
        assert projL[2][1] == 'file:///some/path/service.git'
        assert projL[2][2] == '.'

    def test_creation_of_repo_url_map(self):
        ""
        fs = defaults_xml.replace( 'CENTRALPATH', '/special/path/' )
        util.writefile( 'default.xml', fs )
        util.writefile( 'proj1.xml', proj1_xml )

        gconv = mrlib.GoogleConverter( '.' )
        gconv.readManifestFiles()

        cfg = mrlib.Configuration()
        gconv.createRemoteURLMap( cfg )

        rmap = cfg.getRemoteRepoMap()
        assert rmap.getRepoURL( 'service.git' ) == 'file:///special/path/service.git'
        assert rmap.getRepoURL( 'afrl.git' ) == 'file:///special/path/afrl.git'
        assert rmap.getRepoURL( 'bar.git' ) == 'file:///special/path/bar.git'
        assert rmap.getRepoURL( 'baz.git' ) == 'file:///server/path/baz.git'

    def test_creation_of_repo_groups(self):
        ""
        fs = defaults_xml.replace( 'CENTRALPATH', '/special/path/' )
        util.writefile( 'default.xml', fs )
        util.writefile( 'proj1.xml', proj1_xml )

        gconv = mrlib.GoogleConverter( '.' )
        gconv.readManifestFiles()

        cfg = mrlib.Configuration()
        gconv.createRepoGroups( cfg )

        mfest = cfg.getManifests()

        rgrp = mfest.findGroup( 'default' )
        repoL = rgrp.getRepoNames()
        repoL.sort()
        assert repoL == [ 'afrl.git', 'airforce.git', 'navy.git', 'service.git' ]
        assert rgrp.getRepoPath( 'afrl.git' ) == 'airforce/afrl'
        assert rgrp.getRepoPath( 'airforce.git' ) == 'airforce'
        assert rgrp.getRepoPath( 'navy.git' ) == 'navy'
        assert rgrp.getRepoPath( 'service.git' ) == '.'

        rgrp = mfest.findGroup( 'proj1' )
        repoL = rgrp.getRepoNames()
        repoL.sort()
        assert repoL == [ 'bar.git', 'baz.git', 'service.git' ]
        assert rgrp.getRepoPath( 'bar.git' ) == 'bar'
        assert rgrp.getRepoPath( 'baz.git' ) == 'baz'
        assert rgrp.getRepoPath( 'service.git' ) == '.'

    def test_a_group_is_skipped_if_one_of_the_urls_is_not_primary(self):
        ""
        fs = defaults_xml.replace( 'CENTRALPATH', '/some/path/' )
        util.writefile( 'default.xml', fs )
        util.writefile( 'example.xml', example_xml )

        gconv = mrlib.GoogleConverter( '.' )
        gconv.readManifestFiles()

        cfg = mrlib.Configuration()
        gconv.createRepoGroups( cfg )

        mfest = cfg.getManifests()

        assert mfest.findGroup( 'default' ) != None
        assert mfest.findGroup( 'example' ) == None

    def test_clone_from_a_google_repo_manifests(self):
        ""
        self.create_google_repo_set()

        mrlib.clone( [ '-G', self.man_url, 'clone1' ] )

        assert 'service' in util.readfile( 'clone1/file.txt' )
        assert 'navy' in util.readfile( 'clone1/navy/file.txt' )
        assert 'airforce' in util.readfile( 'clone1/airforce/file.txt' )
        assert 'afrl' in util.readfile( 'clone1/airforce/afrl/file.txt' )

    def test_if_G_option_given_then_only_one_url_can_be_cloned(self):
        ""
        pass


defaults_xml = """\
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <default remote="origin"
           sync-j="4"
           sync-s="true"
           dest-branch="master"
           revision="master" />

  <remote name="origin"
          fetch="file://CENTRALPATH/" />

  <project name="service.git" path="." />
  <project name="navy.git" path="navy" />
  <project name="airforce.git" path="airforce" />
  <project name="afrl.git" path="airforce/afrl" />
</manifest>
"""

example_xml = """\
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <default remote="origin" revision="master" />

  <remote name="origin"
          fetch="file:///some/path/ " />
  <remote name="other"
          fetch="file:///some/other/path" />

  <project name="service.git" path="." />
  <project name="airforce.git" path="airforce" />
  <project name="afrl.git" path="airforce/afrl" remote="other" />
</manifest>
"""

proj1_xml = """\
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <default remote="origin" revision="master" />
  <remote name="origin" fetch="file:///special/path/ " />
  <remote name="server" fetch="file:///server/path/ " />
  <project name="service.git" path="." />
  <project name="bar.git" path="bar" />
  <project name="baz.git" path="baz" remote="server" />
</manifest>
"""

proj2_xml = """\
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <default remote="origin" revision="master" />
  <remote name="origin" fetch="file:///special/path/ " />
  <remote name="server" fetch="file:///server/path/ " />
  <project name="service.git" path="." />
  <project name="bar.git" path="bar" remote="server" />
  <project name="baz.git" path="baz" />
</manifest>
"""

proj3_xml = """\
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <default remote="origin" revision="master" />
  <remote name="origin" fetch="file:///special/path/ " />
  <remote name="server" fetch="file:///server/path/ " />
  <project name="service.git" path="." />
  <project name="bar.git" path="bar" remote="server" />
  <project name="baz.git" path="baz" />
</manifest>
"""


class mrgit_configuration_tests( trigutil.trigTestCase ):

    def create_config_with_two_urls(self):
        ""
        cfg = mrlib.Configuration()
        cfg.createFromURLs( [ 'file:///one/repo.git', 'ssh:///and/two.git' ] )
        cfg.setTopDir( None )

        return cfg

    def test_create_config_from_a_single_url(self):
        ""
        cfg = mrlib.Configuration()
        cfg.createFromURLs( [ 'file:///one/repo.git' ] )
        cfg.setTopDir( None )

        repos = cfg.getRemoteRepoList()
        assert len( repos ) == 1
        assert list( repos[0] ) == [ 'file:///one/repo.git', '.' ]
        assert cfg.getTopDir() == abspath( 'repo' )

    def test_create_config_from_two_urls(self):
        ""
        cfg = self.create_config_with_two_urls()

        repos = cfg.getRemoteRepoList()
        assert len( repos ) == 2
        assert list( repos[0] ) == [ 'file:///one/repo.git', '.' ]
        assert list( repos[1] ) == [ 'ssh:///and/two.git', 'two' ]
        assert cfg.getTopDir() == abspath( 'repo' )

    def test_write_manifests_file(self):
        ""
        cfg = self.create_config_with_two_urls()

        cfg.mfest.writeToFile( 'mfests' )

        assert len( util.grepfiles( 'group repo', 'mfests' ) ) == 1
        assert len( util.grepfiles( 'repo=repo', 'mfests' ) ) == 1
        assert len( util.grepfiles( 'repo=two', 'mfests' ) ) == 1

    def test_create_initial_mrgit_repository(self):
        ""
        cfg = self.create_config_with_two_urls()

        cfg.createMRGitRepo()

        git = GitInterface( 'repo/.mrgit', 'checkrepo' )
        assert os.path.isfile( 'checkrepo/manifests' )
        assert not os.path.isfile( 'checkrepo/config' )

        assert 'mrgit_config' in git.listRemoteBranches()
        git.checkoutBranch( 'mrgit_config' )
        assert os.path.isfile( 'checkrepo/config' )

        lines = util.grepfiles( 'repo=repo', 'checkrepo/config' )
        assert len( lines ) == 1
        assert 'one/repo.git' in lines[0]

        lines = util.grepfiles( 'repo=two', 'checkrepo/config' )
        assert len( lines ) == 1
        assert 'and/two.git' in lines[0]

    def test_load_config_from_mrgit_checkout(self):
        ""
        cfg = self.create_config_with_two_urls()
        cfg.createMRGitRepo()

        rmap = mrlib.RepoMap()
        git = GitInterface( rootdir='.mrgit' )
        mrlib.check_load_mrgit_repo( cfg, git )

        repos = cfg.getRemoteRepoList()
        assert len( repos ) == 2
        assert list( repos[0] ) == [ 'file:///one/repo.git', '.' ]
        assert list( repos[1] ) == [ 'ssh:///and/two.git', 'two' ]
        assert cfg.getTopDir() == abspath( 'repo' )


class updating( trigutil.trigTestCase ):

    def test_foo(self):
        ""
        src_url = trigutil.create_bare_repo_with_topic_branch( 'cool' )


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
