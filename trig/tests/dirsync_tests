#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import filecmp
import unittest

import trigtestutils as trigutil
import testutils as util
from testutils import print3

import dirsync

dsynccmd = sys.executable+' '+os.path.dirname(trigutil.testsrcdir)+'/dirsync.py'

class function_interface( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def test_sync_dirs_when_destination_does_not_exist(self):
        ""
        util.writefile( 'srcdir/file.txt', 'my file' )
        time.sleep(1)

        dirsync.sync_directories( 'srcdir', 'dstdir' )

        assert filecmp.cmp( 'srcdir/file.txt', 'dstdir/file.txt' )

    def test_sync_dirs_with_src_is_abs_path(self):
        ""
        util.writefile( 'srcdir/file.txt', 'my file' )
        time.sleep(1)

        dirsync.sync_directories( os.path.abspath('srcdir'), 'dstdir' )

        assert filecmp.cmp( 'srcdir/file.txt', 'dstdir/file.txt' )

    def test_sync_dirs_with_dest_is_abs_path(self):
        ""
        util.writefile( 'srcdir/file.txt', 'my file' )
        time.sleep(1)

        dirsync.sync_directories( 'srcdir', os.path.abspath('dstdir') )

        assert filecmp.cmp( 'srcdir/file.txt', 'dstdir/file.txt' )

    def test_sync_dirs_when_target_file_is_different(self):
        ""
        util.writefile( 'srcdir/file.txt', 'my file' )
        util.writefile( 'dstdir/file.txt', 'different contents' )
        time.sleep(1)

        assert not filecmp.cmp( 'srcdir/file.txt', 'dstdir/file.txt' )

        dirsync.sync_directories( 'srcdir', os.path.abspath('dstdir') )

        assert filecmp.cmp( 'srcdir/file.txt', 'dstdir/file.txt' )

    def test_sync_dirs_deletes_files_and_directories_on_destination(self):
        ""
        util.writefile( 'srcdir/file.txt', 'my file' )
        util.writefile( 'dstdir/file.txt', 'different contents' )
        util.writefile( 'dstdir/subdir/what.txt', 'what file' )
        util.writefile( 'dstdir/other.txt', 'other contents' )
        time.sleep(1)

        dirsync.sync_directories( 'srcdir', 'dstdir' )

        time.sleep(1)
        assert util.globfile( 'dstdir/*' ) == 'dstdir/file.txt'

    def test_raise_error_if_source_directory_does_not_exist(self):
        ""
        self.assertRaises( dirsync.DirSyncError,
            dirsync.sync_directories, 'srcdir', 'dstdir' )


class command_line_interface( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def test_sync_local_dirs(self):
        ""
        util.writefile( 'srcdir/file.txt', 'my file' )
        time.sleep(1)

        util.runcmd( dsynccmd+' srcdir '+os.path.abspath('dstdir') )
        time.sleep(1)

        assert util.globfile( 'dstdir/*' ) == 'dstdir/file.txt'
        assert filecmp.cmp( 'srcdir/file.txt', 'dstdir/file.txt' )

    def test_wrong_number_of_arguments(self):
        ""
        util.writefile( 'srcdir/file.txt', 'my file' )
        time.sleep(1)

        x,out = util.runcmd( dsynccmd+' srcdir', raise_on_error=False )
        assert x != 0

    def test_get_help_message(self):
        ""
        x,out = util.runcmd( dsynccmd+' -h' )
        assert x == 0 and 'USAGE' in out

        x,out = util.runcmd( dsynccmd+' --help' )
        assert x == 0 and 'USAGE' in out


#########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
