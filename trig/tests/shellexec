#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import unittest

import testutils as util
from testutils import print3

bashexec = os.path.join( os.path.dirname(util.testsrcdir), 'bashexec' )


#######################################################################

class catchall( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def test_simple_pass_through_works(self):
        ""
        util.writefile( 'dummyfile', 'dummy contents\n' )
        dummy = os.path.abspath('dummyfile')
        time.sleep(1)

        out = util.runout( bashexec+' cat '+dummy )
        print3( out )
        assert 'dummy contents' in out

    def test_setting_a_PATH_directory(self):
        ""
        util.writescript( 'bin/myscript', '#!'+sys.executable, """
            import os, sys
            sys.stdout.write( 'hello from myscript'+os.linesep )
            sys.stdout.flush()
            """ )
        time.sleep(1)

        d = os.path.abspath( 'bin' )
        out = util.runout( bashexec+' -p '+d+' myscript' )
        print3( out )
        assert 'hello from myscript' in out

        d = os.path.abspath( 'bin' )
        out = util.runout( bashexec+' --path '+d+' myscript' )
        print3( out )
        assert 'hello from myscript' in out

    def test_using_PATH_values_preserves_order(self):
        ""
        util.writescript( 'bin1/myscript', '#!'+sys.executable, """
            import os, sys
            sys.stdout.write( 'hello script one'+os.linesep )
            sys.stdout.flush()
            """ )
        util.writescript( 'bin2/myscript', '#!'+sys.executable, """
            import os, sys
            sys.stdout.write( 'hello script two'+os.linesep )
            sys.stdout.flush()
            """ )
        time.sleep(1)

        d1 = os.path.abspath( 'bin1' )
        d2 = os.path.abspath( 'bin2' )
        out = util.runout( bashexec+' -p '+d1+' -p '+d2+' myscript' )
        print3( out )
        assert 'hello script one' in out

        out = util.runout( bashexec+' -p '+d2+' -p '+d1+' myscript' )
        print3( out )
        assert 'hello script two' in out

    def test_running_module_command(self):
        ""
        out = util.runout( bashexec+' -v -m list pwd' )
        print3( out )
        assert 'module list' in out

    def test_arguments_with_spaces_are_preserved(self):
        ""
        util.writescript( 'myscript', '#!'+sys.executable, """
            import os, sys
            nargs = len( sys.argv[1:] )
            sys.stdout.write( 'num arguments '+str(nargs)+os.linesep )
            sys.stdout.flush()
            """ )
        time.sleep(1)

        f = os.path.abspath( 'myscript' )
        out = util.runout( bashexec+' '+f+' "foo bar"' )
        print3( out )
        assert 'num arguments 1' in out

        f = os.path.abspath( 'myscript' )
        out = util.runout( bashexec+' '+f+' "foo bar" arg2' )
        print3( out )
        assert 'num arguments 2' in out

        f = os.path.abspath( 'myscript' )
        out = util.runout( bashexec+' '+f+' arg1 "foo bar"' )
        print3( out )
        assert 'num arguments 2' in out


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
