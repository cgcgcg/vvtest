#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath, dirname, basename
from os.path import join as pjoin
import time
import unittest

import trigtestutils as trigutil
import testutils as util
from testutils import print3

from gitresults import GitResults, GitResultsReader, ResultsSummary
from gitresults import create_orphan_branch, branch_name_and_directory
from gitresults import map_git_url_to_web_url, get_elapsed_time
from gitinterface import GitInterface


class the_GitResults_class( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

        self.url = util.create_local_bare_repository( 'example' )
        util.push_file_to_repo( self.url, 'file.txt', 'file contents' )
        time.sleep(1)

    def test_create_orphan_branch(self):
        ""
        git = GitInterface()
        git.clone( self.url, branch='master' )

        create_orphan_branch( git, 'resbranch', 'resdir' )

        assert git.currentBranch() == 'resbranch'
        assert os.path.isfile( 'example/resdir/.create' )
        assert not os.path.exists( 'example/file.txt' )

        git2 = GitInterface()
        git2.clone( self.url, 'ex', 'resbranch' )
        assert os.path.isfile( 'ex/resdir/.create' )
        assert not os.path.exists( 'ex/file.txt' )

    def test_clone_target_repo(self):
        ""
        gr = GitResults( self.url )
        localdir = gr.getCloneDirectory()

        assert os.path.isdir( localdir )
        assert os.path.isfile( localdir+'/.git/config' )
        assert os.path.samefile( os.getcwd(), dirname( localdir ) )
        assert os.path.isfile( localdir+'/file.txt' )

    def test_create_handler_and_results_directory(self):
        ""
        gr = GitResults( self.url )
        rdir = gr.createBranchLocation( 'mysuffix' )

        assert os.path.isdir( rdir )
        assert rdir.endswith( '.mysuffix' )

    def test_push_result_files_and_cleanup(self):
        ""
        gr = GitResults( self.url )
        localdir = gr.getCloneDirectory()
        rdir = gr.createBranchLocation( 'mysuffix' )

        util.writefile( rdir+'/results.txt', 'everything passes - booya' )
        time.sleep(1)

        branch = gr.pushResults( 'add results' )
        gr.cleanup()

        util.runcmd( 'git clone '+self.url+' checkit' )
        util.runcmd( 'git checkout '+branch, chdir='checkit' )
        assert len( util.findfiles( 'results.txt', 'checkit' ) ) == 1

        assert not os.path.exists( localdir )

    def add_first_set_of_results(self):
        ""
        res = GitResults( self.url )
        rdir = res.createBranchLocation()
        subdir = os.path.basename( rdir )

        util.writefile( rdir+'/data1.txt', 'data file one' )
        util.writefile( rdir+'/data2.txt', 'data file two' )

        branch = res.pushResults( 'my first results' )

        # check that the branch got pushed
        git = GitInterface()
        git.clone( self.url, 'check', branch )
        assert not os.path.exists( 'check/file.txt' )
        dat = util.readfile( 'check/'+subdir+'/data1.txt' )
        assert dat.strip() == 'data file one'
        dat = util.readfile( 'check/'+subdir+'/data2.txt' )
        assert dat.strip() == 'data file two'

        return branch

    def test_add_first_set_of_results(self):
        ""
        self.add_first_set_of_results()

    def test_add_second_set_of_results(self):
        ""
        self.add_first_set_of_results()

        res = GitResults( self.url )
        rdir = res.createBranchLocation()
        subdir = os.path.basename( rdir )

        util.writefile( rdir+'/data3.txt', 'data file three' )
        util.writefile( rdir+'/data4.txt', 'data file four' )

        branch = res.pushResults( 'my second results' )

        git2 = GitInterface()
        git2.clone( self.url, 'check2nd', branch )
        assert not os.path.exists( 'check/file.txt' )
        dat = util.readfile( 'check2nd/'+subdir+'/data1.txt' )
        assert dat.strip() == 'data file one'
        dat = util.readfile( 'check2nd/'+subdir+'/data2.txt' )
        assert dat.strip() == 'data file two'
        dat = util.readfile( 'check2nd/'+subdir+'/data3.txt' )
        assert dat.strip() == 'data file three'
        dat = util.readfile( 'check2nd/'+subdir+'/data4.txt' )
        assert dat.strip() == 'data file four'

    def test_second_set_of_results_with_overlapping_files(self):
        ""
        self.add_first_set_of_results()

        res = GitResults( self.url )
        rdir = res.createBranchLocation()
        subdir = os.path.basename( rdir )

        util.writefile( rdir+'/data2.txt', 'data file two dot one' )
        util.writefile( rdir+'/data3.txt', 'data file three dot zero' )

        branch = res.pushResults( 'my second, overlapping results' )

        git2 = GitInterface( self.url, 'check2nd' )
        assert os.path.exists( 'check2nd/file.txt' )
        git2.checkoutBranch( branch )

        dat = util.readfile( 'check2nd/'+subdir+'/data1.txt' )
        assert dat.strip() == 'data file one'
        dat = util.readfile( 'check2nd/'+subdir+'/data2.txt' )
        assert dat.strip() == 'data file two dot one'
        dat = util.readfile( 'check2nd/'+subdir+'/data3.txt' )
        assert dat.strip() == 'data file three dot zero'

    def test_resiliency_when_a_rebase_is_needed_for_push(self):
        ""
        branch = self.add_first_set_of_results()

        # checkout and modify files on the branch, but don't push yet
        res = GitResults( self.url )
        rdir = res.createBranchLocation()
        subdir = os.path.basename( rdir )

        util.writefile( rdir+'/data3.txt', 'data file three' )

        # modify the branch in the "central" repository
        util.push_new_file_to_branch( self.url, branch, 'sneak.txt', 'gotcha' )

        # this push must include a pull, otherwise the push will fail
        res.pushResults( 'my second results' )

        git2 = GitInterface( self.url, 'check2nd' )
        assert os.path.exists( 'check2nd/file.txt' )
        git2.checkoutBranch( branch )

        dat = util.readfile( 'check2nd/'+subdir+'/data1.txt' )
        assert dat.strip() == 'data file one'
        dat = util.readfile( 'check2nd/'+subdir+'/data2.txt' )
        assert dat.strip() == 'data file two'
        dat = util.readfile( 'check2nd/'+subdir+'/data3.txt' )
        assert dat.strip() == 'data file three'
        dat = util.readfile( 'check2nd/sneak.txt' )
        assert dat.strip() == 'gotcha'


class naming_schemes( unittest.TestCase ):

    def setUp(self):
        util.setup_test( cleanout=False )

    def test_default_includes_year_month_for_branch_and_more_for_directory(self):
        ""
        tm1 = time.time()
        bn,sb = branch_name_and_directory()

        ym = time.strftime( "%Y_%m", time.localtime(tm1) )
        assert ym in bn
        dh = time.strftime( "%Y_%m_%d_%H", time.localtime(tm1) )
        assert dh in sb

        tm2 = tm1 - 60*24*60*60
        bn2,sb2 = branch_name_and_directory( epochdate=tm2 )

        assert bn2 < bn

    def test_specify_subdirectory_suffix(self):
        ""
        bn,sb = branch_name_and_directory( subdir_suffix='.whatever' )
        assert 'whatever' not in bn
        assert sb.endswith( '.whatever' )


class results_reader_tests( trigutil.trigTestCase ):

    def test_mapping_git_url_to_web_url(self):
        ""
        giturl = 'git@gitlab.cool.com:My-Space/MyProj.git'
        weburl = map_git_url_to_web_url( giturl )
        assert weburl == 'https://gitlab.cool.com/My-Space/MyProj'

        giturl = 'git@gitlab.cool.com:My-Space/MyProj'
        weburl = map_git_url_to_web_url( giturl )
        assert weburl == 'https://gitlab.cool.com/My-Space/MyProj'

        giturl = 'https://gitlab.cool.com/My-Space/MyProj.git'
        weburl = map_git_url_to_web_url( giturl )
        assert weburl == 'https://gitlab.cool.com/My-Space/MyProj'

        giturl = 'https://gitlab.cool.com/My-Space/MyProj'
        weburl = map_git_url_to_web_url( giturl )
        assert weburl == 'https://gitlab.cool.com/My-Space/MyProj'

    def test_iterating_results_directories(self):
        ""
        url = create_fake_results_repo( 'resrepo' )

        rdr = GitResultsReader( url )

        bdmap = {}
        for branch,dirname in rdr.iterateDirectories():
            bdmap[ basename(dirname) ] = branch
            rsum = ResultsSummary( url, branch, dirname )

        assert len( bdmap ) == 2
        assert basename( bdmap['2019_05_10_20.foo'] ) == 'results_2019_05'
        assert basename( bdmap['2019_06_09_20.foo'] ) == 'results_2019_06'

        rdr.cleanup()

    def run_pass_fail_diff_tests(self, giturl):
        ""
        util.writefile( 'passfaildiff.vvt', """
            #VVT: parameterize : res = pass fail diff
            import vvtest_util as vvt
            import script_util as util
            import time
            if vvt.res == 'fail':
                raise Exception( 'fake exception' )
            elif vvt.res == 'diff':
                util.exit_diff()
            else:
                time.sleep(1)
            """ )
        time.sleep(1)
        x,out = util.runcmd( trigutil.vvtest_file + \
                             ' -vv -n 4 --plat '+core_platform_name() + \
                             ' --gitlab '+giturl )

    def test_get_elapsed_time_function(self):
        ""
        assert get_elapsed_time( {} ) == 0
        assert get_elapsed_time( {'elapsed':'3'} ) == 3
        assert get_elapsed_time( {'startepoch':'101'} ) == 0
        assert get_elapsed_time( {'startepoch':'101.2'} ) == 0
        assert get_elapsed_time( {'startepoch':'101.2',
                                  'finishepoch':'105.2'} ) == 4
        assert get_elapsed_time( {'startepoch':'101.2',
                                  'currentepoch':'106.2'} ) == 5

    def test_parsing_a_test_results_file_into_a_results_data_object(self):
        ""
        url = util.create_bare_repo_with_topic_branch( 'resrepo' )
        self.run_pass_fail_diff_tests( url )

        rdr = GitResultsReader( url )

        bdL = list( rdr.iterateDirectories() )
        assert len( bdL ) == 1
        branch,dirname = bdL[0]

        rsum = ResultsSummary( url, branch, dirname )

        assert abs( time.time() - rsum.getDateStamp() ) < 60*60+10
        assert rsum.getLabel() == core_platform_name()
        assert rsum.getElapsedTime() > 0 and rsum.getElapsedTime() < 10
        assert rsum.isFinished()

        cntD = rsum.getCounts()
        assert cntD == { 'pass':1, 'fail':1, 'diff':1,
                         'timeout':0, 'notdone':0, 'notrun':0 }

        end = pjoin( 'blob', branch, basename(dirname), 'README.md' )

        link = rsum.getResultsLink()
        assert link.startswith( url[:-4] )
        assert link.endswith( end )

        link = rsum.getResultsLink( 'pass' )
        assert link.endswith( end+'#tests-that-pass-1' )

        link = rsum.getResultsLink( 'fail' )
        assert link.endswith( end+'#tests-that-fail-1' )

        link = rsum.getResultsLink( 'diff' )
        assert link.endswith( end+'#tests-that-diff-1' )

        link = rsum.getResultsLink( 'timeout' )
        assert link.endswith( end+'#tests-that-timeout-0' )

        link = rsum.getResultsLink( 'notrun' )
        assert link.endswith( end+'#tests-that-notrun-0' )

        link = rsum.getResultsLink( 'notdone' )
        assert link.endswith( end+'#tests-that-notdone-0' )


def core_platform_name():
    ""
    if os.uname()[0].lower().startswith( 'darwin' ):
        return 'Darwin'
    else:
        return 'Linux'


def create_fake_results_repo( reponame ):
    ""
    url = util.create_bare_repo_with_topic_branch( 'resrepo' )

    gr = GitResults( url )

    epoch = 1557542115.59  # Fri May 10 20:35:15 2019
    rdir = gr.createBranchLocation( directory_suffix='foo', epochdate=epoch )
    util.writefile( pjoin( rdir, 'TestResults.md' ), 'fake content' )
    gr.pushResults( 'epoch 1' )

    epoch = 1560134273.99  # Sun Jun  9 20:37:53 2019
    rdir = gr.createBranchLocation( directory_suffix='foo', epochdate=epoch )
    util.writefile( pjoin( rdir, 'README.md' ), 'fake content' )
    gr.pushResults( 'epoch 2' )

    epoch = 1554345473.99  # Wed Apr  3 20:37:53 2019
    rdir = gr.createBranchLocation( directory_suffix='foo', epochdate=epoch )
    util.writefile( pjoin( rdir, 'nonsense.txt' ), 'foo bar' )
    gr.pushResults( 'epoch 3' )

    return url


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
