#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import unittest

import trigtestutils as trigutil
import testutils as util
from testutils import print3

import webgen


# Many of these tests produce html files that can only be verified by
# visual inspection in a browser.  Do this by running each test one at a
# time and add the -i option, which launches a browser on the file.


class WebFileTestCase( trigutil.trigTestCase ):

    def setUp(self):
        ""
        trigutil.trigTestCase.setUp( self )
        self.webfile = None

    def setWebFile(self, filename):
        ""
        assert os.path.exists( filename )
        self.webfile = filename

    def tearDown(self):
        ""
        if '-i' in util.runoptions:
            import webbrowser
            if self.webfile:
                assert os.path.exists( self.webfile )
                webbrowser.open( self.webfile )
            elif os.path.exists( 'testpage.htm' ):
                webbrowser.open( 'testpage.htm' )


class hello_world_tests( WebFileTestCase ):

    def test_create_hello_world_html_document(self):
        ""
        doc = webgen.HTMLDocument( 'testpage.htm' )
        head = doc.addHead()
        head.addTitle( 'Hello Title' )
        body = doc.addBody()
        body.addParagraph( 'Hello World.' )
        doc.close()


class DocumentTestCase( WebFileTestCase ):

    def setUp(self):
        ""
        WebFileTestCase.setUp(self)

        self.doc = webgen.HTMLDocument( 'testpage.htm' )
        self.doc.addHead()
        self.body = self.doc.addBody()

    def tearDown(self):
        ""
        self.doc.close()
        WebFileTestCase.tearDown(self)

    def test_heading_element(self):
        ""
        self.body.addHeading( 'Centered heading.', align='center' )
        self.body.addHeading( 'Left alignment heading.', align='left' )
        self.body.addHeading( 'Right alignment heading.', align='right' )
        self.body.addHeading( 'Default alignment heading.' )

    def test_create_a_plain_table(self):
        ""
        tab = self.body.addTable()
        tab.addRow( 'one', 'two' )
        tab.addRow( 1, 2 )

    def test_create_table_with_borders(self):
        ""
        tab = self.body.addTable( borders='all' )
        tab.addRow( 'one', 'two' )
        tab.addRow( 1, 2 )

        self.body.addParagraph( 'make some room' )

        tab = self.body.addTable( borders='all' )
        tab.addRow( 'uno' )

    def test_create_table_with_internal_borders(self):
        ""
        tab = self.body.addTable( borders='internal' )
        tab.addRow( 'one', 'two' )
        tab.addRow( 1, 2 )

        self.body.addParagraph( 'make some room' )

        tab = self.body.addTable( borders='internal' )
        tab.addRow( 'uno' )

        self.body.addParagraph( 'make some room' )

        tab = self.body.addTable( borders='internal' )
        tab.addRow( 'one', 'two', 'thr', 'for' )
        tab.addRow( 1, 2, 3, 4 )
        tab.addRow( 'a', 'b', 'c', 'd' )
        tab.addRow( 'aa', 'bb', 'cc', 'dd' )

    def test_create_table_with_background_color_by_entry(self):
        ""
        tab = self.body.addTable()
        row = tab.addRow( 'a' )
        row.addEntry( 'b', background='lightblue' )
        row = tab.addRow()
        row.addEntry( 10, background='tomato' )
        row.addEntry( 0 )

        self.body.addParagraph( 'make some room' )

        tab = self.body.addTable( borders='all' )
        row = tab.addRow()
        row.addEntry( 10, background='tomato' )
        row.addEntry( 0, background='lightgreen' )
        tab.addRow( 'a', 'b' )

    def test_create_table_with_header(self):
        ""
        tab = self.body.addTable()
        row = tab.addRow( 'these', 'are', 'header', 'entries', header=True )
        row = tab.addRow()
        row.addEntry( 10, 'foo', 1.4, None, background='tomato' )

        self.body.addParagraph( 'make some room' )

        tab = self.body.addTable( borders='all' )
        row = tab.addRow( header=True )
        row.addEntry( 'foo', 'bar', background='lightcyan' )
        row = tab.addRow()
        row.addEntry( 3.144444, 2.188888 )

    def test_create_table_with_text_alignment(self):
        ""
        tab = self.body.addTable( borders='all' )
        row = tab.addRow( 'aaaaaaa', 'bbbbbbb', 'ccccccc', 'ddddddd' )
        row = tab.addRow()
        row.addEntry( 'lft', align='left' )
        row.addEntry( 'ctr', align='center', background='lavender' )
        row.addEntry( 'rgt', align='right' )
        row.addEntry( 'none' )


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
