#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
from os.path import join as pjoin
import time
import unittest
import subprocess

import trigtestutils as trigutil
import testutils as util
from testutils import print3

import cdashutil


class uploading_a_file( trigutil.trigTestCase ):

    def test_send_file_to_a_web_server_using_curl(self):
        ""
        contents = write_sample_upload_file( 'sub.txt' )

        srv = FakeHTTPServer()
        time.sleep(2)

        try:
            cmd = 'curl -v -T sub.txt '+srv.getURL()+'/submit.php?project=CoolProj'
            util.runcmd( cmd )
        finally:
            srv.shutdown()

        self.check_file_received( srv, contents )

    def check_file_received(self, srv, contents):
        ""
        srv.readServerLog()
        info = srv.getUploadInfo()

        assert info['url path'] == '/submit.php?project=CoolProj'
        assert util._STRING_( info['file'] ) == contents

    def run_upload_file_test(self, method):
        ""
        contents = write_sample_upload_file( 'sub.txt' )

        srv = FakeHTTPServer()
        time.sleep(2)

        try:
            if method:
                cdashutil.submit_file( srv.getURL(), 'CoolProj', 'sub.txt',
                                       method=method )
            else:
                cdashutil.submit_file( srv.getURL(), 'CoolProj', 'sub.txt' )
        finally:
            srv.shutdown()

        self.check_file_received( srv, contents )

    def test_upload_file_using_curl(self):
        ""
        self.run_upload_file_test( 'curl' )

    def test_upload_file_using_urllib_module(self):
        ""
        self.run_upload_file_test( 'urllib' )

    def test_upload_file_using_the_default_method(self):
        ""
        self.run_upload_file_test( None )


class file_formatting( trigutil.trigTestCase ):

    def test_reading_xml(self):
        ""
        util.writefile( 'good.xml', """\
            <?xml version="1.0" encoding="UTF-8"?>
            <Site attr="value">
                <Testing>
                    content
                </Testing>
            </Site>
            """ )
        util.writefile( 'bad.xml', """\
            <?xml version="1.0" encoding="UTF-8"?>
            <Site attr="value">
                <Testing>
                    content
                <Testing>
            </Site>
            """ )
        time.sleep(1)

        etree = read_xml_file( 'good.xml' )
        print3( 'root', etree.tag, etree.attrib )
        for nd in etree:
            print3( 'node', nd.tag, nd.attrib )

        self.assertRaises( Exception, read_xml_file, 'bad.xml' )

    def test_setting_global_fields(self):
        ""
        fmtr = cdashutil.TestResultsFormatter()

        tm = 1584666632.0827949  # Thu Mar 19 19:10:32 2020

        build_date = tm - 60*60
        build_group = 'Production'
        site_name = 'Oz'
        build_name = 'Wizard'
        fmtr.setBuildID( build_date, build_group, site_name, build_name )

        start_time = build_date + 20*60
        end_time = start_time + 50*60
        fmtr.setTime( start_time, end_time )

        fmtr.writeToFile( 'file.xml' )
        time.sleep(1)

        etree = read_xml_file( 'file.xml' )

        assert etree.tag == 'Site'
        assert etree.attrib['BuildStamp'] == '20200319-181032-Production'
        assert etree.attrib['BuildName'] == 'Wizard'
        assert etree.attrib['Name'] == 'Oz'

        chkD = {}
        for nd1 in etree:
            assert nd1.tag == 'Testing'
            for nd2 in nd1:
                chkD[ nd2.tag ] = nd2.text.strip()
        assert chkD['StartDateTime'] == 'Mar 19 18:30:32 MDT'
        assert chkD['StartTestTime'].startswith( '1584664232' )
        assert chkD['EndDateTime'] == 'Mar 19 19:20:32 MDT'
        assert chkD['EndTestTime'].startswith( '1584667232' )
        assert int( float( chkD['ElapsedMinutes'] ) + 0.5 ) == 50


def read_xml_file( filename ):
    ""
    import xml.etree.ElementTree as ET

    xml = util.readfile( filename )

    etree = ET.fromstring( xml )

    return etree


def write_sample_upload_file( filename ):
    ""
    contents = "some contents\nline two\n"

    with open( filename, 'wt' ) as fp:
        fp.write( contents )

    return contents


class FakeHTTPServer:

    def __init__(self):
        ""
        self.port = 8793
        self.logname = abspath( 'srv.log' )

        scr = self._write_server_script()

        self.pop = subprocess.Popen( sys.executable+' '+scr, shell=True )

    def getURL(self):
        ""
        return 'http://localhost:'+str(self.port)

    def shutdown(self):
        ""
        self.pop.terminate()

    def readServerLog(self):
        ""
        self.loglist = []

        logpat = 'FakeLog: '

        with open( self.logname, 'rt' ) as fp:
            for line in fp:
                line = line.strip()
                if line.startswith( logpat ):
                    val = eval( line.split(logpat)[1].strip() )
                    print3( val )
                    self.loglist.append( val )

        return self.loglist

    def getUploadInfo(self):
        ""
        up = None

        for obj in self.loglist:
            if type(obj) == type({}) and obj['transaction'] == 'PUT/POST':
                up = obj

        return up

    def _write_server_script(self):
        ""
        scr = abspath( 'fakeserver' )

        util.writefile( scr, '''
            import sys
            sys.dont_write_bytecode = True
            sys.excepthook = sys.__excepthook__
            import os

            try:
                from BaseHTTPServer import HTTPServer
                from SimpleHTTPServer import SimpleHTTPRequestHandler
            except ImportError:
                import http
                from http.server import HTTPServer
                from http.server import SimpleHTTPRequestHandler

            class FakeHandler ( SimpleHTTPRequestHandler ):

                def log_message(self, format, *args):
                    ""
                    if format:
                        msg = repr( format % args )
                    else:
                        msg = repr( args[0] )

                    with open( "'''+self.logname+'''", 'at' ) as fp:
                        fp.write( 'FakeLog: ' + msg + os.linesep )

                def do_PUT(self):
                    ""
                    self._handle_file_receive( 100 )

                def do_POST(self):
                    ""
                    self._handle_file_receive( 200 )

                def _handle_file_receive(self, response_code):
                    ""
                    nb = int( self.headers.get('Content-Length').strip() )
                    val = self.rfile.read( nb ) if nb > 0 else ''

                    logline = { 'transaction':'PUT/POST', 'url path':self.path }
                    logline.update( self.headers )
                    logline['file'] = val
                    self.log_error( None, logline )

                    self.send_response( response_code, 'OK' )
                    if hasattr( self, 'flush_headers' ):
                        self.flush_headers()

            addr = ( '', '''+str(self.port)+''' )
            httpd = HTTPServer( addr, FakeHandler )

            for i in range(1):
                httpd.handle_request()
            ''' )

        return scr


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
