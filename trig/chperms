#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import getopt

import perms


help_string = """
USAGE:
    chperms [OPTIONS] [ path [ path ... ] ]

SYNOPSIS:
    Set file and directory permissions and/or group.  It mimics the behavior
of chmod except that 1) it is like chgrp if a group name is given, and 2) the
capital letter "S" can be used to set the setgid bit just on directories.

If a 'path' is not given, the current working directory is assumed.  Operations
are specified using the -p option, which may be repeated. Examples:

    -p o=      : remove all world permissions on files and directories
    -p go-w    : remove write for group and others on files and directories
    -p g+rX    : make files and directories group readable, make directories
                 group execute, and make files executable if so by owner
    -p g+S     : set the setgid bit on all directories
    -p mygroup : change group on all files and directories to 'mygroup'

OPTIONS:
    -h, --help : this help
    -p <spec>  : permission specification or group name
    -R         : apply permissions recursively
"""


def main():

    optL,argL = getopt.getopt( sys.argv[1:], 'hp:R', longopts=['help'] )

    speclist = []
    recurse = False

    for n,v in optL:
        if n == '-h' or n == '--help':
            print3( help_string.strip() )
            return
        elif n == '-p':
            speclist.append( v )
        elif n == '-R':
            recurse = True

    if len(speclist) > 0:

        pspec = perms.PermissionSpecifications( *speclist )

        if len(argL) == 0:
            argL.append( '.' )

        for path in argL:
            pspec.apply( path, recurse=recurse )


def print3( *args ):
    ""
    sys.stdout.write( ' '.join( [ str(x) for x in args ] ) + os.linesep )
    sys.stdout.flush()


main()
