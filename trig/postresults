#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from getopt import getopt
import time
import subprocess
import tempfile
import shutil
import string
import random

from gitinterface import GitInterface
from gitresults import ResultsHandler


help_string = '''
USAGE
    postresults [OPTIONS] --gitlab=<URL> [ test_directory ]

SYNOPSIS
    Checks out or creates an orphan branch from the given GitLab repo, runs
vvtest to summarize the test results as GitLab markdown, then pushes results
to a subdirectory.  The "test_directory" is a vvtest TestResults directory,
and if not given, the current working directory is used.

See the gitresults.py file for more information on how results are stored on
the orphan branch.

OPTIONS
    -h, --help        : help
    --gitlab=<URL>    : the GitLab repository
    --vvtest=<path>   : the vvtest executable to use, default is "vvtest"
    --suffix=<suffix> : use directory <date>.<suffix> in the repository;
                        default suffix is "vvtest_results"
    --message=<commit message>
                      : the repository commit message
'''


def main():
    ""
    opts = Options( sys.argv[1:] )

    if len( opts.args ) == 0:
        testdir = os.getcwd()
    else:
        testdir = opts.args[0]

    pst = Poster( opts.gitlab )
    pst.cloneRepo()
    rdir = pst.createHandler( opts.suffix )

    write_vvtest_results( opts.vvtest, rdir, testdir )

    branch = pst.push( opts.message )
    pst.cleanup()


class Options:

    def __init__(self, argv):
        ""
        self.args = []

        self.vvtest = 'vvtest'
        self.suffix = 'vvtest_results'
        self.gitlab = None
        self.message = 'add test results'

        self.parse_options( argv )

    def parse_options(self, argv):
        ""
        optL,argL = getopt( argv, 'h',
                            [ 'help', 'vvtest=', 'suffix=', 'gitlab=',
                              'message=' ] )

        for n,v in optL:

            if n == '-h' or n == '--help':
                print3( help_string )
                sys.exit(0)

            elif n == '--vvtest':
                assert os.path.isfile( v )
                self.vvtest = v

            elif n == '--suffix':
                self.suffix = v.strip()

            elif n == '--gitlab':
                self.gitlab = v

            elif n == '--message':
                self.message = v

        if not self.gitlab:
            errorexit( 'the --gitlab option must be given' )

        self.args = argL


def write_vvtest_results( vvtest, todir, testdir ):
    ""
    cmd = vvtest+' -i --sort d --gitlab '+todir
    print3( 'cd '+testdir+' && '+cmd )
    subprocess.check_call( cmd, shell=True, cwd=testdir )


class Poster:

    def __init__(self, url):
        ""
        self.url = url

    def cloneRepo(self):
        ""
        tmpdir = make_temp_subdir_name()

        check_remove_directory( tmpdir )

        self.git = GitInterface()

        print3( 'Cloning', self.url, 'into', tmpdir )
        self.git.clone( self.url, tmpdir, branch='master' )

        return self.git.getRootPath()

    def createHandler(self, suffix):
        ""
        self.hnd = ResultsHandler( self.git )

        br,sb = self.hnd.setNamingScheme( subdir_suffix='.'+suffix )
        print3( 'Using directory', sb, 'on branch', br )

        rdir = self.hnd.createResultsDirectory()

        return rdir

    def push(self, message):
        ""
        branch = self.git.currentBranch()

        print3( 'Pushing results...' )
        self.hnd.pushResults( message )

        return branch

    def cleanup(self):
        ""
        check_remove_directory( self.git.getRootPath() )


def check_remove_directory( dirpath ):
    ""
    if os.path.exists( dirpath ):
        print3( 'rm -r '+dirpath )
        shutil.rmtree( dirpath )


def make_temp_subdir_name():
    ""
    seq = string.ascii_uppercase + string.digits
    cL = [ random.choice( seq ) for _ in range(8) ]
    tdir = "postresults_tempdir_"+''.join( cL )
    return tdir


def errorexit( message ):
    ""
    sys.stderr.write( '*** error: '+message+'\n' )
    sys.stderr.flush()
    sys.exit(1)


def print3( *args ):
    ""
    sys.stdout.write( ' '.join( [ str(arg) for arg in args ] ) + '\n' )
    sys.stdout.flush()


###########################################################################

if __name__ == "__main__":
    main()
