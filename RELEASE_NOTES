
Improvements:

    - Add --scan-type <type> command line argument, where 'type' can be
      "xml" or "vvt".  This restricts the test scanning to tests of the
      given type.

    - Add user plugin functions:

        def prologue( command_line ):
          pass

        def epilogue( testdict ):
          pass

      which are called during startup and during shutdown, respectively.
      The 'command_line' is a python list of the command line arguments.
      The 'testdict' is a dictionary of test ids to another dictionary
      containing test information, including

          result -> pass, fail, diff, timeout, notrun, notdone, or skip
          runtime -> num seconds or None if not run
          rundir -> the test execution directory

      Note that only epilogue() is called during shutdown when in information
      mode, such as "vvtest -i".

    - Parameter typing is now supported (relevant only for python script
      tests).  You can now add in your test header, for example,

          #VVT: parameterize (autotype) : np = 1 32 256
          #VVT: parameterize (autotype) : dx = 0.1  0.01  0.001

      and the parameter values in the vvtest_util.py file will be typed
      (np will be an int, and dx will be a float).

Fixes:

    - Under some circumstances, previous test results would not show up in
      the vvtest -i output, and some tests would fail to rerun when running
      inside the test results directory.

Changes:

    - For XML specified tests, the variable TOOLSET_DIR has been changed
      to VVTESTSRC.  This name is consistent with the script form of test
      specifications.

    - The option given to a test when the command line -a, --analyze option
      was given to vvtest has changed.  If you use the vvtest_util helper,
      this should be transparent, but just in case, the new option is
      --execute-analysis-sections'.  The old option is now deprecated but
      still given, --execute_analysis_sections.


==============================================================================

Release 1.1
-----------

Sep 7, 2019

Improvements:

    - Add test staging.  You can now specify something like

        #VVT: parameterize (staged) : np = 1 8 1

      in test script headers.  This causes all parameterized tests to run
      in the same directory, but one at a time and in order.  Tests that are
      staged will have the "stage" parameter automatically added, which takes
      on the values 1, 2, 3, etc.

    - Add more intuitive way to disable tests.  You can now say

        #VVT: enable = false

      in test scripts to prevent the test from running.  It shows up as
      'skipped due to "disabled"'.

    - Add --gitlab <Git URL> option, which generates and pushes test results
      in GitLab markdown format to a Git repository as part of vvtest execution.
      It pushes at startup, every hour, and when finished.

    - Add --encode-exit-status command line option, which makes vvtest return
      non-zero if there are any non-passing or not-run tests.

    - Add test_preload() user plugin function.  If the vvtest_user_plugin
      file contains the function definition

        def test_preload( specs ):

      then it will be called just prior to each test execution. Modifications
      it makes to the environment will be felt by the test.  If the test script
      is NOT executable and this function returns a file path, the test will
      be run using that program (the main use case being to switch the python
      being used to run the test).

      Also, each test can define a preload label, for example

        #VVT: preload : somelabel

      In this case, the 'specs' dictionary argument to test_preload() will
      contain the entry

        'preload': 'somelabel'

      This allows each test to influence what the preload function does.

    - Add python plugin capability which can be used to adjust test timeouts
      and to validate tests against project standards.  The plugin file name
      is vvtest_user_plugin.py and can contain the function

        def test_timeout( spec_dict ):
            return 60

      and/or

        def validate_test( spec_dict ):
            return "reason for invalid test"

      The 'spec_dict' is a dictionary

            'keywords'   : list of keywords (strings)
            'parameters' : dictionary mapping parameter name to value
            'timeout'    : integer if test specifies a timeout, otherwise None
            'platform'   : platform name
            'options'    : list of options (strings)

    - Add console listing of skipped tests (the tests that were filtered out
      by -k or -p command line specifications, for example).  Using the extra
      verbose flag, -vv, the skips will be listed as part of the test results.

    - Add python script_utils functions to save and read arbitrary test data.
      The data is written to a file in the test execution directory.  For
      example, consider a test named "mytest",

          import script_utils as util
          util.save_test_data( runtime=34.7, result='pass' )

      The data can be read in as a dictionary from the current or a dependency
      test.  For example, if the following test depends on "mytest",

          import script_utils as util
          data = util.read_test_data( "mytest" )
          print ( 'mytest runtime is', data['runtime'] )

    - Add function to python script_utils to recursively find dependency tests.
      Use script_utils.deputils.find_depdir( testid ) to get the directory of
      a direct or indirect dependency test.

    - In script tests, the "testname" directive can be used instead of "test".
      For example, this specifies the test name to be "mytest",

          #VVT: testname = mytest

    - In script tests, "depends on" specifications can now be given in the
      test name directive, such as

          #VVT: testname = testA
          #VVT: testname = testB (depends on=testA, result="*")

Fixes:

    - Duplicate paths in DEPDIRS in vvtest_util.py file, issue #13.

    - Using the post clean option, -C, would incorrectly clean dependency
      tests coming from a general "depends on" specification.

Changes:

    - The basename of test files are now included in the (implicit) keyword
      list.  So you can use "-k name" to pick up all tests in 'name.vvt', for
      example.

    - The TIMEOUT variable is being deprecated; replaced with VVTEST_TIMEOUT.
      This environment variable is defined for each test, and is typically
      used to set a SIGALRM in MPI processes to ensure they shutdown.

    - The -v option has changed meaning.  It now means verbose.  Can be
      repeated for increased verbosity.

    - The console output format for listing tests has changed a little.
      Instead of

          virtualCyl   Exit   diff   6s   02/08 22:30:52 path/name

      it now would be

          virtualCyl   diff   6s   02/08 22:30:52 path/name

      and results keywords will be one of pass, diff, fail, notrun, notdone,
      or timeout.

    - In python script tests, "import script_util" will no longer import all
      the symbols from the vvtest_util.py file.  That is, instead of this in
      your test file,

          import script_util as util
          util.print3( 'NAME =', util.NAME )

      you now have to import vvtest_util.py separately,

          import vvtest_util as vvt
          import script_util as util
          util.print3( 'NAME =', vvt.NAME )

      or, of course, just dump all the symbols into the current namespace,

          from vvtest_util import *
          from script_util import *
          print3( 'NAME =', NAME )

    - The (argument) and (file) attributes to the "baseline" directive are no
      longer supported, such as

          #VVT: baseline (argument) : my-option
          #VVT: baseline (file) : filename

      Now an option can only start with a hyphen, such as

          #VVT: baseline : --my-option

      and a baseline script filename cannot contain a comma (because a comma
      is used to decide if you are specifying pairs of files).

    - The (argument) and (file) attributes to the "analyze" directive are no
      longer supported, such as

          #VVT: analyze (file) : analyze_script
          #VVT: analyze (argument) : analyze-option

      Now an option can only start with a hyphen, such as

          #VVT: analyze : --analyze-option

      otherwise a script file name is assumed.

    - Language selection of script tests has been simplified.  The new logic
      is that if the test file is executable, it is run directly.  If it is
      not executable, the python interpreter is run on the file.  This applies
      to the "analyze" and "baseline" directive keywords.

      A related aspect of this is that only (and always both) python and bash
      script util fragments are written to the test run directory.  Before
      this change, other languages were supported, such as csh.

    - The test list format used for running tests has changed.  It is now at
      version 32 and previous versions cannot be read.  This just means that
      a current test results area will have to be wiped and the tests run
      again.

    - trig: Remove unnecessary options -S -C and -a.  Use the runner script
      to launch now.

    - The command.py utility changed a default.  The Command.run functions
      now default raise_on_error to True.

    - Python 2.5 is no longer supported.

    - Using the deprecated option -F now exits with a failure.  It has been
      replaced by the -R option.

    - The -H option has been removed.  It is the same as --help and -h.

    - Option -v to get the version is deprecated.  Use --version instead.

    - Option --pipeline is deprecated.  Use --batch instead.

    - The --qsub-limit option is being deprecated in favor of --batch-limit
      (with the same meaning).  Similarly, --qsub-length is being deprecated
      in favor of --batch-length.

    - The --check=<name> option is deprecated.  Using --check=FOO just causes
      the environment variable CHECK_FOO to get defined.  The XML test format
      can check for environment variables using the 'ifdef' attribute.  So
      defining CHECK_FOO before running vvtest accomplishes the same thing.
      Also, the more general --test-args option is a better solution.

    - The --vg option has been removed.  It was used to run Valgrind on each
      test.  The same thing can be accomplished using --test-args.

    - The -G option has been removed.  It is historical.

    - The --junit test results output format has been enhanced a little.  It
      will now include the execute.log contents for tests that fail or diff.
      However, the middle of the file will be cut out if it is too big.


==============================================================================

Release 1.0
-----------

Aug 26, 2018

Improvements:

    - Add "insert directive file" keyword to test file preprocessing.  This
      allows test header specifications to include and share specifications
      from other files.

    - Port to python 3.  All python versions greater or equal to 2.5 should
      work.

    - Add --run-dir <directory> option.  This overrides the default naming
      scheme of the "TestResults.<platform>.ON=.OFF=" pattern.

    - Add additional test script utilties, such as simple_aprepro.

    - Add --test-args <arguments> option.  This passes arbitrary arguments
      into each test script at runtime.

    - Add arbitrary test dependencies.  A test can now depend on another test.
      The test will not run until the dependency is run, and the directory of
      the dependency test is made available so its output can be processed.
      The test directive keyword is "depends on".

Fixes:

    - Allow recursive vvtest invocations.  Tests being run in vvtest can now
      invoke vvtest.
