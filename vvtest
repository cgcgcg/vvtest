#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import join as pjoin
from os.path import dirname, abspath, normpath, basename
import time
import shlex

import libvvtest.cmdline as cmdline
from libvvtest.execlist import TestExecList
from libvvtest.testrunner import TestRunner
import libvvtest.pathutil as pathutil
from libvvtest.errors import FatalError
import libvvtest.location as location
import libvvtest.execute as execute
from libvvtest.testctor import TestConstructor
import libvvtest.TestList as TestList


version = '1.2'

search_fnmatch = ['*.inp','*.apr','*.i']

USER_PLUGIN_MODULE_NAME = 'vvtest_user_plugin'


class MainEntry:

    def __init__(self, argv, vvtestdir, exepath):
        """
        'vvtestdir' is the (real) directory containing the vvtest script
        """
        self.argv = argv
        self.vvtestdir = vvtestdir
        self.exepath = exepath
        self.curdir = os.getcwd()

    def constructObjects(self):
        ""
        self.start_epoch = time.time()

        check_for_bootstrap_file( self.exepath )

        # this may call sys.exit (for help or errors)
        self.opts, self.optD, self.dirs = \
            cmdline.parse_command_line( self.argv[1:], version )

        if len( self.dirs ) == 0:
            # scan current working directory by default
            self.dirs.append( '.' )

        configdir = location.determine_configdir(
                                self.opts.config,
                                os.getenv( 'VVTEST_CONFIGDIR' ) )

        insert_configdir_into_sys_path( self.vvtestdir, configdir )

        self.constructRuntimeData( configdir )

        self.constructPlatform()

        tctor = construct_TestConstructor( self.opts )
        self.rtdata.setTestConstructor( tctor )

        self.constructTestDirectory()

        self.rtdata.setPermissionsObject( self.opts, self.optD )

        self.constructResultsWriter()

        self.constructFilteringObjects()

    def execute(self):
        ""
        exitstat = 0

        if information_mode( self.opts ):
            mode = InformationMode( self.opts, self.optD, self.rtdata, self.tlm )
            exitstat = mode.run( self.dirs )

        elif self.opts.dash_g:
            generateTestList( self.opts, self.optD, self.rtdata, self.tlm )

        elif self.opts.dash_b:

            if self.opts.dash_R or self.opts.dash_w:
                raise FatalError( 'cannot use -R or -w with -b (baseline)' )

            baselineTests( self.opts, self.optD, self.rtdata, self.tlm )

        elif self.opts.extract:
            extractTestFiles( self.opts.scan_type,
                              self.optD['param_dict'],
                              self.opts.extract, self.rtdata, self.tlm )

        else:

            # if no results keywords are specified, then add -k notrun/notdone
            if not self.opts.dash_w and not self.opts.dash_R:
                rtconfig = self.rtdata.getRuntimeConfig()
                rtconfig.addResultsKeywordExpression( 'notrun or notdone' )

            if self.rtdata.isRestartMode():
                exitstat = restartTests( self.opts, self.optD, self.rtdata, self.tlm )
            else:
                exitstat = runTests( self.opts, self.optD, self.rtdata, self.tlm )

        if self.opts.encode_exit_status:
            return exitstat

    def constructRuntimeData(self, configdir):
        ""
        from libvvtest.runinfo import RuntimeInfo

        self.rtdata = RuntimeData( self.exepath )

        rtconfig = construct_RuntimeConfig( self.opts, self.optD )
        self.rtdata.setRuntimeConfig( rtconfig )

        # non-None only if the CWD is in a TestResults.* directory
        self.cache_file = get_test_cache_file()

        if self.cache_file:
            is_restart = True
            self.readCacheData( rtconfig )
        else:
            is_restart = False

        self.rtdata.setRestartMode( is_restart )

        rtinfo = RuntimeInfo( startepoch=self.start_epoch,
                              cmdline=self.argv,
                              vvtestdir=self.vvtestdir,
                              curdir=self.curdir )
        if self.opts.short_xdirs:
            rtinfo.setInfo( shortxdirs=self.opts.short_xdirs )
        self.rtdata.setRuntimeInfo( rtinfo )

        create_configuration( rtconfig, self.opts, self.optD,
                              self.vvtestdir, configdir )

        # this is scheduled for deprecation
        if self.opts.check:
            for n in self.opts.check:
                os.environ[ 'CHECK_' + n.upper() ] = ''

        return rtconfig

    def readCacheData(self, rtconfig):
        ""
        if self.optD['onopts'] or self.optD['offopts'] or self.opts.dash_g:
            raise FatalError( 'the -g, -o, and -O options are not allowed '
                              'in a TestResults directory')

        if self.optD['param_dict']:
            raise FatalError( 'cannot use -S in a TestResults directory' )

        if self.opts.dash_g:
            raise FatalError( 'cannot use -g in a TestResults directory' )

        read_cache_file( self.opts, self.optD, rtconfig, self.cache_file )

    def constructPlatform(self):
        ""
        rtconfig = self.rtdata.getRuntimeConfig()
        rtinfo = self.rtdata.getRuntimeInfo()

        plat = construct_platform_instance( self.vvtestdir, self.opts, self.optD )
        self.rtdata.setPlatformObject( plat )

        rtconfig.setPlatformName( plat.getName() )
        rtconfig.setOptionList( self.optD['onopts'] + [plat.getCompiler()] )
        rtconfig.setMaxSize( plat.getMaxSize() )

        rtinfo.setInfo( platform=plat.getName(),
                        compiler=plat.getCompiler() )

    def constructTestDirectory(self):
        ""
        rtinfo = self.rtdata.getRuntimeInfo()

        sd = location.test_results_subdir_name(
                            self.opts.run_dir,
                            self.optD['onopts'], self.optD['offopts'],
                            self.rtdata.getPlatformObject().getName() )

        td = location.determine_test_directory( sd, self.cache_file, self.curdir )

        self.rtdata.setTestResultsDir( td )
        rtinfo.setInfo( rundir=td )

    def constructResultsWriter(self):
        ""
        resw = construct_results_writers( self.opts, self.optD,
                                          self.rtdata.getTestResultsDir(),
                                          self.rtdata.getPermissionsObject(),
                                          self.rtdata.getPlatformObject() )

        self.rtdata.setResultsWriter( resw )

    def constructFilteringObjects(self):
        ""
        from libvvtest.testcreator import TestCreator
        from libvvtest.scanner import TestFileScanner
        from libvvtest.filtering import TestFilter
        from libvvtest.testselector import TestSelector
        from libvvtest.timeout import TimeHandler
        from batch.namer import BatchFileNamer

        rtconfig = self.rtdata.getRuntimeConfig()
        test_dir = self.rtdata.getTestResultsDir()

        creator = TestCreator( rtconfig.getPlatformName(),
                               rtconfig.getOptionList(),
                               self.rtdata.getTestConstructor() )

        scanner = TestFileScanner( creator, self.dirs,
                                   force_params_dict=self.optD['param_dict'],
                                   spectype=self.opts.scan_type )

        plug = import_plugin_module( rtconfig )
        self.rtdata.setUserPlugin( plug )

        testfilter = TestFilter( rtconfig, plug )
        tsel = TestSelector( test_dir, testfilter, creator )

        plat = self.rtdata.getPlatformObject()
        tcache = construct_runtime_lookup_cache( plat )
        timehandler = TimeHandler( plug,
                                   self.opts.dash_T,
                                   self.opts.timeout_multiplier,
                                   self.opts.max_timeout,
                                   tcache )

        namer = BatchFileNamer( test_dir )
        self.tlm = TestListManager( namer=namer,
                                    tctor=self.rtdata.getTestConstructor(),
                                    scanner=scanner,
                                    selector=tsel,
                                    timehandler=timehandler )


def import_plugin_module( rtconfig ):
    ""
    import libvvtest.userplugin as userplugin

    try:
        plugmod = userplugin.import_module_by_name( USER_PLUGIN_MODULE_NAME )

    except userplugin.UserPluginError:
        print3( '*** error in user plugin script:',
                str( sys.exc_info()[1] ).strip() )
        print3( '*** user plugin disabled\n' )
        plugmod = None

    plug = userplugin.UserPluginBridge( rtconfig, plugmod )

    return plug


def create_configuration( rtconfig, opts, optD, vvtestdir, configdir ):
    ""
    rtconfig.setAttr( 'vvtestdir', vvtestdir )

    if optD['onopts']:
        rtconfig.setAttr( 'onopts', optD['onopts'] )
    if optD['offopts']:
        rtconfig.setAttr( 'offopts', optD['offopts'] )

    if opts.bin_dir:
        rtconfig.setAttr( 'exepath', opts.bin_dir )

    rtconfig.setAttr( 'configdir', configdir )

    rtconfig.setAttr( 'refresh', not opts.dash_m )
    rtconfig.setAttr( 'postclean', opts.postclean == True )

    if opts.dash_T != None:
        rtconfig.setAttr( 'timeout', opts.dash_T )
    if opts.timeout_multiplier != None:
        rtconfig.setAttr( 'multiplier', opts.timeout_multiplier )

    rtconfig.setAttr( 'preclean', not opts.dash_m )
    rtconfig.setAttr( 'analyze', opts.analyze == True )
    rtconfig.setAttr( 'logfile', not opts.dash_L )

    if opts.test_args:
        argL = []
        for args in opts.test_args:
            argL.extend( shlex.split( args ) )
        rtconfig.setAttr( 'testargs', argL )


class RuntimeData:

    def __init__(self, exepath):
        """
        'exepath' is the absolute path to vvtest (without following soft links)
        """
        self.exepath = exepath

    def getVvtestPath(self): return self.exepath

    def setRuntimeInfo(self, rtinfo): self.rtinfo = rtinfo
    def getRuntimeInfo(self): return self.rtinfo

    def setPlatformObject(self, platobj): self.plat = platobj
    def getPlatformObject(self): return self.plat

    def setRuntimeConfig(self, rtconfig): self.rtconfig = rtconfig
    def getRuntimeConfig(self): return self.rtconfig

    def setUserPlugin(self, plugin): self.plugin = plugin
    def getUserPlugin(self): return self.plugin

    def setTestResultsDir(self, test_dir): self.test_dir = test_dir
    def getTestResultsDir(self): return self.test_dir

    def setRestartMode(self, is_restart): self.is_restart = is_restart
    def isRestartMode(self):
        """
        True if the CWD is within an existing test results directory
        """
        return self.is_restart

    def setPermissionsObject(self, opts, optD):
        self.perms = make_PermissionSetter( self.test_dir, opts.perms )
    def getPermissionsObject(self): return self.perms

    def setResultsWriter(self, writer): self.results_writer = writer
    def getResultsWriter(self): return self.results_writer

    def setTestConstructor(self, tctor): self.tctor = tctor
    def getTestConstructor(self): return self.tctor


def construct_platform_instance( vvtestdir, opts, optD ):
    ""
    import libvvtest.vvplatform as vvplatform

    plat = vvplatform.create_Platform_instance(
                vvtestdir,
                opts.plat, opts.batch,
                optD['platopt_dict'],  # --platopt
                opts.dash_e,
                opts.dash_n,
                opts.dash_N,
                opts.devices,
                opts.max_devices,
                optD['onopts'],        # -o
                optD['offopts'] )      # -O

    return plat


def construct_RuntimeConfig( opts, optD ):
    ""
    from libvvtest.RuntimeConfig import RuntimeConfig

    rtconfig = RuntimeConfig()

    rtconfig.setPlatformExpression( optD['platform_expr'] )
    if opts.dash_A:
        rtconfig.applyPlatformExpression( False )
    rtconfig.setKeywordExpression( optD['keyword_expr'] )
    rtconfig.setParameterExpression( optD['param_list'] )
    rtconfig.setIncludeTDD( opts.include_tdd == True )
    rtconfig.setFileSearch( optD['search_regexes'], search_fnmatch )
    rtconfig.setRuntimeRange( opts.tmin, opts.tmax )
    rtconfig.setRuntimeSum( opts.tsum )

    return rtconfig


def construct_TestConstructor( opts ):
    ""
    tctor = TestConstructor()

    # magic: check and print error if this fails to cast to int
    if opts.short_xdirs:
        tctor.setShorten( int( opts.short_xdirs ) )

    return tctor


class InformationMode:

    def __init__(self, opts, optD, rtdata, tlm):
        ""
        self.opts = opts
        self.optD = optD
        self.rtdata = rtdata
        self.tlm = tlm

    def run(self, scan_dirs):
        ""
        exitcode = 0

        tlist = self.loadTestList( scan_dirs )

        test_dir = self.rtdata.getTestResultsDir()

        if self.opts.keys:
            self.printKeywordUnion( tlist )

        elif self.opts.files:
            self.printTestFiles( tlist )

        else:
            rtinfo = self.rtdata.getRuntimeInfo()
            self.rtdata.getResultsWriter().info( tlist, rtinfo )
            exitcode = execute.encode_integer_warning( tlist )
            call_user_epilogue( self.rtdata, tlist )

        return exitcode

    def loadTestList(self, scan_dirs):
        ""
        test_dir = self.rtdata.getTestResultsDir()
        rtconfig = self.rtdata.getRuntimeConfig()
        rtinfo = self.rtdata.getRuntimeInfo()
        plat = self.rtdata.getPlatformObject()

        tlist = self.tlm.makeTestList()

        restart = self.rtdata.isRestartMode()
        have_cache = ( restart or os.path.exists( test_dir ) )

        if not restart and ( self.opts.keys or self.opts.files ):
            self.tlm.scanPaths()

        elif have_cache:
            maybe_turn_off_max_size_filtering( self.tlm, False, True,
                                               self.opts, plat )
            rtconfig.applyTDDExpression( False )

            self.tlm.readTests()
            attrs = self.tlm.readResults()
            rtinfo.setInfo( **attrs )

        else:
            print3( 'WARNING: previous test results directory not found,',
                    test_dir )

        self.tlm.prepareActive( remove_new_skips=True )

        return tlist

    def printKeywordUnion(self, tlist):
        ""
        from libvvtest.teststatus import RESULTS_KEYWORDS

        print3( "\nresults keywords:", ' '.join( RESULTS_KEYWORDS ) )
        kd = {}
        for tcase in tlist.getActiveTests():
            for k in tcase.getSpec().getKeywords( include_implicit=False ):
                kd[k] = None
        L = list( kd.keys() )
        L.sort()
        print3( "\ntest keywords: " )
        while len(L) > 0:
            k1 = L.pop(0)
            if len(L) > 0: k2 = L.pop(0)
            else:          k2 = ''
            if len(L) > 0: k3 = L.pop(0)
            else:          k3 = ''
            print3( "  %-20s %-20s %-20s" % (k1,k2,k3) )

    def printTestFiles(self, tlist):
        ""
        D = {}
        for tcase in tlist.getActiveTests():
            d = normpath( tcase.getSpec().getFilename() )
            D[d] = None
        L = list( D.keys() )
        L.sort()
        for d in L:
            print3( d )


class TestListManager:

    def __init__(self, namer, tctor, scanner, selector, timehandler ):
        ""
        self.namer = namer
        self.tctor = tctor
        self.scanner = scanner
        self.selector = selector
        self.timehandler = timehandler

    def getFileNamer(self):
        ""
        return self.namer

    def makeTestList(self, batchid=None):
        ""
        fn = self.namer.getFilePath( batchid )

        self.tlist = TestList.TestList( fn, self.tctor )

        return self.tlist

    def scanPaths(self):
        ""
        self.scanner.scanPaths( self.tlist )

    def applyFilters(self):
        ""
        self.selector.applyPermanentFilters( self.tlist )

    def readTests(self):
        ""
        self.tlist.readTestList()

    def loadTestTimes(self):
        ""
        self.timehandler.load( self.tlist )

    def readResults(self, preserve_skips=False):
        ""
        attrs = self.tlist.readTestResults( preserve_skips=preserve_skips )

        fin = self.tlist.getFinishDate()
        if fin != None:
            attrs['finishepoch'] = fin

        return attrs

    def addBatchFileLinksToTests(self, batchid):
        ""
        qbat = self.namer.getScriptPath( batchid )
        qout = self.namer.getOutputPath( batchid )

        for tcase in self.tlist.getTests():
            tcase.getSpec().addLinkFile( qbat )
            tcase.getSpec().addLinkFile( qout )

    def prepareActive(self, batchid=None, remove_new_skips=False ):
        ""
        self.selector.prepareActiveTests( self.tlist,
                                          apply_filters=(batchid==None),
                                          remove_new_skips=remove_new_skips )

    def prepareForBaseline(self):
        ""
        self.selector.prepareBaselineTests( self.tlist )


def write_test_list_file( tlist, file_attrs, perms ):
    ""
    tlist.stringFileWrite( **file_attrs )
    perms.set( tlist.getFilename() )


##############################################################################

def generateTestList( opts, optD, rtdata, tlm ):
    """
    """
    rtconfig = rtdata.getRuntimeConfig()
    plat = rtdata.getPlatformObject()
    test_dir = rtdata.getTestResultsDir()
    perms = rtdata.getPermissionsObject()
    plugin = rtdata.getUserPlugin()
    rtinfo = rtdata.getRuntimeInfo()

    tlist = tlm.makeTestList()

    tlm.scanPaths()
    tlm.loadTestTimes()
    tlm.applyFilters()

    rtdata.getResultsWriter().prerun( tlist, rtinfo, verbosity=1 )
    print3()

    location.create_test_directory( test_dir, opts.dash_M,
                                    rtinfo.getInfo('curdir'), perms )

    write_cache_file( opts, optD, rtdata, test_dir, plat, perms )

    write_test_list_file( tlist, rtinfo.asDict(), perms )

    runner = TestRunner( test_dir, plat, rtconfig, plugin, perms )

    xlist = TestExecList( tlist, runner )
    xlist.createTestExecs()

    print3( "\nTest directory:", basename( test_dir ) )


def extractTestFiles( scan_type, param_dict, target_dir, rtdata, tlm ):
    """
    Uses all the regular filtering mechanisms to gather tests from a test
    source area and copies the files used for each test into a separate
    directory.
    """
    import libvvtest.extract as extract

    tlist = tlm.makeTestList()

    tlm.scanPaths()
    tlm.loadTestTimes()
    tlm.applyFilters()

    extract.copy_out_test_files( target_dir, tlist.getActiveTests() )


##############################################################################


def construct_runtime_lookup_cache( plat ):
    ""
    from libvvtest.fmtresults import LookupCache

    pname = plat.getName()
    cplr = plat.getCompiler()
    tdir = plat.testingDirectory()

    cache = LookupCache( pname, cplr, tdir )

    return cache


def write_cache_file( opts, optD, rtdata, test_dir, plat, perms ):
    ""
    rtconfig = rtdata.getRuntimeConfig()

    f = pjoin( test_dir, 'test.cache' )
    if not os.path.exists( f ):
        with open( f, "w" ) as fp:
            fp.write( 'VERSION=' + str(version) + '\n' )
            if opts.plat:
                  fp.write( 'PLATFORM=' + opts.plat.strip() + '\n' )
            if rtconfig.getAttr('exepath'):
                fp.write( \
                    'PROJECT=' + abspath( rtconfig.getAttr('exepath') ) + '\n' )
            if optD['onopts']:
                fp.write( 'ONOPTS=' + '+'.join( optD['onopts'] ) + '\n' )
            if optD['offopts']:
                fp.write( 'OFFOPTS=' + '+'.join( optD['offopts'] ) + '\n' )
            if opts.dash_T != None:
                fp.write( 'TIMEOUT=' + str(opts.dash_T).strip() + '\n' )
            if opts.timeout_multiplier != None:
                fp.write( 'TIMEOUT_MULTIPLIER=' + \
                                       str(opts.timeout_multiplier).strip() + '\n' )
            if opts.dash_e:
                fp.write( 'USE_ENV=1\n' )
            if opts.check:
                fp.write( 'CHECK=' + ' '.join( opts.check ) + '\n' )
            if opts.short_xdirs:
                fp.write( 'SHORT_XDIRS='+opts.short_xdirs + '\n' )

        perms.set( abspath(f) )


def read_cache_file( opts, optD, rtconfig, cache_file ):
    ""
    with open( cache_file, "r" ) as fp:
        write_version = 0
        for line in fp.readlines():
            line = line.strip()
            kvpair = line.split( '=', 1 )
            if kvpair[0] == 'VERSION':
                write_version = kvpair[1]
            elif kvpair[0] == 'PLATFORM':
                if not opts.plat:
                    opts.plat = kvpair[1]
            elif kvpair[0] == 'PROJECT':
                # do not replace if the command line contains -j
                if not opts.bin_dir:
                    opts.bin_dir = kvpair[1]
                    rtconfig.setAttr( 'exepath', kvpair[1] )
            elif kvpair[0] == 'ONOPTS':
                optD['onopts'] = kvpair[1].split( '+' )
                rtconfig.setAttr( 'onopts', optD['onopts'] )
            elif kvpair[0] == 'OFFOPTS':
                optD['offopts'] = kvpair[1].split( '+' )
                rtconfig.setAttr( 'offopts', optD['offopts'] )
            elif kvpair[0] == 'TIMEOUT':
                # do not replace if the command line contains -T
                if opts.dash_T == None:
                    opts.dash_T = kvpair[1]
                    rtconfig.setAttr( 'timeout', float(opts.dash_T) )
            elif kvpair[0] == 'TIMEOUT_MULTIPLIER':
                if not opts.timeout_multiplier:
                    opts.timeout_multiplier = float(kvpair[1])
                    rtconfig.setAttr( 'multiplier', opts.timeout_multiplier )
            elif kvpair[0] == 'USE_ENV':
                opts.dash_e = True
            elif kvpair[0] == 'CHECK':
                opts.check = kvpair[1].split()
            elif kvpair[0] == 'SHORT_XDIRS':
                if not opts.short_xdirs:
                    opts.short_xdirs = kvpair[1]


def get_test_cache_file():
    """
    returns None if the current directory is not inside a TestResults directory
    """
    # an environment variable is used to identify vvtest run recursion
    troot = os.environ.get( 'VVTEST_TEST_ROOT', None )

    fn = location.find_vvtest_test_root_file( os.getcwd(), troot, 'test.cache' )

    return fn


def call_user_epilogue( rtdata, tlist ):
    ""
    rdir = rtdata.getTestResultsDir()
    plug = rtdata.getUserPlugin()
    plug.callEpilogue( rdir, tlist.getTests() )


def runTests( opts, optD, rtdata, tlm ):
    """
    Executes a list of tests.
    """
    plat = rtdata.getPlatformObject()
    test_dir = rtdata.getTestResultsDir()
    rtinfo = rtdata.getRuntimeInfo()
    perms = rtdata.getPermissionsObject()

    rtdata.getUserPlugin().callPrologue( rtinfo.getInfo('cmdline') )

    maybe_turn_off_max_size_filtering( tlm, opts.batch, False, opts, plat )
    tlist = tlm.makeTestList()

    check_for_currently_running_vvtest( tlist, opts.force )

    # this variable allows vvtest tests to run vvtest (ie, allows recursion)
    os.environ['VVTEST_TEST_ROOT'] = test_dir

    location.create_test_directory( test_dir, opts.dash_M,
                                    rtinfo.getInfo('curdir'), perms )

    if opts.dash_w:
        pathutil.remove_directory_contents( test_dir )

    write_cache_file( opts, optD, rtdata, test_dir, plat, perms )

    tlm.scanPaths()
    tlm.readTests()
    tlm.loadTestTimes()
    tlm.applyFilters()
    write_test_list_file( tlist, rtinfo.asDict(), perms )
    tlm.readResults( preserve_skips=True )
    tlm.prepareActive()

    tlist.setResultsDate()

    results_writer = rtdata.getResultsWriter()

    results_writer.prerun( tlist, rtinfo, verbosity=0 )
    print3()

    if tlist.numActive() > 0:
        run_test_exec_list( opts, optD, rtdata,
                            tlist, test_dir, perms,
                            results_writer, tlm )

    print3()
    rtinfo.setInfo( finishepoch=time.time() )
    results_writer.postrun( tlist, rtinfo )

    print3( "Test directory:", basename( test_dir ) )

    call_user_epilogue( rtdata, tlist )

    return execute.encode_integer_warning( tlist )


def maybe_turn_off_max_size_filtering( tlman, isbatch, isrestart, opts, plat ):
    """
    Platform sets max num processors (CPU cores):
        - uses -N or a plugin value
        - if neither of those, then it probes for a max
        - if the probe fails, it defaults to the value 4

    Platform sets max num devices (GPUs):
        - uses --max-devices or a plugin value
        - if neither of those, it uses the value of --devices
        - otherwise it defaults to zero
    """
    cpu = True
    dev = True

    if isrestart:
        if opts.dash_N == None:
            cpu = False
        if opts.max_devices == None:
            dev = False

    elif isbatch:
        if opts.dash_N == None and plat.getPluginMaxProcs() == None:
            cpu = False

    # magic: maybe use setter on selector to apply max'es
    rtconfig = tlman.selector.tfilter.rtconfig
    if not cpu:
        rtconfig.applyMaxProcsExpression( False )
    if not dev:
        rtconfig.applyMaxDevicesExpression( False )


def check_for_currently_running_vvtest( tlist, optforce ):
    ""
    if not optforce and not tlist.resultsFileIsMarkedFinished():
        raise FatalError( 'tests are currently running in another process\n'
            '    (or a previous run was killed); use --force to run anyway' )


def get_output_verbosity_integer( dash_v ):
    ""
    if dash_v:
        verb = dash_v
    else:
        verb = 0

    return verb


def information_mode( opts ):
    ""
    return opts.dash_i or opts.keys or opts.files


def need_console_output( opts ):
    ""
    if information_mode( opts ):
        if opts.html or opts.junit or opts.gitlab or \
           opts.save_results or opts.cdash:
            return False

    return True


def construct_results_writers( opts, optD, test_dir, perms, platobj ):
    ""
    import libvvtest.resultsout as resultsout

    writers = resultsout.ResultsWriters()

    if need_console_output( opts ):
        conobj = construct_console_writer( test_dir, opts, optD )
        writers.addWriter( conobj )

    if opts.qsub_id == None:

        if opts.html:
            htmlobj = construct_html_writer( test_dir, opts, optD, perms )
            writers.addWriter( htmlobj )

        if opts.junit:
            junitobj = construct_junit_writer( test_dir, opts, optD, perms )
            writers.addWriter( junitobj )

        if opts.gitlab:
            wr = construct_gitlab_writer( test_dir, opts, optD, perms )
            writers.addWriter( wr )

        if opts.cdash:
            wr = construct_cdash_writer( test_dir, opts, optD, perms )
            writers.addWriter( wr )

        if opts.save_results:
            wr = construct_testlist_writer( test_dir, opts, optD, perms, platobj )
            writers.addWriter( wr )

    return writers


def construct_console_writer( test_dir, opts, optD ):
    ""
    import libvvtest.consolewriter as consolewriter

    verb = get_output_verbosity_integer( opts.dash_v )

    conobj = consolewriter.ConsoleWriter( sys.stdout, test_dir, verb )

    conobj.setSortingSpecification( optD['sort_letters'] )

    return conobj


def construct_html_writer( test_dir, opts, optD, perms ):
    ""
    import libvvtest.htmlwriter as htmlwriter

    htmlobj = htmlwriter.HTMLWriter( perms, opts.html, test_dir )

    return htmlobj


def construct_junit_writer( test_dir, opts, optD, perms ):
    ""
    import libvvtest.junitwriter as junitwriter

    junitobj = junitwriter.JUnitWriter( perms, opts.junit, test_dir )

    junitobj.setOutputDate( opts.results_date )

    return junitobj


def construct_gitlab_writer( test_dir, opts, optD, perms ):
    ""
    import libvvtest.gitlabwriter as gitlabwriter

    gitlabobj = gitlabwriter.GitLabWriter( opts.gitlab, test_dir, perms )

    gitlabobj.setSortingSpecification( optD['sort_letters'] )
    gitlabobj.setOutputDate( opts.results_date )
    gitlabobj.setNamingTags( optD['onopts'], opts.results_tag )

    return gitlabobj


def construct_cdash_writer( test_dir, opts, optD, perms ):
    ""
    import libvvtest.cdashwriter as cdashwriter
    import cdashutil

    cdashobj = cdashwriter.CDashWriter( test_dir, perms )

    cdashobj.setCDashFormatter( cdashutil.TestResultsFormatter,
                                cdashutil.FileSubmitter )

    err = cdashobj.initialize( opts.cdash,
                               project=opts.cdash_project,
                               datestamp=opts.results_date,
                               options=optD['onopts'],
                               tag=opts.results_tag )

    if err:
        raise FatalError( err )

    return cdashobj


def construct_testlist_writer( test_dir, opts, optD, perms, platobj ):
    ""
    import libvvtest.listwriter as listwriter

    todir = get_testing_directory( opts, platobj )

    if not listwriter.is_target_like_scp( todir ):
        todir = normpath( abspath( todir ) )

    wlistobj = listwriter.ListWriter( perms, todir, test_dir )

    wlistobj.setOutputDate( opts.results_date )
    wlistobj.setNamingTags( optD['onopts'], opts.results_tag )

    return wlistobj


def get_testing_directory( opts, platobj ):
    ""
    if type( opts.save_results ) == type(''):
        tdir = opts.save_results
    else:
        tdir = platobj.testingDirectory()

    if not tdir:
        raise FatalError( 'failed to determine --save-results directory' )

    return tdir


def run_test_exec_list( opts, optD, rtdata,
                        tlist, test_dir, perms,
                        results_writer, tlm ):
    ""
    rtconfig = rtdata.getRuntimeConfig()
    plat = rtdata.getPlatformObject()
    plugin = rtdata.getUserPlugin()
    rtinfo = rtdata.getRuntimeInfo()

    runner = TestRunner( test_dir, plat, rtconfig, plugin, perms )

    xlist = TestExecList( tlist, runner )
    xlist.createTestExecs( check_dependencies=(opts.qsub_id == None) )

    tlrun = execute.TestListRunner( test_dir, tlist, xlist, perms,
                                    rtinfo, results_writer, plat )

    if not opts.batch:
        tlrun.runDirect( opts.qsub_id )

    else:
        namer = tlm.getFileNamer()
        batch = create_Batcher( opts, optD, rtdata, namer,
                                tlist, xlist, test_dir, plat, perms )
        tlrun.runBatch( batch )


def create_Batcher( opts, optD, rtdata, namer,
                    tlist, xlist, test_dir, plat, perms ):
    ""
    import libvvtest.batchutils as batchutils
    import batch.batching as batching
    from batch.qinterface import BatchQueueInterface

    assert opts.qsub_id == None

    batchitf = BatchQueueInterface()
    plat.initializeBatchSystem( batchitf )

    qsublimit = opts.batch_limit
    if qsublimit == None:
        qsublimit = plat.getDefaultQsubLimit()

    vvtestcmd = vvtest_command_line_for_batch( opts, optD,
                                               rtdata.getVvtestPath(),
                                               rtdata.getRuntimeConfig() )

    check_interval, check_timeout = determine_job_check_intervals()
    jobhandler = batching.BatchJobHandler( check_interval, check_timeout,
                                           batchitf, namer )

    tctor = rtdata.getTestConstructor()

    batch = batchutils.Batcher( vvtestcmd,
                                tlist, xlist, perms,
                                qsublimit,
                                opts.batch_length,
                                opts.max_timeout,
                                namer, jobhandler,
                                tctor )

    return batch


def determine_job_check_intervals():
    """
    allow these values to be set by environment variable, mainly for
    unit testing; if setting these is needed more regularly then a
    command line option should be added
    """
    check_interval = int( os.environ.get( 'VVTEST_BATCH_CHECK_INTERVAL', 30 ) )
    check_timeout = int( os.environ.get( 'VVTEST_BATCH_CHECK_TIMEOUT', 5*60 ) )

    return check_interval, check_timeout


def vvtest_command_line_for_batch( opts, optD, vvtestpath, rtconfig ):
    ""
    cmd = sys.executable + ' ' + vvtestpath

    if opts.dash_e: cmd += ' -e'
    if opts.dash_m: cmd += ' -m'
    if opts.postclean: cmd += ' -C'
    if opts.analyze: cmd += ' -a'

    cmd += ' -n 1'  # force sequential batch execution

    for cfgdir in rtconfig.getAttr('configdir'):
        cmd += ' --config='+cfgdir

    cmd += ' --plat '+rtconfig.getPlatformName()

    if optD['platopt_dict']:
        for k,v in optD['platopt_dict'].items():
            if v:
                cmd += ' --platopt ' + k + '=' + v
            else:
                cmd += ' --platopt ' + k

    if opts.perms:
        cmd += ' --perms '+','.join( opts.perms )

    for arg in rtconfig.getAttr('testargs'):
        cmd += ' --test-args="'+arg+'"'

    return cmd


def restartTests( opts, optD, rtdata, tlm ):
    ""
    batchid = opts.qsub_id
    plat = rtdata.getPlatformObject()
    test_dir = rtdata.getTestResultsDir()
    rtconfig = rtdata.getRuntimeConfig()
    rtinfo = rtdata.getRuntimeInfo()

    # this variable allows vvtest tests to run vvtest (ie, allows recursion)
    os.environ['VVTEST_TEST_ROOT'] = test_dir

    if batchid == None:
        rtdata.getUserPlugin().callPrologue( rtinfo.getInfo('cmdline') )

    maybe_turn_off_max_size_filtering( tlm, opts.batch, True, opts, plat )
    tlist = tlm.makeTestList( opts.qsub_id )

    tlm.readTests()
    tlm.readResults()

    check_for_currently_running_vvtest( tlist, opts.force )

    if batchid == None:
        tlist.setResultsDate()
        tlm.loadTestTimes()
    else:
        tlm.addBatchFileLinksToTests( batchid )

    rtconfig.applyTDDExpression( False )

    tlm.prepareActive( batchid=opts.qsub_id )

    perms = rtdata.getPermissionsObject()

    perms.set( tlist.getFilename() )

    results_writer = rtdata.getResultsWriter()

    results_writer.prerun( tlist, rtinfo, verbosity=0 )
    print3()

    if tlist.numActive() > 0:
        run_test_exec_list( opts, optD, rtdata,
                            tlist, test_dir, perms,
                            results_writer, tlm )

    print3()
    rtinfo.setInfo( finishepoch=time.time() )
    results_writer.postrun( tlist, rtinfo )

    if batchid == None:
        call_user_epilogue( rtdata, tlist )

    return execute.encode_integer_warning( tlist )


def baselineTests( opts, optD, rtdata, tlm ):
    ""
    rtconfig = rtdata.getRuntimeConfig()
    plat = rtdata.getPlatformObject()
    test_dir = rtdata.getTestResultsDir()
    plugin = rtdata.getUserPlugin()
    rtinfo = rtdata.getRuntimeInfo()

    tlist = tlm.makeTestList()

    tlm.readTests()
    tlm.readResults()

    # if the keyword expression does not include a results keyword, then
    # add the 'diff' keyword so that only diffs are rebaselined by default
    rtconfig.addResultsKeywordExpression( 'diff' )

    tlm.prepareForBaseline()

    rtdata.getResultsWriter().prerun( tlist, rtinfo, verbosity=1 )
    print3()

    if tlist.numActive() > 0:

        perms = rtdata.getPermissionsObject()
        runner = TestRunner( test_dir, plat, rtconfig, plugin, perms )

        xlist = TestExecList( tlist, runner )
        xlist.createTestExecs()

        execute.run_baseline( xlist, plat )


###########################################################################

def print3( *args ):
    ""
    sys.stdout.write( ' '.join( [ str(x) for x in args ] ) + os.linesep )
    sys.stdout.flush()


###########################################################################

def check_for_bootstrap_file( exepath ):
    """
    if vvtest_bootstrap.py exists in the same directory as vvtest,
    then import it (which may set os.environ variables)
    """
    try:
        import vvtest_bootstrap

    except ImportError:
        # to allow for vvtest to be a soft link to an installed vvtest area,
        # look for a bootstrap file in the directory containing the soft link
        bindir = dirname( exepath )
        boot = pjoin( bindir, 'vvtest_bootstrap.py' )
        if os.path.exists( boot ):
            sys.path.append( bindir )
            import vvtest_bootstrap


def insert_configdir_into_sys_path( vvtestdir, configdirs ):
    ""
    dL = [ normpath(d) for d in configdirs ]

    d = normpath( pjoin( vvtestdir, 'config' ) )
    if d not in dL:
        dL.append( d )

    dL.reverse()
    for d in dL:
        sys.path.insert( 1, d )


def make_PermissionSetter( test_dir, optperms ):
    ""
    if optperms:
        from libvvtest.permsetter import PermissionSetter
        perms = PermissionSetter( test_dir, optperms )

    else:
        class DummyPermissionSetter:
            def __init__(self): pass
            def set(self, path): pass
            def recurse(self, path): pass

        perms = DummyPermissionSetter()

    return perms


##############################################################################

def get_vvtest_directory():
    ""
    # if vvtest is a soft link, this will follow it
    d = sys.path[0]
    if not d:                  d = os.getcwd()
    elif not os.path.isabs(d): d = abspath(d)
    return d


def adjust_sys_path_for_shared_modules( vvtestdir ):
    ""
    trigdir = normpath( pjoin( vvtestdir, 'trig' ) )

    if os.path.isdir( trigdir ):
        if trigdir not in sys.path:
            sys.path.insert( 1, trigdir )
    else:
        raise FatalError( '*** vvtest error: '
                          'failed to find "trig" directory for imports' )


def main():
    ""
    exepath = normpath( abspath( sys.argv[0] ) )
    vvtestdir = get_vvtest_directory()

    adjust_sys_path_for_shared_modules( vvtestdir )

    try:
        main_entry = MainEntry( sys.argv, vvtestdir, exepath )
        main_entry.constructObjects()

        exitstat = main_entry.execute()
        if exitstat:
            return exitstat

    except FatalError as e:
        sys.stderr.write( '*** vvtest error: '+str(e)+'\n' )
        return 1


if __name__ == '__main__':
    try:
        x = main()
    except KeyboardInterrupt:
        x = 1
    sys.exit(x)
