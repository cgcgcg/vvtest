#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import join as pjoin
from os.path import dirname, abspath, normpath, basename
import time
import shlex
import platform

try:
    from shlex import quote
except Exception:
    from pipes import quote


from libvvtest.execlist import TestExecList
from libvvtest.exechandler import ExecutionHandler
import libvvtest.pathutil as pathutil
from libvvtest.errors import FatalError
import libvvtest.location as location
import libvvtest.execute as execute
import libvvtest.TestList as TestList


version = '1.5'

search_fnmatch = ['*.inp','*.apr','*.i']

USER_PLUGIN_MODULE_NAME = 'vvtest_user_plugin'

windows_platform = platform.uname()[0].lower().startswith('win')


class RuntimeData:
    def __init__(self, curdir, exepath):
        ""
        self.curdir  = curdir   # current working directory at vvtest startup
        self.exepath = exepath  # path to vvtest (without following soft link)

        self.loc            = None   # Locator object
        self.userconfig     = None   # list of user config directories
        self.testdir        = None   # top level test execution directory
        self.cash           = None   # CacheFileHandler object
        self.rtinfo         = None   # RuntimeInfo object
        self.rtconfig       = None   # RuntimeConfig object
        self.plat           = None   # Platform object
        self.plugin         = None   # UserPluginBridge object
        self.isrestart      = False  # True if inside a test results tree
        self.perms          = None   # Permissions object
        self.results_writer = None   # ResultsWriters object
        self.tcasefactory   = None   # TestCaseFactory object
        self.creator        = None   # TestCreator object
        self.scanner        = None   # TestFileScanner object
        self.selector       = None   # TestSelector object
        self.tlm            = None   # TestListManager object


def construct_vvtest( argv, vvtestdir, exepath ):
    """
    'vvtestdir' is the (real) directory containing the vvtest script
    """
    import libvvtest.cmdline as cmdline

    curdir = os.getcwd()
    start_epoch = time.time()

    rtdata = RuntimeData( curdir, exepath )

    check_load_bootstrap_file( curdir, exepath )

    # this may call sys.exit (for help or errors)
    opts, optD, scandirs = \
        cmdline.parse_command_line( argv[1:], version )

    configdirs = construct_locator_and_cache_handler( rtdata, opts, optD, vvtestdir )
    insert_configdirs_into_sys_path( configdirs )
    construct_runtime_config( rtdata, opts, optD )
    process_cache_file( rtdata, opts, optD )
    construct_runtime_info( rtdata, argv, vvtestdir, start_epoch )
    create_configuration( rtdata.rtconfig, opts, optD, vvtestdir, configdirs )

    construct_platform( rtdata, opts, optD )
    compute_testing_directory( rtdata, opts, optD )
    construct_permission_setter( rtdata, opts )
    construct_results_writers( rtdata, opts, optD )
    construct_testcase_factory( rtdata )
    construct_testcase_creator( rtdata, opts, optD )
    construct_test_scanner( rtdata, scandirs, opts )
    import_plugin_module( rtdata )
    construct_test_selector( rtdata )
    construct_test_time_handler( rtdata, opts )
    construct_test_list_manager( rtdata )

    return rtdata, opts, optD


def run_vvtest( rtdata, opts, optD ):
    ""
    exitstat = 0

    if information_mode( opts ):
        if opts.show_times:
            output_timings( opts, optD, rtdata )
        else:
            exitstat = information_output( opts, optD, rtdata )

    elif opts.dash_g:
        generate_test_list( opts, optD, rtdata )

    elif opts.rebase or opts.rebase_all:

        if opts.dash_R or opts.dash_w:
            raise FatalError( 'cannot use -R or -w when rebaselining (-b or -B)' )

        baseline_tests( opts, optD, rtdata )

    elif opts.extract:
        extract_test_files( optD['param_dict'], opts.extract, rtdata )

    else:

        if not opts.dash_w and not opts.dash_R:
            # if no results keywords are specified, then add -k notrun/notdone
            rtdata.rtconfig.addResultsKeywordExpression( 'notrun or notdone' )

        if rtdata.isrestart:
            exitstat = restart_tests( opts, optD, rtdata )
        else:
            exitstat = run_tests( opts, optD, rtdata )

    if opts.encode_exit_status:
        return exitstat


def construct_locator_and_cache_handler( rtdata, opts, optD, vvtestdir ):
    ""
    rtdata.loc = location.Locator( rtdata.curdir, opts.dash_M, opts.dash_w )
    rtdata.cash = CacheFileHandler( opts, optD )

    cfile = rtdata.loc.searchForCacheFile()
    if cfile:
        rtdata.cash.readCache( cfile )
        locdirs = rtdata.cash.get( 'LOCATION', None )
        rtdata.loc.setLocation( locdirs )

    envconfig = os.getenv('VVTEST_CONFIGDIR', None )
    rtdata.userconfig = rtdata.loc.getConfigDirs( opts.config, envconfig )

    cfgL = list( rtdata.userconfig )

    d1 = pjoin( dirname(rtdata.exepath), 'config' )
    d2 = pjoin( vvtestdir, 'config' )
    if os.path.isdir(d1):
        cfgL.append( d1 )
        if os.path.isdir(d2) and not os.path.samefile( d1, d2 ):
            cfgL.append( d2 )
    else:
        cfgL.append( d2 )

    return cfgL


def construct_runtime_config( rtdata, opts, optD ):
    ""
    from libvvtest.RuntimeConfig import RuntimeConfig

    rtconfig = RuntimeConfig()

    rtconfig.setKeywordExpression( optD['keyword_expr'] )
    rtconfig.setParameterExpression( optD['param_list'] )
    rtconfig.setIncludeTDD( opts.include_tdd == True )
    rtconfig.setFileSearch( optD['search_regexes'], search_fnmatch )
    rtconfig.setRuntimeRange( opts.tmin, opts.tmax )
    rtconfig.setRuntimeSum( opts.tsum )

    rtdata.rtconfig = rtconfig


def process_cache_file( rtdata, opts, optD ):
    ""
    if rtdata.loc.foundCacheFile():
        is_restart = True
        check_options_not_allowed_for_restart( opts, optD )
        rtdata.cash.processCache( rtdata.rtconfig )
    else:
        is_restart = False

    rtdata.isrestart = is_restart


def check_options_not_allowed_for_restart( opts, optD ):
    ""
    if optD['onopts'] or optD['offopts'] or opts.dash_g:
        raise FatalError( 'the -g, -o, and -O options are not allowed '
                          'in a TestResults directory')

    if optD['param_dict']:
        raise FatalError( 'cannot use -S in a TestResults directory' )

    if opts.dash_g:
        raise FatalError( 'cannot use -g in a TestResults directory' )


def construct_runtime_info( rtdata, argv, vvtestdir, start_epoch ):
    ""
    from libvvtest.runinfo import RuntimeInfo

    rtinfo = RuntimeInfo( startepoch=start_epoch,
                          cmdline=argv,
                          vvtestdir=vvtestdir,
                          curdir=rtdata.curdir )

    rtdata.rtinfo = rtinfo


def create_configuration( rtconfig, opts, optD, vvtestdir, configdirs ):
    ""
    rtconfig.setAttr( 'vvtestdir', vvtestdir )

    if optD['onopts']:
        rtconfig.setAttr( 'onopts', optD['onopts'] )
    if optD['offopts']:
        rtconfig.setAttr( 'offopts', optD['offopts'] )

    if opts.bin_dir:
        rtconfig.setAttr( 'exepath', opts.bin_dir )

    rtconfig.setAttr( 'configdir', configdirs )

    if opts.dash_m:    rtconfig.setAttr( 'preclean', False )
    if opts.postclean: rtconfig.setAttr( 'postclean', True )
    if opts.analyze:   rtconfig.setAttr( 'analyze', True )
    if opts.dash_L:    rtconfig.setAttr( 'logfile', False )

    if opts.test_args:
        argL = []
        for args in opts.test_args:
            argL.extend( shlex.split( args ) )
        rtconfig.setAttr( 'testargs', argL )


def construct_platform( rtdata, opts, optD ):
    ""
    from libvvtest.makeplatform import create_Platform_instance

    mode = 'direct'
    if opts.batch:
        mode = 'batch'
    elif opts.batch_id is not None:
        mode = 'batchjob'

    plat = create_Platform_instance(
                opts.plat, mode,
                optD['platopt_dict'],  # --platopt
                opts.dash_n,
                opts.dash_N,
                opts.devices,
                opts.max_devices,
                optD['onopts'],        # -o
                optD['offopts'] )      # -O

    rtdata.rtconfig.setPlatformName( plat.getName() )

    rtdata.rtconfig.setPlatformExpression( optD['platform_expr'], plat.getName() )
    if opts.dash_A:
        rtdata.rtconfig.applyPlatformExpression( False )

    opL = optD['onopts']
    if plat.getCompiler():
        opL.append( plat.getCompiler() )
    rtdata.rtconfig.setOptionList( opL )

    rtdata.rtconfig.setMaxSize( plat.getMaxSize() )

    rtdata.rtinfo.setInfo( platform=plat.getName(),
                           compiler=plat.getCompiler() )

    rtdata.plat = plat


def compute_testing_directory( rtdata, opts, optD ):
    ""
    if rtdata.loc.foundCacheFile():
        td = rtdata.loc.getTestingDirectory()
    else:
        td = rtdata.loc.computeLocation( opts.run_dir,
                                         optD['onopts'],
                                         optD['offopts'],
                                         rtdata.plat.getName() )

    rtdata.rtinfo.setInfo( rundir=td )
    rtdata.testdir = td


def construct_permission_setter( rtdata, opts ):
    ""
    from libvvtest.permsetter import PermissionSetter

    perms = PermissionSetter( rtdata.testdir, opts.perms )

    rtdata.perms = perms


def construct_testcase_creator( rtdata, opts, optD ):
    ""
    from libvvtest.testcreator import TestCreator

    creator = TestCreator( make_idflags( opts ),
                           rtdata.rtconfig.getPlatformName(),
                           rtdata.rtconfig.getOptionList(),
                           optD['param_dict'] )

    rtdata.creator = creator


def make_idflags( opts ):
    ""
    idflags = {}

    if opts.short_xdirs:
        try:
            nchars = int( opts.short_xdirs )
        except Exception:
            raise FatalError( 'invalid --short-xdirs value: ' + \
                              repr(opts.short_xdirs) )
        idflags['numchars'] = nchars

    if opts.minimal_xdirs:
        idflags['minxdirs'] = True

    return idflags


def construct_testcase_factory( rtdata ):
    ""
    from libvvtest.tcfactory import TestCaseFactory

    nodesize = rtdata.plat.getNodeSize()
    rtdata.tcasefactory = TestCaseFactory( nodesize )


def construct_test_scanner( rtdata, scandirs, opts ):
    ""
    from libvvtest.scanner import TestFileScanner

    if len( scandirs ) == 0:
        # scan current working directory by default
        scandirs.append( '.' )

    scanner = TestFileScanner( rtdata.loc, rtdata.creator, rtdata.tcasefactory,
                               scandirs, specform=opts.scan_type )

    rtdata.scanner = scanner


def import_plugin_module( rtdata ):
    ""
    import libvvtest.userplugin as userplugin

    plugmod,err = userplugin.import_user_plugin( USER_PLUGIN_MODULE_NAME )

    if err:
        print ( '\n'+err.strip() )
        print ( '\n*** user plugin disabled due to error in user plugin module\n' )

    plug = userplugin.UserPluginBridge( rtdata.rtconfig, plugmod )

    rtdata.plugin = plug


def construct_test_selector( rtdata ):
    ""
    from libvvtest.filtering import TestFilter
    from libvvtest.testselector import TestSelector

    testfilter = TestFilter( rtdata.rtconfig, rtdata.plugin )

    tsel = TestSelector( rtdata.testdir, testfilter )

    rtdata.selector = tsel


def construct_test_time_handler( rtdata, opts ):
    ""
    import libvvtest.timehandler as timehandler

    tmo,err = timehandler.parse_timeout_value( opts.dash_T )
    if err:
        raise FatalError( 'Invalid timeout value: '+err )

    mult,err = timehandler.parse_timeout_multiplier( opts.timeout_multiplier )
    if err:
        raise FatalError( 'Invalid timeout multiplier: '+err )

    maxtmo = get_max_timeout( opts.max_timeout )

    tcache = construct_runtime_lookup_cache( rtdata.plat )

    hnd = timehandler.TimeHandler( rtdata.plugin, tmo, mult, maxtmo, tcache )

    rtdata.timehandler = hnd


def get_max_timeout( value ):
    ""
    import libvvtest.timehandler as timehandler

    maxtmo,err = timehandler.parse_max_time( value )
    if err:
        raise FatalError( 'Invalid max timeout value: '+err )

    return maxtmo


def get_total_timeout( value ):
    ""
    import libvvtest.timehandler as timehandler

    totaltime,err = timehandler.parse_max_time( value )
    if err:
        raise FatalError( 'Invalid total timeout value: '+err )

    return totaltime


def construct_runtime_lookup_cache( plat ):
    ""
    from libvvtest.fmtresults import LookupCache

    pname = plat.getName()
    cplr = plat.getCompiler()
    tdir = plat.testingDirectory()

    cache = LookupCache( pname, cplr, tdir )

    return cache


def construct_test_list_manager( rtdata ):
    ""
    from batch.namer import BatchFileNamer
    namer = BatchFileNamer( rtdata.testdir )

    rtdata.tlm = TestListManager( namer=namer,
                                  tcasefactory=rtdata.tcasefactory,
                                  rtinfo=rtdata.rtinfo,
                                  perms=rtdata.perms )


def information_mode( opts ):
    ""
    return opts.dash_i or opts.keys or opts.files


def need_console_output( opts ):
    ""
    if information_mode( opts ):
        if opts.html or opts.junit or opts.gitlab or \
           opts.save_results or opts.cdash:
            return False

    return True


def construct_results_writers( rtdata, opts, optD ):
    ""
    import libvvtest.resultsout as resultsout

    writers = resultsout.ResultsWriters()

    if need_console_output( opts ):
        conobj = construct_console_writer( rtdata.testdir, opts, optD )
        writers.addWriter( conobj )

    if opts.batch_id is None:

        if opts.html:
            htmlobj = construct_html_writer( rtdata.testdir, opts, optD,
                                             rtdata.perms )
            writers.addWriter( htmlobj )

        if opts.junit:
            junitobj = construct_junit_writer( rtdata.testdir, opts, optD,
                                               rtdata.perms )
            writers.addWriter( junitobj )

        if opts.gitlab:
            wr = construct_gitlab_writer( rtdata.testdir, opts, optD,
                                          rtdata.perms )
            writers.addWriter( wr )

        if opts.cdash:
            wr = construct_cdash_writer( rtdata.testdir, opts, optD,
                                         rtdata.perms )
            writers.addWriter( wr )

        if opts.save_results:
            wr = construct_testlist_writer( rtdata, opts, optD,
                                            rtdata.perms, rtdata.plat )
            writers.addWriter( wr )

    rtdata.results_writer = writers


def construct_console_writer( test_dir, opts, optD ):
    ""
    import libvvtest.consolewriter as consolewriter

    verb = get_output_verbosity_integer( opts.dash_v )

    conobj = consolewriter.ConsoleWriter( test_dir, verb )

    conobj.setSortingSpecification( optD['sort_letters'] )

    return conobj


def construct_html_writer( test_dir, opts, optD, perms ):
    ""
    import libvvtest.htmlwriter as htmlwriter

    htmlobj = htmlwriter.HTMLWriter( perms, opts.html, test_dir )

    return htmlobj


def construct_junit_writer( test_dir, opts, optD, perms ):
    ""
    import libvvtest.junitwriter as junitwriter

    junitobj = junitwriter.JUnitWriter( perms, opts.junit, test_dir )

    junitobj.setOutputDate( opts.results_date )

    return junitobj


def construct_gitlab_writer( test_dir, opts, optD, perms ):
    ""
    import libvvtest.gitlabwriter as gitlabwriter

    gitlabobj = gitlabwriter.GitLabWriter( opts.gitlab, test_dir, perms )

    gitlabobj.setSortingSpecification( optD['sort_letters'] )
    gitlabobj.setOutputDate( opts.results_date )
    gitlabobj.setNamingTags( optD['onopts'], opts.results_tag )

    return gitlabobj


def construct_cdash_writer( test_dir, opts, optD, perms ):
    ""
    import libvvtest.cdashwriter as cdashwriter
    import cdashutil

    cdashobj = cdashwriter.CDashWriter( test_dir, perms )

    cdashobj.setFormatter( cdashutil.TestResultsFormatter() )
    cdashobj.setSubmitter( cdashutil.FileSubmitter() )

    err = cdashobj.initialize( opts.cdash,
                               project=opts.cdash_project,
                               datestamp=opts.results_date,
                               options=optD['onopts'],
                               tag=opts.results_tag )

    if err:
        raise FatalError( err )

    return cdashobj


def construct_testlist_writer( rtdata, opts, optD, perms, platobj ):
    ""
    import libvvtest.listwriter as listwriter

    todir = get_testing_directory( opts, platobj )

    if not listwriter.is_target_like_scp( todir ):
        todir = normpath( abspath( todir ) )

    wlistobj = listwriter.ListWriter( rtdata.loc, perms, todir, rtdata.testdir )

    wlistobj.setOutputDate( opts.results_date )
    wlistobj.setNamingTags( optD['onopts'], opts.results_tag )

    return wlistobj


def get_testing_directory( opts, platobj ):
    ""
    if type( opts.save_results ) == type(''):
        tdir = opts.save_results
    else:
        tdir = platobj.testingDirectory()

    if not tdir:
        raise FatalError( 'failed to determine --save-results directory' )

    return tdir


#############################################################################

class TestListManager:

    def __init__(self, namer, tcasefactory, rtinfo, perms):
        ""
        self.tlist = None

        self.namer = namer
        self.tcasefactory = tcasefactory
        self.rtinfo = rtinfo
        self.perms = perms

    def getFileNamer(self):
        ""
        return self.namer

    def getTestList(self):
        ""
        return self.tlist

    def makeTestList(self, batchid=None):
        ""
        fn = self.namer.getFilePath( batchid )

        self.tlist = TestList.TestList( self.tcasefactory, fn )

        return self.tlist

    def readTestList(self):
        ""
        self.tlist.readTestList()

    def readAndMergePreviouslyRunTests(self):
        ""
        fn = self.namer.getFilePath()
        prev_tlist = TestList.TestList( self.tcasefactory, fn )

        attrs = prev_tlist.readTestResults()

        fin = prev_tlist.getFinishDate()
        if fin != None:
            attrs['finishepoch'] = fin

        self.tlist.addTestsWithoutOverwrite( prev_tlist.getTests() )
        self.tlist.copyTestResults( prev_tlist.getTests() )

        return attrs

    def writeTestList(self):
        ""
        attrs = self.rtinfo.asDict()
        fn = self.tlist.stringFileWrite( **attrs )
        self.perms.apply( fn )

    def addBatchFileLinksToTests(self, batchid):
        ""
        qbat = self.namer.getScriptPath( batchid )
        qout = self.namer.getOutputPath( batchid )

        for tcase in self.tlist.getTests():
            tcase.getSpec().addLinkFile( qbat )
            tcase.getSpec().addLinkFile( qout )


##############################################################################

def generate_test_list( opts, optD, rtdata ):
    ""
    tlist = rtdata.tlm.makeTestList()

    rtdata.loc.createTestingDirectory( rtdata.perms )
    rtdata.cash.writeCache( rtdata.loc, rtdata.rtconfig, rtdata.perms )
    rtdata.scanner.scanPaths( tlist )
    rtdata.timehandler.loadExternalRuntimes( tlist.getTests() )
    rtdata.selector.applyPermanentFilters( tlist )
    tlist.connectDependencies()
    rtdata.tlm.writeTestList()

    rtdata.results_writer.prerun( tlist, rtdata.rtinfo, verbosity=1 )
    print3()

    handler = ExecutionHandler( rtdata.perms, rtdata.rtconfig,
                                rtdata.plat, rtdata.plugin,
                                rtdata.loc,
                                symlinks_supported=not windows_platform,
                                fork_supported=not windows_platform,
                                shbang_supported=not windows_platform )

    xlist = TestExecList( tlist, handler )
    xlist.createExecutionDirectories()

    print3( "\nTest directory:", basename( rtdata.testdir ) )


def extract_test_files( param_dict, target_dir, rtdata ):
    """
    Uses all the regular filtering mechanisms to gather tests from a test
    source area and copies the files used for each test into a separate
    directory.
    """
    import libvvtest.extract as extract

    tlist = rtdata.tlm.makeTestList()

    rtdata.scanner.scanPaths( tlist )
    rtdata.tlm.readTestList()
    rtdata.timehandler.loadExternalRuntimes( tlist.getTests() )
    rtdata.selector.applyPermanentFilters( tlist )

    extract.copy_out_test_files( rtdata.loc, target_dir, tlist.getActiveTests() )


def run_tests( opts, optD, rtdata ):
    ""
    rtdata.plugin.callPrologue( rtdata.rtinfo.getInfo('cmdline') )

    tlist = rtdata.tlm.makeTestList()

    check_for_currently_running_vvtest( tlist, opts.force )

    rtdata.loc.createTestingDirectory( rtdata.perms )
    rtdata.cash.writeCache( rtdata.loc, rtdata.rtconfig, rtdata.perms )

    rtdata.scanner.scanPaths( tlist )
    rtdata.tlm.readAndMergePreviouslyRunTests()
    rtdata.timehandler.loadExternalRuntimes( tlist.getTests() )
    rtdata.selector.applyPermanentFilters( tlist )
    rtdata.tlm.writeTestList()
    rtdata.selector.applyRuntimeFilters( tlist )
    rtdata.scanner.completeTestParsing( tlist )
    rtdata.timehandler.setTimeouts( tlist.getTests() )

    tlist.setResultsDate()

    xstat = run_test_exec_list( opts, optD, rtdata )

    print3( "Test directory:", basename( rtdata.testdir ) )

    rtdata.plugin.callEpilogue( rtdata.testdir, tlist.getTests() )

    return xstat


def restart_tests( opts, optD, rtdata ):
    ""
    batchid = opts.batch_id

    if batchid is None:
        rtdata.plugin.callPrologue( rtdata.rtinfo.getInfo('cmdline') )

    adjust_filter_settings_for_restart( opts, rtdata.rtconfig )

    tlist = rtdata.tlm.makeTestList( batchid )

    check_for_currently_running_vvtest( tlist, opts.force )

    if batchid is None:
        rtdata.tlm.readTestList()
        rtdata.tlm.readAndMergePreviouslyRunTests()
        rtdata.timehandler.loadExternalRuntimes( tlist.getTests() )
        rtdata.selector.applyRuntimeFilters( tlist )
        rtdata.scanner.completeTestParsing( tlist )
        rtdata.timehandler.setTimeouts( tlist.getTests() )
        tlist.setResultsDate()
    else:
        rtdata.tlm.readTestList()
        rtdata.tlm.addBatchFileLinksToTests( batchid )
        rtdata.selector.applyRuntimeFilters( tlist, apply_filters=False )
        rtdata.scanner.completeTestParsing( tlist )

    xstat = run_test_exec_list( opts, optD, rtdata )

    if batchid is None:
        rtdata.plugin.callEpilogue( rtdata.testdir, tlist.getTests() )

    return xstat


def baseline_tests( opts, optD, rtdata ):
    ""
    tlist = rtdata.tlm.makeTestList()

    rtdata.tlm.readAndMergePreviouslyRunTests()

    if not opts.rebase_all:
        # if the keyword expression does not include a results keyword, then
        # add the 'diff' keyword so that only diffs are rebaselined by default
        rtdata.rtconfig.addResultsKeywordExpression( 'diff' )

    rtdata.selector.applyRuntimeFilters( tlist )
    rtdata.scanner.completeTestParsing( tlist )
    rtdata.selector.applyBaselineFilter( tlist )
    tlist.connectDependencies( check_dependencies=False )

    rtdata.results_writer.prerun( tlist, rtdata.rtinfo, verbosity=1 )
    print3()

    if tlist.numActive() > 0:

        handler = ExecutionHandler( rtdata.perms, rtdata.rtconfig,
                                    rtdata.plat, rtdata.plugin,
                                    rtdata.loc,
                                    symlinks_supported=not windows_platform,
                                    fork_supported=not windows_platform,
                                    shbang_supported=not windows_platform )

        xlist = TestExecList( tlist, handler )
        xlist.createExecutionDirectories()

        execute.run_baseline( xlist, rtdata.plat )


def information_output( opts, optD, rtdata ):
    ""
    exitcode = 0

    tlist = rtdata.tlm.makeTestList()

    have_cache = ( rtdata.isrestart or os.path.exists( rtdata.testdir ) )

    if not rtdata.isrestart and ( opts.keys or opts.files ):
        rtdata.scanner.scanPaths( tlist )
        rtdata.tlm.readTestList()
        rtdata.timehandler.loadExternalRuntimes( tlist.getTests() )
        rtdata.selector.applyPermanentFilters( tlist )

    elif have_cache:
        adjust_filter_settings_for_restart( opts, rtdata.rtconfig )

        rtdata.tlm.readTestList()
        attrs = rtdata.tlm.readAndMergePreviouslyRunTests()
        rtdata.rtinfo.setInfo( **attrs )

    else:
        print3( 'WARNING: previous test results directory not found,',
                rtdata.testdir )

    rtdata.selector.applyRuntimeFilters( tlist, remove_new_skips=True )
    rtdata.scanner.completeTestParsing( tlist )

    if opts.keys:
        print_keyword_union( tlist )

    elif opts.files:
        print_test_files( tlist )

    else:
        rtdata.results_writer.info( tlist, rtdata.rtinfo )
        exitcode = execute.encode_integer_warning( tlist )
        rtdata.plugin.callEpilogue( rtdata.testdir, tlist.getTests() )

    return exitcode


def output_timings( opts, optD, rtdata ):
    ""
    rtdata.plugin.callPrologue( rtdata.rtinfo.getInfo('cmdline') )
    tlist = rtdata.tlm.makeTestList()

    if not rtdata.isrestart:

        rtdata.scanner.scanPaths( tlist )
        rtdata.tlm.readAndMergePreviouslyRunTests()
        rtdata.timehandler.loadExternalRuntimes( tlist.getTests() )
        rtdata.selector.applyPermanentFilters( tlist )

    else:
        adjust_filter_settings_for_restart( opts, rtdata.rtconfig )

        rtdata.tlm.readAndMergePreviouslyRunTests()
        rtdata.timehandler.loadExternalRuntimes( tlist.getTests() )

    rtdata.selector.applyRuntimeFilters( tlist )
    rtdata.scanner.completeTestParsing( tlist )
    rtdata.timehandler.setTimeouts( tlist.getTests() )
    tlist.setResultsDate()

    cwriter = construct_console_writer( rtdata.testdir, opts, optD )
    cwriter.timings( tlist )


def adjust_filter_settings_for_restart( opts, rtconfig ):
    ""
    if opts.dash_N is None:
        # no max procs filter unless -N was given on command line
        rtconfig.applyMaxProcsExpression( False )

    if opts.max_devices is None:
        # no max devices filter unless --max-devices was given on command line
        rtconfig.applyMaxDevicesExpression( False )

    rtconfig.applyTDDExpression( False )


##############################################################################


class CacheFileHandler:

    def __init__(self, opts, optD):
        ""
        self.opts = opts
        self.optD = optD

        self.content = {}

    def writeCache(self, loc, rtconfig, perms):
        ""
        fname = pjoin( loc.getTestingDirectory(), 'vvtest.cache' )

        with open( fname, "w" ) as fp:
            fp.write( 'VERSION=' + str(version) + '\n' )
            if self.opts.plat:
                  fp.write( 'PLATFORM=' + self.opts.plat.strip() + '\n' )
            if rtconfig.getAttr('exepath'):
                fp.write( 'PROJECT=' + rtconfig.getAttr('exepath') + '\n' )
            if self.optD['onopts']:
                fp.write( 'ONOPTS=' + '+'.join( self.optD['onopts'] ) + '\n' )
            if self.optD['offopts']:
                fp.write( 'OFFOPTS=' + '+'.join( self.optD['offopts'] ) + '\n' )
            if self.opts.dash_T != None:
                fp.write( 'TIMEOUT=' + str(self.opts.dash_T) + '\n' )
            if self.opts.timeout_multiplier != None:
                fp.write( 'TIMEOUT_MULTIPLIER=' + \
                                str(self.opts.timeout_multiplier).strip() + '\n' )
            if self.opts.short_xdirs:
                fp.write( 'SHORT_XDIRS='+self.opts.short_xdirs + '\n' )
            fp.write( 'LOCATION='+repr(loc.getLocation())+'\n' )

        perms.apply( abspath(fname) )

    def readCache(self, cache_file_name):
        ""
        with open( cache_file_name, "r" ) as fp:
            for line in fp.readlines():
                line = line.strip()
                kvpair = line.split( '=', 1 )
                if len(kvpair) == 2 and kvpair[0].strip() and kvpair[1].strip():
                    self.content[ kvpair[0].strip() ] = kvpair[1].strip()

    def get(self, varname, *default):
        ""
        if len(default) > 0:
            if varname in self.content:
                return eval( self.content[varname] )
            else:
                return default[0]
        else:
            return self.content[varname]

    def processCache(self, rtconfig):
        ""
        write_version = 0
        for name,value in self.content.items():
            if name == 'VERSION':
                write_version = value
            elif name == 'PLATFORM':
                if not self.opts.plat:
                    self.opts.plat = value
            elif name == 'PROJECT':
                # do not replace if the command line contains -j
                if not self.opts.bin_dir:
                    self.opts.bin_dir = value
                    rtconfig.setAttr( 'exepath', value )
            elif name == 'ONOPTS':
                self.optD['onopts'] = value.split( '+' )
                rtconfig.setAttr( 'onopts', self.optD['onopts'] )
            elif name == 'OFFOPTS':
                self.optD['offopts'] = value.split( '+' )
                rtconfig.setAttr( 'offopts', self.optD['offopts'] )
            elif name == 'TIMEOUT':
                # do not replace if the command line contains -T
                if self.opts.dash_T == None:
                    self.opts.dash_T = value
            elif name == 'TIMEOUT_MULTIPLIER':
                if not self.opts.timeout_multiplier:
                    self.opts.timeout_multiplier = value
            elif name == 'SHORT_XDIRS':
                if not self.opts.short_xdirs:
                    self.opts.short_xdirs = value


def check_for_currently_running_vvtest( tlist, optforce ):
    ""
    if not optforce and not tlist.resultsFileIsMarkedFinished():
        raise FatalError( 'tests are currently running in another process\n'
            '    (or a previous run was killed); use --force to run anyway' )


def get_output_verbosity_integer( dash_v ):
    ""
    if dash_v:
        verb = dash_v
    else:
        verb = 0

    return verb


def print_keyword_union( tlist ):
    ""
    from libvvtest.teststatus import RESULTS_KEYWORDS

    print3( "\nresults keywords:", ' '.join( RESULTS_KEYWORDS ) )
    kd = {}
    for tcase in tlist.getActiveTests():
        for k in tcase.getSpec().getKeywords( include_implicit=False ):
            kd[k] = None
    L = list( kd.keys() )
    L.sort()
    print3( "\ntest keywords: " )
    while len(L) > 0:
        k1 = L.pop(0)
        if len(L) > 0: k2 = L.pop(0)
        else:          k2 = ''
        if len(L) > 0: k3 = L.pop(0)
        else:          k3 = ''
        print3( "  %-20s %-20s %-20s" % (k1,k2,k3) )


def print_test_files( tlist ):
    ""
    D = {}
    for tcase in tlist.getActiveTests():
        d = normpath( tcase.getSpec().getFilename() )
        D[d] = None
    L = list( D.keys() )
    L.sort()
    for d in L:
        print3( d )


def run_test_exec_list( opts, optD, rtdata ):
    ""
    tlist = rtdata.tlm.getTestList()

    tlist.connectDependencies( check_dependencies=(opts.batch_id is None) )

    rtdata.results_writer.prerun( tlist, rtdata.rtinfo, verbosity=0 )
    print3()

    xstat = 0

    if tlist.numActive() > 0:

        # this variable allows vvtest tests to run vvtest (ie, allows recursion)
        os.environ['VVTEST_TEST_ROOT'] = rtdata.testdir

        handler = ExecutionHandler( rtdata.perms, rtdata.rtconfig,
                                    rtdata.plat, rtdata.plugin,
                                    rtdata.loc,
                                    symlinks_supported=not windows_platform,
                                    fork_supported=not windows_platform,
                                    shbang_supported=not windows_platform )

        xlist = TestExecList( tlist, handler )
        xlist.createExecutionDirectories()

        totaltime = get_total_timeout( opts.total_timeout )

        if not opts.batch:
            tlrun = construct_direct_runner( rtdata, tlist, xlist,
                                             opts.batch_id,
                                             totaltime,
                                             opts.show_progress_bar )
        else:
            tlrun = construct_batch_runner( rtdata, tlist, xlist, totaltime,
                                            opts, optD, opts.show_progress_bar )

        xstat = tlrun.run()

    print3()
    rtdata.rtinfo.setInfo( finishepoch=time.time() )
    rtdata.results_writer.postrun( tlist, rtdata.rtinfo )

    return xstat


def construct_direct_runner( rtdata, tlist, xlist, batch_id, totaltime, show_pogress ):
    ""
    drun = execute.DirectRunner( rtdata.testdir, tlist, xlist, rtdata.perms,
                                 rtdata.rtinfo, rtdata.results_writer,
                                 rtdata.plat, totaltime, show_pogress )

    if batch_id is not None:
        drun.setBatchID( batch_id )

    return drun


def construct_batch_runner( rtdata, tlist, xlist, totaltime, opts, optD, show_progress ):
    ""
    namer = rtdata.tlm.getFileNamer()
    batch = create_Batcher( opts, optD, rtdata, namer,
                            tlist, xlist,
                            rtdata.plat, rtdata.perms )

    brun = execute.BatchRunner( batch, rtdata.testdir, tlist, xlist, rtdata.perms,
                                rtdata.rtinfo, rtdata.results_writer,
                                rtdata.plat, totaltime, show_progress )

    return brun


def create_Batcher( opts, optD, rtdata, namer,
                    tlist, xlist, plat, perms ):
    ""
    import libvvtest.batchutils as batchutils
    import batch.batching as batching
    from batch.qinterface import BatchQueueInterface

    assert opts.batch_id is None

    batchitf = BatchQueueInterface( plat.getNodeSize(),
                                    plat.getAttributes(),
                                    plat.getEnvironment() )

    batchlimit = opts.batch_limit
    if batchlimit == None:
        batchlimit = plat.getDefaultBatchLimit()

    vvtestcmd = vvtest_command_line_for_batch( opts, optD,
                                               rtdata.exepath,
                                               rtdata.rtconfig,
                                               rtdata.userconfig )

    check_interval, check_timeout = determine_job_check_intervals()
    jobhandler = batching.BatchJobHandler( check_interval, check_timeout,
                                           batchitf, namer )

    grouper = batchutils.BatchTestGrouper( tlist, opts.batch_length )

    maxtmo = get_max_timeout( opts.max_timeout )

    batch = batchutils.Batcher( vvtestcmd,
                                tlist, perms,
                                batchlimit, maxtmo,
                                grouper, namer, jobhandler )

    return batch


def determine_job_check_intervals():
    """
    allow these values to be set by environment variable, mainly for
    unit testing; if setting these is needed more regularly then a
    command line option should be added
    """
    check_interval = int( os.environ.get( 'VVTEST_BATCH_CHECK_INTERVAL', 30 ) )
    check_timeout = int( os.environ.get( 'VVTEST_BATCH_CHECK_TIMEOUT', 5*60 ) )

    return check_interval, check_timeout


def vvtest_command_line_for_batch( opts, optD, vvtestpath, rtconfig, userconfig ):
    ""
    cmd = sys.executable + ' ' + quote(vvtestpath)

    if opts.dash_m: cmd += ' -m'
    if opts.postclean: cmd += ' -C'
    if opts.analyze: cmd += ' -a'

    cmd += ' -n 1'  # force sequential batch execution

    for cfgdir in userconfig:
        cmd += ' --config='+quote(cfgdir)

    cmd += ' --plat '+quote(rtconfig.getPlatformName())

    if optD['platopt_dict']:
        for k,v in optD['platopt_dict'].items():
            if v:
                cmd += ' --platopt ' + k + '=' + quote(str(v))
            else:
                cmd += ' --platopt ' + k

    if opts.perms:
        cmd += ' --perms='+quote(','.join( opts.perms ))

    for arg in rtconfig.getAttr('testargs'):
        cmd += ' --test-args='+quote(arg)

    return cmd


###########################################################################

def check_load_bootstrap_file( cwd, exepath ):
    """
    to allow for vvtest to be a soft link to an installed vvtest directory
    tree, look for a bootstrap file in sys.path (which follows soft links)
    then in the directory containing the soft link itself
    """
    bootdir = location.find_sys_directory_with_file( cwd, exepath,
                                                     'vvtest_bootstrap.py' )
    if bootdir:
        try:
            import vvtest_bootstrap
        except ImportError:
            sys.path.append( bootdir )
            import vvtest_bootstrap


def insert_configdirs_into_sys_path( configdirs ):
    ""
    dL = [ normpath(d) for d in configdirs ]

    for d in dL[::-1]:
        sys.path.insert( 1, d )


##############################################################################

def print3( *args ):
    ""
    sys.stdout.write( ' '.join( [ str(x) for x in args ] ) + os.linesep )
    sys.stdout.flush()


def get_vvtest_directory():
    ""
    # if vvtest is a soft link, this will follow it
    d = sys.path[0]
    if not d:
        d = os.getcwd()
    d = normpath( abspath(d) )
    return d


def adjust_sys_path_for_shared_modules( vvtestdir ):
    ""
    trigdir = normpath( pjoin( vvtestdir, 'trig' ) )

    if os.path.isdir( trigdir ):
        if trigdir not in sys.path:
            sys.path.insert( 1, trigdir )
    else:
        raise FatalError( '*** vvtest error: '
                          'failed to find "trig" directory for imports' )


def main():
    ""
    exepath = normpath( abspath( sys.argv[0] ) )
    vvtestdir = get_vvtest_directory()

    adjust_sys_path_for_shared_modules( vvtestdir )

    try:
        rtdata,opts,optD = construct_vvtest( sys.argv, vvtestdir, exepath )
        exitstat = run_vvtest( rtdata, opts, optD )
        if exitstat:
            return exitstat

    except FatalError as e:
        sys.stderr.write( '*** vvtest error: '+str(e)+'\n' )
        return 1


if __name__ == '__main__':
    try:
        x = main()
    except KeyboardInterrupt:
        x = 1
    sys.exit(x)
