#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.paramset as ParameterSet
from libvvtest.paramset import add_parameter_group_to_list_of_dicts
from libvvtest.paramset import accumulate_parameter_group_list
from libvvtest.paramset import contains_parameter_name_value


class Function_add_parameter_group_to_list_of_dicts( vtu.vvtestTestCase ):

    def test_seed_list_with_one_name(self):
        ""
        curL = [{}]
        names = ['A'] ; values = ['a1']
        L = add_parameter_group_to_list_of_dicts( curL, names, values )
        assert len(L) == 1 and len(L[0]) == 1
        assert L[0] == {'A':'a1'}

    def test_seed_list_with_two_names(self):
        ""
        curL = [{}]
        names = ['A','B'] ; values = ['a1','b1']
        L = add_parameter_group_to_list_of_dicts( curL, names, values )
        assert len(L) == 1 and len(L[0]) == 2
        assert L[0] == { 'A':'a1', 'B':'b1' }

    def test_add_another_parameter(self):
        ""
        curL = [ {'A':'a1'} ]
        names = ['B'] ; values = ['b1']
        L = add_parameter_group_to_list_of_dicts( curL, names, values )
        assert len(L) == 1 and len(L[0]) == 2
        assert L[0]['A'] == 'a1'
        assert L[0]['B'] == 'b1'

    def test_add_parameter_makes_new_dicts(self):
        ""
        curL = [ {'A':'a1'} ]
        names = ['B'] ; values = ['b1']
        L = add_parameter_group_to_list_of_dicts( curL, names, values )
        assert len(L) == 1 and len(L[0]) == 2
        assert L[0]['A'] == 'a1'
        assert L[0]['B'] == 'b1'
        assert len(curL[0]) == 1
        assert curL[0]['A'] == 'a1'

    def test_add_another_parameter_group(self):
        ""
        curL = [ {'A':'a1'} ]
        names = ['B','C'] ; values = ['b1','c1']
        L = add_parameter_group_to_list_of_dicts( curL, names, values )
        assert len(L) == 1 and len(L[0]) == 3
        assert L[0]['A'] == 'a1'
        assert L[0]['B'] == 'b1'
        assert L[0]['C'] == 'c1'

    def test_add_parameter_to_length_two_list(self):
        ""
        curL = [ {'A':'a1'}, {'A':'a2'} ]
        names = ['B'] ; values = ['b1']
        L = add_parameter_group_to_list_of_dicts( curL, names, values )
        assert len(L) == 2
        assert len(L[0]) == 2
        assert L[0]['A'] == 'a1'
        assert L[0]['B'] == 'b1'
        assert len(L[1]) == 2
        assert L[1]['A'] == 'a2'
        assert L[1]['B'] == 'b1'


class Function_accumulate_parameter_group_list( vtu.vvtestTestCase ):

    def test_seed_list_for_group(self):
        ""
        curL = [{}]
        L = accumulate_parameter_group_list( curL, ['A'], [['a1']] )
        assert len(L) == 1
        assert L[0] == {'A':'a1'}

    def test_add_second_parameter_group(self):
        ""
        curL = [ {'A':'a1'} ]
        names = ['B'] ; values = [ ['b1'] ]
        L = accumulate_parameter_group_list( curL, names, values )
        assert len(L) == 1
        assert L[0] == { 'A':'a1', 'B':'b1' }

    def test_add_second_parameter_group_with_two_names(self):
        ""
        curL = [ {'A':'a1'} ]
        names = ['B','C'] ; values = [ ['b1','c1'] ]
        L = accumulate_parameter_group_list( curL, names, values )
        assert len(L) == 1 and len(L[0]) == 3
        assert L[0] == { 'A':'a1', 'B':'b1', 'C':'c1' }

    def test_add_second_parameter_group_with_two_values(self):
        ""
        curL = [ {'A':'a1'} ]
        names = ['B','C'] ; values = [ ['b1','c1'], ['b2','c2'] ]
        L = accumulate_parameter_group_list( curL, names, values )
        assert len(L) == 2
        assert len(L[0]) == 3
        assert L[0] == { 'A':'a1', 'B':'b1', 'C':'c1' }
        assert len(L[1]) == 3
        assert L[1] == { 'A':'a1', 'B':'b2', 'C':'c2' }


class ParameterSet_single_parameters( vtu.vvtestTestCase ):

    def test_one_value(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameter( 'A', ['a1'] )

        instL = pset.getInstances()
        assert len(instL) == 1
        assert {'A':'a1'} in instL

    def test_two_values(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameter( 'A', ['a1','a2'] )

        instL = pset.getInstances()
        assert len(instL) == 2
        assert {'A':'a1'} in instL
        assert {'A':'a2'} in instL

    def test_two_parameters(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameter( 'A', ['a1'] )
        pset.addParameter( 'B', ['b1'] )

        instL = pset.getInstances()
        assert len(instL) == 1
        assert instL[0] == { 'A':'a1', 'B':'b1' }

    def test_two_parameters_with_two_values_each(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameter( 'A', ['a1','a2'] )
        pset.addParameter( 'B', ['b1','b2'] )

        instL = pset.getInstances()
        assert len(instL) == 4
        assert { 'A':'a1', 'B':'b1' } in instL
        assert { 'A':'a2', 'B':'b1' } in instL
        assert { 'A':'a1', 'B':'b2' } in instL
        assert { 'A':'a2', 'B':'b2' } in instL

    def test_add_duplicate_parameter_names(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameter( 'A', ['a1','a2'] )
        pset.addParameter( 'B', ['b1','b2'] )
        pset.addParameter( 'A', ['a3'] )

        instL = pset.getInstances()
        assert len(instL) == 2
        assert { 'A':'a3', 'B':'b1' } in instL
        assert { 'A':'a3', 'B':'b2' } in instL


class ParameterSet_group_parameters( vtu.vvtestTestCase ):

    def test_a_group(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameterGroup( ['A'], [ ['a1'] ] )

        instL = pset.getInstances()
        assert len(instL) == 1
        assert {'A':'a1'} in instL

    def test_a_group_with_two_names(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameterGroup( ['A','B'], [ ['a1','b1'] ] )

        instL = pset.getInstances()
        assert len(instL) == 1
        assert {'A':'a1', 'B':'b1'} in instL

    def test_a_single_followed_by_a_group(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameter( 'A', ['a1','a2'] )
        pset.addParameterGroup( ['B','C'], [ ['b1','c1'], ['b2','c2'] ] )

        instL = pset.getInstances()
        assert len(instL) == 4
        assert {'A':'a1', 'B':'b1', 'C':'c1'} in instL
        assert {'A':'a1', 'B':'b2', 'C':'c2'} in instL
        assert {'A':'a2', 'B':'b1', 'C':'c1'} in instL
        assert {'A':'a2', 'B':'b2', 'C':'c2'} in instL

    def test_a_group_followed_by_a_single(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameterGroup( ['B','C'], [ ['b1','c1'], ['b2','c2'] ] )
        pset.addParameter( 'A', ['a1','a2'] )

        instL = pset.getInstances()
        assert len(instL) == 4
        assert {'A':'a1', 'B':'b1', 'C':'c1'} in instL
        assert {'A':'a1', 'B':'b2', 'C':'c2'} in instL
        assert {'A':'a2', 'B':'b1', 'C':'c1'} in instL
        assert {'A':'a2', 'B':'b2', 'C':'c2'} in instL

    def test_add_duplicate_parameter_group_names(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameterGroup( ['B','C'], [ ['b1','c1'], ['b2','c2'] ] )
        pset.addParameter( 'A', ['a1','a2'] )
        pset.addParameterGroup( ['B','C'], [ ['b1','c3'], ['b2','c4'] ] )

        instL = pset.getInstances()
        assert len(instL) == 4
        assert {'A':'a1', 'B':'b1', 'C':'c3'} in instL
        assert {'A':'a1', 'B':'b2', 'C':'c4'} in instL
        assert {'A':'a2', 'B':'b1', 'C':'c3'} in instL
        assert {'A':'a2', 'B':'b2', 'C':'c4'} in instL


class ParameterSet_param_filter( vtu.vvtestTestCase ):

    def test_nothing_filtered_out(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameter( 'A', ['a1','a2'] )
        origL = [] + pset.getInstances()

        pset.applyParamFilter( param_filter_evaluate_to_true )
        instL = pset.getInstances()

        assert lists_are_equal_without_order( origL, instL )

    def test_everything_filtered_out(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameter( 'A', ['a1','a2'] )
        origL = pset.getInstances()
        assert len(origL) > 0

        pset.applyParamFilter( param_filter_evaluate_to_false )
        instL = pset.getInstances()
        assert len(instL) == 0

    def test_filter_everything_out_followed_by_filter_nothing_out(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameter( 'A', ['a1','a2'] )
        origL = [] + pset.getInstances()

        pset.applyParamFilter( param_filter_evaluate_to_false )
        assert len( pset.getInstances() ) == 0

        pset.applyParamFilter( param_filter_evaluate_to_true )
        instL = pset.getInstances()

        assert lists_are_equal_without_order( origL, instL )

    def test_filter_out_x_values(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameter( 'A', ['a','b'] )
        pset.addParameter( 'B', ['x','y'] )
        assert len( pset.getInstances() ) == 4

        pset.applyParamFilter( param_filter_evaluate_exclude_x_values )

        instL = pset.getInstances()
        assert len( instL ) == 2
        assert {'A':'a', 'B':'y'} in instL
        assert {'A':'b', 'B':'y'} in instL


class Function_contains_parameter_name_value( vtu.vvtestTestCase ):

    def test_single_parameter_in_instances_list(self):
        ""
        instL = [{'A':'a1'}]
        names = ['A'] ; values = ['a1']
        b = contains_parameter_name_value( instL, names, values )
        assert b == True

    def test_single_parameter_not_in_instances_list(self):
        ""
        instL = [{'A':'a1'}]
        names = ['A'] ; values = ['a2']
        b = contains_parameter_name_value( instL, names, values )
        assert b == False

    def test_double_parameter_in_instances_list(self):
        ""
        instL = [{'A':'a1', 'B':'b1'}]
        names = ['A','B'] ; values = ['a1','b1']
        b = contains_parameter_name_value( instL, names, values )
        assert b == True

    def test_double_parameter_not_in_instances_list(self):
        ""
        instL = [{'A':'a1', 'B':'b1'}]

        names = ['A','B'] ; values = ['a2','b2']
        b = contains_parameter_name_value( instL, names, values )
        assert b == False

        names = ['A','B'] ; values = ['a1','b2']
        b = contains_parameter_name_value( instL, names, values )
        assert b == False

        names = ['A','B'] ; values = ['a2','b1']
        b = contains_parameter_name_value( instL, names, values )
        assert b == False

    def test_parameter_in_set_of_instances(self):
        ""
        instL = [{'A':'a1'}, {'A':'a2'}]

        names = ['A'] ; values = ['a1']
        b = contains_parameter_name_value( instL, names, values )
        assert b == True

        names = ['A'] ; values = ['a2']
        b = contains_parameter_name_value( instL, names, values )
        assert b == True

        names = ['A'] ; values = ['a3']
        b = contains_parameter_name_value( instL, names, values )
        assert b == False

    def test_double_parameter_in_set_of_instances(self):
        ""
        instL = [ {'A':'a1', 'B':'b1'},
                  {'A':'a2', 'B':'b2'} ]

        names = ['A','B'] ; values = ['a1','b1']
        b = contains_parameter_name_value( instL, names, values )
        assert b == True

        names = ['A','B'] ; values = ['a2','b2']
        b = contains_parameter_name_value( instL, names, values )
        assert b == True

        names = ['A','B'] ; values = ['a1','b2']
        b = contains_parameter_name_value( instL, names, values )
        assert b == False

        names = ['A','B'] ; values = ['a2','b1']
        b = contains_parameter_name_value( instL, names, values )
        assert b == False

    def test_double_parameter_in_multiple_sets_of_instances(self):
        ""
        instL = [ {'A':'a1', 'B':'b1', 'C':'c1'},
                  {'A':'a2', 'B':'b2', 'C':'c1'},
                  {'A':'a1', 'B':'b1', 'C':'c2'},
                  {'A':'a2', 'B':'b2', 'C':'c2'} ]

        names = ['A','B'] ; values = ['a1','b1']
        b = contains_parameter_name_value( instL, names, values )
        assert b == True

        names = ['A','B'] ; values = ['a1','b2']
        b = contains_parameter_name_value( instL, names, values )
        assert b == False

        names = ['A','B'] ; values = ['a2','b2']
        b = contains_parameter_name_value( instL, names, values )
        assert b == True

        names = ['C'] ; values = ['c1']
        b = contains_parameter_name_value( instL, names, values )
        assert b == True

        names = ['C'] ; values = ['c2']
        b = contains_parameter_name_value( instL, names, values )
        assert b == True

        names = ['C'] ; values = ['c3']
        b = contains_parameter_name_value( instL, names, values )
        assert b == False


class ParameterSet_getParameters( vtu.vvtestTestCase ):

    def test_empty_does_not_crash(self):
        ""
        pset = ParameterSet.ParameterSet()
        pD = pset.getParameters()
        assert len(pD) == 0

    def test_single_parameter_names_and_values(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameter( 'A', ['a1','a2','a3'] )

        pD = pset.getParameters()
        assert len(pD) == 1
        assert pD[ ('A',) ] == [ ['a1'], ['a2'], ['a3'] ]

    def test_double_parameter_names_and_values(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameterGroup( ['A','B'], [ ['a1','b1'], ['a2','b2'] ] )

        pD = pset.getParameters()
        assert len(pD) == 1
        assert pD[ ('A','B') ] == [ ['a1','b1'], ['a2','b2'] ]

    def test_single_filtered_parameter_names_and_values(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameter( 'A', ['a1','x','a3'] )
        pset.applyParamFilter( param_filter_evaluate_exclude_x_values )

        pD = pset.getParameters()
        assert len(pD) == 1
        assert pD[ ('A',) ] == [ ['a1'], ['a3'] ]

    def test_double_filtered_parameter_names_and_values(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameterGroup( ['A','B'], [ ['a1','b1'], ['a2','x'] ] )
        pset.applyParamFilter( param_filter_evaluate_exclude_x_values )

        pD = pset.getParameters()
        assert len(pD) == 1
        assert pD[ ('A','B') ] == [ ['a1','b1'] ]

    def test_duplicate_params_and_filtered(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameterGroup( ['A','B'], [ ['a1','b1'], ['a2','x'] ] )
        pset.addParameter( 'C', [ 'x', 'c2', 'c3' ] )
        pset.addParameterGroup( ['A','B'], [ ['x','b1'], ['a2','b2'] ] )

        pset.applyParamFilter( param_filter_evaluate_exclude_x_values )

        pD = pset.getParameters()
        assert len(pD) == 2
        assert pD[ ('A','B') ] == [ ['a2','b2'] ]
        assert pD[ ('C',) ] == [ ['c2'], ['c3'] ]


############################################################################

def param_filter_evaluate_to_true( D ):
    return True

def param_filter_evaluate_to_false( D ):
    return False

def param_filter_evaluate_exclude_x_values( D ):
    """
    Returns False if any value is equal to 'x'.
    """
    for k,v in D.items():
        if v == 'x':
            return False
    return True


def lists_are_equal_without_order( L1, L2 ):
    ""
    ok = True

    if len(L1) == len(L2):

        for val in L1:
            if val not in L2:
                print3( "value", val, "in L1 but not L2" )
                ok = False
                break

        if ok:
            for val in L2:
                if val not in L1:
                    print3( "value", val, "in L2 but not L1" )
                    ok = False
                    break
    else:
        print3( "lists have different length:", len(L1), len(L2) )
        ok = False

    return ok == True


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
