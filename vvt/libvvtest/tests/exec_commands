#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.TestExec as TE
import libvvtest.makecmd as makecmd

from libvvtest.TestSpec import TestSpec
from libvvtest.ParameterSet import ParameterSet


def mkobj( tspec ):
    ""
    return makecmd.MakeScriptCommand( tspec )


class function_make_file_execute_command( vtu.vvtestTestCase ):

    def test_an_executable_script_is_executed_directly(self):
        ""
        os.mkdir( 'rundir' )
        util.writescript( 'ascript', """
            #!/bin/csh
            echo hello
            """ )
        util.writescript( 'subdir/ascript', """
            #!/bin/csh
            echo hello
            """ )
        time.sleep(1)

        cwd = os.getcwd()

        cmdL = makecmd.make_file_execute_command( cwd, 'ascript' )
        assert len(cmdL) == 1 and cmdL[0] == './ascript'

        os.chdir( 'rundir' )

        cmdL = makecmd.make_file_execute_command( cwd, 'subdir/ascript' )
        assert len(cmdL) == 1 and cmdL[0] == './subdir/ascript'

    def test_a_non_executable_file_is_run_using_python(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'ascript', """
            print ( 'hello' )
            """ )
        util.writefile( 'subdir/ascript', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        cwd = os.getcwd()

        cmdL = makecmd.make_file_execute_command( cwd, 'ascript' )
        assert len(cmdL) == 2
        assert cmdL[0] == sys.executable
        assert cmdL[1] == 'ascript'

        os.chdir( 'rundir' )

        cmdL = makecmd.make_file_execute_command( cwd, 'subdir/ascript' )
        assert len(cmdL) == 2
        assert cmdL[0] == sys.executable
        assert cmdL[1] == 'subdir/ascript'

    def test_the_python_to_use_can_be_specified(self):
        ""
        util.writefile( 'ascript', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        cwd = os.getcwd()

        pyexe = '/fake/python'
        cmdL = makecmd.make_file_execute_command( cwd, 'ascript', pyexe )
        assert cmdL[0] == pyexe
        assert cmdL[1] == 'ascript'

    def test_an_executable_abs_file_ignores_srcdir(self):
        ""
        os.mkdir( 'rundir' )
        util.writescript( 'subdir/ascript', """
            #!/bin/csh
            echo hello
            """ )
        abscript = os.path.abspath( 'subdir/ascript' )
        time.sleep(1)

        os.chdir( 'rundir' )

        cmdL = makecmd.make_file_execute_command( '/foo/bar', abscript )
        assert len(cmdL) == 1 and cmdL[0] == abscript

    def test_a_file_ignores_srcdir(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/ascript', """
            print ( 'hello' )
            """ )
        absfile = os.path.abspath( 'subdir/ascript' )
        time.sleep(1)

        os.chdir( 'rundir' )

        cmdL = makecmd.make_file_execute_command( '/foo/bar', absfile )
        assert len(cmdL) == 2
        assert cmdL[0] == sys.executable
        assert cmdL[1] == absfile


class function_make_test_script_command( vtu.vvtestTestCase ):

    def test_an_xml_test_specification_is_hard_coded_to_runscript(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.xml', """
            <rtest name="atest">
            </rtest>""" )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.xml' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_test_script_command()
        assert len(cmdL) > 1
        cmdstr = ' '.join( cmdL )
        assert 'csh' in cmdstr and 'runscript' in cmdstr

    def test_a_script_test_runs_the_script_file(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.vvt' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_test_script_command()
        assert len(cmdL) > 1
        cmdstr = ' '.join( cmdL )
        assert 'python' in cmdstr and 'atest.vvt' in cmdstr


class function_command_from_filename_or_option( vtu.vvtestTestCase ):

    def test_command_from_a_filename_specification(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        util.writescript( 'subdir/auxscript', """
            #!/bin/bash
            echo hello
            """ )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.vvt' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).command_from_filename_or_option( 'auxscript' )
        cmdstr = ' '.join( cmdL )
        assert './auxscript' in cmdstr

    def test_command_from_an_option_specification(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.vvt' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).command_from_filename_or_option( '--foobar' )
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr and '--foobar' in cmdstr


class make_baseline_commands( vtu.vvtestTestCase ):

    def test_make_nominal_baseline_command(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.vvt' )
        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).check_make_script_baseline_command()
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr and '--run-baseline' in cmdstr

    def test_baseline_analyze_command_with_baseline_option(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.vvt' )

        pset = ParameterSet()
        pset.addParameter( 'myparam', ['myvalue'] )
        tspec.setParameterSet( pset )

        tspec.setAnalyzeScript( '--do-analyze' )
        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_baseline_analyze_command()
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr
        assert '--do-analyze' in cmdstr
        assert '--run-baseline' in cmdstr

    def test_baseline_analyze_command_with_baseline_filename(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        util.writefile( 'subdir/atest_bline.py', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.vvt' )

        pset = ParameterSet()
        pset.addParameter( 'myparam', ['myvalue'] )
        tspec.setParameterSet( pset )

        tspec.setAnalyzeScript( '--do-analyze' )
        tspec.setBaselineScript( 'atest_bline.py' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_baseline_analyze_command()
        cmdstr = ' '.join( cmdL )
        assert 'atest_bline.py ' in cmdstr
        assert '--do-analyze' in cmdstr

    def test_baseline_analyze_command_with_baseline_and_analyze_filename(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        util.writefile( 'subdir/atest_analyze.py', """
            print ( 'hello' )
            """ )
        util.writefile( 'subdir/atest_bline.py', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.vvt' )

        pset = ParameterSet()
        pset.addParameter( 'myparam', ['myvalue'] )
        tspec.setParameterSet( pset )

        tspec.setAnalyzeScript( 'atest_analyze.py' )
        tspec.setBaselineScript( 'atest_bline.py' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_baseline_analyze_command()
        cmdstr = ' '.join( cmdL )
        assert 'atest_bline.py' in cmdstr
        assert 'atest_analyze' not in cmdstr

    def test_make_baseline_command_with_analyze_test(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.vvt' )

        pset = ParameterSet()
        pset.addParameter( 'myparam', ['myvalue'] )
        tspec.setParameterSet( pset )

        tspec.setAnalyzeScript( '--do-analyze' )
        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).check_make_script_baseline_command()
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr
        assert '--do-analyze' in cmdstr and '--run-baseline' in cmdstr

    def test_baseline_xml_test_without_script_fragment(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.xml', """
            <rtest name="atest">
            </rtest>""" )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.xml' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).check_make_script_baseline_command()
        assert cmdL == None


class the_core_make_execute_command_function( vtu.vvtestTestCase ):

    def test_xml_test_not_baseline(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.xml', """
            <rtest name="atest">
            </rtest>""" )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.xml' )
        tspec.setBaselineScript( 'echo hello\n' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_base_execute_command( 0 )
        cmdstr = ' '.join( cmdL )
        assert 'runscript' in cmdstr
        assert '--baseline' not in cmdstr

    def test_xml_test_with_baseline(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.xml', """
            <rtest name="atest">
            </rtest>""" )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.xml' )
        tspec.setBaselineScript( 'echo hello\n' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_base_execute_command( 1 )
        cmdstr = ' '.join( cmdL )
        assert 'runscript' in cmdstr
        assert '--baseline' in cmdstr

    def test_script_test_with_baseline(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.vvt' )

        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_base_execute_command( 1 )
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr
        assert '--run-baseline' in cmdstr

    def test_analyze_script_test_no_baseline(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.vvt' )

        pset = ParameterSet()
        pset.addParameter( 'myparam', ['myvalue'] )
        tspec.setParameterSet( pset )

        tspec.setAnalyzeScript( '--do-analyze' )
        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_base_execute_command( 0 )
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr
        assert '--do-analyze' in cmdstr
        assert '--run-baseline' not in cmdstr

    def test_plain_script_test_no_baseline(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.vvt' )

        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_base_execute_command( 0 )
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt' in cmdstr
        assert '--run-baseline' not in cmdstr

    def test_baseline_an_xml_test_without_a_baseline_script_fragment(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.xml', """
            <rtest name="atest">
            </rtest>""" )
        time.sleep(1)

        tspec = TestSpec( 'atest', os.getcwd(), 'subdir/atest.xml' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_base_execute_command( 1 )
        assert cmdL == None

    def test_running_in_a_directory_containing_a_colon(self):
        ""
        util.writefile( 'sub:dir/atest.vvt', """
            import os, sys
            print ( 'before', sys.path )
            import script_util.standard_utilities as util
            print ( 'after', sys.path )
            import vvtest_util as vvt
            for n in ['NAME','TESTID','TESTROOT','SRCDIR']:
                util.print3( n, '=', eval( 'vvt.'+n ) )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( chdir='sub:dir' )
        vrun.assertCounts( total=1, npass=1 )

        assert vrun.countGrepLogs( 'NAME = atest' ) == 1
        assert vrun.countGrepLogs( 'TESTID = atest' ) == 1
        lineL = vrun.greplogs( 'SRCDIR =' )
        assert len( lineL ) == 1
        assert lineL[0].split( ' = ', 1 )[1].strip() == abspath( 'sub:dir' )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
