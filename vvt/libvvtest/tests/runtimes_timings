#!/usr/bin/env python
#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob
import unittest

import testutils as util
from testutils import print3

import TestSpecCreator
from RuntimeConfig import RuntimeConfig

sys.path.insert( 1, os.path.dirname( os.path.dirname( util.testsrcdir ) ) )
import results

class runtimes_and_timings( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_create_and_use_a_runtimes_file(self):
        ""
        util.writefile( "tests/dir1/one.xml", """
            <rtest name="one">
              <execute>
                sleep 1
              </execute>
            </rtest>""")
        util.writefile( "tests/dir1/two.xml", """
            <rtest name="two">
              <execute>
                sleep 2
              </execute>
            </rtest>""")
        util.writefile( "tests/dir2/three.xml", """
            <rtest name="three">
              <execute>
                sleep 3
              </execute>
            </rtest>""")
        time.sleep(1)

        out,np,nd,nf,nn = util.run_vvtest('tests')
        assert np == 3 and nd == 0 and nf == 0 and nn == 0

        tdir = os.path.join( os.getcwd(), util.results_dir() )
        platname = util.platform_name(out)

        # create a test source tree runtimes file but without any test results
        tr = results.TestResults()
        tr.writeRuntimes( 'tests', None )

        # even though a rootrel directory could be determined, no runtime is available
        tst = TestSpecCreator.createTestObjects(
            os.getcwd()+'/tests', 'dir1/one.xml', None, RuntimeConfig() )[0]
        cache = results.LookupCache( platname, 'cplr' )
        tm,tv = cache.getRunTime( tst )
        assert tm == None

        # re-save the testing results (this time the test rootrel can be determined)
        # and create a multiplatform results file
        os.environ['TESTING_DIRECTORY'] = os.path.abspath( 'testing' )
        os.mkdir('testing')
        util.run_vvtest( '-i --save-results' )
        resultsfname = os.path.abspath( glob.glob('testing/results.*')[0] )
        plat,cplr = get_platform_compiler( resultsfname )
        ok,out = util.run_cmd( util.resultspy + ' merge '+resultsfname,
                               directory='testing' )
        assert ok

        # leave the source tree runtimes file empty and use the multiplatform results
        cache = results.LookupCache( plat, cplr, os.path.abspath('testing') )
        tm,tv = cache.getRunTime( tst )
        assert tm != None and tm > 0 and tm < 10

        # populate the test source tree runtimes file
        tr.readResults( resultsfname )
        tr.writeRuntimes( 'tests', None )

        # a time for the test should be found from the source tree runtimes file
        cache = results.LookupCache( platname, 'cplr' )
        tm,tv = cache.getRunTime( tst )
        assert tm != None and tm > 0 and tm < 10

    def test_that_longest_runtimes_are_run_first(self):
        ""
        util.writescript( "tests/AA.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(5)
            """ )
        util.writescript( "tests/BB.vvt", """
            #!/usr/bin/env python
            #VVT: parameterize : planet=mercury mars venus
            #VVT: analyze : --analyze
            import os, sys, time
            import script_util as vvt
            if '--analyze' not in sys.argv:
                if vvt.planet == 'mercury':
                    time.sleep(1)
                elif vvt.planet == 'mars':
                    time.sleep(3)
                elif vvt.planet == 'venus':
                    time.sleep(7)
            else:
                pass  # the analyze test
            """ )
        util.writescript( "tests/CC.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(10)
            """ )
        time.sleep(1)

        # run first to get the timings
        out,np,nd,nf,nn = util.run_vvtest( 'tests' )
        assert np == 6 and nd == 0 and nf == 0 and nn == 0

        tdir = os.path.abspath( util.results_dir() )
        platname = util.platform_name(out)

        # run again one at a time and check the execution order
        out,np,nd,nf,nn = util.run_vvtest( '-n 1 -R tests' )
        assert np == 6 and nd == 0 and nf == 0 and nn == 0

        L = util.grep( out, 'Starting: ' )
        assert len(L) == 6
        assert L[0].split()[1].endswith( os.sep+'CC' )
        assert L[1].split()[1].endswith( os.sep+'BB.planet=venus' )
        assert L[2].split()[1].endswith( os.sep+'AA' )
        assert L[3].split()[1].endswith( os.sep+'BB.planet=mars' )
        assert L[4].split()[1].endswith( os.sep+'BB.planet=mercury' )
        assert L[5].split()[1].endswith( os.sep+'BB' )



    def test_using_timings_file_with_tmin_max(self):
        """
        exercise runtime min/max using a timings file
        """
        util.writescript( "tests/AA.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(1)
            """ )
        util.writescript( "tests/BB.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(3)
            """ )
        util.writescript( "tests/CC.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(7)
            """ )

        platname = self.run_using_timings_file_with_tmin_max( '' )
        if platname in util.nonqueued_platform_names:
            self.run_using_timings_file_with_tmin_max( '--batch' )

    def run_using_timings_file_with_tmin_max(self, opt):
        ""
        util.remove_results()
        if os.path.exists( 'timings' ):
            os.remove( 'timings' )

        # without a runtimes available, all tests should run
        out,np,nd,nf,nn = util.run_vvtest( opt+' --tmax 6 tests' )
        assert np == 3 and nd == 0 and nf == 0 and nn == 0

        tdir = os.path.abspath( util.results_dir() )
        platname = util.platform_name(out)

        # create a timings file
        util.run_cmd( util.resultspy + ' save', directory='tests' )
        util.run_vvtest( '-i --save-results', directory=tdir )
        resultsfname = glob.glob('results.*')[0]
        ok,out = util.run_cmd( util.resultspy + ' merge -x '+resultsfname )
        assert ok

        # select tests based on the timings file
        util.remove_results()
        out,np,nd,nf,nn = util.run_vvtest( opt+' --tmax 6 tests' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        L = util.testlist( out )
        assert len(L) == 2
        assert L[0][0] == 'AA'
        assert L[1][0] == 'BB'

        return platname


########################################################################

def get_platform_compiler( resultsfname ):
    """
    """
    fmt,vers,hdr,nskip = results.read_file_header( resultsfname )
    pn = hdr['PLATFORM']
    cp = hdr['COMPILER']
    return pn,cp


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
