#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import time, glob, shutil
import unittest

import testutils as util
from testutils import print3


class config_tests( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_using_idplatform_in_a_specified_config_directory(self):
        ""
        default_platname = self.using_idplatform_in_a_specified_config_directory( '' )
        if default_platname in util.nonqueued_platform_names:
            self.using_idplatform_in_a_specified_config_directory( '--batch' )

    def using_idplatform_in_a_specified_config_directory(self, opt):
        ""
        util.remove_results()

        util.writefile( "tst.xml", """
            <rtest name="tst">
              <execute> echo "the COMPILER is $COMPILER" </execute>
            </rtest>""" )
        time.sleep(1)

        vrun = util.vvtestRunner( opt )
        default_platname, cplr = check_get_compiler_and_platform( vrun )

        util.writefile( "config/idplatform.py", """
            def platform( opts ):
                return "XBox"
            def compiler( platname, opts ):
                return "BASIC"
            """ )
        util.remove_results()
        time.sleep(1)

        vrun = util.vvtestRunner( opt+' --config config' )
        platname, cplr = check_get_compiler_and_platform( vrun )
        assert platname == "XBox"
        assert cplr == "BASIC"

        util.writefile( "nonsense/idplatform.py", """
            def platform( opts ):
                return "PlayStation"
            def compiler( platname, opts ):
                return "Fortran"
            """ )
        util.remove_results()
        time.sleep(1)

        os.environ['VVTEST_CONFIGDIR'] = 'nonsense'
        vrun = util.vvtestRunner( opt )
        del os.environ['VVTEST_CONFIGDIR']
        platname, cplr = check_get_compiler_and_platform( vrun )
        assert platname == 'PlayStation'
        assert cplr == 'Fortran'

        return default_platname

    def test_get_max_num_processors_from_config(self):
        ""
        util.writescript( 'atest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np=1
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'btest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np=2
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'ctest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np=3
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'dtest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np=4
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        time.sleep(1)

        platname = util.core_platform_name()

        vrun = util.vvtestRunner( '--plat '+platname )
        assert vrun.num_pass > 0

        # only run this test if the number of processors is at least 4
        L = util.grep( vrun.out, 'max procs' )
        assert len(L) == 1
        maxprocs = L[0].split( 'max procs', 1 )[1].strip().lstrip('=').strip()
        maxprocs = int( maxprocs )

        if maxprocs >= 4:

            assert vrun.num_pass == 4
            util.remove_results()

            util.writefile( "config/platform_plugin.py", """
                import os, sys
                def initialize( plat ):
                    plat.setattr( 'maxprocs', 2 )
                """ )
            time.sleep(1)

            vrun = util.vvtestRunner( '--plat '+platname+' --config config' )
            assert vrun.num_pass == 2

            L = util.grep( vrun.out, 'max procs' )
            assert len(L) == 1
            mx = L[0].split( 'max procs', 1 )[1].strip().lstrip('=').strip()
            mx = int( mx )
            assert mx == 2

            tdir = vrun.testdir
            assert len( glob.glob( tdir+'/atest*/execute.log' ) ) == 1
            assert len( glob.glob( tdir+'/btest*/execute.log' ) ) == 1
            assert len( glob.glob( tdir+'/ctest*/execute.log' ) ) == 0
            assert len( glob.glob( tdir+'/dtest*/execute.log' ) ) == 0

            util.remove_results()
            time.sleep(1)

            vrun = util.vvtestRunner( '--plat '+platname+' --batch --config config' )
            assert vrun.num_pass == 2

            L = util.grep( vrun.out, 'max procs' )
            assert len(L) == 1
            mx = L[0].split( 'max procs', 1 )[1].strip().lstrip('=').strip()
            mx = int( mx )
            assert mx == 2

            tdir = vrun.testdir
            assert len( glob.glob( tdir+'/atest*/execute.log' ) ) == 1
            assert len( glob.glob( tdir+'/btest*/execute.log' ) ) == 1
            assert len( glob.glob( tdir+'/ctest*/execute.log' ) ) == 0
            assert len( glob.glob( tdir+'/dtest*/execute.log' ) ) == 0

    def test_setting_platform_environ_vars(self):
        ""
        util.writefile( "config/platform_plugin.py", """
            import os, sys
            def initialize( plat ):
                plat.setenv( 'MY_PLATFORM_VAR', 'my platform value' )
            """ )

        util.writescript( 'pytest.vvt', """
            #!/usr/bin/env python
            import os, sys
            import vvtest_util as vvt
            vvt.apply_platform_variables()
            sys.stdout.write( 'plat vars = '+str(vvt.PLATFORM_VARIABLES)+'\\n' )
            sys.stdout.write( 'plat var = '+os.environ['MY_PLATFORM_VAR']+'\\n' )
            """ )
        util.writescript( 'shtest.vvt', """
            #!/bin/sh
            source ./vvtest_util.sh
            apply_platform_variables
            echo "plat vars = $PLATFORM_VARIABLES"
            echo "my var = $PLATVAR_MY_PLATFORM_VAR"
            echo "my var from env = $MY_PLATFORM_VAR"
            """ )

        vrun = util.vvtestRunner( '--config config' )
        assert vrun.num_pass == 2

        tdir = vrun.testdir
        assert len( util.filegrep( tdir+'/pytest/execute.log',
                                   "plat vars = .*MY_PLATFORM_VAR" ) ) == 1
        assert len( util.filegrep( tdir+'/pytest/execute.log',
                                   "plat var = my platform value" ) ) == 1

        assert len( util.filegrep( tdir+'/shtest/execute.log',
                                   "plat vars = .*MY_PLATFORM_VAR" ) ) == 1
        assert len( util.filegrep( tdir+'/shtest/execute.log',
                                   "my var = my platform value" ) ) == 1
        assert len( util.filegrep( tdir+'/shtest/execute.log',
                                   "my var from env = my platform value" ) ) == 1

    def test_using_a_script_util_plugin_from_the_config_dir(self):
        ""
        cfg = os.path.abspath('config')
        util.writescript( 'pytest.vvt', """
            #!/usr/bin/env python
            import os
            from script_util_plugin import *
            assert os.path.samefile( CONFIGDIR, '"""+cfg+"""' )
            special_function()
            """ )
        util.writescript( 'shtest.vvt', """
            #!/bin/sh
            source ./vvtest_util.sh
            [ -e "$CONFIGDIR/script_util_plugin.sh" ] || exit 1
            special_function
            """ )

        util.writefile( "config/script_util_plugin.py", """
            import os, sys
            from script_util import *
            def special_function():
                print3( 'hello from spec func' )
            """ )
        util.writefile( "config/script_util_plugin.sh", """
            source $VVTESTSRC/config/script_util.sh
            special_function() {
                echo 'hello from sh spec func'
            }
            """ )

        self.using_a_script_util_plugin_from_the_config_dir( '' )
        self.using_a_script_util_plugin_from_the_config_dir(
                '--plat '+util.core_platform_name()+' --batch' )

    def using_a_script_util_plugin_from_the_config_dir(self, opt):
        ""
        util.remove_results()

        vrun = util.vvtestRunner( opt+' --config config' )
        assert vrun.num_pass == 2

        tdir = vrun.testdir
        assert len( util.filegrep( tdir+'/pytest/execute.log',
                              "hello from spec func" ) ) == 1
        assert len( util.filegrep( tdir+'/shtest/execute.log',
                              "hello from sh spec func" ) ) == 1

    def test_exercising_defaults_and_checking_in_the_idplatform_plugin(self):
        ""
        default_platname = self.exercising_defaults_and_checking_in_the_idplatform_plugin( '' )
        if default_platname in util.nonqueued_platform_names:
            self.exercising_defaults_and_checking_in_the_idplatform_plugin( '--batch' )

    def exercising_defaults_and_checking_in_the_idplatform_plugin(self, opt):
        ""
        util.rmallfiles()
        time.sleep(1)

        os.mkdir( 'config' )
        util.writefile( "tst.xml", """
            <rtest name="tst">
              <execute> echo "the COMPILER is $COMPILER" </execute>
            </rtest>""" )
        util.remove_results()
        time.sleep(1)

        # first grab the default compiler and platform name
        vrun = util.vvtestRunner( opt+' --config config' )
        default_platname, default_cplr = check_get_compiler_and_platform( vrun )

        # override idplatform.py but misspell the function names, which will
        # force vvtest to fall back to some other default
        util.writefile( "config/idplatform.py", """
            def platforms( opts ):
                return "XBox"
            def compilers( platname, opts ):
                return "BASIC"
            """ )
        util.remove_results()
        time.sleep(1)

        vrun = util.vvtestRunner( opt+' --config config' )
        core_platname, core_cplr = check_get_compiler_and_platform( vrun )
        # no guarantees about the value here; just make sure it is non-empty
        assert core_cplr and core_platname

        # if the functions return an empty string, the core defaults should be used
        util.writefile( "config/idplatform.py", """
            def platform( opts ):
                return ''
            def compiler( platname, opts ):
                return ''
            """ )
        shutil.rmtree( vrun.testdir )
        time.sleep(1)

        vrun = util.vvtestRunner( opt+' --config config' )
        platname, cplr = check_get_compiler_and_platform( vrun )
        assert cplr == core_cplr
        assert platname == core_platname

        # if the functions do not return a value, the core defaults should be used
        util.writefile( "config/idplatform.py", """
            def platform( opts ):
                pass
            def compiler( platname, opts ):
                pass
            """ )
        shutil.rmtree( vrun.testdir )
        time.sleep(1)

        vrun = util.vvtestRunner( opt+' --config config' )
        platname, cplr = check_get_compiler_and_platform( vrun )
        assert cplr == core_cplr
        assert platname == core_platname

        # the command line option --plat should take precedence
        util.writefile( "config/idplatform.py", """
            def platform( opts ):
                return "XBox"
            def compiler( platname, opts ):
                if platname == 'PlayStation': return "BASIC"
            """ )
        shutil.rmtree( vrun.testdir )
        time.sleep(1)

        vrun = util.vvtestRunner( opt+' --config config --plat PlayStation' )
        platname, cplr = check_get_compiler_and_platform( vrun )
        assert cplr == "BASIC"
        assert platname == "PlayStation"

        return default_platname


########################################################################

def check_get_compiler_and_platform( vrun ):
    ""
    assert vrun.num_pass == 1

    platname = vrun.platname

    tstlog = os.path.join( vrun.testdir, 'tst', 'execute.log' )
    L = util.filegrep( tstlog, 'the COMPILER is' )
    cplr = L[0].split()[-1]

    return platname, cplr


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
