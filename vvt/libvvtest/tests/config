#!/usr/bin/env python
#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import time, glob, shutil

import testutils as util
optD,argL = util.initialize( sys.argv )
if 'TESTUTILS_RUNDIR' not in os.environ:
    os.chdir( util.working_directory )

from testutils import *


def main():
    """
    """
    global argL

    if len(argL) == 0:
        argL = """test01 test02 test03 test04 test05
               """.split()
    
    # set these for the batch tests
    os.environ['VVTEST_BATCH_READ_INTERVAL'] = '5'
    os.environ['VVTEST_BATCH_READ_TIMEOUT'] = '15'
    os.environ['VVTEST_BATCH_SLEEP_LENGTH'] = '1'
    
    cwd = os.getcwd()
    for func in argL:
        os.chdir( cwd )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )
        eval( func+'()' )


########################################################################

def check_get_compiler_and_platform( vrun ):
    ""
    assert vrun.num_pass == 1

    platname = vrun.platname

    tstlog = os.path.join( vrun.testdir, 'tst', 'execute.log' )
    L = filegrep( tstlog, 'the COMPILER is' )
    cplr = L[0].split()[-1]

    return platname, cplr


########################################################################

def test01():
    """
    use a file idplatform.py in a specified config directory
    """
    writefile( "tst.xml", """
        <rtest name="tst">
          <execute> echo "the COMPILER is $COMPILER" </execute>
        </rtest>""" )
    time.sleep(1)

    vrun = vvtestRunner()
    platname, cplr = check_get_compiler_and_platform( vrun )
    default_platname = platname

    writefile( "config/idplatform.py", """
        def platform( opts ):
            return "XBox"
        def compiler( platname, opts ):
            return "BASIC"
        """ )
    remove_results()
    time.sleep(1)

    vrun = vvtestRunner( '--config config' )
    platname, cplr = check_get_compiler_and_platform( vrun )
    assert platname == "XBox"
    assert cplr == "BASIC"

    writefile( "nonsense/idplatform.py", """
        def platform( opts ):
            return "PlayStation"
        def compiler( platname, opts ):
            return "Fortran"
        """ )
    remove_results()
    time.sleep(1)

    os.environ['VVTEST_CONFIGDIR'] = 'nonsense'
    vrun = vvtestRunner()
    del os.environ['VVTEST_CONFIGDIR']
    platname, cplr = check_get_compiler_and_platform( vrun )
    assert platname == 'PlayStation'
    assert cplr == 'Fortran'

    if default_platname in batchplatforms:

        remove_results()
        shutil.rmtree( 'config' )
        shutil.rmtree( 'nonsense' )
        time.sleep(1)

        vrun = vvtestRunner( '--batch' )
        platname, cplr = check_get_compiler_and_platform( vrun )

        writefile( "config/idplatform.py", """
            def platform( opts ):
                return "XBox"
            def compiler( platname, opts ):
                return "BASIC"
            """ )
        remove_results()
        time.sleep(1)

        vrun = vvtestRunner( '--batch --config config' )
        platname, cplr = check_get_compiler_and_platform( vrun )
        assert platname == "XBox"
        assert cplr == "BASIC"

        writefile( "nonsense/idplatform.py", """
            def platform( opts ):
                return "PlayStation"
            def compiler( platname, opts ):
                return "Fortran"
            """ )
        remove_results()
        time.sleep(1)

        os.environ['VVTEST_CONFIGDIR'] = 'nonsense'
        vrun = vvtestRunner( '--batch' )
        del os.environ['VVTEST_CONFIGDIR']
        platname, cplr = check_get_compiler_and_platform( vrun )
        assert platname == 'PlayStation'
        assert cplr == 'Fortran'


########################################################################

def test02():
    """
    get max num processors from config
    """
    writescript( 'atest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np=1
        import vvtest_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )
    writescript( 'btest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np=2
        import vvtest_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )
    writescript( 'ctest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np=3
        import vvtest_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )
    writescript( 'dtest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np=4
        import vvtest_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )
    time.sleep(1)

    vrun = vvtestRunner()
    assert vrun.num_pass > 0
    platname = vrun.platname

    # only run this test if the number of processors is at least 4
    L = grep( vrun.out, 'max procs' )
    assert len(L) == 1
    maxprocs = L[0].split( 'max procs', 1 )[1].strip().lstrip('=').strip()
    maxprocs = int( maxprocs )

    if maxprocs >= 4:

        assert vrun.num_pass == 4
        remove_results()
        
        writefile( "config/platform_plugin.py", """
            import os, sys
            def initialize( plat ):
                plat.setattr( 'maxprocs', 2 )
            """ )
        time.sleep(1)

        vrun = vvtestRunner( '--config config' )
        assert vrun.num_pass == 2

        L = grep( vrun.out, 'max procs' )
        assert len(L) == 1
        mx = L[0].split( 'max procs', 1 )[1].strip().lstrip('=').strip()
        mx = int( mx )
        assert mx == 2

        tdir = vrun.testdir
        assert len( glob.glob( tdir+'/atest*/execute.log' ) ) == 1
        assert len( glob.glob( tdir+'/btest*/execute.log' ) ) == 1
        assert len( glob.glob( tdir+'/ctest*/execute.log' ) ) == 0
        assert len( glob.glob( tdir+'/dtest*/execute.log' ) ) == 0

        if platname in batchplatforms:

            remove_results()
            time.sleep(1)

            vrun = vvtestRunner( '--batch --config config' )
            assert vrun.num_pass == 2

            L = grep( vrun.out, 'max procs' )
            assert len(L) == 1
            mx = L[0].split( 'max procs', 1 )[1].strip().lstrip('=').strip()
            mx = int( mx )
            assert mx == 2

            tdir = vrun.testdir
            assert len( glob.glob( tdir+'/atest*/execute.log' ) ) == 1
            assert len( glob.glob( tdir+'/btest*/execute.log' ) ) == 1
            assert len( glob.glob( tdir+'/ctest*/execute.log' ) ) == 0
            assert len( glob.glob( tdir+'/dtest*/execute.log' ) ) == 0


def test03():
    """
    setting platform env vars
    """
    writefile( "config/platform_plugin.py", """
        import os, sys
        def initialize( plat ):
            plat.setenv( 'MY_PLATFORM_VAR', 'my platform value' )
        """ )

    writescript( 'pytest.vvt', """
        #!/usr/bin/env python
        import os, sys
        import vvtest_util as vvt
        vvt.apply_platform_variables()
        sys.stdout.write( 'plat vars = '+str(vvt.PLATFORM_VARIABLES)+'\\n' )
        sys.stdout.write( 'plat var = '+os.environ['MY_PLATFORM_VAR']+'\\n' )
        """ )
    writescript( 'shtest.vvt', """
        #!/bin/sh
        source vvtest_util.sh
        apply_platform_variables
        echo "plat vars = $PLATFORM_VARIABLES"
        echo "my var = $PLATVAR_MY_PLATFORM_VAR"
        echo "my var from env = $MY_PLATFORM_VAR"
        """ )

    vrun = vvtestRunner( '--config config' )
    assert vrun.num_pass == 2

    tdir = vrun.testdir
    assert len( filegrep( tdir+'/pytest/execute.log',
                          "plat vars = .*MY_PLATFORM_VAR" ) ) == 1
    assert len( filegrep( tdir+'/pytest/execute.log',
                          "plat var = my platform value" ) ) == 1
    
    assert len( filegrep( tdir+'/shtest/execute.log',
                          "plat vars = .*MY_PLATFORM_VAR" ) ) == 1
    assert len( filegrep( tdir+'/shtest/execute.log',
                          "my var = my platform value" ) ) == 1
    assert len( filegrep( tdir+'/shtest/execute.log',
                          "my var from env = my platform value" ) ) == 1


########################################################################

def test04():
    """
    use a script util plugin from the config dir
    """
    writescript( 'pytest.vvt', """
        #!/usr/bin/env python
        from script_util_plugin import *
        special_function()
        """ )
    writescript( 'shtest.vvt', """
        #!/bin/sh
        source vvtest_util.sh
        special_function
        """ )

    writefile( "config/script_util_plugin.py", """
        import os, sys
        from script_util import *
        def special_function():
            print3( 'hello from spec func' )
        """ )
    writefile( "config/script_util_plugin.sh", """
        source $VVTESTSRC/config/script_util.sh
        special_function() {
            echo 'hello from sh spec func'
        }
        """ )

    vrun = vvtestRunner( '--config config' )
    assert vrun.num_pass == 2

    tdir = vrun.testdir
    assert len( filegrep( tdir+'/pytest/execute.log',
                          "hello from spec func" ) ) == 1
    assert len( filegrep( tdir+'/shtest/execute.log',
                          "hello from sh spec func" ) ) == 1


########################################################################

def test05():
    """
    exercise defaults and checking in idplatform.py
    """
    os.mkdir( 'config' )
    writefile( "tst.xml", """
        <rtest name="tst">
          <execute> echo "the COMPILER is $COMPILER" </execute>
        </rtest>""" )
    time.sleep(1)

    # first grab the default compiler and platform name
    vrun = vvtestRunner( '--config config' )
    default_platname, default_cplr = check_get_compiler_and_platform( vrun )

    # override idplatform.py but misspell the function names, which will
    # force vvtest to fall back to some other default
    writefile( "config/idplatform.py", """
        def platforms( opts ):
            return "XBox"
        def compilers( platname, opts ):
            return "BASIC"
        """ )
    remove_results()
    time.sleep(1)

    vrun = vvtestRunner( '--config config' )
    core_platname, core_cplr = check_get_compiler_and_platform( vrun )
    # no guarantees about the value here; just make sure it is non-empty
    assert core_cplr and core_platname

    # if the functions return an empty string, the core defaults should be used
    writefile( "config/idplatform.py", """
        def platform( opts ):
            return ''
        def compiler( platname, opts ):
            return ''
        """ )
    shutil.rmtree( vrun.testdir )
    time.sleep(1)

    vrun = vvtestRunner( '--config config' )
    platname, cplr = check_get_compiler_and_platform( vrun )
    assert cplr == core_cplr
    assert platname == core_platname

    # if the functions do not return a value, the core defaults should be used
    writefile( "config/idplatform.py", """
        def platform( opts ):
            pass
        def compiler( platname, opts ):
            pass
        """ )
    shutil.rmtree( vrun.testdir )
    time.sleep(1)

    vrun = vvtestRunner( '--config config' )
    platname, cplr = check_get_compiler_and_platform( vrun )
    assert cplr == core_cplr
    assert platname == core_platname

    # the command line option --plat should take precedence
    writefile( "config/idplatform.py", """
        def platform( opts ):
            return "XBox"
        def compiler( platname, opts ):
            if platname == 'PlayStation': return "BASIC"
        """ )
    shutil.rmtree( vrun.testdir )
    time.sleep(1)

    vrun = vvtestRunner( '--config config --plat PlayStation' )
    platname, cplr = check_get_compiler_and_platform( vrun )
    assert cplr == "BASIC"
    assert platname == "PlayStation"

    if default_platname in batchplatforms:

        remove_results()
        os.remove( glob.glob('config/idplatform.py')[0] )
        time.sleep(1)

        # first grab the default compiler and platform name
        vrun = vvtestRunner( '--batch --config config' )
        default_platname, default_cplr = check_get_compiler_and_platform( vrun )

        # override idplatform.py but misspell the function names, which will
        # force vvtest to fall back to some other default
        writefile( "config/idplatform.py", """
            def platforms( opts ):
                return "XBox"
            def compilers( platname, opts ):
                return "BASIC"
            """ )
        remove_results()
        time.sleep(1)

        vrun = vvtestRunner( '--batch --config config' )
        core_platname, core_cplr = check_get_compiler_and_platform( vrun )
        # no guarantees about the value here; just make sure it is non-empty
        assert core_cplr and core_platname

        # if the functions return an empty string, the core defaults should be used
        writefile( "config/idplatform.py", """
            def platform( opts ):
                return ''
            def compiler( platname, opts ):
                return ''
            """ )
        shutil.rmtree( vrun.testdir )
        time.sleep(1)

        vrun = vvtestRunner( '--batch --config config' )
        platname, cplr = check_get_compiler_and_platform( vrun )
        assert cplr == core_cplr
        assert platname == core_platname

        # if the functions do not return a value, the core defaults should be used
        writefile( "config/idplatform.py", """
            def platform( opts ):
                pass
            def compiler( platname, opts ):
                pass
            """ )
        shutil.rmtree( vrun.testdir )
        time.sleep(1)

        vrun = vvtestRunner( '--batch --config config' )
        platname, cplr = check_get_compiler_and_platform( vrun )
        assert cplr == core_cplr
        assert platname == core_platname

        # the command line option --plat should take precedence
        writefile( "config/idplatform.py", """
            def platform( opts ):
                return "XBox"
            def compiler( platname, opts ):
                if platname == 'PlayStation': return "BASIC"
            """ )
        shutil.rmtree( vrun.testdir )
        time.sleep(1)

        vrun = vvtestRunner( '--batch --config config --plat PlayStation' )
        platname, cplr = check_get_compiler_and_platform( vrun )
        assert cplr == "BASIC"
        assert platname == "PlayStation"


########################################################################

main()
