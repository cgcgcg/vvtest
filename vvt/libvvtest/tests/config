#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import time, shutil

import vvtestutils as vtu
import testutils as util
from testutils import print3


class config_tests( vtu.vvtestTestCase ):

    def test_using_idplatform_in_a_specified_config_directory(self):
        ""
        util.writefile( "tst.xml", """
            <rtest name="tst">
              <execute> echo "the COMPILER is $COMPILER" </execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            util.writefile( "config/idplatform.py", """
                def platform( opts ):
                    return "XBox"
                def compiler( platname, opts ):
                    return "BASIC"
                """ )
            vtu.remove_results()
            time.sleep(1)

            vrun = vtu.runvvtest( '--config config', batch=batch,
                                                     addplatform=False )

            platname, cplr = check_get_compiler_and_platform( vrun )
            assert platname == "XBox"
            assert cplr == "BASIC"

            util.writefile( "nonsense/idplatform.py", """
                def platform( opts ):
                    return "PlayStation"
                def compiler( platname, opts ):
                    return "Fortran"
                """ )
            vtu.remove_results()
            time.sleep(1)

            os.environ['VVTEST_CONFIGDIR'] = 'nonsense'
            try:
                vrun = vtu.runvvtest( batch=batch, addplatform=False )
            finally:
                del os.environ['VVTEST_CONFIGDIR']
            platname, cplr = check_get_compiler_and_platform( vrun )
            assert platname == 'PlayStation'
            assert cplr == 'Fortran'

    def test_get_max_num_processors_from_config(self):
        ""
        util.writescript( 'atest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np=1
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'btest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np=2
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'ctest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np=3
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'dtest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np=4
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()

        # only run this test if the number of processors is at least 4
        maxprocs = extract_maxprocs( vrun.out )

        if maxprocs >= 4:

            vrun.assertCounts( total=4, npass=4 )

            # assert vrun.num_pass == 4
            vtu.remove_results()

            util.writefile( "config/platform_plugin.py", """
                import os, sys
                def initialize( plat ):
                    plat.setattr( 'maxprocs', 2 )
                """ )
            time.sleep(1)

            vrun = vtu.runvvtest( '--config config' )
            vrun.assertCounts( total=2, npass=2 )

            assert extract_maxprocs( vrun.out ) == 2

            assert vrun.getTestIds() == [ 'atest.np=1', 'btest.np=2' ]

            vtu.remove_results()
            time.sleep(1)

            vrun = vtu.runvvtest( '--config config', batch=True )
            vrun.assertCounts( total=2, npass=2 )

            assert extract_maxprocs( vrun.out ) == 2

            assert vrun.getTestIds() == [ 'atest.np=1', 'btest.np=2' ]

    def test_setting_platform_environ_vars(self):
        ""
        util.writefile( "config/platform_plugin.py", """
            import os, sys
            def initialize( plat ):
                plat.setenv( 'MY_PLATFORM_VAR', 'my platform value' )
            """ )

        util.writescript( 'pytest.vvt', """
            #!/usr/bin/env python
            import os, sys
            import vvtest_util as vvt
            vvt.apply_platform_variables()
            sys.stdout.write( 'plat vars = '+str(vvt.PLATFORM_VARIABLES)+'\\n' )
            sys.stdout.write( 'plat var = '+os.environ['MY_PLATFORM_VAR']+'\\n' )
            """ )
        util.writescript( 'shtest.vvt', """
            #!/bin/sh
            source ./vvtest_util.sh
            apply_platform_variables
            echo "plat vars = $PLATFORM_VARIABLES"
            echo "my var = $PLATVAR_MY_PLATFORM_VAR"
            echo "my var from env = $MY_PLATFORM_VAR"
            """ )

        vrun = vtu.runvvtest( '--config config' )
        vrun.assertCounts( total=2, npass=2 )

        assert vrun.countGrepLogs( "plat vars = *MY_PLATFORM_VAR", 'pytest' ) == 1
        assert vrun.countGrepLogs( "plat var = my platform value", 'pytest' ) == 1

        assert vrun.countGrepLogs( "plat vars = *MY_PLATFORM_VAR", 'shtest' ) == 1
        assert vrun.countGrepLogs( "my var = my platform value", 'shtest' ) == 1
        assert vrun.countGrepLogs( "my var from env = my platform value", 'shtest' ) == 1

    def test_using_a_script_util_plugin_from_the_config_dir(self):
        ""
        cfg = os.path.abspath('config')
        util.writescript( 'pytest.vvt', """
            #!/usr/bin/env python
            import os
            import vvtest_util as vvt
            import script_util_plugin as util
            assert os.path.samefile( vvt.CONFIGDIR, '"""+cfg+"""' )
            util.special_function()
            """ )
        util.writescript( 'shtest.vvt', """
            #!/bin/sh
            source ./vvtest_util.sh
            [ -e "$CONFIGDIR/script_util_plugin.sh" ] || exit 1
            special_function
            """ )

        util.writefile( "config/script_util_plugin.py", """
            import os, sys
            def special_function():
                print ( 'hello from spec func' )
            """ )
        util.writefile( "config/script_util_plugin.sh", """
            source $VVTESTSRC/config/script_util.sh
            special_function() {
                echo 'hello from sh spec func'
            }
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--config config', batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            assert vrun.countGrepLogs( "hello from spec func", 'pytest' ) == 1
            assert vrun.countGrepLogs( "hello from sh spec func", 'shtest' ) == 1

    def test_exercising_defaults_and_checking_in_the_idplatform_plugin(self):
        ""
        os.mkdir( 'config' )
        util.writefile( "tst.xml", """
            <rtest name="tst">
              <execute> echo "the COMPILER is $COMPILER" </execute>
            </rtest>""" )
        time.sleep(1)

        # first grab the default compiler and platform name
        vrun = vtu.runvvtest( '--config config', addplatform=False )
        default_platname, default_cplr = check_get_compiler_and_platform( vrun )

        # override idplatform.py but misspell the function names, which will
        # force vvtest to fall back to some other default
        util.writefile( "config/idplatform.py", """
            def platforms( opts ):
                return "XBox"
            def compilers( platname, opts ):
                return "BASIC"
            """ )
        vtu.remove_results()
        time.sleep(1)

        vrun = vtu.runvvtest( '--config config', addplatform=False )
        core_platname, core_cplr = check_get_compiler_and_platform( vrun )
        # no guarantees about the value here; just make sure it is non-empty
        assert core_cplr and core_platname

        # if the functions return an empty string, the core defaults should be used
        util.writefile( "config/idplatform.py", """
            def platform( opts ):
                return ''
            def compiler( platname, opts ):
                return ''
            """ )
        vtu.remove_results()
        time.sleep(1)

        vrun = vtu.runvvtest( '--config config', addplatform=False )
        platname, cplr = check_get_compiler_and_platform( vrun )
        assert cplr == core_cplr
        assert platname == core_platname

        # if the functions do not return a value, the core defaults should be used
        util.writefile( "config/idplatform.py", """
            def platform( opts ):
                pass
            def compiler( platname, opts ):
                pass
            """ )
        vtu.remove_results()
        time.sleep(1)

        vrun = vtu.runvvtest( '--config config', addplatform=False )
        platname, cplr = check_get_compiler_and_platform( vrun )
        assert cplr == core_cplr
        assert platname == core_platname

        # the command line option --plat should take precedence
        util.writefile( "config/idplatform.py", """
            def platform( opts ):
                return "XBox"
            def compiler( platname, opts ):
                if platname == 'PlayStation': return "BASIC"
            """ )
        vtu.remove_results()
        time.sleep(1)

        vrun = vtu.runvvtest( '--config config --plat PlayStation' )
        platname, cplr = check_get_compiler_and_platform( vrun )
        assert cplr == "BASIC"
        assert platname == "PlayStation"


########################################################################

def check_get_compiler_and_platform( vrun ):
    ""
    vrun.assertCounts( total=1, npass=1 )

    platname = vrun.platformName()

    lines = vrun.greplogs( 'the COMPILER is', 'tst' )
    assert len( lines ) == 1

    cplr = lines[0].split()[-1]

    return platname, cplr


def extract_maxprocs( vvtest_output ):
    ""
    L1 = util.greplines( 'max procs', vvtest_output )
    assert len(L1) == 1

    smax = L1[0].split( 'max procs', 1 )[1].strip().lstrip('=').strip()
    maxprocs = int( smax )

    return maxprocs


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
