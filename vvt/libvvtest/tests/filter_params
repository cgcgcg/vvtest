#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3


class filter_and_parameters( vtu.vvtestTestCase ):

    def test_filter_tests_by_parameter_names_and_values(self):
        ""
        util.writefile( 'atest.xml', """
            <rtest name="atest">
              <parameterize np="1 3 6"/>
              <execute>
                set echo
                touch execute_file.np=$np || exit 1
                unset echo
              </execute>
            </rtest>""" )
        time.sleep(1)

        platname = vtu.core_platform_name()

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-N 10', batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            vrun = vtu.runvvtest( '-i -v', batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            vtu.remove_results()

            vrun = vtu.runvvtest( '-p np=1 -N 10', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            vrun = vtu.runvvtest( '-R', batch=batch,
                                        chdir=vrun.resultsDir() )
            vrun.assertCounts( total=1, npass=1 )

            vtu.remove_results()

            vrun = vtu.runvvtest( "-p 'np<=3' -N 10", batch=batch )
            self.assert_atest_results( vrun, 2, 1, 1, 0 )

            vtu.remove_results()

            vrun = vtu.runvvtest( "-p 'np!=3' -N 10", batch=batch )
            self.assert_atest_results( vrun, 2, 1, 0, 1 )

            vtu.remove_results()

            vrun = vtu.runvvtest( "-p 'np>=3' -N 10", batch=batch )
            self.assert_atest_results( vrun, 2, 0, 1, 1 )

            vtu.remove_results()

            vrun = vtu.runvvtest( "-p 'np>3' -N 10", batch=batch )
            self.assert_atest_results( vrun, 1, 0, 0, 1 )

            vtu.remove_results()

            vrun = vtu.runvvtest( "-p 'np<3' -N 10", batch=batch )
            self.assert_atest_results( vrun, 1, 1, 0, 0 )

            vtu.remove_results()

            vrun = vtu.runvvtest( "-p 'np=1/np=3' -N 10", batch=batch )
            self.assert_atest_results( vrun, 2, 1, 1, 0 )

            vtu.remove_results()

            vrun = vtu.runvvtest( "-p 'np>1' -p 'np<6' -N 10", batch=batch )
            self.assert_atest_results( vrun, 1, 0, 1, 0 )

    def assert_atest_results(self, vrun, npass, numnp1, numnp3, numnp6):
        ""
        vrun.assertCounts( total=npass, npass=npass )
        assert vrun.countTestLines( 'pass*np=1' ) == numnp1
        assert vrun.countTestLines( 'pass*np=3' ) == numnp3
        assert vrun.countTestLines( 'pass*np=6' ) == numnp6


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
