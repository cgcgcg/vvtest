#!/usr/bin/env python

import os, sys
import time
import glob

# this will os.chdir() to a subdirectory
from testutils import *


def main():
    """
    """
    argL = get_arg_list()

    if len(argL) == 0:
        argL = """test01 test01b test02 test03 test04 test05 test06
                  test07 test08 test09 test10 test11 test12 test13
                  test14 test15 test16 test17 test18 test19 test20
                  test21
               """.split()

    # set these for the pipeline tests
    os.environ['VVTEST_BATCH_READ_DELAY'] = '5'
    os.environ['VVTEST_BATCH_READ_DELAY_MAX'] = '15'
    os.environ['VVTEST_BATCH_SLEEP_LENGTH'] = '1'
    
    cwd = os.getcwd()
    for func in argL:
        os.chdir( cwd )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )
        eval( func+'()' )


########################################################################

def test01():
    """
    an executable script as a test file
    """
    writescript( 'hello.vvt', """
        #!/bin/sh
        echo "hello from the hello test script"
        """ )

    out,np,nd,nf,nn = run_vvtest()
    tdir = results_dir()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*hello') ) == 1

    assert len( filegrep( tdir+'/hello/execute.log',
                          "hello from the hello test script" ) ) == 1


def test01b():
    """
    the test can be named different than the script name
    """
    writescript( 'hello.vvt', """
        #!/bin/sh
        #VVT: name=world
        echo "hello from the hello/world test script"
        """ )

    out,np,nd,nf,nn = run_vvtest()
    tdir = results_dir()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*hello') ) == 0
    assert len( greptestlist(out,'pass.*world') ) == 1

    assert len( filegrep( tdir+'/world/execute.log',
                          "hello from the hello/world test script" ) ) == 1


########################################################################

def test02():
    """
    script is not executable but contains a shebang
    """
    writefile( 'hello.vvt', """#!/bin/sh
        echo "hello from the hello test script"
        """ )

    out,np,nd,nf,nn = run_vvtest()
    tdir = results_dir()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*hello') ) == 1

    assert len( filegrep( tdir+'/hello/execute.log',
                          "hello from the hello test script" ) ) == 1


########################################################################

def test03():
    """
    script has an embedded extension
    """
    writefile( 'hello.py.vvt', """
        import os, sys
        print ( "hello from the python test script" )
        """ )
    writefile( 'hello.csh.vvt', """
        setenv HELLO "world"
        echo "hello $HELLO from the csh script"
        """ )

    out,np,nd,nf,nn = run_vvtest()
    tdir = results_dir()
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*hello') ) == 2
    assert len( greptestlist(out,'pass.*hello.py') ) == 1
    assert len( greptestlist(out,'pass.*hello.csh') ) == 1

    assert len( filegrep( tdir+'/hello.py/execute.log',
                          "hello from the python test script" ) ) == 1
    assert len( filegrep( tdir+'/hello.csh/execute.log',
                          "hello world from the csh script" ) ) == 1


########################################################################

def test04():
    """
    script that imports the helper fragment
    """
    writefile( 'hello.py.vvt', """
        import os, sys
        print ( "hello from the python test script" )
        import vvtest_util as vvt
        print ( 'hello, dir=', dir(vvt) )

        assert hasattr( vvt, 'NAME' )
        assert hasattr( vvt, 'TESTID' )
        assert hasattr( vvt, 'PLATFORM' )
        assert hasattr( vvt, 'COMPILER' )
        assert hasattr( vvt, 'VVTESTSRC' )
        assert hasattr( vvt, 'VVTESTLIB' )
        assert hasattr( vvt, 'PROJECT' )
        assert hasattr( vvt, 'OPTIONS' )
        assert hasattr( vvt, 'OPTIONS_OFF' )
        assert hasattr( vvt, 'SRCDIR' )

        assert vvt.NAME == 'hello.py'
        print ( 'PROJECT = '+vvt.PROJECT )
        assert vvt.OPTIONS == ['dbg']
        """ )

    os.mkdir( 'bin' )

    out,np,nd,nf,nn = run_vvtest( '-j bin -o dbg' )
    tdir = results_dir()
    platname = platform_name( out )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*hello.py') ) == 1

    assert len( filegrep( tdir+'/hello.py/execute.log',
                          "hello from the python test script" ) ) == 1
    L = filegrep( tdir+'/hello.py/execute.log', "PROJECT =" )
    assert len(L) == 1
    assert L[0].split('=',1)[1].strip() == os.path.abspath('bin')
    
    if platname in batchplatforms:

        # same thing in pipeline mode

        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline -j bin -o dbg' )
        tdir = results_dir()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        assert len( greptestlist(out,'pass.*hello.py') ) == 1

        assert len( filegrep( tdir+'/hello.py/execute.log',
                              "hello from the python test script" ) ) == 1
        L = filegrep( tdir+'/hello.py/execute.log', "PROJECT =" )
        assert len(L) == 1
        assert L[0].split('=',1)[1].strip() == os.path.abspath('bin')


def test05():
    """
    python test that exits with a diff a pass and a fail
    """
    writescript( 'tpass.vvt', """
        #!/usr/bin/env python
        import os, sys
        import vvtest_util as vvt
        """ )
    writescript( 'tdiff.vvt', """
        #!/usr/bin/env python
        import os, sys
        from script_util import *
        exit_diff()
        """ )
    writescript( 'tfail.vvt', """
        #!/usr/bin/env python
        import os, sys
        def myfunc():
            raise Exception( "test failed" )
        myfunc()
        """ )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 1 and nf == 1 and nn == 0
    platname = platform_name( out )

    if platname in batchplatforms:

        # same thing in pipeline mode

        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 1 and nd == 1 and nf == 1 and nn == 0


def test06():
    """
    multiple tests in one script file
    """
    writescript( 'multi.vvt', """
        #!/usr/bin/env python
        #VVT: name=multi
        #VVT: name=multi2
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )

    out,np,nd,nf,nn = run_vvtest()
    tdir = results_dir()
    platname = platform_name( out )

    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*multi') ) == 2
    assert len( greptestlist(out,'pass.*multi2') ) == 1

    assert len( filegrep( tdir+'/multi/execute.log',
                          "hello from the multi test" ) ) == 1
    assert len( filegrep( tdir+'/multi2/execute.log',
                          "hello from the multi2 test" ) ) == 1
    
    if platname in batchplatforms:

        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0

        assert len( greptestlist(out,'pass.*multi') ) == 2
        assert len( greptestlist(out,'pass.*multi2') ) == 1

        assert len( filegrep( tdir+'/multi/execute.log',
                              "hello from the multi test" ) ) == 1
        assert len( filegrep( tdir+'/multi2/execute.log',
                              "hello from the multi2 test" ) ) == 1


def test07():
    """
    check header specification comment variations
    """
    writescript( 'tst1.vvt', """
        #!/usr/bin/env python

        #VVT: name=test1
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst2.vvt', """
        #!/usr/bin/env python
        # 
        #VVT: name=test2
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst3.vvt', """
        #!/usr/bin/env python
        import vvtest_util as vvt
        #VVT: name=test3
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst4.vvt', """
        #!/usr/bin/env python
        #VVT: name=test4a

        #VVT: name=test4b

        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst5.vvt', """
        #!/usr/bin/env python
        # regular comments can be interleaved
        #VVT: name=test5a

        # this test should also be run
        #VVT: name=test5b

        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )

    out,np,nd,nf,nn = run_vvtest()
    tdir = results_dir()
    assert np == 7 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*tst1') ) == 0
    assert len( greptestlist(out,'pass.*test1') ) == 1
    assert len( greptestlist(out,'pass.*tst2') ) == 0
    assert len( greptestlist(out,'pass.*test2') ) == 1
    assert len( greptestlist(out,'pass.*tst3') ) == 1
    assert len( greptestlist(out,'pass.*test3') ) == 0
    assert len( greptestlist(out,'pass.*test4a') ) == 1
    assert len( greptestlist(out,'pass.*test4b') ) == 1
    assert len( greptestlist(out,'pass.*test5a') ) == 1
    assert len( greptestlist(out,'pass.*test5b') ) == 1

    assert len( filegrep( tdir+'/test1/execute.log',
                          "hello from the test1 test" ) ) == 1
    assert len( filegrep( tdir+'/test2/execute.log',
                          "hello from the test2 test" ) ) == 1
    assert len( filegrep( tdir+'/tst3/execute.log',
                          "hello from the tst3 test" ) ) == 1
    assert len( filegrep( tdir+'/test4a/execute.log',
                          "hello from the test4a test" ) ) == 1
    assert len( filegrep( tdir+'/test4b/execute.log',
                          "hello from the test4b test" ) ) == 1
    assert len( filegrep( tdir+'/test5a/execute.log',
                          "hello from the test5a test" ) ) == 1
    assert len( filegrep( tdir+'/test5b/execute.log',
                          "hello from the test5b test" ) ) == 1


def test08():
    """
    incorrect specification syntax
    """
    writescript( 'tst1.vvt', """
        #!/usr/bin/env python
        #VVT: =junk
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst2.vvt', """
        #!/usr/bin/env python
        #VVT: keywords (testname=tst2) foo : bar
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst2b.vvt', """
        #!/usr/bin/env python
        #VVT: keywords (testname=tst2b) foo
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst2c.vvt', """
        #!/usr/bin/env python
        #VVT: keywords (testname=tst2c) (testname=tst2b)
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst3.vvt', """
        #!/usr/bin/env python
        #VVT: keywords (testname=tst3) : junk
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst4.vvt', """
        #!/usr/bin/env python
        #VVT::
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst5.vvt', """
        #!/usr/bin/env python
        #VVT: keywords (=tst5) : foo bar
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst6.vvt', """
        #!/usr/bin/env python
        #VVT: keywords (foo=bar,=) : foo bar
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst7.vvt', """
        #!/usr/bin/env python
        #VVT: keywords (foo=bar : foo bar
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    tdir = results_dir()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    assert len( grep( out, 'skipping .*tst1.vvt'  ) ) == 1
    assert len( grep( out, 'skipping .*tst2.vvt'  ) ) == 1
    assert len( grep( out, 'skipping .*tst2b.vvt' ) ) == 1
    assert len( grep( out, 'skipping .*tst2c.vvt' ) ) == 1
    assert os.path.exists( os.path.join( tdir, 'tst3', 'execute.log' ) )
    assert len( grep( out, 'skipping .*tst4.vvt' ) ) == 1
    assert len( grep( out, 'skipping .*tst5.vvt' ) ) == 1
    assert len( grep( out, 'skipping .*tst6.vvt' ) ) == 1
    assert len( grep( out, 'skipping .*tst7.vvt' ) ) == 1


def test09():
    """
    using the "have diff" utils
    """
    writescript( 'pypass.vvt', """
        #!/usr/bin/env python
        import os, sys
        from script_util import *
        if_diff_exit_diff()
        """ )
    writescript( 'pydiff.vvt', """
        #!/usr/bin/env python
        import os, sys
        from script_util import *
        set_have_diff()
        if_diff_exit_diff()
        """ )
    writescript( 'pydiff2.vvt', """
        #!/usr/bin/env python
        import os, sys
        from script_util import *
        exit_diff()
        """ )
    writescript( 'shpass.vvt', """
        #!/bin/sh
        source vvtest_util.sh
        if_diff_exit_diff
        """ )
    writescript( 'shdiff.vvt', """
        #!/bin/sh
        source vvtest_util.sh
        set_have_diff
        if_diff_exit_diff
        """ )
    writescript( 'shdiff2.vvt', """
        #!/bin/sh
        source vvtest_util.sh
        exit_diff
        """ )
    writescript( 'cshpass.vvt', """
        #!/bin/csh
        source vvtest_util.csh
        if_diff_exit_diff
        """ )
    writescript( 'cshdiff.vvt', """
        #!/bin/csh
        source vvtest_util.csh
        set_have_diff
        if_diff_exit_diff
        """ )
    writescript( 'cshdiff2.vvt', """
        #!/bin/csh
        source vvtest_util.csh
        exit_diff
        """ )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 3 and nd == 6 and nf == 0 and nn == 0
    platname = platform_name( out )
    tdir = results_dir()
    assert len( filegrep( tdir+'/pydiff/execute.log', 'exiting diff' ) ) == 1
    assert len( filegrep( tdir+'/shdiff/execute.log', 'exiting diff' ) ) == 1
    assert len( filegrep( tdir+'/cshdiff/execute.log', 'exiting diff' ) ) == 1
    assert len( filegrep( tdir+'/pypass/execute.log', 'exiting diff' ) ) == 0
    assert len( filegrep( tdir+'/shpass/execute.log', 'exiting diff' ) ) == 0
    assert len( filegrep( tdir+'/cshpass/execute.log', 'exiting diff' ) ) == 0

    if platname in batchplatforms:
        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 3 and nd == 6 and nf == 0 and nn == 0
        assert len( filegrep( tdir+'/pydiff/execute.log', 'exiting diff' ) ) == 1
        assert len( filegrep( tdir+'/shdiff/execute.log', 'exiting diff' ) ) == 1
        assert len( filegrep( tdir+'/cshdiff/execute.log', 'exiting diff' ) ) == 1
        assert len( filegrep( tdir+'/pypass/execute.log', 'exiting diff' ) ) == 0
        assert len( filegrep( tdir+'/shpass/execute.log', 'exiting diff' ) ) == 0
        assert len( filegrep( tdir+'/cshpass/execute.log', 'exiting diff' ) ) == 0

    os.chdir( tdir )
    out,np,nd,nf,nn = run_vvtest( '-R' )
    assert np == 3 and nd == 6 and nf == 0 and nn == 0
    assert len( filegrep( 'pydiff/execute.log', 'exiting diff' ) ) == 1
    assert len( filegrep( 'shdiff/execute.log', 'exiting diff' ) ) == 1
    assert len( filegrep( 'cshdiff/execute.log', 'exiting diff' ) ) == 1
    assert len( filegrep( 'pypass/execute.log', 'exiting diff' ) ) == 0
    assert len( filegrep( 'shpass/execute.log', 'exiting diff' ) ) == 0
    assert len( filegrep( 'cshpass/execute.log', 'exiting diff' ) ) == 0


def test10():
    """
    the sedfile utility
    """
    writefile( 'changeme.txt', """
        the quick brown fox jumps
        over the lazy dog
        """ )
    writescript( 'pytest.vvt', """
        #!/usr/bin/env python
        #VVT: link = changeme.txt
        import os
        from script_util import *
        assert os.path.islink( 'changeme.txt' )
        sedfile( 'changeme.txt', 'quick', 'lazy', 'jumps', 'steps' )
        assert not os.path.islink( 'changeme.txt' )
        """ )
    writescript( 'shtest.vvt', """
        #!/bin/sh
        #VVT: link = changeme.txt
        source vvtest_util.sh
        sedfile changeme.txt "s/quick/speedy/"
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )
    tdir = results_dir()

    assert len( filegrep( 'changeme.txt', 'quick brown' ) ) == 1
    assert len( filegrep( 'changeme.txt', 'lazy brown' ) ) == 0
    assert len( filegrep( 'changeme.txt', 'fox jumps' ) ) == 1
    assert len( filegrep( 'changeme.txt', 'fox steps' ) ) == 0
    assert len( filegrep( 'changeme.txt', 'speedy brown' ) ) == 0
    
    assert not os.path.islink( tdir+'/pytest/changeme.txt' )
    assert len( filegrep( tdir+'/pytest/changeme.txt', 'lazy brown' ) ) == 1
    assert len( filegrep( tdir+'/pytest/changeme.txt', 'fox steps' ) ) == 1
    assert not os.path.islink( tdir+'/shtest/changeme.txt' )
    assert len( filegrep( tdir+'/shtest/changeme.txt', 'speedy brown' ) ) == 1


def test11():
    """
    the unixdiff utility
    """
    writefile( 'baseline.txt',
               'the quick brown fox jumps\n' + \
               'over the lazy dog' )
    writescript( 'pypass.vvt', """
        #!/usr/bin/env python
        #VVT: link = baseline.txt
        import os
        from script_util import *
        fp = open( 'genfile.txt', 'w' )
        fp.write( 'the quick brown fox jumps\\n' + \
                  'over the lazy dog\\n' )
        fp.close()
        unixdiff( 'baseline.txt', 'genfile.txt' )
        if_diff_exit_diff()
        """ )
    writescript( 'pydiff.vvt', """
        #!/usr/bin/env python
        #VVT: link = baseline.txt
        import os
        from script_util_plugin import *
        fp = open( 'genfile.txt', 'w' )
        fp.write( 'the quick brown fox jumps\\n' + \
                  'over the super lazy dog\\n' )
        fp.close()
        unixdiff( 'baseline.txt', 'genfile.txt' )
        if_diff_exit_diff()
        """ )
    writescript( 'shpass.vvt', """
        #!/bin/sh
        #VVT: link = baseline.txt
        source vvtest_util.sh
        echo "the quick brown fox jumps" > genfile.txt
        echo "over the lazy dog" >> genfile.txt
        echo "" >> genfile.xt
        unixdiff baseline.txt genfile.txt
        if_diff_exit_diff
        """ )
    writescript( 'shdiff.vvt', """
        #!/bin/sh
        #VVT: link = baseline.txt
        source vvtest_util.sh
        echo "the quick brown fox jumps" > genfile.txt
        echo "over the utterly lazy dog" >> genfile.txt
        echo "" >> genfile.xt
        unixdiff baseline.txt genfile.txt
        if_diff_exit_diff
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 2 and nf == 0 and nn == 0
    platname = platform_name( out )
    tdir = results_dir()

    assert len( filegrep( tdir+'/pypass/execute.log', 'files are diff' ) ) == 0
    assert len( filegrep( tdir+'/pydiff/execute.log', 'files are diff' ) ) == 1
    assert len( filegrep( tdir+'/shpass/execute.log', 'files are diff' ) ) == 0
    assert len( filegrep( tdir+'/shdiff/execute.log', 'files are diff' ) ) == 1


def test12():
    """
    the nlinesdiff utility
    """
    writescript( 'pypass.vvt', """
        #!/usr/bin/env python
        import os
        from script_util import *
        fp = open( 'genfile.txt', 'w' )
        fp.write( 'the speedy brown fox jumps\\n' + \
                  'over the lazy dog\\n' )
        fp.close()
        nlinesdiff( 'genfile.txt', 2 )
        if_diff_exit_diff()
        """ )
    writescript( 'pydiff.vvt', """
        #!/usr/bin/env python
        import os
        from script_util import *
        fp = open( 'genfile.txt', 'w' )
        fp.write( 'the speedy brown fox jumps\\n' + \
                  'over the super lazy dog\\n' + \
                  'and laughed\\n' )
        fp.close()
        nlinesdiff( 'genfile.txt', 2 )
        if_diff_exit_diff()
        """ )
    writescript( 'shpass.vvt', """
        #!/bin/sh
        source vvtest_util.sh
        echo "the speedy brown fox jumps" > genfile.txt
        echo "over the lazy dog" >> genfile.txt
        nlinesdiff genfile.txt 2
        if_diff_exit_diff
        """ )
    writescript( 'shdiff.vvt', """
        #!/bin/sh
        source vvtest_util.sh
        echo "the speedy brown fox jumps" > genfile.txt
        echo "over the lazy dog" >> genfile.txt
        echo "and laughed" >> genfile.txt
        nlinesdiff genfile.txt 2
        if_diff_exit_diff
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 2 and nf == 0 and nn == 0
    platname = platform_name( out )
    tdir = results_dir()

    assert len( filegrep( tdir+'/pypass/execute.log',
                          'number of lines exceeded' ) ) == 0
    assert len( filegrep( tdir+'/pydiff/execute.log',
                          'number of lines exceeded' ) ) == 1
    assert len( filegrep( tdir+'/shpass/execute.log',
                          'number of lines exceeded' ) ) == 0
    assert len( filegrep( tdir+'/shdiff/execute.log',
                          'number of lines exceeded' ) ) == 1


########################################################################

def test13():
    """
    copy & link files
    """
    writefile( 'file1.txt', """
        this is file one
        """ )
    writefile( 'file2.txt', """
        this is file two
        """ )
    writefile( 'file3.txt', """
        this is file three
        """ )
    writescript( 'files.vvt', """
        #!/usr/bin/env python
        #VVT: link : file1.txt file2.txt
        #VVT: copy : file3.txt
        #VVT: link (rename) : file1.txt, lfile1 file2.txt,lfile2
        #VVT: copy (rename) : file3.txt ,cfile3
        import os
        assert os.path.exists( 'file1.txt' )
        assert os.path.islink( 'file1.txt' )
        assert os.path.exists( 'file2.txt' )
        assert os.path.islink( 'file2.txt' )
        assert os.path.exists( 'file3.txt' )
        assert not os.path.islink( 'file3.txt' )
        assert os.path.exists( 'lfile1' )
        assert os.path.islink( 'lfile1' )
        assert os.path.exists( 'lfile2' )
        assert os.path.islink( 'lfile2' )
        assert os.path.exists( 'cfile3' )
        assert not os.path.islink( 'cfile3' )

        import filecmp
        assert filecmp.cmp( 'file1.txt', 'lfile1', shallow=False )
        assert filecmp.cmp( 'file2.txt', 'lfile2', shallow=False )
        assert filecmp.cmp( 'file3.txt', 'cfile3', shallow=False )
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )
    
    if platname in batchplatforms:
        remove_results()
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0


def test14():
    """
    copy & link files with attribute specifications
    """
    writescript( "null.vvt", """
        #!/bin/sh
        echo null
        """ )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )
    tdir = results_dir()
    remove_results()
    os.remove( 'null.vvt' )

    writefile( 'file1.txt', """
        this is file one
        """ )
    writefile( 'file2.txt', """
        this is file two
        """ )
    writefile( 'file3.txt', """
        this is file three
        """ )
    writefile( 'file4.txt', """
        this is file four
        """ )
    writefile( 'file5.txt', """
        this is file five
        """ )
    writescript( 'files.vvt', """
        #!/usr/bin/env python
        
        #VVT: name = files
        #VVT: name = another
        #VVT: link (testname=files): file1.txt
        #VVT: link (testname=not files): file2.txt
        #VVT: copy (options=dbg, testname=another) : file3.txt
        #VVT: link (rename, platforms="Junk") : file4.txt, lfile4
        #VVT: copy (rename, platforms="""+platname+""") : file5.txt,cfile5
        
        import os
        import script_util as vvt
        if vvt.NAME == 'files':
            assert os.path.exists( 'file1.txt' )
            assert os.path.islink( 'file1.txt' )
            assert not os.path.exists( 'file2.txt' )
        else:
            assert os.path.exists( 'file2.txt' )
            assert os.path.islink( 'file2.txt' )
        if 'dbg' in vvt.OPTIONS and vvt.NAME == 'another':
            assert os.path.exists( 'file3.txt' )
            assert not os.path.islink( 'file3.txt' )
        else:
            assert not os.path.exists( 'file3.txt' )
        assert not os.path.exists( 'file4.txt' )
        assert not os.path.exists( 'lfile4' )
        assert os.path.exists( 'cfile5' )
        assert not os.path.islink( 'cfile5' )
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    remove_results()

    out,np,nd,nf,nn = run_vvtest( '-o dbg' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    dbgdir = results_dir()
    assert os.path.exists( dbgdir+'/another/file3.txt' )
    assert not os.path.islink( dbgdir+'/another/file3.txt' )

    if platname in batchplatforms:
        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '-o dbg --pipeline' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        assert os.path.exists( dbgdir+'/another/file3.txt' )
        assert not os.path.islink( dbgdir+'/another/file3.txt' )


########################################################################

def test15():
    """
    using the vvtest system utility functions
    """
    writescript( "null.vvt", """
        #!/bin/sh
        echo null
        """ )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )
    tdir = results_dir()
    remove_results()
    os.remove( 'null.vvt' )

    writescript( 'pytest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : A = 1 3 5
        import script_util as vvt
        print3 = vvt.print3
        if vvt.parameter_expr( "A<3 or A=5" ):
            print3( "with A="+vvt.A+" param expr true" )
        else:
            print3( "with A="+vvt.A+" param expr false" )
        if vvt.platform_expr( 'Junk or """+platname+"""' ):
            print3( "plat expr true" )
        else:
            print3( "plat expr false" )
        if vvt.platform_expr( 'Junk' ):
            print3( "plat expr2 true" )
        else:
            print3( "plat expr2 false" )
        if vvt.option_expr( 'dbg and not intel' ):
            print3( "option expr true" )
        else:
            print3( "option expr false" )
        """ )
    writescript( 'shtest.vvt', """
        #!/bin/sh
        #VVT: parameterize : B = 1 3 5
        source vvtest_util.sh
        if parameter_expr "B<3 or B=5"
        then
            echo "with B=$B param expr true"
        else
            echo "with B=$B param expr false"
        fi
        if platform_expr 'Junk or """+platname+"""'
        then
            echo "plat expr true"
        else
            echo "plat expr false"
        fi
        if platform_expr 'Junk'
        then
            echo "plat expr2 true"
        else
            echo "plat expr2 false"
        fi
        if option_expr 'dbg and not intel'
        then
            echo "option expr true"
        else
            echo "option expr false"
        fi
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 6 and nd == 0 and nf == 0 and nn == 0

    assert len( filegrep( tdir+'/pytest.A=1/execute.log',
                          'with A=1 param expr true' ) ) == 1
    assert len( filegrep( tdir+'/pytest.A=3/execute.log',
                          'with A=3 param expr false' ) ) == 1
    assert len( filegrep( tdir+'/pytest.A=5/execute.log',
                          'with A=5 param expr true' ) ) == 1
    assert len( filegrep( tdir+'/shtest.B=1/execute.log',
                          'with B=1 param expr true' ) ) == 1
    assert len( filegrep( tdir+'/shtest.B=3/execute.log',
                          'with B=3 param expr false' ) ) == 1
    assert len( filegrep( tdir+'/shtest.B=5/execute.log',
                          'with B=5 param expr true' ) ) == 1
    
    assert len( filegrep( tdir+'/pytest.A=3/execute.log',
                          'plat expr true' ) ) == 1
    assert len( filegrep( tdir+'/pytest.A=3/execute.log',
                          'plat expr2 false' ) ) == 1
    assert len( filegrep( tdir+'/shtest.B=5/execute.log',
                          'plat expr true' ) ) == 1
    assert len( filegrep( tdir+'/shtest.B=5/execute.log',
                          'plat expr2 false' ) ) == 1
    
    assert len( filegrep( tdir+'/pytest.A=1/execute.log',
                          'option expr false' ) ) == 1
    assert len( filegrep( tdir+'/shtest.B=1/execute.log',
                          'option expr false' ) ) == 1
    
    remove_results()
    out,np,nd,nf,nn = run_vvtest( '-o dbg' )
    assert np == 6 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    assert len( filegrep( tdir+'/pytest.A=1/execute.log',
                          'option expr true' ) ) == 1
    assert len( filegrep( tdir+'/shtest.B=1/execute.log',
                          'option expr true' ) ) == 1
    
    remove_results()
    out,np,nd,nf,nn = run_vvtest( '-o dbg+intel' )
    assert np == 6 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    assert len( filegrep( tdir+'/pytest.A=1/execute.log',
                          'option expr false' ) ) == 1
    assert len( filegrep( tdir+'/shtest.B=1/execute.log',
                          'option expr false' ) ) == 1


def test16():
    """
    using the vvtest system utility functions in an analyze test
    """
    writescript( "null.vvt", """
        #!/bin/sh
        echo null
        """ )

    out,np,nd,nf,nn = run_vvtest( '-o dbg' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )
    tdir = results_dir()
    remove_results()
    os.remove( 'null.vvt' )

    writescript( 'pytest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : A = 1 2
        #VVT: analyze : -a
        import sys
        import script_util_plugin as vvt
        print3 = vvt.print3
        if '-a' in sys.argv:
            pass
            if vvt.parameter_expr( "not A" ):
                print3( "analyze param expr true" )
            else:
                print3( "analyze param expr false" )
            if vvt.platform_expr( 'Junk or """+platname+"""' ):
                print3( "analyze plat expr true" )
            else:
                print3( "analyze plat expr false" )
            if vvt.platform_expr( 'Junk' ):
                print3( "analyze plat expr2 true" )
            else:
                print3( "analyze plat expr2 false" )
            if vvt.option_expr( 'dbg and not intel' ):
                print3( "analyze option expr true" )
            else:
                print3( "analyze option expr false" )
        """ )
    writescript( 'shtest.vvt', """
        #!/bin/sh
        #VVT: parameterize : B = 1 2
        #VVT: analyze : -a
        source vvtest_util.sh
        analyze=false
        for opt in "$@"
        do
          [ "$opt" = "-a" ] && analyze=true
        done
        if [ $analyze = true ]
        then
            if parameter_expr "B"
            then
                echo "analyze param expr true"
            else
                echo "analyze param expr false"
            fi
            if platform_expr 'Junk or """+platname+"""'
            then
                echo "analyze plat expr true"
            else
                echo "analyze plat expr false"
            fi
            if platform_expr 'Junk'
            then
                echo "analyze plat expr2 true"
            else
                echo "analyze plat expr2 false"
            fi
            if option_expr 'dbg and not intel'
            then
                echo "analyze option expr true"
            else
                echo "analyze option expr false"
            fi
        fi
        """ )
    
    out,np,nd,nf,nn = run_vvtest( '-o dbg' )
    assert np == 6 and nd == 0 and nf == 0 and nn == 0
    
    for f in glob.glob( tdir+'/*=*/execute.log' ):
        assert len( filegrep( f, 'analyze' ) ) == 0
    
    assert len( filegrep( tdir+'/pytest/execute.log',
                          'analyze param expr true' ) ) == 1
    assert len( filegrep( tdir+'/pytest/execute.log',
                          'analyze plat expr true' ) ) == 1
    assert len( filegrep( tdir+'/pytest/execute.log',
                          'analyze plat expr2 false' ) ) == 1
    assert len( filegrep( tdir+'/pytest/execute.log',
                          'analyze option expr true' ) ) == 1
    
    assert len( filegrep( tdir+'/shtest/execute.log',
                          'analyze param expr false' ) ) == 1
    assert len( filegrep( tdir+'/shtest/execute.log',
                          'analyze plat expr true' ) ) == 1
    assert len( filegrep( tdir+'/shtest/execute.log',
                          'analyze plat expr2 false' ) ) == 1
    assert len( filegrep( tdir+'/shtest/execute.log',
                          'analyze option expr true' ) ) == 1


########################################################################

def test17():
    """
    test the runcmd script util
    """
    writescript( 'py1.vvt', """
        #!/usr/bin/env python
        import script_util as vvt
        print3 = vvt.print3
        x = vvt.runcmd( 'ls -l' )
        assert x == 0
        """ )
    writescript( 'py2.vvt', """
        #!/usr/bin/env python
        import script_util as vvt
        print3 = vvt.print3
        x = vvt.runcmd( 'failprogram', ignore_exit=True )
        assert x != 0
        """ )
    writescript( 'py3.vvt', """
        #!/usr/bin/env python
        import script_util as vvt
        print3 = vvt.print3
        vvt.runcmd( 'failprogram' )
        print3( 'should not get here' )
        """ )
    writescript( 'py4.vvt', """
        #!/usr/bin/env python
        import script_util as vvt
        print3 = vvt.print3
        out = vvt.runcmd( 'ls -l', capture_output=True )
        print3( out )
        for line in out.split( '\\n' ):
            line = line.rstrip()
            if line and line.split()[-1].endswith( 'vvtest_util.py' ):
                print3( 'found', line.split()[-1] )
        """ )

    writescript( 'helloworld', """
        #!/bin/sh
        echo "hello world"
        """ )
    writescript( 'py5.vvt', """
        #!/usr/bin/env python
        #VVT: link : helloworld
        import script_util as vvt
        print3 = vvt.print3
        vvt.runcmd( './helloworld progargs', echo=False )
        """ )

    writescript( 'py6.vvt', """
        #!/usr/bin/env python
        #VVT: link : helloworld
        import script_util as vvt
        print3 = vvt.print3
        vvt.runcmd( './helloworld', redirect='prog.out' )
        """ )
    
    writescript( 'hellomars', """
        #!/bin/sh
        echo "hello mars"
        """ )
    writescript( 'py7.vvt', """
        #!/usr/bin/env python
        #VVT: link : helloworld hellomars
        import script_util as vvt
        print3 = vvt.print3
        vvt.runcmd( './helloworld', redirect='prog.out' )
        vvt.runcmd( './hellomars', redirect='prog.out' )
        """ )
    writescript( 'py8.vvt', """
        #!/usr/bin/env python
        #VVT: link : helloworld hellomars
        import script_util as vvt
        print3 = vvt.print3
        vvt.runcmd( './helloworld', redirect='prog.out' )
        vvt.runcmd( './hellomars', redirect='prog.out', append=True )
        """ )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 7 and nd == 0 and nf == 1 and nn == 0
    tdir = results_dir()
    
    assert len( filegrep( tdir+'/py1/execute.log',
                          'vvtest_util.py' ) ) >= 1
    assert len( greptestlist( out, 'pass.*py2' ) ) == 1
    assert len( filegrep( tdir+'/py2/execute.log',
                          'failprogram' ) ) > 0
    assert len( greptestlist( out, 'pass.*py3' ) ) == 0
    assert len( filegrep( tdir+'/py3/execute.log',
                          'command failed.*failprogram' ) ) > 0
    assert len( filegrep( tdir+'/py4/execute.log',
                          'found .*vvtest_util.py' ) ) == 1
    assert len( greptestlist( out, 'pass.*py5' ) ) == 1
    assert len( filegrep( tdir+'/py5/execute.log',
                          'helloworld.*progargs' ) ) == 0
    assert len( filegrep( tdir+'/py6/execute.log',
                          'hello world' ) ) == 0
    assert len( filegrep( tdir+'/py6/prog.out',
                          'hello world' ) ) == 1
    assert len( filegrep( tdir+'/py7/execute.log',
                          'hello world' ) ) == 0
    assert len( filegrep( tdir+'/py7/execute.log',
                          'hello mars' ) ) == 0
    assert len( filegrep( tdir+'/py7/prog.out',
                          'hello world' ) ) == 0
    assert len( filegrep( tdir+'/py7/prog.out',
                          'hello mars' ) ) == 1
    assert len( filegrep( tdir+'/py8/prog.out',
                          'hello world' ) ) == 1
    assert len( filegrep( tdir+'/py8/prog.out',
                          'hello mars' ) ) == 1


def test18():
    """
    test permissions helpers in script util
    """
    writescript( 'py1.vvt', """
        #!/usr/bin/env python
        from script_util import *
        fp = open( 'script', 'w' )
        fp.write( '#!/bin/sh\\n' )
        fp.write( 'echo "script got executed"\\n' )
        fp.close()
        assert get_permissions( 'script', 'read' )
        assert get_permissions( 'script', 'write' )
        assert not get_permissions( 'script', 'execute' )
        change_permissions( 'script', 'u+x', 'g+x' )
        assert get_permissions( 'script', 'execute' )
        runcmd( './script' )
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    
    assert len( filegrep( tdir+'/py1/execute.log',
                          'script got executed' ) ) == 1


def test19():
    """
    util functions: catfile, grepfile, prependPATH, which
    """
    writefile( 'file1.txt', """
        this is line one
        and line two
        """ )
    writefile( 'file2.txt', """
        the quick brown fox
        jumps over the lazy dog
        """ )
    writescript( 'subdir/myscript', """
        #!/bin/sh
        echo "hello from myscript"
        """ )
    writescript( 'py1.vvt', """
        #!/usr/bin/env python
        #VVT: link : file1.txt file2.txt
        import os
        from script_util import *
        assert len( grepfile( 'tw[op]', 'file1.txt' ) ) == 1
        catfile( 'file2.txt' )
        prependPATH( os.path.join( SRCDIR, 'subdir' ) )
        print3( 'which =', which( 'myscript' ) )
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    
    assert len( filegrep( tdir+'/py1/execute.log',
                          'quick brown fox' ) ) == 1
    assert len( filegrep( tdir+'/py1/execute.log',
                          'lazy dog' ) ) == 1
    assert len( filegrep( tdir+'/py1/execute.log',
                          'which = '+os.getcwd()+'/subdir/myscript' ) ) == 1


def test20():
    """
    test the user termination function
    """
    writescript( 'py1.vvt', """
        #!/usr/bin/env python
        from script_util import *
        def lastcall():
            print3( 'lastcall called' )
        register_termination_function( lastcall )
        try:
            raise Exception( 'fake exception' )
        except:
            pass
        """ )
    writescript( 'py2.vvt', """
        #!/usr/bin/env python
        from script_util import *
        def lastcall():
            print3( 'lastcall called' )
        register_termination_function( lastcall )
        raise Exception( 'fake exception' )
        print 'should not be here'
        """ )
    writescript( 'py3.vvt', """
        #!/usr/bin/env python
        from script_util import *
        def lastcall():
            print3( 'lastcall called' )
        register_termination_function( lastcall )
        set_have_diff()
        if_diff_exit_diff()
        print 'should not be here'
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 1 and nf == 1 and nn == 0
    tdir = results_dir()
    
    assert len( filegrep( tdir+'/py1/execute.log',
                          'fake exception' ) ) == 0
    assert len( filegrep( tdir+'/py1/execute.log',
                          'lastcall called' ) ) == 1
    assert len( filegrep( tdir+'/py2/execute.log',
                          'fake exception' ) ) > 0
    assert len( filegrep( tdir+'/py2/execute.log',
                          'lastcall called' ) ) == 0
    assert len( filegrep( tdir+'/py2/execute.log',
                          'should not be here' ) ) == 0
    assert len( filegrep( tdir+'/py3/execute.log',
                          'exiting diff' ) ) == 1
    assert len( filegrep( tdir+'/py3/execute.log',
                          'lastcall called' ) ) == 0
    assert len( filegrep( tdir+'/py3/execute.log',
                          'should not be here' ) ) == 0


def test21():
    """
    test the python trace utility
    """
    writefile( 'file1.txt', """
        this is line one
        and line two
        """ )
    writescript( 'py1.vvt', """
        #!/usr/bin/env python
        #VVT: link : file1.txt
        from script_util import *
        def myfunc( ivar=5 ):
            funcvar = 2*ivar
            otherfunc( funcvar )
        def otherfunc( *args ):
            assert len(args) == 1
            print3( 'otherfunc args =', args )
            catfile( 'file1.txt' )
            if 'FOOBAR_NOEXIST_VNAME' in os.environ:
                print3( 'how could that happen!!' )
        set_python_trace()
        ivar = 4
        myfunc( ivar )
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    
    xlog = tdir+'/py1/execute.log'
    assert len( filegrep( xlog, 'myfunc[(] *ivar *[)].*py1.vvt:15' ) ) == 1
    assert len( filegrep( xlog,
        'def myfunc[(] ivar=5 [)]:.*[(]ivar=4[)].*py1.vvt:4' ) ) == 1
    assert len( filegrep( xlog,
        'def otherfunc[(] [*]args [)]:.*args=.*8.*py1.vvt:7' ) ) == 1
    assert len( filegrep( xlog, "catfile[(] 'file1.txt' [)]" ) ) == 1
    # this one tries to catch a function name that is internal to python,
    # which should be filtered out
    assert len( filegrep( xlog, "__contains__" ) ) == 0


########################################################################

main()
