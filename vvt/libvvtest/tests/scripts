#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3


class script_tests( vtu.vvtestTestCase ):

    def test_an_executable_script_as_a_test_file(self):
        ""
        util.writescript( 'hello.vvt', """
            #!/bin/sh
            echo "hello from the hello test script"
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == [ 'hello' ]
        assert vrun.countGrepLogs( 'hello from the hello test script' ) == 1

    def test_that_the_test_name_can_be_different_than_the_script_name(self):
        ""
        util.writescript( 'hello.vvt', """
            #!/bin/sh
            #VVT: name=world
            echo "hello from the hello/world test script"
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == [ 'world' ]
        assert vrun.countGrepLogs( 'hello from the hello/world test script' ) == 1

    def test_that_python_is_always_used_to_run_non_executable_scripts(self):
        ""
        util.writefile( 'hello.vvt',
            "#!/bin/sh\n" + \
            "print ( 'hello from the hello test script' )\n" )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == [ 'hello' ]
        assert vrun.countGrepLogs( 'hello from the hello test script' ) == 1

    def test_importing_the_helper_fragment(self):
        ""
        util.writefile( 'hello.py.vvt', """
            import os, sys
            print ( "hello from the python test script" )
            import vvtest_util as vvt
            print ( 'hello, dir=', dir(vvt) )

            assert hasattr( vvt, 'NAME' )
            assert hasattr( vvt, 'TESTID' )
            assert hasattr( vvt, 'PLATFORM' )
            assert hasattr( vvt, 'COMPILER' )
            assert hasattr( vvt, 'VVTESTSRC' )
            assert hasattr( vvt, 'CONFIGDIR' )
            assert hasattr( vvt, 'PROJECT' )
            assert hasattr( vvt, 'OPTIONS' )
            assert hasattr( vvt, 'OPTIONS_OFF' )
            assert hasattr( vvt, 'SRCDIR' )

            assert vvt.NAME == 'hello.py'
            print ( 'PROJECT = '+vvt.PROJECT )
            assert vvt.OPTIONS == ['dbg']
            """ )
        os.mkdir( 'bin' )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-j bin -o dbg', batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            assert vrun.getTestIds() == [ 'hello.py' ]

            assert vrun.countGrepLogs( 'hello from the python test script' ) == 1

            L = vrun.greplogs( 'PROJECT =' )
            assert len(L) == 1
            assert L[0].split('=',1)[1].strip() == os.path.abspath('bin')

    def test_a_python_test_that_exits_with_a_diff_a_pass_and_a_fail(self):
        ""
        util.writescript( 'tpass.vvt', """
            #!/usr/bin/env python
            import os, sys
            import vvtest_util as vvt
            """ )
        util.writescript( 'tdiff.vvt', """
            #!/usr/bin/env python
            import sys
            import vvtest_util as vvt
            sys.exit( vvt.diff_exit_status )
            """ )
        util.writescript( 'tfail.vvt', """
            #!/usr/bin/env python
            import os, sys
            def myfunc():
                raise Exception( "test failed" )
            myfunc()
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=1, diff=1, fail=1 )

    def test_multiple_tests_in_one_script_file(self):
        ""
        util.writescript( 'multi.vvt', """
            #!/usr/bin/env python
            #VVT: name=multi
            #VVT: name=multi2
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            assert vrun.getTestIds() == [ 'multi', 'multi2' ]

            assert vrun.countGrepLogs( 'hello from the multi test' ) == 1
            assert vrun.countGrepLogs( 'hello from the multi2 test' ) == 1

    def test_header_specification_comment_variations(self):
        ""
        util.writescript( 'tst1.vvt', """
            #!/usr/bin/env python

            #VVT: name=test1
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst2.vvt', """
            #!/usr/bin/env python
            # 
            #VVT: name=test2
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst3.vvt', """
            #!/usr/bin/env python
            import vvtest_util as vvt
            #VVT: name=test3
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst4.vvt', """
            #!/usr/bin/env python
            #VVT: name=test4a

            #VVT: name=test4b

            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst5.vvt', """
            #!/usr/bin/env python
            # regular comments can be interleaved
            #VVT: name=test5a

            # this test should also be run
            #VVT: name=test5b

            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=7, npass=7 )

        assert vrun.getTestIds() == [ 'test1',
                                      'test2',
                                      'test4a',
                                      'test4b',
                                      'test5a',
                                      'test5b',
                                      'tst3' ]

        assert vrun.countGrepLogs( 'hello from the test1 test' ) == 1
        assert vrun.countGrepLogs( 'hello from the test2 test' ) == 1
        assert vrun.countGrepLogs( 'hello from the tst3 test' ) == 1
        assert vrun.countGrepLogs( 'hello from the test4a test' ) == 1
        assert vrun.countGrepLogs( 'hello from the test4b test' ) == 1
        assert vrun.countGrepLogs( 'hello from the test5a test' ) == 1
        assert vrun.countGrepLogs( 'hello from the test5b test' ) == 1

    def test_using_testname_specification_as_alias_for_name(self):
        ""
        util.writefile( 'multi.vvt', """
            #VVT: testname=testA
            #VVT: name : testB
            #VVT: testname = testC
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=3, npass=3 )

        assert vrun.getTestIds() == [ 'testA', 'testB', 'testC' ]
        assert vrun.countGrepLogs( 'hello from the testA test' ) == 1
        assert vrun.countGrepLogs( 'hello from the testB test' ) == 1
        assert vrun.countGrepLogs( 'hello from the testC test' ) == 1

    def test_incorrect_specification_syntax(self):
        ""
        util.writescript( 'tst1.vvt', """
            #!/usr/bin/env python
            #VVT: =junk
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst2.vvt', """
            #!/usr/bin/env python
            #VVT: keywords (testname=tst2) foo : bar
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst2b.vvt', """
            #!/usr/bin/env python
            #VVT: keywords (testname=tst2b) foo
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst2c.vvt', """
            #!/usr/bin/env python
            #VVT: keywords (testname=tst2c) (testname=tst2b)
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst3.vvt', """
            #!/usr/bin/env python
            #VVT: keywords (testname=tst3) : junk
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst4.vvt', """
            #!/usr/bin/env python
            #VVT::
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst5.vvt', """
            #!/usr/bin/env python
            #VVT: keywords (=tst5) : foo bar
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst6.vvt', """
            #!/usr/bin/env python
            #VVT: keywords (foo=bar,=) : foo bar
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst7.vvt', """
            #!/usr/bin/env python
            #VVT: keywords (foo=bar : foo bar
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=1, npass=1 )

        assert len( vrun.grepLines( 'skipping *tst1.vvt'  ) ) == 1
        assert len( vrun.grepLines( 'skipping *tst2.vvt'  ) ) == 1
        assert len( vrun.grepLines( 'skipping *tst2b.vvt'  ) ) == 1
        assert len( vrun.grepLines( 'skipping *tst2c.vvt'  ) ) == 1
        assert len( vrun.grepLines( 'skipping *tst4.vvt'  ) ) == 1
        assert len( vrun.grepLines( 'skipping *tst5.vvt'  ) ) == 1
        assert len( vrun.grepLines( 'skipping *tst6.vvt'  ) ) == 1
        assert len( vrun.grepLines( 'skipping *tst7.vvt'  ) ) == 1

        assert vrun.countGrepLogs( 'hello from the tst3 test' ) == 1

    def test_copy_and_link_files_specification(self):
        ""
        util.writefile( 'file1.txt', """
            this is file one
            """ )
        util.writefile( 'file2.txt', """
            this is file two
            """ )
        util.writefile( 'file3.txt', """
            this is file three
            """ )
        util.writescript( 'files.vvt', """
            #!/usr/bin/env python
            #VVT: link : file1.txt file2.txt
            #VVT: copy : file3.txt
            #VVT: link (rename) : file1.txt, lfile1 file2.txt,lfile2
            #VVT: copy (rename) : file3.txt ,cfile3
            import os
            assert os.path.exists( 'file1.txt' )
            assert os.path.islink( 'file1.txt' )
            assert os.path.exists( 'file2.txt' )
            assert os.path.islink( 'file2.txt' )
            assert os.path.exists( 'file3.txt' )
            assert not os.path.islink( 'file3.txt' )
            assert os.path.exists( 'lfile1' )
            assert os.path.islink( 'lfile1' )
            assert os.path.exists( 'lfile2' )
            assert os.path.islink( 'lfile2' )
            assert os.path.exists( 'cfile3' )
            assert not os.path.islink( 'cfile3' )

            import filecmp
            assert filecmp.cmp( 'file1.txt', 'lfile1', shallow=False )
            assert filecmp.cmp( 'file2.txt', 'lfile2', shallow=False )
            assert filecmp.cmp( 'file3.txt', 'cfile3', shallow=False )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=1, npass=1 )

    def test_copy_and_link_files_with_attribute_specifications(self):
        ""
        platname = vtu.core_platform_name()

        util.writefile( 'file1.txt', """
            this is file one
            """ )
        util.writefile( 'file2.txt', """
            this is file two
            """ )
        util.writefile( 'file3.txt', """
            this is file three
            """ )
        util.writefile( 'file4.txt', """
            this is file four
            """ )
        util.writefile( 'file5.txt', """
            this is file five
            """ )
        util.writescript( 'files.vvt', """
            #!/usr/bin/env python
            
            #VVT: name = files
            #VVT: name = another
            #VVT: link (testname=files): file1.txt
            #VVT: link (testname=not files): file2.txt
            #VVT: copy (options=dbg, testname=another) : file3.txt
            #VVT: link (rename, platforms="Junk") : file4.txt, lfile4
            #VVT: copy (rename, platforms="""+platname+""") : file5.txt,cfile5
            
            import os
            import vvtest_util as vvt
            if vvt.NAME == 'files':
                assert os.path.exists( 'file1.txt' )
                assert os.path.islink( 'file1.txt' )
                assert not os.path.exists( 'file2.txt' )
            else:
                assert os.path.exists( 'file2.txt' )
                assert os.path.islink( 'file2.txt' )
            if 'dbg' in vvt.OPTIONS and vvt.NAME == 'another':
                assert os.path.exists( 'file3.txt' )
                assert not os.path.islink( 'file3.txt' )
            else:
                assert not os.path.exists( 'file3.txt' )
            assert not os.path.exists( 'file4.txt' )
            assert not os.path.exists( 'lfile4' )
            assert os.path.exists( 'cfile5' )
            assert not os.path.islink( 'cfile5' )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            vtu.remove_results()

            vrun = vtu.runvvtest( '-o dbg', batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            fn = util.globfile( 'TestResults*/another/file3.txt' )
            assert not os.path.islink( fn )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
