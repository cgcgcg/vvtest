#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import re
import time
import signal

try:
    from StringIO import StringIO
except Exception:
    from io import StringIO

import vvtestutils as vtu
import testutils as util

import libvvtest.printinfo as printinfo
from libvvtest.TestExec import TestExec
import libvvtest.batchutils as batchutils
from libvvtest.execlist import TestExecList
from libvvtest.TestList import TestList


class InformationPrinter( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp( self, cleanout=False )

        self.xlist, self.tlist = make_fake_TestExecList()

    def test_print_list_information(self):
        ""
        sio = StringIO()
        obj = printinfo.TestInformationPrinter( sio, self.xlist )

        time.sleep(2)

        obj.writeInfo()

        out = sio.getvalue()
        print ( out )

        lines = out.strip().split('\n')

        assert lines[0].startswith( 'Information:' )

        assert lines[1].strip().startswith( '* Total runtime: 0:00:0' )
        t = int( lines[1].strip()[-1] )
        assert t > 0 and t < 5

        assert lines[2].strip().startswith( '* 2 running' )

        for i in [3,4]:
            st = lines[i].strip()
            assert st.startswith( '* sdir/atest' )
            t = int( st.split( '0:00:0' )[1].split()[0] )
            assert t > 0 and t < 5

    def test_check_for_standard_input_then_print(self):
        ""
        def fake_input_check():
            return True

        sio = StringIO()
        obj = printinfo.TestInformationPrinter( sio, self.xlist )
        obj.setInputChecker( fake_input_check )

        obj.checkPrint()

        assert 'Information:' in sio.getvalue()

    def test_print_batch_information(self):
        ""
        sio = StringIO()
        batch = make_mock_Batcher( self.tlist )
        obj = printinfo.TestInformationPrinter( sio, self.xlist, batch )

        time.sleep(2)

        obj.writeInfo()

        out = sio.getvalue()
        print ( out )

        lines = out.strip().split('\n')

        assert lines[0].startswith( 'Information:' )
        assert lines[1].strip().startswith( '* Total runtime: 0:00:0' )
        t = int( lines[1].strip()[-1] )
        assert t > 0 and t < 5
        assert lines[2].strip().startswith( '* 1 batch job' )

        st = lines[3].strip()
        assert st.startswith( '* qbat' )
        t = int( st.split( '0:00:0' )[1].split()[0] )
        assert t > 0 and t < 5

        assert lines[4].strip().startswith( '* sdir/atest' )
        assert lines[4].strip().startswith( '* sdir/atest' )


def make_fake_TestExecList():
    ""
    tlist = TestList( None )

    txL = []

    for i in range(2):
        ts = vtu.make_fake_TestCase( 'running', name='atest'+str(i) )
        tlist.addTest( ts )
        ts.getSpec().setConstructionCompleted()

    xlist = TestExecList( None, tlist, None )

    xlist._createTestExecList( None )

    # mark the tests as running
    xt1 = xlist.popNext( None )
    xt2 = xlist.popNext( None )

    return xlist, tlist


class MockBatcher:

    def __init__(self):
        ""
        self.tracker = batchutils.JobTracker()

    def getNumStarted(self):
        ""
        return self.tracker.numStarted()

    def getStarted(self):
        ""
        return self.tracker.getStarted()


def make_mock_Batcher( tlist ):
    ""
    batch = MockBatcher()
    bjob = batchutils.BatchJob( 0, None, None, None, tlist )

    qid = 0
    jid = 42

    batch.tracker.addJob( qid, bjob )
    batch.tracker.markJobStarted( qid )

    bjob.setJobID( jid )
    bjob.setStartTime( time.time() )

    return batch


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
