#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3


class parameter_tests( vtu.vvtestTestCase ):

    def test_nominal_parameterize_usage(self):
        ""
        util.writefile( 'basic.xml', """
            <rtest name="basic">
              <parameterize np="1 4 8"/>
              <execute> echo "execute basic2 np = $np" </execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( "-p 'np<8' -P 'np=1'", batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            assert vrun.countGrepLogs( 'execute basic2' ) == 1
            assert vrun.countGrepLogs( 'execute basic2 np = 4' ) == 1

            vrun = vtu.runvvtest( "-p 'np<=8'", batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            vrun = vtu.runvvtest( "-i", batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            vrun = vtu.runvvtest( "-i -p 'np=4'", batch=batch )
            vrun.assertCounts( total=1, npass=1 )

    def test_multiple_parameterize(self):
        ""
        util.writefile( 'basic.xml', """
            <rtest name="basic">
              <parameterize np="1 4"/>
              <parameterize dt="0.1 0.01"/>
              <execute> echo "execute basic np = $np dt = $dt" </execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=4, npass=4 )

            lines = util.grepfiles( 'execute basic',
                                'TestResults*/basic.dt=0.01.np=4/execute.log' )
            assert len(lines) == 1 and 'np = 4 dt = 0.01' in lines[0]

            vtu.remove_results()

            vrun = vtu.runvvtest( "-p 'np=4'", batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            lines = util.grepfiles( 'execute basic',
                                'TestResults*/basic.dt=0.01.np=4/execute.log' )
            assert len(lines) == 1 and 'np = 4 dt = 0.01' in lines[0]

            lines = util.grepfiles( 'execute basic',
                                'TestResults*/basic.dt=0.1.np=4/execute.log' )
            assert len(lines) == 1 and 'np = 4 dt = 0.1' in lines[0]

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, npass=2 )

    def test_an_empty_parameterize(self):
        ""
        util.writefile( 'basic.xml', """
            <rtest name="basic">
              <keywords> foobar </keywords>
              <parameterize/>
              <execute> echo "execute basic3 np = $np" </execute>
            </rtest>""" )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=1, npass=1 )

        assert len( util.findfiles( 'execute.log', 'TestResults*' ) ) == 1
        assert vrun.countGrepLogs( 'execute basic3 np = 0' ) == 1

        vtu.remove_results()

        util.writefile( 'basic.xml', """
          <rtest name="basic">
            <keywords> foobar </keywords>
            <parameterize testname="basic"/>
            <execute> echo "execute basic3 np = $np" </execute>
          </rtest>""")
        time.sleep(1)

        vrun = vtu.runvvtest( '-k foobar' )
        vrun.assertCounts( total=1, npass=1 )

        assert len( util.findfiles( 'execute.log', 'TestResults*' ) ) == 1
        assert vrun.countGrepLogs( 'execute basic3 np = 0' ) == 1

    def test_filtering_out_by_parameter_on_a_subsequent_run(self):
        ""
        util.writefile( 'params.xml', """
            <rtest name="params">
              <parameterize AA="1 2"/>
              <parameterize BB="foo bar"/>
              <execute> echo "params AA=$AA BB=$BB" </execute>
            </rtest>""" )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=4, npass=4 )

        vrun = vtu.runvvtest( '-R -p AA=2' )
        vrun.assertCounts( total=2, npass=2 )

        cd = util.globfile( 'TestResults*/params.AA=2.BB=bar' )
        vrun = vtu.runvvtest( '-R', chdir=cd )
        vrun.assertCounts( total=1, npass=1 )

    def test_that_an_analyze_section_will_have_the_parameters_available(self):
        ""
        util.writefile( 'basic.xml', """
            <rtest name="basic">
              <parameterize np="1 4"/>
              <parameterize dt="0.1 0.01"/>
              <execute> echo "execute basic np = $np dt = $dt" </execute>
              <analyze>
                echo "access PARAM_np = $PARAM_np"
                echo "access PARAM_dt = $PARAM_dt"
              </analyze>
            </rtest> """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=5, npass=5 )
        tdir = vrun.resultsDir()

        lines = vrun.greplogs( 'access PARAM_np' )
        assert len(lines) == 1
        assert lines[0].split('=')[1].split() == ['1','4']
        lines = vrun.greplogs( 'access PARAM_dt' )
        assert len(lines) == 1
        assert lines[0].split('=')[1].split() == ['0.1','0.01']

        vrun = vtu.runvvtest( '-R', chdir=tdir+'/basic' )
        vrun.assertCounts( total=1, npass=1 )

        lines = vrun.greplogs( 'access PARAM_np' )
        assert len(lines) == 1
        assert lines[0].split('=')[1].split() == ['1','4']
        lines = vrun.greplogs( 'access PARAM_dt' )
        assert len(lines) == 1
        assert lines[0].split('=')[1].split() == ['0.1','0.01']

        util.rmallfiles()

        util.writefile( 'zip.xml', """
            <rtest name="zip">
              <parameterize np="1 4" dt="0.1 0.01"/>
              <execute> echo "execute zip np = $np dt = $dt" </execute>
              <analyze>
                echo "access PARAM_dt_np = $PARAM_dt_np"
              </analyze>
            </rtest> """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=3, npass=3 )
        tdir = vrun.resultsDir()

        lines = vrun.greplogs( 'access PARAM_dt_np' )
        assert len(lines) == 1
        assert lines[0].split('=')[1].split() == ['0.1/1','0.01/4']

        vrun = vtu.runvvtest( '-R', chdir=tdir+'/zip' )
        vrun.assertCounts( total=1, npass=1 )

        lines = vrun.greplogs( 'access PARAM_dt_np' )
        assert len(lines) == 1
        assert lines[0].split('=')[1].split() == ['0.1/1','0.01/4']

    def test_complex_command_line_parameter_expression_with_rerun(self):
        ""
        util.writefile( 'basic.xml', """
            <rtest name="basic">
              <parameterize isize="1 2 4"/>
              <execute> echo "execute basic isize = $isize" </execute>
              <analyze>
                echo "access PARAM_isize = $PARAM_isize"
              </analyze>
            </rtest> """)
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( "-p 'isize<=2 or not isize'", batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            assert len( glob.glob( 'TestResults*/basic.isize=*' ) ) == 2
            basic_dir = util.globfile( 'TestResults*/basic' )

            vrun = vtu.runvvtest( "-R", batch=batch, chdir=basic_dir )
            vrun.assertCounts( total=1, npass=1 )

    def test_that_an_analyze_sees_restricted_parameters(self):
        ""
        util.writefile( 'basic.xml', """
            <rtest name="basic">
              <parameterize isize="1 2 4"/>
              <execute> echo "execute basic isize = $isize" </execute>
              <analyze>
                echo "access PARAM_isize = $PARAM_isize"
              </analyze>
            </rtest> """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( "-p 'isize<=2'", batch=batch )
            vrun.assertCounts( total=3, npass=3 )
            tdir = vrun.resultsDir()

            lines = util.grepfiles( 'access PARAM_isize',
                                    tdir+'/basic/execute.log' )
            assert len(lines) == 1
            pL = lines[0].split('=',1)[1].strip().split()
            assert pL == ['1', '2']

            vrun = vtu.runvvtest( "-R", batch=batch, chdir=tdir+'/basic' )
            vrun.assertCounts( total=1, npass=1 )

            lines = util.grepfiles( 'access PARAM_isize',
                                    tdir+'/basic/execute.log' )
            assert len(lines) == 1
            pL = lines[0].split('=',1)[1].strip().split()
            assert pL == ['1', '2']

    def test_using_parameterize_with_script_test(self):
        ""
        util.writescript( 'params1.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : animal = dog cat
            import os
            print ( "hello from "+os.path.basename(os.getcwd()) )
            """ )
        util.writescript( 'params2.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : A = dog cat
            #VVT: parameterize : V = carrot celery
            import os
            print ( "hello from "+os.path.basename(os.getcwd()) )
            """ )
        util.writescript( 'params3.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : B,X = dog,carrot cat,celery
            import os
            print ( "hello from "+os.path.basename(os.getcwd()) )
            """ )
        util.writescript( 'params4.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : C, Y, Z = 1 ,2,3  4,5,6
            #VVT::                         7 , 8 , 9   10, 11,12
            import os
            print ( "hello from "+os.path.basename(os.getcwd()) )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=12, npass=12 )

            def assert_grep( pattern, count ):
                assert vrun.countTestLines( pattern ) == count

            assert_grep( 'pass*.animal=dog', 1 )
            assert_grep( 'pass*.animal=cat', 1 )
            assert_grep( 'pass*.A=dog.V=carrot', 1 )
            assert_grep( 'pass*.A=cat.V=carrot', 1 )
            assert_grep( 'pass*.A=dog.V=celery', 1 )
            assert_grep( 'pass*.A=cat.V=celery', 1 )
            assert_grep( 'pass*.B=dog.X=carrot', 1 )
            assert_grep( 'pass*.B=cat.X=celery', 1 )
            assert_grep( 'pass*.B=cat.X=carrot', 0 )
            assert_grep( 'pass*.B=dog.X=celery', 0 )
            assert_grep( 'pass*.C=1.Y=2.Z=3', 1 )
            assert_grep( 'pass*.C=4.Y=5.Z=6', 1 )
            assert_grep( 'pass*.C=7.Y=8.Z=9', 1 )
            assert_grep( 'pass*.C=10.Y=11.Z=12', 1 )

            sL = util.grepfiles( 'hello from params1.animal=dog',
                                 'TestResults*/params1.animal=dog/execute.log' )
            assert len( sL ) == 1
            sL = util.grepfiles( 'hello from params1.animal=cat',
                                 'TestResults*/params1.animal=cat/execute.log' )
            assert len( sL ) == 1

            # parameter names are also keywords, but not parameter values
            vtu.runvvtest( '-i -k animal' ).assertCounts( total=2, npass=2 )
            vtu.runvvtest( '-i -k dog' ).assertCounts( total=0 )
            vtu.runvvtest( '-i -k Z' ).assertCounts( total=4, npass=4 )

    def test_duplicate_parameterize_values_is_an_error(self):
        ""
        util.writescript( 'params1.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : animal = dog cat dog
            pass
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=0 )
        assert len( util.greplines( 'skip*duplicate*dog', vrun.out ) ) == 1

    def test_duplicate_parameterize_value_set_is_an_error(self):
        ""
        util.writescript( 'params1.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : thing1,thing2 = dog,cat pig,cat dog,cat
            pass
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=0 )
        assert len( util.greplines( 'skip*duplicate*dog,cat', vrun.out ) ) == 1


#####################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
