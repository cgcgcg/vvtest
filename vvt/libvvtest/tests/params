#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3

from libvvtest.ScriptReader import ScriptReader
import libvvtest.testcreator as testcreator
import libvvtest.parsexml as parsexml
import libvvtest.parsevvt as parsevvt


class parameter_tests( vtu.vvtestTestCase ):

    def test_nominal_parameterize_usage(self):
        ""
        util.writefile( 'basic.xml', """
            <rtest name="basic">
              <parameterize np="1 4 8"/>
              <execute> echo "execute basic2 np = $np" </execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( "-p 'np<8' -P 'np=1'", batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            assert vrun.countGrepLogs( 'execute basic2' ) == 1
            assert vrun.countGrepLogs( 'execute basic2 np = 4' ) == 1

            vrun = vtu.runvvtest( "-p 'np<=8'", batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            vrun = vtu.runvvtest( "-i -v", batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            vrun = vtu.runvvtest( "-i -v -p 'np=4'", batch=batch )
            vrun.assertCounts( total=1, npass=1 )

    def test_using_parameter_exclusion_option(self):
        """
        -p level>0  means  (level defined) AND (level > 0)

        -P level>0  means  NOT [ (level defined) AND (level > 0) ]
                           NOT (level defined) OR NOT (level > 0)
                           (level not defined) OR (level <= 0)
        """
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np = 2
            """ )
        util.writefile( 'btest.vvt', """
            #VVT: parameterize : level = 0 1 2
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( "-p level" )
        vrun.assertCounts( total=3, npass=3 )
        assert vrun.getTestIds() == ['btest.level=0',
                                     'btest.level=1',
                                     'btest.level=2']

        vtu.remove_results()

        vrun = vtu.runvvtest( "-P level" )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == ['atest.np=2']

        vtu.remove_results()

        vrun = vtu.runvvtest( "-p 'level>0'" )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == ['btest.level=1','btest.level=2']

        vtu.remove_results()

        vrun = vtu.runvvtest( "-P 'level>0'" )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == ['atest.np=2','btest.level=0']

    def test_multiple_parameterize(self):
        ""
        util.writefile( 'basic.xml', """
            <rtest name="basic">
              <parameterize np="1 4"/>
              <parameterize dt="0.1 0.01"/>
              <execute> echo "execute basic np = $np dt = $dt" </execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=4, npass=4 )

            lines = util.grepfiles( 'execute basic',
                                'TestResults*/basic.dt=0.01.np=4/execute.log' )
            assert len(lines) == 1 and 'np = 4 dt = 0.01' in lines[0]

            vtu.remove_results()

            vrun = vtu.runvvtest( "-p 'np=4'", batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            lines = util.grepfiles( 'execute basic',
                                'TestResults*/basic.dt=0.01.np=4/execute.log' )
            assert len(lines) == 1 and 'np = 4 dt = 0.01' in lines[0]

            lines = util.grepfiles( 'execute basic',
                                'TestResults*/basic.dt=0.1.np=4/execute.log' )
            assert len(lines) == 1 and 'np = 4 dt = 0.1' in lines[0]

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, npass=2 )

    def test_an_empty_parameterize(self):
        ""
        util.writefile( 'basic.xml', """
            <rtest name="basic">
              <keywords> foobar </keywords>
              <parameterize/>
              <execute> echo "execute basic3 np = $np" </execute>
            </rtest>""" )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=1, npass=1 )

        assert len( util.findfiles( 'execute.log', 'TestResults*' ) ) == 1
        assert vrun.countGrepLogs( 'execute basic3 np = 0' ) == 1

        vtu.remove_results()

        util.writefile( 'basic.xml', """
          <rtest name="basic">
            <keywords> foobar </keywords>
            <parameterize testname="basic"/>
            <execute> echo "execute basic3 np = $np" </execute>
          </rtest>""")
        time.sleep(1)

        vrun = vtu.runvvtest( '-k foobar' )
        vrun.assertCounts( total=1, npass=1 )

        assert len( util.findfiles( 'execute.log', 'TestResults*' ) ) == 1
        assert vrun.countGrepLogs( 'execute basic3 np = 0' ) == 1

    def test_filtering_out_by_parameter_on_a_subsequent_run(self):
        ""
        util.writefile( 'params.xml', """
            <rtest name="params">
              <parameterize AA="1 2"/>
              <parameterize BB="foo bar"/>
              <execute> echo "params AA=$AA BB=$BB" </execute>
            </rtest>""" )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=4, npass=4 )

        vrun = vtu.runvvtest( '-R -p AA=2' )
        vrun.assertCounts( total=2, npass=2 )

        cd = util.globfile( 'TestResults*/params.AA=2.BB=bar' )
        vrun = vtu.runvvtest( '-R', chdir=cd )
        vrun.assertCounts( total=1, npass=1 )

    def test_that_an_analyze_section_will_have_the_parameters_available(self):
        ""
        util.writefile( 'basic.xml', """
            <rtest name="basic">
              <parameterize np="1 4"/>
              <parameterize dt="0.1 0.01"/>
              <execute> echo "execute basic np = $np dt = $dt" </execute>
              <analyze>
                echo "access PARAM_np = $PARAM_np"
                echo "access PARAM_dt = $PARAM_dt"
              </analyze>
            </rtest> """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=5, npass=5 )
        tdir = vrun.resultsDir()

        lines = vrun.greplogs( 'access PARAM_np' )
        assert len(lines) == 1
        assert lines[0].split('=')[1].split() == ['1','4']
        lines = vrun.greplogs( 'access PARAM_dt' )
        assert len(lines) == 1
        assert lines[0].split('=')[1].split() == ['0.1','0.01']

        vrun = vtu.runvvtest( '-R', chdir=tdir+'/basic' )
        vrun.assertCounts( total=1, npass=1 )

        lines = vrun.greplogs( 'access PARAM_np' )
        assert len(lines) == 1
        assert lines[0].split('=')[1].split() == ['1','4']
        lines = vrun.greplogs( 'access PARAM_dt' )
        assert len(lines) == 1
        assert lines[0].split('=')[1].split() == ['0.1','0.01']

        util.rmallfiles()

        util.writefile( 'zip.xml', """
            <rtest name="zip">
              <parameterize np="1 4" dt="0.1 0.01"/>
              <execute> echo "execute zip np = $np dt = $dt" </execute>
              <analyze>
                echo "access PARAM_dt_np = $PARAM_dt_np"
              </analyze>
            </rtest> """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=3, npass=3 )
        tdir = vrun.resultsDir()

        lines = vrun.greplogs( 'access PARAM_dt_np' )
        assert len(lines) == 1
        assert lines[0].split('=')[1].split() == ['0.1/1','0.01/4']

        vrun = vtu.runvvtest( '-R', chdir=tdir+'/zip' )
        vrun.assertCounts( total=1, npass=1 )

        lines = vrun.greplogs( 'access PARAM_dt_np' )
        assert len(lines) == 1
        assert lines[0].split('=')[1].split() == ['0.1/1','0.01/4']

    def test_complex_command_line_parameter_expression_with_rerun(self):
        ""
        util.writefile( 'basic.xml', """
            <rtest name="basic">
              <parameterize isize="1 2 4"/>
              <execute> echo "execute basic isize = $isize" </execute>
              <analyze>
                echo "access PARAM_isize = $PARAM_isize"
              </analyze>
            </rtest> """)
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( "-p 'isize<=2 or not isize'", batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            assert len( glob.glob( 'TestResults*/basic.isize=*' ) ) == 2
            basic_dir = util.globfile( 'TestResults*/basic' )

            vrun = vtu.runvvtest( "-R", batch=batch, chdir=basic_dir )
            vrun.assertCounts( total=1, npass=1 )

    def test_that_an_analyze_sees_restricted_parameters(self):
        ""
        util.writefile( 'basic.xml', """
            <rtest name="basic">
              <parameterize isize="1 2 4"/>
              <execute> echo "execute basic isize = $isize" </execute>
              <analyze>
                echo "access PARAM_isize = $PARAM_isize"
              </analyze>
            </rtest> """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( "-p 'isize<=2'", batch=batch )
            vrun.assertCounts( total=3, npass=3 )
            tdir = vrun.resultsDir()

            lines = util.grepfiles( 'access PARAM_isize',
                                    tdir+'/basic/execute.log' )
            assert len(lines) == 1
            pL = lines[0].split('=',1)[1].strip().split()
            assert pL == ['1', '2']

            vrun = vtu.runvvtest( "-R", batch=batch, chdir=tdir+'/basic' )
            vrun.assertCounts( total=1, npass=1 )

            lines = util.grepfiles( 'access PARAM_isize',
                                    tdir+'/basic/execute.log' )
            assert len(lines) == 1
            pL = lines[0].split('=',1)[1].strip().split()
            assert pL == ['1', '2']

    def test_using_parameterize_with_script_test(self):
        ""
        util.writescript( 'params1.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : animal = dog cat
            import os
            print ( "hello from "+os.path.basename(os.getcwd()) )
            """ )
        util.writescript( 'params2.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : A = dog cat
            #VVT: parameterize : V = carrot celery
            import os
            print ( "hello from "+os.path.basename(os.getcwd()) )
            """ )
        util.writescript( 'params3.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : B,X = dog,carrot cat,celery
            import os
            print ( "hello from "+os.path.basename(os.getcwd()) )
            """ )
        util.writescript( 'params4.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : C, Y, Z = 1 ,2,3  4,5,6
            #VVT::                         7 , 8 , 9   10, 11,12
            import os
            print ( "hello from "+os.path.basename(os.getcwd()) )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=12, npass=12 )

            def assert_grep( pattern, count ):
                assert vrun.countTestLines( pattern ) == count

            assert_grep( 'pass*.animal=dog', 1 )
            assert_grep( 'pass*.animal=cat', 1 )
            assert_grep( 'pass*.A=dog.V=carrot', 1 )
            assert_grep( 'pass*.A=cat.V=carrot', 1 )
            assert_grep( 'pass*.A=dog.V=celery', 1 )
            assert_grep( 'pass*.A=cat.V=celery', 1 )
            assert_grep( 'pass*.B=dog.X=carrot', 1 )
            assert_grep( 'pass*.B=cat.X=celery', 1 )
            assert_grep( 'pass*.B=cat.X=carrot', 0 )
            assert_grep( 'pass*.B=dog.X=celery', 0 )
            assert_grep( 'pass*.C=1.Y=2.Z=3', 1 )
            assert_grep( 'pass*.C=4.Y=5.Z=6', 1 )
            assert_grep( 'pass*.C=7.Y=8.Z=9', 1 )
            assert_grep( 'pass*.C=10.Y=11.Z=12', 1 )

            sL = util.grepfiles( 'hello from params1.animal=dog',
                                 'TestResults*/params1.animal=dog/execute.log' )
            assert len( sL ) == 1
            sL = util.grepfiles( 'hello from params1.animal=cat',
                                 'TestResults*/params1.animal=cat/execute.log' )
            assert len( sL ) == 1

            # parameter names are also keywords, but not parameter values
            vtu.runvvtest( '-i -v -k animal' ).assertCounts( total=2, npass=2 )
            vtu.runvvtest( '-i -v -k dog' ).assertCounts( total=0 )
            vtu.runvvtest( '-i -v -k Z' ).assertCounts( total=4, npass=4 )

    def test_parameterize_parse_errors(self):
        ""
        util.writefile( 'err1.vvt', """
            #VVT: parameterize : np =
            """ )
        util.writefile( 'err2.vvt', """
            #VVT: parameterize : = 2 4
            """ )
        util.writefile( 'err3.vvt', """
            #VVT: parameterize : foo-bar = 2 4
            """ )
        util.writefile( 'err4.vvt', """
            #VVT: parameterize : animal = dog cat dog
            """ )
        util.writefile( 'err4b.vvt', """
            #VVT: parameterize : thing1,thing2 = dog,cat pig,cat dog,cat
            """ )
        util.writefile( 'err5.vvt', """
            #VVT: parameterize : np = 1 4
            #VVT: parameterize : hsize,dt = 1.1, 0.1  2.2, 0.01
            """ )
        util.writefile( 'err6.vvt', """
            #VVT: parameterize : pname = pval p*val
            """ )
        util.writefile( 'err7.vvt', """
            #VVT: parameterize : hsize,dt = 1.1, 0.1  2|2, 0.01
            """ )
        time.sleep(1)

        evaluator = testcreator.ExpressionEvaluator( 'atari', [] )

        vspecs = ScriptReader( 'err1.vvt' )
        self.assertRaises( testcreator.TestSpecError,
                parsevvt.parse_parameterize, vspecs, 'err1', evaluator, None )

        vspecs = ScriptReader( 'err2.vvt' )
        self.assertRaises( testcreator.TestSpecError,
                parsevvt.parse_parameterize, vspecs, 'err2', evaluator, None )

        vspecs = ScriptReader( 'err3.vvt' )
        self.assertRaises( testcreator.TestSpecError,
                parsevvt.parse_parameterize, vspecs, 'err3', evaluator, None )

        vspecs = ScriptReader( 'err4.vvt' )
        self.assertRaises( testcreator.TestSpecError,
                parsevvt.parse_parameterize, vspecs, 'err4', evaluator, None )

        vspecs = ScriptReader( 'err4b.vvt' )
        self.assertRaises( testcreator.TestSpecError,
                parsevvt.parse_parameterize, vspecs, 'err4b', evaluator, None )

        vspecs = ScriptReader( 'err5.vvt' )
        parsevvt.parse_parameterize( vspecs, 'err5', evaluator, {'np':'3'} )
        self.assertRaises( testcreator.TestSpecError,
                parsevvt.parse_parameterize, vspecs, 'err5', evaluator, {'dt':'0.2'} )

        vspecs = ScriptReader( 'err6.vvt' )
        self.assertRaises( testcreator.TestSpecError,
                parsevvt.parse_parameterize, vspecs, 'err6', evaluator, None )

        vspecs = ScriptReader( 'err7.vvt' )
        self.assertRaises( testcreator.TestSpecError,
                parsevvt.parse_parameterize, vspecs, 'err7', evaluator, None )

    def test_for_duplicate_parameters_in_xml_form(self):
        ""
        util.writefile( 'err1.xml', """
            <rtest name="err1">
              <parameterize np="1 4 1"/>
              <execute> echo "execute np = $np" </execute>
            </rtest>""" )
        util.writefile( 'ok1.xml', """
            <rtest name="ok1">
              <parameterize np="1 1" nt="2 4"/>
              <execute> echo "execute np = $np" </execute>
            </rtest>""" )
        util.writefile( 'err2.xml', """
            <rtest name="err2">
              <parameterize np="1 2 1" nt="2 4 2"/>
              <execute> echo "execute np = $np" </execute>
            </rtest>""" )
        time.sleep(1)

        evaluator = testcreator.ExpressionEvaluator( 'atari', [] )

        xdoc = parsexml.read_xml_file( 'err1.xml' )
        self.assertRaises( testcreator.TestSpecError,
                parsexml.parse_parameterize, xdoc, 'err1', evaluator, None )

        xdoc = parsexml.read_xml_file( 'ok1.xml' )
        parsexml.parse_parameterize( xdoc, 'ok1', evaluator, None )

        xdoc = parsexml.read_xml_file( 'err2.xml' )
        self.assertRaises( testcreator.TestSpecError,
            parsexml.parse_parameterize, xdoc, 'err2', evaluator, None )


#####################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
