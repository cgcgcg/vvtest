#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import unittest

import vvtestutils as vtu
import testutils as util
from testutils import print3


class filter_and_keywords( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_filter_by_testname_and_keyword_simultaneously(self):
        ""
        util.writefile( 'atest.xml', """
            <rtest name="atest">
              <parameterize nx="1 4"/>
              <execute>
                set echo
                touch execute_file.np=$np || exit 1
                if ( "$nx" == 4 ) then
                  echo "exiting for nx 4"
                  exit 1
                endif
                unset echo
              </execute>
            </rtest>""" )

        util.writefile( 'btest.xml', """
            <rtest name="btest">
              <parameterize nx="1 4"/>
              <execute>
                set echo
                touch execute_file.np=$np || exit 1
                if ( "$nx" == 4 ) then
                  echo "exiting for nx 4"
                  exit 1
                endif
                unset echo
              </execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=4, npass=2, fail=2 )

            assert vrun.countTestLines( 'pass*atest.nx=1') == 1
            assert vrun.countTestLines( 'pass*btest.nx=1') == 1
            assert vrun.countTestLines( 'fail*atest.nx=4') == 1
            assert vrun.countTestLines( 'fail*btest.nx=4') == 1

            vtu.remove_results()

            vrun = vtu.runvvtest( '-k pass/fail', batch=batch )
            vrun.assertCounts( total=0 )

            vtu.remove_results()

            vrun = vtu.runvvtest( '-k atest/notrun', batch=batch )
            vrun.assertCounts( total=4, npass=2, fail=2 )

            assert vrun.countTestLines( 'pass*atest.nx=1') == 1
            assert vrun.countTestLines( 'pass*btest.nx=1') == 1
            assert vrun.countTestLines( 'fail*atest.nx=4') == 1
            assert vrun.countTestLines( 'fail*btest.nx=4') == 1

            vrun = vtu.runvvtest( '-k atest/fail', batch=batch )
            vrun.assertCounts( total=3, npass=1, fail=2 )

            assert vrun.countTestLines( 'atest*pass*.nx=1') == 1
            assert vrun.countTestLines( 'atest*fail*.nx=4') == 1
            assert vrun.countTestLines( 'btest*pass*.nx=') == 0
            assert vrun.countTestLines( 'btest*fail*.nx=4') == 1

            vrun = vtu.runvvtest( '-k btest -K fail', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            assert vrun.countTestLines( 'atest*pass*.nx=1') == 0
            assert vrun.countTestLines( 'atest*fail*.nx=4') == 0
            assert vrun.countTestLines( 'btest*pass*.nx=') == 1
            assert vrun.countTestLines( 'btest*fail*.nx=4') == 0

            vrun = vtu.runvvtest( '-k atest/fail', batch=batch,
                                    chdir=vrun.resultsDir() )
            vrun.assertCounts( total=3, npass=1, fail=2 )

            assert vrun.countTestLines( 'atest*pass*.nx=1') == 1
            assert vrun.countTestLines( 'atest*fail*.nx=4') == 1
            assert vrun.countTestLines( 'btest*pass*.nx=') == 0
            assert vrun.countTestLines( 'btest*fail*.nx=4') == 1

    def test_xml_test_filter_by_keyword_expression(self):
        """
        filter tests out by command line keyword expression
        """
        util.writefile( 'solar.xml', """
            <rtest name="solar">
              <keywords> earth mars </keywords>
              <execute> echo "solar ran" </execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-k earth', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            vrun = vtu.runvvtest( '-w -K earth', batch=batch )
            vrun.assertCounts( total=0 )

            vrun = vtu.runvvtest( '-w -k earth -K mars', batch=batch )
            vrun.assertCounts( total=0 )

            vrun = vtu.runvvtest( '-w -k earth/mars', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            vrun = vtu.runvvtest( '-w -k venus/mars', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

    def test_special_characters_in_keyword_handling(self):
        ""
        util.writefile( 'extra.xml', """
            <rtest name="extra">
              <keywords> blah-1 foo.2 bar+3 baz=4 mars#5 sun%6 pluto^7 venus:8
                         jupiter~9 jupiter@0 </keywords>
              <execute> echo "extra ran" </execute>
            </rtest>""" )
        time.sleep(1)

        self.run_with_keyword_and_check( 'blah-1' )
        self.run_with_keyword_and_check( 'foo.2' )
        self.run_with_keyword_and_check( 'bar+3' )
        self.run_with_keyword_and_check( 'baz=4' )
        self.run_with_keyword_and_check( 'mars#5' )
        self.run_with_keyword_and_check( 'sun%6' )
        self.run_with_keyword_and_check( 'pluto^7' )
        self.run_with_keyword_and_check( 'venus:8' )
        self.run_with_keyword_and_check( 'jupiter~9' )
        self.run_with_keyword_and_check( 'jupiter@0' )

    def run_with_keyword_and_check(self, keyword):
        ""
        vrun = vtu.runvvtest( '-w -k '+keyword )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.countGrepLogs( 'extra ran' ) == 1

    def test_script_test_filter_by_keyword_expression(self):
        ""
        util.writescript( 'solar.vvt', """
            #!/usr/bin/env python
            #VVT: keywords : earth mars
            print ( 'solar ran' )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-k earth', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            vrun = vtu.runvvtest( '-w -K earth', batch=batch )
            vrun.assertCounts( total=0 )

            vrun = vtu.runvvtest( '-w -k earth -K mars', batch=batch )
            vrun.assertCounts( total=0 )

            vrun = vtu.runvvtest( '-w -k earth/mars', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            vrun = vtu.runvvtest( '-w -k venus/mars', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

    def test_script_test_filter_by_testname_and_keyword_simultaneously(self):
        ""
        util.writescript( 'atest.vvt', """
            #!/usr/bin/env python
            print ( 'executing test' )
            """ )
        util.writescript( 'btest.vvt', """
            #!/usr/bin/env python
            raise Exception( 'fake failure' )
            """ )
        util.writescript( 'ctest.vvt', """
            #!/usr/bin/env python
            print ( 'executing test' )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=2, fail=1 )

            assert vrun.countTestLines( 'pass*atest') == 1
            assert vrun.countTestLines( 'fail*btest') == 1
            assert vrun.countTestLines( 'pass*ctest') == 1

            vrun = vtu.runvvtest( '-k atest/fail', batch=batch )
            vrun.assertCounts( total=2, npass=1, fail=1 )

            assert vrun.countTestLines( 'pass*atest') == 1
            assert vrun.countTestLines( 'fail*btest') == 1
            assert vrun.countTestLines( 'pass*ctest') == 0


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
