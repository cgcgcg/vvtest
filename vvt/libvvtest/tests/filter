#!/usr/bin/env python
#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

import testutils as util
optD,argL = util.initialize( sys.argv )
if 'TESTUTILS_RUNDIR' not in os.environ:
    os.chdir( util.working_directory )

from testutils import *


def main():
    """
    """
    global argL

    if len(argL) == 0:
        argL = """test01 test02 test03 test04 test05 test06
                  test07 test08 test09 test10
               """.split()

    cwd = os.getcwd()
    for func in argL:
        os.chdir( cwd )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )

        # for batch tests
        os.environ['VVTEST_BATCH_READ_INTERVAL'] = '5'
        os.environ['VVTEST_BATCH_READ_TIMEOUT'] = '15'
        os.environ['VVTEST_BATCH_SLEEP_LENGTH'] = '1'

        eval( func+'()' )


########################################################################

def test01():
    """
    apply parameter filtering
    """
    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize np="1 3 6"/>
          <execute>
            set echo
            touch execute_file.np=$np || exit 1
            unset echo
          </execute>
        </rtest>""" )

    run_test01( '' )
    run_test01( '--plat '+core_platform_name()+' --batch' )

def run_test01( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt+' -N 10' )
    testdir = results_dir()
    platname = platform_name( out )

    out,np,nd,nf,nn = run_vvtest( '--plat '+platname+' -i' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0

    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt+' -p np=1 -N 10' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    savedir = os.getcwd()

    os.chdir( testdir ) ; print "cd", testdir

    out,np,nd,nf,nn = run_vvtest( opt+' -R' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    os.chdir( savedir ) ; print "cd .."

    os.system( "ls -l" )
    remove_results()
    os.system( "ls -ltr" )

    out,np,nd,nf,nn = run_vvtest( opt+" -p np<=3 -N 10" )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*np=1') ) == 1
    assert len( greptestlist(out,'pass.*np=3') ) == 1
    assert len( greptestlist(out,'pass.*np=6') ) == 0

    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt+" -p np!=3 -N 10" )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*np=1') ) == 1
    assert len( greptestlist(out,'pass.*np=3') ) == 0
    assert len( greptestlist(out,'pass.*np=6') ) == 1

    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt+" -p np>=3 -N 10" )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*np=1') ) == 0
    assert len( greptestlist(out,'pass.*np=3') ) == 1
    assert len( greptestlist(out,'pass.*np=6') ) == 1

    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt+" -p np>3 -N 10" )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*np=1') ) == 0
    assert len( greptestlist(out,'pass.*np=3') ) == 0
    assert len( greptestlist(out,'pass.*np=6') ) == 1

    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt+" -p np<3 -N 10" )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*np=1') ) == 1
    assert len( greptestlist(out,'pass.*np=3') ) == 0
    assert len( greptestlist(out,'pass.*np=6') ) == 0

    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt+" -p np=1/np=3 -N 10" )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*np=1') ) == 1
    assert len( greptestlist(out,'pass.*np=3') ) == 1
    assert len( greptestlist(out,'pass.*np=6') ) == 0

    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt+" -p np>1 -p np<6 -N 10" )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*np=1') ) == 0
    assert len( greptestlist(out,'pass.*np=3') ) == 1
    assert len( greptestlist(out,'pass.*np=6') ) == 0


#######################################################################

def test02():
    """
    filter by testname and result keyword at the same time
    """
    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize nx="1 4"/>
          <execute>
            set echo
            touch execute_file.np=$np || exit 1
            if ( "$nx" == 4 ) then
              echo "exiting for nx 4"
              exit 1
            endif
            unset echo
          </execute>
        </rtest>""" )

    writefile( 'btest.xml', """
        <rtest name="btest">
          <parameterize nx="1 4"/>
          <execute>
            set echo
            touch execute_file.np=$np || exit 1
            if ( "$nx" == 4 ) then
              echo "exiting for nx 4"
              exit 1
            endif
            unset echo
          </execute>
        </rtest>""" )

    run_test02( '' )
    run_test02( '--plat '+core_platform_name()+' --batch' )

def run_test02( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 2 and nd == 0 and nf == 2 and nn == 0
    platname = platform_name( out )

    assert len( greptestlist(out,'pass.*atest\.nx=1') ) == 1
    assert len( greptestlist(out,'pass.*btest\.nx=1') ) == 1
    assert len( greptestlist(out,'fail.*atest\.nx=4') ) == 1
    assert len( greptestlist(out,'fail.*btest\.nx=4') ) == 1

    out,np,nd,nf,nn = run_vvtest( opt+' -k atest/fail' )
    assert np == 1 and nd == 0 and nf == 2 and nn == 0

    assert len( greptestlist( out, 'atest.*pass.*\.nx=1' ) ) == 1
    assert len( greptestlist( out, 'atest.*fail.*\.nx=4' ) ) == 1
    assert len( greptestlist( out, 'btest.*pass.*\.nx='  ) ) == 0
    assert len( greptestlist( out, 'btest.*fail.*\.nx=4' ) ) == 1


#######################################################################

def test03():
    """
    filter tests out by command line keyword expression
    """
    writefile( 'solar.xml', """
        <rtest name="solar">
          <keywords> earth mars </keywords>
          <execute> echo "solar ran" </execute>
        </rtest>""" )

    run_test03( '' )
    run_test03( '--plat '+core_platform_name()+' --batch' )

def run_test03( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt+' -k earth' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )

    out,np,nd,nf,nn = run_vvtest( opt+' -w -K earth' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( opt+' -w -k earth -K mars' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( opt+' -w -k earth/mars' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( opt+' -w -k venus/mars' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0


#######################################################################

def test04():
    """
    check usage of special characters in the keywords
    """
    writefile( 'extra.xml', """
        <rtest name="extra">
          <keywords> blah-1 foo.2 bar+3 baz=4 mars#5 sun%6 pluto^7 venus:8
                     jupiter~9 jupiter@0 </keywords>
          <execute> echo "extra ran" </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( '-k blah-1' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    rdir = results_dir()
    assert len( filegrep( rdir+'/extra/execute.log', 'extra ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k foo.2' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'extra ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k bar+3' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'extra ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k baz=4' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'extra ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k mars#5' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'extra ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k sun%6' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'extra ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k pluto^7' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'extra ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k venus:8' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'extra ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k jupiter~9' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'extra ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k jupiter@0' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'extra ran' ) ) == 1


#######################################################################

def test05():
    """
    script test, filter tests out by command line keyword expression
    """
    writescript( 'solar.vvt', """
        #!/usr/bin/env python
        #VVT: keywords : earth mars
        print ( 'solar ran' )
        """ )

    run_test05( '' )
    run_test05( '--plat '+core_platform_name()+' --batch' )

def run_test05( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt+' -k earth' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )

    out,np,nd,nf,nn = run_vvtest( opt+' -w -K earth' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( opt+' -w -k earth -K mars' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( opt+' -w -k earth/mars' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( opt+' -w -k venus/mars' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0


def test06():
    """
    script test, filter by testname and result keyword at the same time
    """
    writescript( 'atest.vvt', """
        #!/usr/bin/env python
        print ( 'executing test' )
        """ )
    writescript( 'btest.vvt', """
        #!/usr/bin/env python
        raise Exception( 'fake failure' )
        """ )
    writescript( 'ctest.vvt', """
        #!/usr/bin/env python
        print ( 'executing test' )
        """ )

    run_test06( '' )
    run_test06( '--plat '+core_platform_name()+' --batch' )

def run_test06( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 2 and nd == 0 and nf == 1 and nn == 0
    platname = platform_name( out )

    assert len( greptestlist(out,'pass.*atest') ) == 1
    assert len( greptestlist(out,'fail.*btest') ) == 1
    assert len( greptestlist(out,'pass.*ctest') ) == 1

    out,np,nd,nf,nn = run_vvtest( opt+' -k atest/fail' )
    assert np == 1 and nd == 0 and nf == 1 and nn == 0

    assert len( greptestlist(out,'pass.*atest') ) == 1
    assert len( greptestlist(out,'fail.*btest') ) == 1
    assert len( greptestlist(out,'pass.*ctest') ) == 0


def test07():
    """
    filter out tests if they exceed the max num processors
    """
    writescript( 'atest.vvt', """
        #!/usr/bin/env python
        import script_util as vvt
        print ( 'executing test' )
        """ )
    writescript( 'btest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np = 1 2 4
        import script_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )
    writescript( 'ctest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np = 1 2 4
        #VVT: analyze : --analyze
        import sys
        import script_util as vvt
        if '--analyze' in sys.argv:
            print ( 'executing analyze, np='+str(vvt.PARAM_np) )
        else:
            print ( 'executing test, np='+str(vvt.np) )
        """ )
    writefile( 'xtest.xml', """
        <rtest name="xtest">
          <execute> echo "executing test" </execute>
        </rtest>""" )
    writefile( 'ytest.xml', """
        <rtest name="ytest">
          <parameterize np="1 2 4"/>
          <execute> echo "executing test, np=$np" </execute>
        </rtest>""" )
    writefile( 'ztest.xml', """
        <rtest name="ztest">
          <parameterize np="1 2 4"/>
          <execute> echo "executing test, np=$np" </execute>
          <analyze> echo "executing analyze, np=$PARAM_np" </analyze>
        </rtest>""" )

    run_test07( '' )
    run_test07( '--plat '+core_platform_name()+' --batch' )

def run_test07( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 16 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )
    tdir = results_dir()

    remove_results()
    out,np,nd,nf,nn = run_vvtest( opt+' -n 1' )
    assert np == 16 and nd == 0 and nf == 0 and nn == 0

    remove_results()
    out,np,nd,nf,nn = run_vvtest( opt+' -N 2' )
    assert np == 6 and nd == 0 and nf == 0 and nn == 0
    assert len( glob.glob( tdir+'/atest*/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/xtest*/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/btest*/execute.log' ) ) == 2
    assert len( glob.glob( tdir+'/ctest*/execute.log' ) ) == 0
    assert len( glob.glob( tdir+'/ytest*/execute.log' ) ) == 2
    assert len( glob.glob( tdir+'/ztest*/execute.log' ) ) == 0

    remove_results()
    out,np,nd,nf,nn = run_vvtest( opt+' -n 1 -N 2' )
    assert np == 6 and nd == 0 and nf == 0 and nn == 0
    assert len( glob.glob( tdir+'/atest*/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/xtest*/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/btest*/execute.log' ) ) == 2
    assert len( glob.glob( tdir+'/ctest*/execute.log' ) ) == 0
    assert len( glob.glob( tdir+'/ytest*/execute.log' ) ) == 2
    assert len( glob.glob( tdir+'/ztest*/execute.log' ) ) == 0

    remove_results()
    out,np,nd,nf,nn = run_vvtest( opt+' -N 4' )
    assert np == 16 and nd == 0 and nf == 0 and nn == 0

    remove_results()
    out,np,nd,nf,nn = run_vvtest( opt.split()+['-p', 'np<=2 or not np'] )
    assert np == 12 and nd == 0 and nf == 0 and nn == 0
    assert len( glob.glob( tdir+'/atest*/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/xtest*/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/btest*/execute.log' ) ) == 2
    assert len( glob.glob( tdir+'/ctest*/execute.log' ) ) == 3
    assert len( glob.glob( tdir+'/ytest*/execute.log' ) ) == 2
    assert len( glob.glob( tdir+'/ztest*/execute.log' ) ) == 3


def test08():
    """
    batch should not prune based on max procs
    """
    platname = core_platform_name()

    # determine the max num procs for this platform
    writescript( "null.vvt", """
        #!/bin/sh
        echo "null"
        """ )
    out,np,nd,nf,nn = run_vvtest( '--plat '+platname )
    tdir = results_dir()
    os.remove( 'null.vvt' )
    L = grep( out, 'max procs' )
    assert len(L) == 1
    maxprocs = L[0].split( 'max procs', 1 )[1].strip().lstrip('=').strip()
    maxprocs = int( maxprocs )
    assert maxprocs > 0

    remove_results()

    writescript( 'atest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np=1
        import script_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )
    writescript( 'btest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np="""+str(maxprocs)+"""
        import script_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )
    writescript( 'ctest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np="""+str(maxprocs+1)+"""
        import script_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )
    writescript( 'dtest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np="""+str(maxprocs+2)+"""
        import script_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )

    cmd = '-N '+str(maxprocs+1)+' --batch --plat '+platname
    out,np,nd,nf,nn = run_vvtest( cmd )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0

    assert os.path.exists( tdir+'/atest.np=1/execute.log' )
    assert os.path.exists( tdir+'/btest.np='+str(maxprocs)+'/execute.log' )
    assert os.path.exists( tdir+'/ctest.np='+str(maxprocs+1)+'/execute.log' )
    assert len( glob.glob( tdir+'/dtest.*/execute.log' ) ) == 0


def test09():
    """
    tests filtered by -N should be removed from the test list
    """
    writescript( 'btest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np = 1 2 4
        import script_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )
    writescript( 'ctest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np = 1 3 4
        #VVT: analyze : --analyze
        import sys
        import script_util as vvt
        if '--analyze' in sys.argv:
            print ( 'executing analyze, np='+str(vvt.PARAM_np) )
        else:
            print ( 'executing test, np='+str(vvt.np) )
        """ )

    run_test09( '' )
    run_test09( '--plat '+core_platform_name()+' --batch' )

def run_test09( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 7 and nd == 0 and nf == 0 and nn == 0

    platname = platform_name( out )
    tdir = results_dir()

    # first check that -N 2 does not remove tests if they are already there
    out,np,nd,nf,nn = run_vvtest( opt+' -R -N 2' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    L = testlist( out )
    assert len(L) == 2
    assert L[0][-1].endswith( os.sep+'btest.np=1' )
    assert L[1][-1].endswith( os.sep+'btest.np=2' )

    out,np,nd,nf,nn = run_vvtest( opt+' -R' )
    assert np == 7 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( opt+' -R', directory=tdir )
    assert np == 7 and nd == 0 and nf == 0 and nn == 0

    remove_results()
    out,np,nd,nf,nn = run_vvtest( opt+' -N 2' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    L = testlist( out )
    assert len(L) == 2
    assert L[0][-1].endswith( os.sep+'btest.np=1' )
    assert L[1][-1].endswith( os.sep+'btest.np=2' )

    out,np,nd,nf,nn = run_vvtest( opt+' -R', directory=tdir )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    L = testlist( out )
    assert len(L) == 2
    assert L[0][-1] == 'btest.np=1'
    assert L[1][-1] == 'btest.np=2'


def test10():
    """
    filter tests out by input file search
    """
    writefile( 'solar.inp', """
        foo and bar
        this and that
        """ )
    writefile( 'solar.xml', """
        <rtest name="solar">
          <execute> echo "solar ran" </execute>
          <link_files> solar.inp </link_files>
        </rtest>""" )
    writescript( 'extrasolar.vvt', """
        #!/usr/bin/env python
        #VVT: link : solar.inp
        import os
        print ( "extrasolar ran" )
        """ )

    run_test10( '' )
    run_test10( '--plat '+core_platform_name()+' --batch' )

def run_test10( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )

    remove_results()
    out,np,nd,nf,nn = run_vvtest( opt+' --search foo' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0

    remove_results()
    out,np,nd,nf,nn = run_vvtest( opt+' --search aliensrock' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    remove_results()
    out,np,nd,nf,nn = run_vvtest( opt+' --search foo' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( opt+' -R --search aliensrock' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( opt+' -R --search foo' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0


#######################################################################

main()
