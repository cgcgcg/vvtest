#!/usr/bin/env python

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

# this will os.chdir() to a subdirectory
from testutils import *


def main():
    """
    """
    argL = get_arg_list()

    if len(argL) == 0:
        argL = """test01 test01batch test02 test03 test04 test05 test06
                  test07 test08 test09
               """.split()

    # set these for the batch tests
    os.environ['VVTEST_BATCH_READ_INTERVAL'] = '5'
    os.environ['VVTEST_BATCH_READ_TIMEOUT'] = '15'
    os.environ['VVTEST_BATCH_SLEEP_LENGTH'] = '1'
    
    cwd = os.getcwd()
    for func in argL:
        os.chdir( cwd )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )
        eval( func+'()' )


########################################################################

def test01():
    """
    apply parameter filtering
    """
    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize np="1 3 6"/>
          <execute>
            set echo
            touch execute_file.np=$np || exit 1
            unset echo
          </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    testdir = results_dir()

    out,np,nd,nf,nn = run_vvtest( '-i' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0

    remove_results()

    out,np,nd,nf,nn = run_vvtest( '-p np=1' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    savedir = os.getcwd()

    os.chdir( testdir ) ; print "cd", testdir

    out,np,nd,nf,nn = run_vvtest( '-R' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    os.chdir( savedir ) ; print "cd .."

    os.system( "ls -l" )
    remove_results()
    os.system( "ls -ltr" )

    out,np,nd,nf,nn = run_vvtest( "-p np<=3" )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*np=1') ) == 1
    assert len( greptestlist(out,'pass.*np=3') ) == 1
    assert len( greptestlist(out,'pass.*np=6') ) == 0

    remove_results()

    out,np,nd,nf,nn = run_vvtest( "-p np!=3" )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*np=1') ) == 1
    assert len( greptestlist(out,'pass.*np=3') ) == 0
    assert len( greptestlist(out,'pass.*np=6') ) == 1

    remove_results()

    out,np,nd,nf,nn = run_vvtest( "-p np>=3" )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*np=1') ) == 0
    assert len( greptestlist(out,'pass.*np=3') ) == 1
    assert len( greptestlist(out,'pass.*np=6') ) == 1

    remove_results()

    out,np,nd,nf,nn = run_vvtest( "-p np>3" )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*np=1') ) == 0
    assert len( greptestlist(out,'pass.*np=3') ) == 0
    assert len( greptestlist(out,'pass.*np=6') ) == 1

    remove_results()

    out,np,nd,nf,nn = run_vvtest( "-p np<3" )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*np=1') ) == 1
    assert len( greptestlist(out,'pass.*np=3') ) == 0
    assert len( greptestlist(out,'pass.*np=6') ) == 0

    remove_results()

    out,np,nd,nf,nn = run_vvtest( "-p np=1/np=3" )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*np=1') ) == 1
    assert len( greptestlist(out,'pass.*np=3') ) == 1
    assert len( greptestlist(out,'pass.*np=6') ) == 0

    remove_results()

    out,np,nd,nf,nn = run_vvtest( "-p np>1 -p np<6" )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*np=1') ) == 0
    assert len( greptestlist(out,'pass.*np=3') ) == 1
    assert len( greptestlist(out,'pass.*np=6') ) == 0


def test01batch():
    """
    apply parameter filtering
    """
    # determine the platform
    writefile( "null.xml", """
        <rtest name="null">
        </rtest>""" )
    out,np,nd,nf,nn = run_vvtest()
    platname = platform_name( out )
    os.remove( 'null.xml' )
    remove_results()
    
    if platname in batchplatforms:
        
        writefile( 'atest.xml', """
            <rtest name="atest">
              <parameterize np="1 3 6"/>
              <execute>
                set echo
                touch execute_file.np=$np || exit 1
                unset echo
              </execute>
            </rtest>""" )


        out,np,nd,nf,nn = run_vvtest( '--batch' )
        testdir = results_dir()

        out,np,nd,nf,nn = run_vvtest( '-i' )
        assert np == 3 and nd == 0 and nf == 0 and nn == 0

        remove_results()

        out,np,nd,nf,nn = run_vvtest( '-p np=1 --batch' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        savedir = os.getcwd()

        os.chdir( testdir ) ; print "cd", testdir

        out,np,nd,nf,nn = run_vvtest( '-R --batch' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        os.chdir( savedir ) ; print "cd .."

        os.system( "ls -l" )
        remove_results()
        os.system( "ls -ltr" )

        out,np,nd,nf,nn = run_vvtest( "-p np<=3 --batch" )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        assert len( greptestlist(out,'pass.*np=1') ) == 1
        assert len( greptestlist(out,'pass.*np=3') ) == 1
        assert len( greptestlist(out,'pass.*np=6') ) == 0

        remove_results()

        out,np,nd,nf,nn = run_vvtest( "-p np!=3 --batch" )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        assert len( greptestlist(out,'pass.*np=1') ) == 1
        assert len( greptestlist(out,'pass.*np=3') ) == 0
        assert len( greptestlist(out,'pass.*np=6') ) == 1

        remove_results()

        out,np,nd,nf,nn = run_vvtest( "-p np>=3 --batch" )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        assert len( greptestlist(out,'pass.*np=1') ) == 0
        assert len( greptestlist(out,'pass.*np=3') ) == 1
        assert len( greptestlist(out,'pass.*np=6') ) == 1

        remove_results()

        out,np,nd,nf,nn = run_vvtest( "-p np>3 --batch" )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        assert len( greptestlist(out,'pass.*np=1') ) == 0
        assert len( greptestlist(out,'pass.*np=3') ) == 0
        assert len( greptestlist(out,'pass.*np=6') ) == 1

        remove_results()

        out,np,nd,nf,nn = run_vvtest( "-p np<3 --batch" )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        assert len( greptestlist(out,'pass.*np=1') ) == 1
        assert len( greptestlist(out,'pass.*np=3') ) == 0
        assert len( greptestlist(out,'pass.*np=6') ) == 0

        remove_results()

        out,np,nd,nf,nn = run_vvtest( "-p np=1/np=3 --batch" )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        assert len( greptestlist(out,'pass.*np=1') ) == 1
        assert len( greptestlist(out,'pass.*np=3') ) == 1
        assert len( greptestlist(out,'pass.*np=6') ) == 0

        remove_results()

        out,np,nd,nf,nn = run_vvtest( "-p np>1 -p np<6 --batch" )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        assert len( greptestlist(out,'pass.*np=1') ) == 0
        assert len( greptestlist(out,'pass.*np=3') ) == 1
        assert len( greptestlist(out,'pass.*np=6') ) == 0


#######################################################################

def test02():
    """
    filter by testname and result keyword at the same time
    """
    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize nx="1 4"/>
          <execute>
            set echo
            touch execute_file.np=$np || exit 1
            if ( "$nx" == 4 ) then
              echo "exiting for nx 4"
              exit 1
            endif
            unset echo
          </execute>
        </rtest>""" )

    writefile( 'btest.xml', """
        <rtest name="btest">
          <parameterize nx="1 4"/>
          <execute>
            set echo
            touch execute_file.np=$np || exit 1
            if ( "$nx" == 4 ) then
              echo "exiting for nx 4"
              exit 1
            endif
            unset echo
          </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 0 and nf == 2 and nn == 0
    platname = platform_name( out )

    assert len( greptestlist(out,'pass.*atest\.nx=1') ) == 1
    assert len( greptestlist(out,'pass.*btest\.nx=1') ) == 1
    assert len( greptestlist(out,'fail.*atest\.nx=4') ) == 1
    assert len( greptestlist(out,'fail.*btest\.nx=4') ) == 1

    out,np,nd,nf,nn = run_vvtest( '-k atest/fail' )
    assert np == 1 and nd == 0 and nf == 2 and nn == 0

    assert len( greptestlist( out, 'atest.*pass.*\.nx=1' ) ) == 1
    assert len( greptestlist( out, 'atest.*fail.*\.nx=4' ) ) == 1
    assert len( greptestlist( out, 'btest.*pass.*\.nx='  ) ) == 0
    assert len( greptestlist( out, 'btest.*fail.*\.nx=4' ) ) == 1
    
    if platname in batchplatforms:
        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--batch' )
        assert np == 2 and nd == 0 and nf == 2 and nn == 0

        assert len( greptestlist(out,'pass.*atest\.nx=1') ) == 1
        assert len( greptestlist(out,'pass.*btest\.nx=1') ) == 1
        assert len( greptestlist(out,'fail.*atest\.nx=4') ) == 1
        assert len( greptestlist(out,'fail.*btest\.nx=4') ) == 1

        out,np,nd,nf,nn = run_vvtest( '-k atest/fail --batch' )
        assert np == 1 and nd == 0 and nf == 2 and nn == 0
        
        assert len( greptestlist( out, 'atest.*pass.*\.nx=1' ) ) == 1
        assert len( greptestlist( out, 'atest.*fail.*\.nx=4' ) ) == 1
        assert len( greptestlist( out, 'btest.*pass.*\.nx='  ) ) == 0
        assert len( greptestlist( out, 'btest.*fail.*\.nx=4' ) ) == 1


#######################################################################

def test03():
    """
    filter tests out by command line keyword expression
    """
    writefile( 'solar.xml', """
        <rtest name="solar">
          <keywords> earth mars </keywords>
          <execute> echo "solar ran" </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( '-k earth' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )

    out,np,nd,nf,nn = run_vvtest( '-w -K earth' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-w -k earth -K mars' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-w -k earth/mars' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-w -k venus/mars' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    if platname in batchplatforms:
        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '-k earth --batch' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        out,np,nd,nf,nn = run_vvtest( '-w -K earth --batch' )
        assert np == 0 and nd == 0 and nf == 0 and nn == 0

        out,np,nd,nf,nn = run_vvtest( '-w -k earth -K mars --batch' )
        assert np == 0 and nd == 0 and nf == 0 and nn == 0

        out,np,nd,nf,nn = run_vvtest( '-w -k earth/mars --batch' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        out,np,nd,nf,nn = run_vvtest( '-w -k venus/mars --batch' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0


#######################################################################

def test04():
    """
    check usage of special characters in the keywords
    """
    writefile( 'extra.xml', """
        <rtest name="extra">
          <keywords> blah-1 foo.2 bar+3 baz=4 mars#5 sun%6 pluto^7 venus:8
                     jupiter~9 </keywords>
          <execute keywords="blah-1"> echo "dash ran" </execute>
          <execute keywords="foo.2 "> echo "dot ran" </execute>
          <execute keywords="bar+3"> echo "plus ran" </execute>
          <execute keywords="baz=4"> echo "equals ran" </execute>
          <execute keywords="mars#5"> echo "sharp ran" </execute>
          <execute keywords="sun%6 "> echo "percent ran" </execute>
          <execute keywords="pluto^7"> echo "carrot ran" </execute>
          <execute keywords="venus:8"> echo "colon ran" </execute>
          <execute keywords="jupiter~9"> echo "tilde ran" </execute>
          <execute keywords="jupiter@0"> echo "atsign ran" </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( '-k blah-1' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    rdir = results_dir()
    assert len( filegrep( rdir+'/extra/execute.log', 'dash ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k foo.2' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'dot ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k bar+3' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'plus ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k baz=4' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'equals ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k mars#5' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'sharp ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k sun%6' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'percent ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k pluto^7' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'carrot ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k venus:8' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'colon ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k jupiter~9' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'tilde ran' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-w -k jupiter@0' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( rdir+'/extra/execute.log', 'atsign ran' ) ) == 1


#######################################################################

def test05():
    """
    script test, filter tests out by command line keyword expression
    """
    writescript( 'solar.vvt', """
        #!/usr/bin/env python
        #VVT: keywords : earth mars
        print ( 'solar ran' )
        """ )

    out,np,nd,nf,nn = run_vvtest( '-k earth' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )

    out,np,nd,nf,nn = run_vvtest( '-w -K earth' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-w -k earth -K mars' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-w -k earth/mars' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-w -k venus/mars' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    if platname in batchplatforms:
        remove_results()

        out,np,nd,nf,nn = run_vvtest( '-k earth --batch' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        out,np,nd,nf,nn = run_vvtest( '-w -K earth --batch' )
        assert np == 0 and nd == 0 and nf == 0 and nn == 0

        out,np,nd,nf,nn = run_vvtest( '-w -k earth -K mars --batch' )
        assert np == 0 and nd == 0 and nf == 0 and nn == 0

        out,np,nd,nf,nn = run_vvtest( '-w -k earth/mars --batch' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        out,np,nd,nf,nn = run_vvtest( '-w -k venus/mars --batch' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0


def test06():
    """
    script test, filter by testname and result keyword at the same time
    """
    writescript( 'atest.vvt', """
        #!/usr/bin/env python
        print ( 'executing test' )
        """ )
    writescript( 'btest.vvt', """
        #!/usr/bin/env python
        raise Exception( 'fake failure' )
        """ )
    writescript( 'ctest.vvt', """
        #!/usr/bin/env python
        print ( 'executing test' )
        """ )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 0 and nf == 1 and nn == 0
    platname = platform_name( out )

    assert len( greptestlist(out,'pass.*atest') ) == 1
    assert len( greptestlist(out,'fail.*btest') ) == 1
    assert len( greptestlist(out,'pass.*ctest') ) == 1

    out,np,nd,nf,nn = run_vvtest( '-k atest/fail' )
    assert np == 1 and nd == 0 and nf == 1 and nn == 0

    assert len( greptestlist(out,'pass.*atest') ) == 1
    assert len( greptestlist(out,'fail.*btest') ) == 1
    assert len( greptestlist(out,'pass.*ctest') ) == 0

    if platname in batchplatforms:
        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--batch' )
        assert np == 2 and nd == 0 and nf == 1 and nn == 0
        platname = platform_name( out )

        assert len( greptestlist(out,'pass.*atest') ) == 1
        assert len( greptestlist(out,'fail.*btest') ) == 1
        assert len( greptestlist(out,'pass.*ctest') ) == 1

        out,np,nd,nf,nn = run_vvtest( '-k atest/fail --batch' )
        assert np == 1 and nd == 0 and nf == 1 and nn == 0

        assert len( greptestlist(out,'pass.*atest') ) == 1
        assert len( greptestlist(out,'fail.*btest') ) == 1
        assert len( greptestlist(out,'pass.*ctest') ) == 0


def test07():
    """
    filter out tests if they exceed the max num processors
    """
    writescript( 'atest.vvt', """
        #!/usr/bin/env python
        import script_util as vvt
        print ( 'executing test' )
        """ )
    writescript( 'btest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np = 1 2 4
        import script_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )
    writescript( 'ctest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np = 1 2 4
        #VVT: analyze : --analyze
        import sys
        import script_util as vvt
        if '--analyze' in sys.argv:
            print ( 'executing analyze, np='+str(vvt.PARAM_np) )
        else:
            print ( 'executing test, np='+str(vvt.np) )
        """ )
    writefile( 'xtest.xml', """
        <rtest name="xtest">
          <execute> echo "executing test" </execute>
        </rtest>""" )
    writefile( 'ytest.xml', """
        <rtest name="ytest">
          <parameterize np="1 2 4"/>
          <execute> echo "executing test, np=$np" </execute>
        </rtest>""" )
    writefile( 'ztest.xml', """
        <rtest name="ztest">
          <parameterize np="1 2 4"/>
          <execute> echo "executing test, np=$np" </execute>
          <analyze> echo "executing analyze, np=$PARAM_np" </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 16 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )
    tdir = results_dir()

    remove_results()
    out,np,nd,nf,nn = run_vvtest( '-n 1' )
    assert np == 16 and nd == 0 and nf == 0 and nn == 0

    remove_results()
    out,np,nd,nf,nn = run_vvtest( '-N 2' )
    assert np == 6 and nd == 0 and nf == 0 and nn == 0
    assert len( glob.glob( tdir+'/atest*/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/xtest*/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/btest*/execute.log' ) ) == 2
    assert len( glob.glob( tdir+'/ctest*/execute.log' ) ) == 0
    assert len( glob.glob( tdir+'/ytest*/execute.log' ) ) == 2
    assert len( glob.glob( tdir+'/ztest*/execute.log' ) ) == 0

    remove_results()
    out,np,nd,nf,nn = run_vvtest( '-n 1 -N 2' )
    assert np == 6 and nd == 0 and nf == 0 and nn == 0
    assert len( glob.glob( tdir+'/atest*/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/xtest*/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/btest*/execute.log' ) ) == 2
    assert len( glob.glob( tdir+'/ctest*/execute.log' ) ) == 0
    assert len( glob.glob( tdir+'/ytest*/execute.log' ) ) == 2
    assert len( glob.glob( tdir+'/ztest*/execute.log' ) ) == 0

    remove_results()
    out,np,nd,nf,nn = run_vvtest( '-N 4' )
    assert np == 16 and nd == 0 and nf == 0 and nn == 0

    remove_results()
    out,np,nd,nf,nn = run_vvtest( ['-p', 'np<=2 or not np'] )
    assert np == 12 and nd == 0 and nf == 0 and nn == 0
    assert len( glob.glob( tdir+'/atest*/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/xtest*/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/btest*/execute.log' ) ) == 2
    assert len( glob.glob( tdir+'/ctest*/execute.log' ) ) == 3
    assert len( glob.glob( tdir+'/ytest*/execute.log' ) ) == 2
    assert len( glob.glob( tdir+'/ztest*/execute.log' ) ) == 3
    
    if platname in batchplatforms:
        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--batch' )
        assert np == 16 and nd == 0 and nf == 0 and nn == 0

        remove_results()
        out,np,nd,nf,nn = run_vvtest( '-n 1 --batch' )
        assert np == 16 and nd == 0 and nf == 0 and nn == 0

        remove_results()
        out,np,nd,nf,nn = run_vvtest( '-N 2 --batch' )
        assert np == 6 and nd == 0 and nf == 0 and nn == 0
        assert len( glob.glob( tdir+'/atest*/execute.log' ) ) == 1
        assert len( glob.glob( tdir+'/xtest*/execute.log' ) ) == 1
        assert len( glob.glob( tdir+'/btest*/execute.log' ) ) == 2
        assert len( glob.glob( tdir+'/ctest*/execute.log' ) ) == 0
        assert len( glob.glob( tdir+'/ytest*/execute.log' ) ) == 2
        assert len( glob.glob( tdir+'/ztest*/execute.log' ) ) == 0

        remove_results()
        out,np,nd,nf,nn = run_vvtest( '-n 1 -N 2 --batch' )
        assert np == 6 and nd == 0 and nf == 0 and nn == 0
        assert len( glob.glob( tdir+'/atest*/execute.log' ) ) == 1
        assert len( glob.glob( tdir+'/xtest*/execute.log' ) ) == 1
        assert len( glob.glob( tdir+'/btest*/execute.log' ) ) == 2
        assert len( glob.glob( tdir+'/ctest*/execute.log' ) ) == 0
        assert len( glob.glob( tdir+'/ytest*/execute.log' ) ) == 2
        assert len( glob.glob( tdir+'/ztest*/execute.log' ) ) == 0

        remove_results()
        out,np,nd,nf,nn = run_vvtest( '-N 4 --batch' )
        assert np == 16 and nd == 0 and nf == 0 and nn == 0

        remove_results()
        out,np,nd,nf,nn = run_vvtest( ['-p', 'np<=2 or not np', '--batch'] )
        assert np == 12 and nd == 0 and nf == 0 and nn == 0
        assert len( glob.glob( tdir+'/atest*/execute.log' ) ) == 1
        assert len( glob.glob( tdir+'/xtest*/execute.log' ) ) == 1
        assert len( glob.glob( tdir+'/btest*/execute.log' ) ) == 2
        assert len( glob.glob( tdir+'/ctest*/execute.log' ) ) == 3
        assert len( glob.glob( tdir+'/ytest*/execute.log' ) ) == 2
        assert len( glob.glob( tdir+'/ztest*/execute.log' ) ) == 3


def test08():
    """
    batch should not prune based on max procs
    """
    # determine the max num procs for this platform
    writescript( "null.vvt", """
        #!/bin/sh
        echo "null"
        """ )
    out,np,nd,nf,nn = run_vvtest()
    platname = platform_name( out )
    tdir = results_dir()
    os.remove( 'null.vvt' )
    L = grep( out, 'max procs' )
    assert len(L) == 1
    maxprocs = L[0].split( 'max procs', 1 )[1].strip().lstrip('=').strip()
    maxprocs = int( maxprocs )
    assert maxprocs > 0

    if platname in batchplatforms:
        remove_results()
        
        writescript( 'atest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np=1
            import script_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        writescript( 'btest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np="""+str(maxprocs)+"""
            import script_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        writescript( 'ctest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np="""+str(maxprocs+1)+"""
            import script_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        writescript( 'dtest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np="""+str(maxprocs+2)+"""
            import script_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )

        out,np,nd,nf,nn = run_vvtest( '-N '+str(maxprocs+1)+' --batch' )
        assert np == 3 and nd == 0 and nf == 0 and nn == 0
        
        assert os.path.exists( tdir+'/atest.np=1/execute.log' )
        assert os.path.exists( tdir+'/btest.np='+str(maxprocs)+'/execute.log' )
        assert os.path.exists( tdir+'/ctest.np='+str(maxprocs+1)+'/execute.log' )
        assert len( glob.glob( tdir+'/dtest.*/execute.log' ) ) == 0



def test09():
    """
    tests filtered by -N should be removed from the test list
    """
    writescript( 'btest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np = 1 2 4
        import script_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )
    writescript( 'ctest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np = 1 3 4
        #VVT: analyze : --analyze
        import sys
        import script_util as vvt
        if '--analyze' in sys.argv:
            print ( 'executing analyze, np='+str(vvt.PARAM_np) )
        else:
            print ( 'executing test, np='+str(vvt.np) )
        """ )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 7 and nd == 0 and nf == 0 and nn == 0

    platname = platform_name( out )
    tdir = results_dir()

    # first check that -N 2 does not remove tests if they are already there
    out,np,nd,nf,nn = run_vvtest( '-R -N 2' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    L = testlist( out )
    assert len(L) == 2
    assert L[0][-1].endswith( os.sep+'btest.np=1' )
    assert L[1][-1].endswith( os.sep+'btest.np=2' )

    out,np,nd,nf,nn = run_vvtest( '-R' )
    assert np == 7 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-R', directory=tdir )
    assert np == 7 and nd == 0 and nf == 0 and nn == 0

    remove_results()
    out,np,nd,nf,nn = run_vvtest( '-N 2' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    L = testlist( out )
    assert len(L) == 2
    assert L[0][-1].endswith( os.sep+'btest.np=1' )
    assert L[1][-1].endswith( os.sep+'btest.np=2' )

    out,np,nd,nf,nn = run_vvtest( '-R', directory=tdir )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    L = testlist( out )
    assert len(L) == 2
    assert L[0][-1] == 'btest.np=1'
    assert L[1][-1] == 'btest.np=2'

    if platname in batchplatforms:
        remove_results()

        out,np,nd,nf,nn = run_vvtest( '--batch' )
        assert np == 7 and nd == 0 and nf == 0 and nn == 0

        # first check that -N 2 does not remove tests if they are already there
        out,np,nd,nf,nn = run_vvtest( '--batch -R -N 2' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        L = testlist( out )
        assert len(L) == 2
        assert L[0][-1].endswith( os.sep+'btest.np=1' )
        assert L[1][-1].endswith( os.sep+'btest.np=2' )

        out,np,nd,nf,nn = run_vvtest( '--batch -R' )
        assert np == 7 and nd == 0 and nf == 0 and nn == 0

        out,np,nd,nf,nn = run_vvtest( '--batch -R', directory=tdir )
        assert np == 7 and nd == 0 and nf == 0 and nn == 0

        remove_results()
        out,np,nd,nf,nn = run_vvtest( '--batch -N 2' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        L = testlist( out )
        assert len(L) == 2
        assert L[0][-1].endswith( os.sep+'btest.np=1' )
        assert L[1][-1].endswith( os.sep+'btest.np=2' )

        out,np,nd,nf,nn = run_vvtest( '--batch -R', directory=tdir )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        L = testlist( out )
        assert len(L) == 2
        assert L[0][-1] == 'btest.np=1'
        assert L[1][-1] == 'btest.np=2'


#######################################################################

main()
