#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob
import unittest

import testutils as util
from testutils import print3


class runtimes_and_tsum( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_filter_tests_by_sum_of_runtimes(self):
        ""
        util.writescript( "tests/AA.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(1)
            """ )
        util.writescript( "tests/BB.vvt", """
            #!/usr/bin/env python
            #VVT: parameterize : planet=mercury mars venus
            #VVT: analyze : --analyze
            import os, sys, time
            import script_util as vvt
            if '--analyze' not in sys.argv:
                if vvt.planet == 'mercury':
                    time.sleep(3)
                elif vvt.planet == 'mars':
                    time.sleep(4)
                elif vvt.planet == 'venus':
                    time.sleep(5)
            else:
                time.sleep(3)  # the analyze test
            """ )
        util.writescript( "tests/CC.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(2)
            """ )
        time.sleep(1)

        self.run_filter_tests_by_sum_of_runtimes( '' )
        self.run_filter_tests_by_sum_of_runtimes(
                '--plat '+util.core_platform_name()+' --batch' )

    def run_filter_tests_by_sum_of_runtimes(self, opt):
        ""
        util.remove_results()

        out,np,nd,nf,nn = util.run_vvtest( opt+' --tsum 7 tests' )
        assert np == 6 and nd == 0 and nf == 0 and nn == 0

        tdir = os.path.abspath( util.results_dir() )
        platname = util.platform_name(out)

        out,np,nd,nf,nn = util.run_vvtest( opt+' -R --tsum 7 tests' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        L = util.testlist( out )
        assert len(L) == 2
        assert L[0][-1].endswith( os.sep+'AA' )
        assert L[1][-1].endswith( os.sep+'CC' )

        # check that the full list is still intact
        out,np,nd,nf,nn = util.run_vvtest( opt+' -R tests' )
        assert np == 6 and nd == 0 and nf == 0 and nn == 0

    def test_using_tsum_will_run_parameterize_analyze_tests(self):
        ""
        util.writescript( "tests/AA.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(6)
            """ )
        util.writescript( "tests/BB.vvt", """
            #!/usr/bin/env python
            #VVT: parameterize : planet=mercury mars venus
            #VVT: analyze : --analyze
            import os, sys, time
            import script_util as vvt
            if '--analyze' not in sys.argv:
                if vvt.planet == 'mercury':
                    time.sleep(1)
                elif vvt.planet == 'mars':
                    time.sleep(1)
                elif vvt.planet == 'venus':
                    time.sleep(1)
            else:
                pass  # the analyze test
            """ )
        util.writescript( "tests/CC.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(6)
            """ )
        time.sleep(1)

        self.run_using_tsum_will_run_parameterize_analyze_tests( '' )
        self.run_using_tsum_will_run_parameterize_analyze_tests(
                '--plat '+util.core_platform_name()+' --batch' )

    def run_using_tsum_will_run_parameterize_analyze_tests(self, opt):
        ""
        util.remove_results()

        out,np,nd,nf,nn = util.run_vvtest( opt+' --tsum 10 tests' )
        assert np == 6 and nd == 0 and nf == 0 and nn == 0

        tdir = os.path.abspath( util.results_dir() )
        platname = util.platform_name(out)

        out,np,nd,nf,nn = util.run_vvtest( opt+' -R --tsum 10 tests' )
        assert np == 4 and nd == 0 and nf == 0 and nn == 0
        L = util.testlist( out )
        assert len(L) == 4
        assert L[0][-1].endswith( os.sep+'BB' )
        assert L[1][-1].endswith( os.sep+'BB.planet=mars' )
        assert L[2][-1].endswith( os.sep+'BB.planet=mercury' )
        assert L[3][-1].endswith( os.sep+'BB.planet=venus' )

        # check that the full list is still intact
        out,np,nd,nf,nn = util.run_vvtest( opt+' -R tests' )
        assert np == 6 and nd == 0 and nf == 0 and nn == 0

    def test_tsum_option_will_use_timings_file(self):
        ""
        util.writescript( "tests/AA.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(1)
            """ )
        util.writescript( "tests/BB.vvt", """
            #!/usr/bin/env python
            #VVT: parameterize : planet=mercury mars venus
            #VVT: analyze : --analyze
            import os, sys, time
            import script_util as vvt
            if '--analyze' not in sys.argv:
                if vvt.planet == 'mercury':
                    time.sleep(3)
                elif vvt.planet == 'mars':
                    time.sleep(4)
                elif vvt.planet == 'venus':
                    time.sleep(5)
            else:
                time.sleep(3)  # the analyze test
            """ )
        util.writescript( "tests/CC.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(2)
            """ )
        time.sleep(1)

        platname = self.run_tsum_option_will_use_timings_file( '' )
        if platname in util.nonqueued_platform_names:
            self.run_tsum_option_will_use_timings_file( '--batch' )

    def run_tsum_option_will_use_timings_file(self, opt):
        ""
        util.remove_results()
        if os.path.exists( 'timings' ):
            os.remove( 'timings' )

        out,np,nd,nf,nn = util.run_vvtest( opt+' tests' )
        assert np == 6 and nd == 0 and nf == 0 and nn == 0

        tdir = os.path.abspath( util.results_dir() )
        platname = util.platform_name(out)

        # create a timings file
        util.run_cmd( util.resultspy + ' save', directory='tests' )
        util.run_vvtest( '-i --save-results', directory=tdir )
        resultsfname = glob.glob('results.*')[0]
        ok,out = util.run_cmd( util.resultspy + ' merge -x '+resultsfname )
        assert ok

        util.remove_results()
        out,np,nd,nf,nn = util.run_vvtest( opt+' --tsum 6 tests' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        L = util.testlist( out )
        assert len(L) == 2
        assert L[0][-1].endswith( os.sep+'AA' )
        assert L[1][-1].endswith( os.sep+'CC' )

        out,np,nd,nf,nn = util.run_vvtest( opt+' -R', directory=tdir )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        L = util.testlist( out )
        assert len(L) == 2
        assert L[0][-1] == 'AA'
        assert L[1][-1] == 'CC'


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
