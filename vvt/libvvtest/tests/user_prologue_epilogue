#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3


class prologue_epilogue_plugin_tests( vtu.vvtestTestCase ):

    def test_calling_prologue(self):
        ""
        plug = vtu.make_user_plugin( """
            def prologue( cmdline ):
                ""
                print ( ' '.join(cmdline) )
            """ )

        rtn,out,err = util.call_capture_output( plug.callPrologue,
                                                ['foo','--bar'] )

        assert out.strip() == 'foo --bar'
        assert not err.strip()

    def test_calling_prologue_with_an_exception(self):
        ""
        plug = vtu.make_user_plugin( """
            def prologue( cmdline ):
                ""
                raise Exception( 'fake exception' )
            """ )

        rtn,out,err = util.call_capture_output( plug.callPrologue,
                                                ['foo','--bar'] )
        assert 'fake exception' in out

        plug.callPrologue( ['foo','--bar'] )

    def test_calling_epilogue_with_test_that_did_not_run(self):
        ""
        plug = vtu.make_user_plugin( """
            def epilogue( tests ):
                ""
                assert len(tests) == 1
                name,tD = list( tests.items() )[0]
                assert name == 'sdir/atest.np=4'
                assert tD['rundir'].endswith( 'sdir/atest.np=4' )
                assert tD['result'] == 'notrun'
                assert tD['runtime'] == None
                print ( 'done done done' )
            """ )
        tcase = vtu.make_fake_TestCase( result='notrun', runtime=None )

        rtn,out,err = util.call_capture_output(
                        plug.callEpilogue, os.getcwd(), [tcase] )

        assert not err.strip()
        assert out.strip() == 'done done done'
        assert not err.strip()

    def test_calling_epilogue_with_test_that_ran(self):
        ""
        plug = vtu.make_user_plugin( """
            def epilogue( tests ):
                ""
                assert len(tests) == 1
                name,tD = list( tests.items() )[0]
                assert name == 'sdir/atest.np=4'
                assert tD['rundir'].endswith( 'sdir/atest.np=4' )
                assert tD['result'] == 'fail'
                assert tD['runtime'] == 42
                print ( 'done done done' )
            """ )
        tcase = vtu.make_fake_TestCase( result='fail', runtime=42 )

        rtn,out,err = util.call_capture_output(
                        plug.callEpilogue, os.getcwd(), [tcase] )

        assert not err.strip()
        assert out.strip() == 'done done done'
        assert not err.strip()

    def test_calling_epilogue_with_an_exception(self):
        ""
        plug = vtu.make_user_plugin( """
            def epilogue( tests ):
                ""
                raise Exception( 'fake exception' )
            """ )
        tcase = vtu.make_fake_TestCase( result='fail', runtime=42 )

        rtn,out,err = util.call_capture_output(
                        plug.callEpilogue, os.getcwd(), [tcase] )
        assert 'fake exception' in out

        plug.callEpilogue( os.getcwd(), [tcase] )

    def test_prologue_epilogue_integration(self):
        ""
        util.writefile( 'testA.vvt', """
            import time
            time.sleep(1)
            """ )
        util.writefile( 'adir/vvtest_user_plugin.py', """
            import os

            def prologue( cmdline ):
                ""
                print ( 'CMDLINE='+' '.join( cmdline ) )

            def epilogue( tests ):
                ""
                assert len(tests) == 1
                info = tests['testA']
                assert info['rundir'].endswith( 'testA' )
                assert os.path.exists( info['rundir']+'/execute.log' )
                assert info['result'] == 'pass'
                assert info['runtime'] > 0 and info['runtime'] < 5
                print ( 'EPILOGUE=foobar' )
            """ )
        adir = abspath( 'adir' )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-vv --config', adir, batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            assert 'CMDLINE=' in vrun.out and '-vv --config' in vrun.out
            assert 'EPILOGUE=foobar' in vrun.out

            vrun = vtu.runvvtest( '-i -v --config', adir )
            vrun.assertCounts( total=1, npass=1 )

            assert 'CMDLINE=' not in vrun.out
            assert 'EPILOGUE=foobar' in vrun.out

    def test_calling_epilogue_when_test_directory_does_not_exist(self):
        ""
        util.writefile( 'atest.vvt', 'pass' )

        util.writefile( 'adir/vvtest_user_plugin.py', """
            def epilogue( tests ):
                ""
                print ( 'EPILOGUE=foobar' )
            """ )
        adir = abspath( 'adir' )

        time.sleep(1)

        with util.set_environ( VVTEST_CONFIGDIR=adir ):

            vrun = vtu.runvvtest( '-vv' )
            vrun.assertCounts( total=1, npass=1 )
            assert 'EPILOGUE=foobar' in vrun.out

            vrun = vtu.runvvtest( '-vv -i' )
            assert 'EPILOGUE=foobar' in vrun.out

            vrun = vtu.runvvtest( '-vv -i -o myoption' )
            assert 'EPILOGUE=foobar' not in vrun.out
            assert 'directory not found' in vrun.out
            assert 'Traceback' not in vrun.out


############################################################################

util.run_test_cases(sys.argv, sys.modules[__name__])
