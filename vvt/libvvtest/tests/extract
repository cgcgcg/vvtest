#!/usr/bin/env python
#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

# this will os.chdir() to a subdirectory
from testutils import *


def main():
    """
    """
    argL = get_arg_list()

    if len(argL) == 0:
        argL = """test01 test02 test03 test04 test05 test06 test07
               """.split()

    cwd = os.getcwd()
    for func in argL:
        os.chdir( cwd )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )
        eval( func+'()' )


########################################################################

def test01():
    """
    check that all files are getting extracted
    """
    writefile( 'orig/atest.xml', """
        <rtest name="atest">
          <copy_files> file1.txt </copy_files>
          <link_files> file2.txt </link_files>
          <baseline file="file3.txt"/>
          <source_files> file4.txt </source_files>
          <execute>
            set echo
            cat file1.txt || exit 1
            cat file2.txt || exit 1
            cat $XMLDIR/file3.txt || exit 1
            cat $XMLDIR/file4.txt || exit 1
            unset echo
          </execute>
        </rtest>""" )

    writefile( 'orig/file1.txt', "file one" )
    writefile( 'orig/file2.txt', "file two" )
    writefile( 'orig/file3.txt', "file three" )
    writefile( 'orig/file4.txt', "file four" )

    os.chdir('orig')

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*atest') ) == 1

    os.chdir('..')

    # extract the orig directory then run in the extracted area

    out,np,nd,nf,nn = run_vvtest( '--extract copy orig' )

    os.chdir('copy')

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*atest') ) == 1


###########################################################################

def test02():
    """
    check the three ways name substitution can occur
    """
    writefile( 'orig/atest.xml', """
        <rtest name="atest">
          <copy_files> $NAME.txt </copy_files>
          <link_files> NAME.txt </link_files>
          <baseline file="${NAME}_base.txt"/>
          <source_files> {$NAME}_src.txt </source_files>
          <execute>
            set echo
            cat atest.txt || exit 1
            cat NAME.txt || exit 1
            cat $XMLDIR/atest_base.txt || exit 1
            cat $XMLDIR/atest_src.txt || exit 1
            unset echo
          </execute>
        </rtest>""" )

    writefile( 'orig/atest.txt', "file one" )
    writefile( 'orig/NAME.txt', "file two" )
    writefile( 'orig/atest_base.txt', "file three" )
    writefile( 'orig/atest_src.txt', "file four" )

    os.chdir('orig')

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*atest') ) == 1

    os.chdir('..')

    # extract the orig directory then run in the extracted area

    out,np,nd,nf,nn = run_vvtest( '--extract copy orig' )

    os.chdir('copy')

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*atest') ) == 1


###########################################################################

def test03():
    """
    check --extract on a test with multiple test names
    """
    writefile( 'orig/multi.xml', """
        <rtest name="multi">
          <rtest name="multi2"/>
          <copy_files> common.txt </copy_files>
          <link_files testname="multi"> m1.txt </link_files>
          <copy_files testname="multi2"> m2.txt </copy_files>
          <execute> echo "hello world" </execute>
        </rtest>""" )

    writefile( 'orig/common.txt', "file one" )
    writefile( 'orig/m1.txt', "file two" )
    writefile( 'orig/m2.txt', "file three" )
    writefile( 'orig/dummy.txt', "file dummy" )

    out,np,nd,nf,nn = run_vvtest( '--extract copy orig' )

    fL = glob.glob( 'copy/*' )
    assert len( fL ) == 4
    fL.sort()
    assert fL == ['copy/common.txt','copy/m1.txt','copy/m2.txt','copy/multi.xml']

    # this time, exclude one of the tests

    out,np,nd,nf,nn = run_vvtest( '-k multi --extract cp2 orig' )

    fL = glob.glob( 'cp2/*' )
    assert len( fL ) == 3
    fL.sort()
    assert fL == ['cp2/common.txt','cp2/m1.txt','cp2/multi.xml']


########################################################################

def test04():
    """
    check that all a glob pattern will be expanded in <source_files>
    """
    writefile( 'orig/file1.txt', "f1\n" )
    writefile( 'orig/file_7.txt', "f7\n" )

    writefile( 'orig/atest.xml', """
        <rtest name="atest">
          <source_files> file*.txt </source_files>
          <execute>
            echo "hello world"
          </execute>
        </rtest>""" )
    
    out,np,nd,nf,nn = run_vvtest( '--extract copy orig' )
    
    fL = glob.glob( 'copy/*' )
    fL.sort()
    assert fL == ['copy/atest.xml', 'copy/file1.txt', 'copy/file_7.txt']


def test05():
    """
    check glob in link & copy files
    """
    writefile( 'orig/ln1.txt', "l1\n" )
    writefile( 'orig/ln_7.txt', "l7\n" )
    writefile( 'orig/cp1.txt', "c1\n" )
    writefile( 'orig/cp_7.txt', "c7\n" )

    writefile( 'orig/atest.xml', """
        <rtest name="atest">
          <link_files> ln*.txt </link_files>
          <copy_files> cp*.txt </copy_files>
          <execute> echo "hello world" </execute>
        </rtest>""" )
    
    out,np,nd,nf,nn = run_vvtest( '--extract copy orig' )
    
    fL = glob.glob( 'copy/*' )
    fL.sort()
    assert fL == ['copy/atest.xml', 'copy/cp1.txt', 'copy/cp_7.txt',
                  'copy/ln1.txt', 'copy/ln_7.txt']


########################################################################

def test06():
    """
    extract with script test
    """
    writescript( 'orig/atest.vvt', """
        #!/usr/bin/env python
        #VVT: copy : file1.txt
        #VVT: link : file2.txt
        #VVT: baseline : file3.txt, file3.txt
        #VVT: sources : file4.txt ${NAME}_*.py
        import os
        import script_util as vvt
        print3 = vvt.print3
        fp = open( 'file1.txt' ) ; print3( fp.read() ) ; fp.close()
        fp = open( 'file2.txt' ) ; print3( fp.read() ) ; fp.close()
        fp = open( vvt.SRCDIR+'/file3.txt' ) ; print3( fp.read() ) ; fp.close()
        fp = open( vvt.SRCDIR+'/file4.txt' ) ; print3( fp.read() ) ; fp.close()
        fp = open( vvt.SRCDIR+'/atest_1.py' ) ; print3( fp.read() ) ; fp.close()
        if os.path.exists( vvt.SRCDIR+'/2_atest.py' ):
            print3( 'py file 2 exists' )
        """ )

    writefile( 'orig/file1.txt', "file one" )
    writefile( 'orig/file2.txt', "file two" )
    writefile( 'orig/file3.txt', "file three" )
    writefile( 'orig/file4.txt', "file four" )
    writefile( 'orig/atest_1.py', "py file one" )
    writefile( 'orig/2_atest.py', "py file two" )

    os.chdir('orig')

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    assert len( greptestlist(out,'pass.*atest') ) == 1
    assert len( filegrep( tdir+'/atest/execute.log', 'py file 2 exists' ) ) == 1

    os.chdir('..')

    # extract the orig directory then run in the extracted area

    out,np,nd,nf,nn = run_vvtest( '--extract copy orig' )

    os.chdir('copy')

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*atest') ) == 1
    assert len( filegrep( tdir+'/atest/execute.log', 'py file 2 exists' ) ) == 0


def test07():
    """
    extract with analyze file in a script test
    """
    writescript( 'orig/atest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : P = 1 2
        #VVT: analyze : atest_analyze.py
        import os
        import script_util as vvt
        print3 = vvt.print3
        fp = open( 'genfile.txt', 'w' )
        fp.write( 'param P='+vvt.P+'\\n' )
        fp.close()
        """ )

    writescript( "orig/atest_analyze.py", """
        #!/usr/bin/env python
        import os
        import script_util as vvt
        for P in vvt.PARAM_P:
            fn = '../'+vvt.NAME+'.P='+P+'/genfile.txt'
            assert os.path.exists( fn )
        """ )

    os.chdir('orig')

    out,np,nd,nf,nn = run_vvtest()
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()

    os.chdir('..')

    # extract the orig directory then run in the extracted area

    out,np,nd,nf,nn = run_vvtest( '--extract copy orig' )

    os.chdir('copy')

    out,np,nd,nf,nn = run_vvtest()
    assert np == 3 and nd == 0 and nf == 0 and nn == 0


########################################################################

main()
