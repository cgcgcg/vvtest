#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob
import unittest

import testutils as util
from testutils import print3


class extract_use_cases( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_all_files_get_extracted(self):
        ""
        util.writefile( 'orig/atest.xml', """
            <rtest name="atest">
              <copy_files> file1.txt </copy_files>
              <link_files> file2.txt </link_files>
              <baseline file="file3.txt"/>
              <source_files> file4.txt </source_files>
              <execute>
                set echo
                cat file1.txt || exit 1
                cat file2.txt || exit 1
                cat $XMLDIR/file3.txt || exit 1
                cat $XMLDIR/file4.txt || exit 1
                unset echo
              </execute>
            </rtest>""" )

        util.writefile( 'orig/file1.txt', "file one" )
        util.writefile( 'orig/file2.txt', "file two" )
        util.writefile( 'orig/file3.txt', "file three" )
        util.writefile( 'orig/file4.txt', "file four" )

        os.chdir('orig')

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        assert len( util.greptestlist(out,'pass.*atest') ) == 1

        os.chdir('..')

        # extract the orig directory then run in the extracted area

        out,np,nd,nf,nn = util.run_vvtest( '--extract copy orig' )

        os.chdir('copy')

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        assert len( util.greptestlist(out,'pass.*atest') ) == 1

    def test_the_three_ways_name_substitution_can_occur(self):
        ""
        util.writefile( 'orig/atest.xml', """
            <rtest name="atest">
              <copy_files> $NAME.txt </copy_files>
              <link_files> NAME.txt </link_files>
              <baseline file="${NAME}_base.txt"/>
              <source_files> {$NAME}_src.txt </source_files>
              <execute>
                set echo
                cat atest.txt || exit 1
                cat NAME.txt || exit 1
                cat $XMLDIR/atest_base.txt || exit 1
                cat $XMLDIR/atest_src.txt || exit 1
                unset echo
              </execute>
            </rtest>""" )

        util.writefile( 'orig/atest.txt', "file one" )
        util.writefile( 'orig/NAME.txt', "file two" )
        util.writefile( 'orig/atest_base.txt', "file three" )
        util.writefile( 'orig/atest_src.txt', "file four" )

        os.chdir('orig')

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        assert len( util.greptestlist(out,'pass.*atest') ) == 1

        os.chdir('..')

        # extract the orig directory then run in the extracted area

        out,np,nd,nf,nn = util.run_vvtest( '--extract copy orig' )

        os.chdir('copy')

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        assert len( util.greptestlist(out,'pass.*atest') ) == 1

    def test_extract_on_a_test_with_multiple_test_names(self):
        ""
        util.writefile( 'orig/multi.xml', """
            <rtest name="multi">
              <rtest name="multi2"/>
              <copy_files> common.txt </copy_files>
              <link_files testname="multi"> m1.txt </link_files>
              <copy_files testname="multi2"> m2.txt </copy_files>
              <execute> echo "hello world" </execute>
            </rtest>""" )

        util.writefile( 'orig/common.txt', "file one" )
        util.writefile( 'orig/m1.txt', "file two" )
        util.writefile( 'orig/m2.txt', "file three" )
        util.writefile( 'orig/dummy.txt', "file dummy" )

        out,np,nd,nf,nn = util.run_vvtest( '--extract copy orig' )

        fL = glob.glob( 'copy/*' )
        assert len( fL ) == 4
        fL.sort()
        assert fL == ['copy/common.txt','copy/m1.txt','copy/m2.txt','copy/multi.xml']

        # this time, exclude one of the tests

        out,np,nd,nf,nn = util.run_vvtest( '-k multi --extract cp2 orig' )

        fL = glob.glob( 'cp2/*' )
        assert len( fL ) == 3
        fL.sort()
        assert fL == ['cp2/common.txt','cp2/m1.txt','cp2/multi.xml']

    def test_that_a_glob_pattern_will_be_expanded_in_source_files(self):
        ""
        util.writefile( 'orig/file1.txt', "f1\n" )
        util.writefile( 'orig/file_7.txt', "f7\n" )

        util.writefile( 'orig/atest.xml', """
            <rtest name="atest">
              <source_files> file*.txt </source_files>
              <execute>
                echo "hello world"
              </execute>
            </rtest>""" )
        
        out,np,nd,nf,nn = util.run_vvtest( '--extract copy orig' )
        
        fL = glob.glob( 'copy/*' )
        fL.sort()
        assert fL == ['copy/atest.xml', 'copy/file1.txt', 'copy/file_7.txt']

    def test_that_globs_work_in_link_and_copy_files(self):
        ""
        util.writefile( 'orig/ln1.txt', "l1\n" )
        util.writefile( 'orig/ln_7.txt', "l7\n" )
        util.writefile( 'orig/cp1.txt', "c1\n" )
        util.writefile( 'orig/cp_7.txt', "c7\n" )

        util.writefile( 'orig/atest.xml', """
            <rtest name="atest">
              <link_files> ln*.txt </link_files>
              <copy_files> cp*.txt </copy_files>
              <execute> echo "hello world" </execute>
            </rtest>""" )
        
        out,np,nd,nf,nn = util.run_vvtest( '--extract copy orig' )
        
        fL = glob.glob( 'copy/*' )
        fL.sort()
        assert fL == ['copy/atest.xml', 'copy/cp1.txt', 'copy/cp_7.txt',
                      'copy/ln1.txt', 'copy/ln_7.txt']

    def test_extract_with_script_specification_file(self):
        ""
        util.writescript( 'orig/atest.vvt', """
            #!/usr/bin/env python
            #VVT: copy : file1.txt
            #VVT: link : file2.txt
            #VVT: baseline : file3.txt, file3.txt
            #VVT: sources : file4.txt ${NAME}_*.py
            import os
            import script_util as vvt
            print3 = vvt.print3
            fp = open( 'file1.txt' ) ; print3( fp.read() ) ; fp.close()
            fp = open( 'file2.txt' ) ; print3( fp.read() ) ; fp.close()
            fp = open( vvt.SRCDIR+'/file3.txt' ) ; print3( fp.read() ) ; fp.close()
            fp = open( vvt.SRCDIR+'/file4.txt' ) ; print3( fp.read() ) ; fp.close()
            fp = open( vvt.SRCDIR+'/atest_1.py' ) ; print3( fp.read() ) ; fp.close()
            if os.path.exists( vvt.SRCDIR+'/2_atest.py' ):
                print3( 'py file 2 exists' )
            """ )

        util.writefile( 'orig/file1.txt', "file one" )
        util.writefile( 'orig/file2.txt', "file two" )
        util.writefile( 'orig/file3.txt', "file three" )
        util.writefile( 'orig/file4.txt', "file four" )
        util.writefile( 'orig/atest_1.py', "py file one" )
        util.writefile( 'orig/2_atest.py', "py file two" )

        os.chdir('orig')

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        tdir = util.results_dir()
        assert len( util.greptestlist(out,'pass.*atest') ) == 1
        assert len( util.filegrep( tdir+'/atest/execute.log', 'py file 2 exists' ) ) == 1

        os.chdir('..')

        # extract the orig directory then run in the extracted area

        out,np,nd,nf,nn = util.run_vvtest( '--extract copy orig' )

        os.chdir('copy')

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        assert len( util.greptestlist(out,'pass.*atest') ) == 1
        assert len( util.filegrep( tdir+'/atest/execute.log', 'py file 2 exists' ) ) == 0

    def test_script_specification_with_analyze_file(self):
        ""
        util.writescript( 'orig/atest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : P = 1 2
            #VVT: analyze : atest_analyze.py
            import os
            import script_util as vvt
            print3 = vvt.print3
            fp = open( 'genfile.txt', 'w' )
            fp.write( 'param P='+vvt.P+'\\n' )
            fp.close()
            """ )

        util.writescript( "orig/atest_analyze.py", """
            #!/usr/bin/env python
            import os
            import script_util as vvt
            for P in vvt.PARAM_P:
                fn = '../'+vvt.NAME+'.P='+P+'/genfile.txt'
                assert os.path.exists( fn )
            """ )

        os.chdir('orig')

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 3 and nd == 0 and nf == 0 and nn == 0

        os.chdir('..')

        # extract the orig directory then run in the extracted area

        out,np,nd,nf,nn = util.run_vvtest( '--extract copy orig' )

        os.chdir('copy')

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 3 and nd == 0 and nf == 0 and nn == 0

    def test_extract_when_a_subdir_in_source_file_list(self):
        ""
        util.writefile( 'orig/auxdir/file1.txt', "file contents" )
        time.sleep(1)

        util.writescript( 'orig/atest.vvt', """
            #!/usr/bin/env python
            #VVT: copy : auxdir
            import os
            import glob
            assert os.path.isdir( 'auxdir' )
            assert not os.path.islink( 'auxdir' )
            assert os.path.isfile( 'auxdir/file1.txt' )
            """ )
        time.sleep(1)

        os.chdir('orig')

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        os.chdir('..')

        # extract the orig directory then run in the extracted area

        out,np,nd,nf,nn = util.run_vvtest( '--extract copy orig' )

        os.chdir('copy')

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0



########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
