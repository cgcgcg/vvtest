#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import unittest

import testutils as util
from testutils import print3


class baseline_tests( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_basic_rebaselining(self):
        ""
        util.writefile( "param.xml", """
            <rtest name="param">
              <parameterize hello="world mars"/>
              <execute> <![CDATA[
                sleep 1
                echo "parm=$hello"
                ]]>
              </execute>
            </rtest>""" )

        util.writefile( "bline.xml", """
            <rtest name="bline">
              <execute> <![CDATA[
                # create a single baseline file to use for the first differencing
                echo "baseline test data file" >! bline.txt
                echo "line two" >> bline.txt
                ]]>
              </execute>
              <execute name="unixdiff"> bline.txt ${XMLDIR}/bline.txt </execute>
              <execute> <![CDATA[
                # copy the previous file to a separate name
                cp bline.txt bline2.txt
                ]]>
              </execute>
              <execute name="unixdiff"> bline2.txt ${XMLDIR}/blinetwo.txt </execute>
              <baseline file="bline.txt"/>
              <baseline file="bline2.txt" destination="blinetwo.txt"/>
            </rtest>""" )

        util.writefile( "bline.txt", "" )
        util.writefile( "bline2.txt", "" )
        util.writefile( "blinetwo.txt", "" )

        time.sleep(1)

        vrun = util.runvvtest()
        vrun.assertCounts( total=3, npass=2, diff=1 )

        # run baseline and rerun tests
        util.runvvtest( '-b' )
        vrun = util.runvvtest( '-R' )
        vrun.assertCounts( total=3, npass=3 )

    def test_filtering_rebaseline_by_testname(self):
        ""
        util.writefile( 'base1.txt', "" )
        util.writefile( 'base2.txt', "" )

        util.writefile( "multi.xml", """
            <rtest name="multi">
              <rtest name="multi2"/>
              <link_files testname="multi" linkname="base.txt">
                base1.txt
              </link_files>
              <link_files testname="multi2" linkname="base.txt">
                base2.txt
              </link_files>
              <execute testname="multi">
                echo "new multi contents" > output.txt
              </execute>
              <execute testname="multi2">
                echo "new multi2 contents" > output.txt
              </execute>
              <execute name="unixdiff"> base.txt output.txt </execute>
              <baseline testname="multi" file="output.txt" destination="base1.txt"/>
            </rtest>""" )

        time.sleep(1)

        vrun = util.runvvtest()
        vrun.assertCounts( total=2, diff=2 )

        # run baseline and rerun tests
        util.runvvtest( '-b' )
        vrun = util.runvvtest( '-R' )
        vrun.assertCounts( total=2, npass=1, diff=1 )

        assert vrun.countTestLines( 'pass*/multi$' ) == 1
        assert vrun.countTestLines( 'diff*/multi2$' ) == 1

    def test_script_format_rebaseline_with_just_copy_files(self):
        ""
        util.writescript( "param.vvt", """
            #!/bin/sh
            #VVT: parameterize : hello = world mars
            source ./vvtest_util.sh
            sleep 1
            echo "parm=$hello"
            """ )

        util.writescript( "bline.vvt", """
            #!/bin/sh
            #VVT: baseline : bline.txt,bline.txt bline2.txt, blinetwo.txt
            source ./vvtest_util.sh
            # create a single baseline file to use for the first differencing
            echo "baseline test data file" > bline.txt
            echo "line two" >> bline.txt
            unixdiff bline.txt ${SRCDIR}/bline.txt
            # copy the previous file to a separate name
            cp bline.txt bline2.txt
            unixdiff bline2.txt ${SRCDIR}/blinetwo.txt
            if_diff_exit_diff
            """ )

        util.writefile( "bline.txt", "a" )
        util.writefile( "bline2.txt", "b" )
        util.writefile( "blinetwo.txt", "c" )

        time.sleep(1)

        vrun = util.runvvtest()
        vrun.assertCounts( total=3, npass=2, diff=1 )

        # run baseline and rerun tests
        util.runvvtest( '-b' )
        vrun = util.runvvtest( '-R' )
        vrun.assertCounts( total=3, npass=3 )

    def test_script_format_rebaseline_with_external_script(self):
        ""
        util.writescript( "bline.vvt", """
            #!/bin/sh
            #VVT: baseline : bline.py
            source ./vvtest_util.sh
            # create a single baseline file to use for the first differencing
            echo "baseline test data file" > bline.txt
            echo "line two" >> bline.txt
            unixdiff bline.txt ${SRCDIR}/bline.txt
            # copy the previous file to a separate name
            cp bline.txt bline2.txt
            unixdiff bline2.txt ${SRCDIR}/blinetwo.txt
            if_diff_exit_diff
            """ )
        util.writefile( "bline.py", """
            import os, shutil
            import script_util as vvt
            srcd = vvt.SRCDIR
            shutil.copy2( 'bline.txt', os.path.join( srcd, 'bline.txt' ) )
            shutil.copy2( 'bline2.txt', os.path.join( srcd, 'blinetwo.txt' ) )
            """ )

        util.writefile( "bline.txt", "a" )
        util.writefile( "bline2.txt", "b" )
        util.writefile( "blinetwo.txt", "c" )

        time.sleep(1)

        vrun = util.runvvtest()
        vrun.assertCounts( total=1, diff=1 )

        # run baseline and rerun tests
        vrun = util.runvvtest( '-b' )
        assert vrun.countLines( 'FAILED' ) == 0
        vrun = util.runvvtest( '-R' )
        vrun.assertCounts( total=1, npass=1 )

    def test_script_format_rebaseline_using_option(self):
        ""
        util.writescript( "bline.vvt", """
            #!/usr/bin/env python
            #VVT: baseline : --bline
            import os, sys
            import shutil
            import script_util as vvt
            if '--bline' in sys.argv:
                srcd = vvt.SRCDIR
                shutil.copy2( 'bline.txt', os.path.join( srcd, 'bline.txt' ) )
                shutil.copy2( 'bline2.txt', os.path.join( srcd, 'blinetwo.txt' ) )
            else:
                # create a single baseline file to use for the first differencing
                fp = open( 'bline.txt', 'w' )
                fp.write( "baseline test data file\\n" + \\
                          "line two\\n" )
                fp.close()
                vvt.unixdiff( 'bline.txt', vvt.SRCDIR+'/bline.txt' )
                # copy the previous file to a separate name
                shutil.copyfile( 'bline.txt', 'bline2.txt' )
                vvt.unixdiff( 'bline2.txt', vvt.SRCDIR+'/blinetwo.txt' )
                vvt.if_diff_exit_diff()
            """ )

        util.writefile( "bline.txt", "a" )
        util.writefile( "bline2.txt", "b" )
        util.writefile( "blinetwo.txt", "c" )

        time.sleep(1)

        vrun = util.runvvtest()
        vrun.assertCounts( total=1, diff=1 )

        # run baseline and rerun tests
        util.runvvtest( '-b' )
        vrun = util.runvvtest( '-R' )
        vrun.assertCounts( total=1, npass=1 )

    def test_xml_format_rebaseline_with_script_fragment_and_file_list(self):
        ""
        util.writefile( "bline.xml", """
            <rtest name="bline">
              <execute> <![CDATA[
                # create a single baseline file to use for the first differencing
                echo "baseline test data file" >! bline.txt
                echo "line two" >> bline.txt
                ]]>
              </execute>
              <execute name="unixdiff"> bline.txt ${XMLDIR}/bline.txt </execute>
              <execute> <![CDATA[
                # copy the previous file to a separate name
                cp bline.txt bline2.txt
                ]]>
              </execute>
              <execute name="unixdiff"> bline2.txt ${XMLDIR}/blinetwo.txt </execute>
              <baseline>
                cp -f bline.txt $SRCDIR/bline.txt
              </baseline>
              <baseline file="bline2.txt" destination="blinetwo.txt"/>
            </rtest>""" )

        util.writefile( "bline.txt", "" )
        util.writefile( "bline2.txt", "" )
        util.writefile( "blinetwo.txt", "" )

        time.sleep(1)

        vrun = util.runvvtest()
        vrun.assertCounts( total=1, diff=1 )

        # run baseline and rerun tests
        util.runvvtest( '-b' )
        vrun = util.runvvtest( '-R' )
        vrun.assertCounts( total=1, npass=1 )

    def test_variable_expansion_in_baseline_file_list(self):
        ""
        util.writefile( "bline.xml", """
            <rtest name="bline">
              <execute> <![CDATA[
                # create a single baseline file to use for the first differencing
                echo "baseline test data file" >! bline.txt
                echo "line two" >> bline.txt
                ]]>
              </execute>
              <execute name="unixdiff"> bline.txt ${XMLDIR}/bline_base.txt </execute>
              <baseline file="$NAME.txt" destination="${NAME}_base.txt"/>
            </rtest>""" )
        util.writescript( "pybase.vvt", """
            #!/usr/bin/env python
            #VVT: baseline : $NAME.txt, ${NAME}_base.txt
            import script_util as vvt
            # create a single baseline file to use for the first differencing
            fp = open( 'pybase.txt', 'w' )
            fp.write( "baseline test data file\\n" + \\
                      "line two\\n" )
            fp.close()
            vvt.unixdiff( 'pybase.txt', vvt.SRCDIR+'/pybase_base.txt' )
            vvt.if_diff_exit_diff()
            """ )

        util.writefile( "bline_base.txt", "" )
        util.writefile( "pybase_base.txt", "" )

        time.sleep(1)

        vrun = util.runvvtest()
        vrun.assertCounts( total=2, diff=2 )

        # run baseline and rerun tests
        util.runvvtest( '-b' )
        vrun = util.runvvtest( '-R' )
        vrun.assertCounts( total=2, npass=2 )

    def test_filter_rebaseline_by_parameter_value(self):
        ""
        util.writefile( "bline.xml", """
            <rtest name="bline">
              <parameterize foo="1 2"/>
              <execute> <![CDATA[
                # create a single baseline file to use for the first differencing
                echo "baseline test data file" >! bline.txt
                echo "line two" >> bline.txt
                ]]>
              </execute>
              <execute name="unixdiff"> bline.txt ${XMLDIR}/bline_base.txt </execute>
              <baseline parameters="foo=1"
                        file="$NAME.txt" destination="${NAME}_base.txt"/>
            </rtest>""" )
        util.writescript( "pybase.vvt", """
            #!/usr/bin/env python
            #VVT: parameterize : foo = 1 2
            #VVT: baseline (parameters="foo=1") : $NAME.txt, ${NAME}_base.txt
            import script_util as vvt
            # create a single baseline file to use for the first differencing
            fp = open( 'pybase.txt', 'w' )
            fp.write( "baseline test data file\\n" + \\
                      "line two\\n" )
            fp.close()
            vvt.unixdiff( 'pybase.txt', vvt.SRCDIR+'/pybase_base.txt' )
            vvt.if_diff_exit_diff()
            """ )

        util.writefile( "bline_base.txt", "" )
        util.writefile( "pybase_base.txt", "" )

        time.sleep(1)

        vrun = util.runvvtest()
        vrun.assertCounts( total=4, diff=4 )

        # run baseline; only the foo=1 tests should rebaseline
        vrun = util.runvvtest( '-b' )
        assert vrun.countLines( 'baselining pybase.foo=1' ) == 1
        assert vrun.countLines( 'baselining bline.foo=1' ) == 1
        assert vrun.countLines( 'baselining bline.foo=2' ) == 0
        assert vrun.countLines( 'baselining pybase.foo=2' ) == 0

        assert len( util.grepfiles( 'bline.txt */bline_base.txt',
                    'TestResults.*/bline.foo=1/baseline.log' ) ) == 1
        assert len( util.grepfiles( 'pybase.txt */pybase_base.txt',
                    'TestResults.*/pybase.foo=1/baseline.log' ) ) == 1

        # on rerun, all should pass
        vrun = util.runvvtest( '-R' )
        vrun.assertCounts( total=4, npass=4 )

    def test_specifying_baseline_for_analyze_only(self):
        ""
        util.writescript( "control.vvt", """
            #!/usr/bin/env python
            #VVT: parameterize : foo = 1 2
            #VVT: analyze : --analyze
            #VVT: baseline : --rebase
            import os, sys
            import script_util as vvt
            if '--analyze' in sys.argv:
                if '--rebase' in sys.argv:
                    vvt.print3( 'rebase this test' )
                else:
                    vvt.print3( 'analyze this test' )
            else:
                vvt.print3( 'executing this test' )
            """ )

        util.writescript( "pybase.vvt", """
            #!/usr/bin/env python
            #VVT: parameterize : foo = 1 2
            #VVT: analyze : --analyze
            #VVT: baseline (parameters="!foo") : --rebase
            import os, sys
            import script_util as vvt
            if '--analyze' in sys.argv:
                if '--rebase' in sys.argv:
                    vvt.print3( 'rebase this test' )
                else:
                    vvt.print3( 'analyze this test' )
            else:
                vvt.print3( 'executing this test' )
            """ )

        time.sleep(1)

        vrun = util.runvvtest()
        vrun.assertCounts( total=6, npass=6 )

        vrun = util.runvvtest( '-b -k pass' )
        assert vrun.countLines( 'baselining control.foo=1' ) == 1
        assert vrun.countLines( 'baselining control.foo=2' ) == 1
        assert vrun.countLines( 'baselining control.' ) == 3
        assert vrun.countLines( 'baselining pybase.' ) == 1


#####################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
