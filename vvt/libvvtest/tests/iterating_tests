#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
print3 = util.print3

import libvvtest.testcase as testcase
import libvvtest.execlist as execlist
from libvvtest.execlist import TestExecList
from libvvtest.TestList import TestList


class iterating_the_backlog( vtu.vvtestTestCase ):

    def test_skipping_ahead_in_backlog_list_by_max_procs(self):
        ""
        back = make_test_backlog_object()

        assert back._get_starting_index(None) == 0
        assert back._get_starting_index(3) == 0
        assert back._get_starting_index(2) == 0
        assert back._get_starting_index(1) == 2
        assert back._get_starting_index(0) == 4

    def test_iterate_backlog_by_size_and_runtime(self):
        ""
        back = make_test_backlog_object()

        tL = []
        for tcase in back.iterate():
            tL.append( runtime_tuple(tcase) )
            print3( tL[-1] )

        assert tL == [ ['sdir/atest1.np=2', 2, 22],
                       ['sdir/atest0.np=2', 2, 12],
                       ['sdir/atest1.np=1', 1, 21],
                       ['sdir/atest0.np=1', 1, 11] ]

    def test_consuming_the_backlog_by_size_and_runtime(self):
        ""
        back = make_test_backlog_object()

        class MyConstraint:
            def __init__(self, maxnp):
                self.maxnp = maxnp
            def getMaxNP(self):
                return self.maxnp
            def apply(self, tcase):
                return tcase.getStat().getRuntime() < 20

        tcase = back.pop( MyConstraint(4) )

        print3( runtime_tuple(tcase) )
        assert runtime_tuple(tcase) == [ 'sdir/atest0.np=2', 2, 12 ]

        tcase = back.pop( MyConstraint(1) )

        print3( runtime_tuple(tcase) )
        assert runtime_tuple(tcase) == [ 'sdir/atest0.np=1', 1, 11 ]

        tL = []
        for tcase in back.consume():
            tL.append( runtime_tuple(tcase) )
            print3( tL[-1] )

        assert tL == [ [ 'sdir/atest1.np=2', 2, 22 ],
                       [ 'sdir/atest1.np=1', 1, 21 ] ]

    def test_iterate_backlog_by_size_and_timeout(self):
        ""
        back = make_test_backlog_object( timespec='timeout' )

        tL = []
        for tcase in back.consume():
            tL.append( timeout_tuple(tcase) )
            print3( tL[-1] )

        assert tL == [ [ 'sdir/atest1.np=2', 2, 22 ],
                       [ 'sdir/atest0.np=2', 2, 12 ],
                       [ 'sdir/atest1.np=1', 1, 21 ],
                       [ 'sdir/atest0.np=1', 1, 11 ] ]

    def test_iterate_TestExecList_by_size_and_constraint(self):
        ""
        tlist, xlist = vtu.make_fake_TestExecList( timespec='runtime' )
        tlist.initializeResultsFile()

        xlist._sort_by_size_and_runtime()

        tcase1 = xlist.popNext( (1,0) )
        assert tcase1.getStat().getRuntime() == 21
        xlist.moveToStarted( tcase1 )

        tcase2 = xlist.popNext( (1,0) )
        assert tcase2.getStat().getRuntime() == 11
        xlist.moveToStarted( tcase2 )

        assert xlist.popNext( (1,0) ) == None

        xlist.testDone( tcase1 )
        assert xlist.popNext( (1,0) ) == None
        xlist.testDone( tcase2 )

        tcase3 = xlist.popNext( (1,0) )
        xlist.moveToStarted( tcase3 )
        assert tcase3.getStat().getRuntime() == 22

    def test_iterate_TestExecList_by_size_and_timeout(self):
        ""
        tlist, xlist = vtu.make_fake_TestExecList( timespec='timeout' )

        xlist.sortBySizeAndTimeout()

        tL = []
        while True:
            tcase = xlist.getNextTest()
            if tcase:
                tL.append( timeout_tuple(tcase) )
                xlist.moveToStarted( tcase )
            else:
                break

        assert tL == [ [ 'sdir/atest1.np=2', 2, 22 ],
                       [ 'sdir/atest0.np=2', 2, 12 ],
                       [ 'sdir/atest1.np=1', 1, 21 ],
                       [ 'sdir/atest0.np=1', 1, 11 ] ]


def runtime_tuple( tcase ):
    ""
    return [ tcase.getSpec().getDisplayString(),
             int( tcase.getSpec().getParameterValue('np') ),
             tcase.getStat().getRuntime() ]

def timeout_tuple( tcase ):
    ""
    return [ tcase.getSpec().getDisplayString(),
             int( tcase.getSpec().getParameterValue('np') ),
             tcase.getSpec().getAttr('timeout') ]


def make_test_backlog_object( timespec='runtime' ):
    ""
    tests = vtu.make_TestCase_list( timespec=timespec )

    back = execlist.TestBacklog()
    for tcase in tests:
        back.insert( tcase )

    back.sort( secondary=timespec )

    return back


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
