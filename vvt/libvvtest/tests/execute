#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import glob
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.TestExec as TestExec


class execute_tests( vtu.vvtestTestCase ):

    def test_simple_xml_test_file(self):
        ""
        util.writefile( "null.xml", """
            <rtest name="null">
            </rtest>""" )

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=1, npass=1 )
        tL = vrun.grepTestLines( '.*' )
        assert len(tL) == 1 and os.path.exists( tL[0].split()[-1] )

    def test_simple_script_test_file(self):
        ""
        util.writefile( 'helloworld.xml', """
            <rtest name="helloworld">
              <execute>
                <![CDATA[ ${XMLDIR}/helloworld.csh ]]>
              </execute>
            </rtest>""" )

        util.writescript( 'helloworld.csh', """
            #!/bin/csh -f
            echo "hello world"
            exit 0""" )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=1, npass=1 )
        sL = util.grepfiles( 'hello world', 'TestResults*/helloworld/execute.log' )
        assert len( sL ) == 1

    def test_file_link_and_copy_globbing(self):
        ""
        util.writefile( "glob1.txt", """
            this is glob1.txt
            """)
        util.writefile( "glob2.txt", """
            this is glob2.txt
            """)
        util.writefile( "Aglob.txt", """
            this is Aglob2.txt
            """)

        util.writefile( "glob.xml", """
            <rtest name="glob">
              <link_files> glob?.txt </link_files>
              <copy_files> Aglob.* </copy_files>
              <execute>
                cat glob1.txt || exit 1
                cat glob2.txt || exit 1
                cat Aglob.txt || exit 1
              </execute>
            </rtest>""")
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=1, npass=1 )

    def test_link_and_copy_files_that_do_not_exist(self):
        ""
        util.writefile( "link1.xml", """
            <rtest name="link1">
                <link_files> file.txt </link_files>
                <execute>
                    foreach f ( `ls` )
                        echo "lsfile $f"
                    end
                </execute>
            </rtest>""")
        util.writefile( "copy1.xml", """
            <rtest name="copy1">
                <copy_files> file.txt </copy_files>
                <execute>
                    foreach f ( `ls` )
                        echo "lsfile $f"
                    end
                </execute>
            </rtest>""")
        util.writefile( "link2.xml", """
            <rtest name="link2">
                <link_files linkname="file.txt"> file.txt </link_files>
                <execute>
                    foreach f ( `ls` )
                        echo "lsfile $f"
                    end
                </execute>
            </rtest>""")
        util.writefile( "copy2.xml", """
            <rtest name="copy2">
                <copy_files linkname="file.txt"> file.txt </copy_files>
                <execute>
                    foreach f ( `ls` )
                        echo "lsfile $f"
                    end
                </execute>
            </rtest>""")
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=4, fail=4 )

        sL = util.grepfiles( 'lsfile ', 'TestResults.*/*/execute.log' )
        assert len( sL ) == 0

        # now make it exist and run through to see if the tests work

        util.writefile( "file.txt", """
            this is file.txt
            """)
        time.sleep(1)

        vtu.runvvtest( '-R' ).assertCounts( total=4, npass=4 )

        sL = util.grepfiles( 'lsfile file.txt', 'TestResults.*/*/execute.log' )
        assert len( sL ) == 4

    def test_link_and_copy_files_that_refer_to_parent_directory(self):
        ""
        util.writefile( "subdir/links.xml", """
            <rtest name="links">
                <link_files> ../file.txt </link_files>
                <copy_files> ../files/gfile*.txt </copy_files>
                <execute>
                    foreach f ( `ls` )
                        echo "lsfile $f"
                    end
                </execute>
            </rtest>""")
        util.writefile( "file.txt", "the text file" )
        util.writefile( "files/gfile1.txt", "G text file 1" )
        util.writefile( "files/gfileA.txt", "G text file A" )
        time.sleep(1)

        vrun = vtu.runvvtest( 'subdir' )
        vrun.assertCounts( total=1, npass=1 )

        assert vrun.countGrepLogs( 'lsfile file.txt' ) == 1
        assert vrun.countGrepLogs( 'lsfile gfile1.txt' ) == 1
        assert vrun.countGrepLogs( 'lsfile gfileA.txt' ) == 1

        fL = util.findfiles( 'file.txt', 'TestResults*' )
        assert len(fL) == 1 and os.path.islink( fL[0] )
        fL = util.findfiles( 'gfile1.txt', 'TestResults*' )
        assert len(fL) == 1 and not os.path.islink( fL[0] )
        fL = util.findfiles( 'gfileA.txt', 'TestResults*' )
        assert len(fL) == 1 and not os.path.islink( fL[0] )

    def test_different_test_exit_statuses(self):
        ""
        util.writefile( "PassTest.xml", """
            <rtest name="PassTest">
              <execute>
                sleep 1
                echo "Exiting with pass status"
              </execute>
            </rtest>""")
        util.writefile( "FailTest.xml", """
            <rtest name="FailTest">
              <execute>
                sleep 1
                echo "Exiting with failure status"
                exit 1
              </execute>
            </rtest>""")
        util.writefile( "DiffTest.xml", """
            <rtest name="DiffTest">
              <execute>
                sleep 1
                echo "Exiting with diff status"
                set have_diff = yes
              </execute>
            </rtest>""")
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=3, npass=1, diff=1, fail=1 )

        # use -L option (and wipe)

        vrun = vtu.runvvtest( '-w -L -n 1' )
        vrun.assertCounts( total=3, npass=1, diff=1, fail=1 )
        assert vrun.countLines( 'Exiting with ' ) == 3

        # check running within the test results directory

        os.chdir( vrun.resultsDir()+'/PassTest' )
        vtu.runvvtest( '-R' ).assertCounts( total=1, npass=1 )

    def test_the_XMLDIR_variable(self):
        ""
        cwd = os.getcwd()

        util.writefile( "xdir.xml", """
            <rtest name="xdir">
              <execute> <![CDATA[
                set echo
                cd $XMLDIR || exit 1
                set xdir = `pwd`
                cd """+cwd+""" || exit 1
                set cdir = `pwd`
                if ( $xdir != $cdir ) then
                  echo "*** XMLDIR not equal to """+cwd+""""
                  exit 1
                endif
                ]]>
              </execute>
            </rtest>""")
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=1, npass=1 )

        # check using the -M option

        vtu.remove_results()

        os.mkdir( 'mir' )
        time.sleep(1)

        vtu.runvvtest( '-M '+cwd+'/mir' ).assertCounts( total=1, npass=1 )

        # cd into a test and run it

        os.chdir( vrun.resultsDir()+'/xdir' )
        vtu.runvvtest( '-R' ).assertCounts( total=1, npass=1 )

    def test_generate_test_area_with_option_g_then_run(self):
        ""
        util.writefile( 'helloworld.xml', """
            <rtest name="helloworld">
              <execute>
                ${XMLDIR}/helloworld.csh
              </execute>
            </rtest>""" )
        util.writescript( 'helloworld.csh', """
            #!/bin/csh -f
            echo "hello world"
            exit 0""" )
        time.sleep(1)

        vrun = vtu.runvvtest( '-g' )
        vrun.assertCounts( total=1, notrun=1 )

        os.chdir( vrun.resultsDir()+'/helloworld' )
        vtu.runvvtest().assertCounts( total=1, npass=1 )

        assert len( util.grepfiles( 'hello world', 'execute.log' ) ) == 1

    def test_forcing_parameterize_values_on_command_line(self):
        ""
        util.writefile( "param.xml", """
            <rtest name="param">
              <parameterize hello="world mars"/>
              <execute>
                echo "parm=$hello"
              </execute>
            </rtest>""" )
        util.writefile( "blue.vvt", """
            #VVT: parameterize : hello = foo bar
            import vvtest_util as vvt
            print ( 'parm='+vvt.hello )
            """ )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=4, npass=4 )

        # force a parameter to take on a user defined value

        vtu.runvvtest( '-S hello=jupiter' ).assertCounts( total=2, npass=2 )

        vrun = vtu.runvvtest( '-i' )
        vrun.assertCounts( total=6, npass=6 )

        assert vrun.countTestLines( 'hello=jupiter' ) == 2
        assert vrun.countTestLines( 'hello=mars' ) == 1
        assert vrun.countTestLines( 'hello=world' ) == 1
        assert vrun.countTestLines( 'hello=foo' ) == 1
        assert vrun.countTestLines( 'hello=bar' ) == 1

        assert vrun.countGrepLogs( 'parm=jupiter' ) == 2
        assert vrun.countGrepLogs( 'parm=mars' ) == 1
        assert vrun.countGrepLogs( 'parm=world' ) == 1
        assert vrun.countGrepLogs( 'parm=foo' ) == 1
        assert vrun.countGrepLogs( 'parm=bar' ) == 1

    def test_cannot_force_a_parameter_in_a_group(self):
        ""
        util.writefile( "red.vvt", """
            #VVT: parameterize : hello,bye = foo,bar blah,punk
            import vvtest_util as vvt
            print ( 'parm='+vvt.hello )
            """ )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=2, npass=2 )

        vrun = vtu.runvvtest( '-S hello=jupiter' )
        vrun.assertCounts( total=0, npass=0 )

    def test_that_the_test_specification_file_is_automatically_soft_linked(self):
        ""
        util.writefile( "auto1.xml", """
            <rtest name="auto1">
              <execute>
                set echo=1
                ls -l $NAME.xml || exit 1
              </execute>
            </rtest>""" )
        util.writefile( "auto2.xml", """
            <rtest name="auto2">
              <link> $NAME.xml </link>
              <execute>
                set echo=1
                ls -l $NAME.xml || exit 1
              </execute>
            </rtest>""" )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=2, npass=2 )

        assert len( glob.glob( 'TestResults.*/auto1/auto1.xml' ) ) == 1
        assert len( glob.glob( 'TestResults.*/auto2/auto2.xml' ) ) == 1

    def test_filtering_execute_blocks_by_test_name(self):
        ""
        util.writefile( "multi.xml", """
            <rtest name="multi">
                <rtest name="multi2"/>
                <execute testname="multi"> echo "multi only" </execute>
                <execute testname="multi2"> echo "multi2 only" </execute>
                <execute testname="multi or multi2"> echo "both tests" </execute>
            </rtest>""" )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=2, npass=2 )

        xpat = 'TestResults.*/multi/execute.log'
        assert len( util.grepfiles( 'multi only', xpat ) ) == 1
        assert len( util.grepfiles( 'both tests', xpat ) ) == 1

        xpat = 'TestResults.*/multi2/execute.log'
        assert len( util.grepfiles( 'multi2 only', xpat ) ) == 1
        assert len( util.grepfiles( 'both tests', xpat ) ) == 1

    def test_using_NOT_in_the_test_name_filter(self):
        ""
        util.writefile( "multi.xml", """
            <rtest name="multi">
                <rtest name="multi2"/>
                <execute testname="multi"> echo "multi only" </execute>
                <execute testname="not multi"> echo "multi2 only" </execute>
                <execute testname="multi or multi2"> echo "both tests" </execute>
            </rtest>""" )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=2, npass=2 )

        xpat = 'TestResults.*/multi/execute.log'
        assert len( util.grepfiles( 'multi only', xpat ) ) == 1
        assert len( util.grepfiles( 'both tests', xpat ) ) == 1

        xpat = 'TestResults.*/multi2/execute.log'
        assert len( util.grepfiles( 'multi2 only', xpat ) ) == 1
        assert len( util.grepfiles( 'both tests', xpat ) ) == 1

    def test_behavior_when_two_tests_have_the_same_filename_path(self):
        ""
        util.writefile( "adir/subdir/dup.xml", """
            <rtest name="dup">
                <execute> echo "test adir" </execute>
            </rtest>""" )

        util.writefile( "bdir/subdir/dup.xml", """
            <rtest name="dup">
                <execute> echo "test bdir" </execute>
            </rtest>""" )
        time.sleep(1)

        # the bdir test should be selected because it is scanned first
        vrun = vtu.runvvtest( 'bdir adir' )
        assert vrun.countLines( 'arning*duplicate' ) == 1
        vrun.assertCounts( total=1, npass=1 )

        assert vrun.countGrepLogs( 'test bdir' ) == 1
        assert vrun.countGrepLogs( 'test adir' ) == 0

        fL = util.findfiles( 'dup.xml', 'TestResults.*' )
        assert len( fL ) == 1
        fn = os.readlink( fL[0] )
        assert os.path.samefile( fn, 'bdir/subdir/dup.xml' )

        vtu.remove_results()

        # now the adir test should be selected
        vrun = vtu.runvvtest( 'adir bdir' )
        vrun.assertCounts( total=1, npass=1 )

        assert vrun.countGrepLogs( 'test bdir' ) == 0
        assert vrun.countGrepLogs( 'test adir' ) == 1

        fL = util.findfiles( 'dup.xml', 'TestResults.*' )
        assert len( fL ) == 1
        fn = os.readlink( fL[0] )
        assert os.path.samefile( fn, 'adir/subdir/dup.xml' )

    def test_os_fork_with_retry(self):
        ""
        save_os_fork = os.fork

        def fake_os_fork():
            return 42

        try:
            os.fork = fake_os_fork
            pid = TestExec.os_fork_with_retry( 2 )
        finally:
            os.fork = save_os_fork
        assert pid == 42

        def os_fork_always_OSError():
            raise OSError( 'fake it' )

        try:
            os.fork = os_fork_always_OSError
            try:
                pid = TestExec.os_fork_with_retry( 2 )
            except OSError:
                pass
            else:
                raise Exception( 'expected OSError' )
        finally:
            os.fork = save_os_fork

        TestExec._fork_count = 0
        def os_fork_eventually_works():
            if TestExec._fork_count < 2:
                TestExec._fork_count += 1
                raise OSError( 'fake it' )
            return 43

        try:
            os.fork = os_fork_eventually_works
            pid = TestExec.os_fork_with_retry( 5 )
        finally:
            os.fork = save_os_fork
        assert pid == 43


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
