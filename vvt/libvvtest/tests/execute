#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import glob
import time

import testutils as util
optD,argL = util.initialize( sys.argv )
if 'TESTUTILS_RUNDIR' not in os.environ:
    os.chdir( util.working_directory )

from testutils import *


def main():
    """
    """
    global argL

    if len(argL) == 0:
        argL = """null script links1 links2 links3
                  exitstat xmldir options params
                  autolink tname1 tname2 duplicate
                  postclean
               """.split()
    
    cwd = os.getcwd()
    for func in argL:
        os.chdir( cwd )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )

        # for batch tests
        os.environ['VVTEST_BATCH_READ_INTERVAL'] = '5'
        os.environ['VVTEST_BATCH_READ_TIMEOUT'] = '15'
        os.environ['VVTEST_BATCH_SLEEP_LENGTH'] = '1'

        eval( func+'()' )


#####################################################################

def null():
    """
    check the null test
    """
    writefile( "null.xml", """
        <rtest name="null">
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tL = testlist(out)
    assert len(tL) == 1
    p = tL[0][-1]
    assert os.path.exists(p)


#####################################################################

def script():
    """
    check simple execute script test
    """
    writefile( 'helloworld.xml', """
        <rtest name="helloworld">
          <execute> <![CDATA[
        ${XMLDIR}/helloworld.csh
        ]]>
          </execute>
        </rtest>""" )

    writescript( 'helloworld.csh', """
        #!/bin/csh -f
        echo "hello world"
        exit 0""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tL = testlist(out)
    assert len(tL) == 1
    p = tL[0][-1]
    assert os.path.exists(p)
    assert len( filegrep( p+'/execute.log', "^hello world$" ) ) == 1


#####################################################################

def links1():
    """
    check link & copy file globbing
    """
    writefile( "glob1.txt", """
        this is glob1.txt
        """)
    writefile( "glob2.txt", """
        this is glob2.txt
        """)
    writefile( "Aglob.txt", """
        this is Aglob2.txt
        """)

    writefile( "glob.xml", """
        <rtest name="glob">
          <link_files> glob?.txt </link_files>
          <copy_files> Aglob.* </copy_files>
          <execute> <![CDATA[
            cat glob1.txt || exit 1
            cat glob2.txt || exit 1
            cat Aglob.txt || exit 1
          ]]> 
          </execute>
        </rtest>""")

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0


def links2():
    """
    link & copy files of files that don't exist
    """
    writefile( "link1.xml", """
        <rtest name="link1">
            <link_files> file.txt </link_files>
            <execute>
                foreach f ( `ls` )
                    echo "lsfile $f"
                end
            </execute>
        </rtest>""")
    writefile( "copy1.xml", """
        <rtest name="copy1">
            <copy_files> file.txt </copy_files>
            <execute>
                foreach f ( `ls` )
                    echo "lsfile $f"
                end
            </execute>
        </rtest>""")
    writefile( "link2.xml", """
        <rtest name="link2">
            <link_files linkname="file.txt"> file.txt </link_files>
            <execute>
                foreach f ( `ls` )
                    echo "lsfile $f"
                end
            </execute>
        </rtest>""")
    writefile( "copy2.xml", """
        <rtest name="copy2">
            <copy_files linkname="file.txt"> file.txt </copy_files>
            <execute>
                foreach f ( `ls` )
                    echo "lsfile $f"
                end
            </execute>
        </rtest>""")

    out,np,nd,nf,nn = run_vvtest()
    assert np == 0 and nd == 0 and nf == 4 and nn == 0
    fL = glob.glob( 'TestResults.*/*/execute.log' )
    assert len(fL) == 4
    for f in fL:
        assert len( filegrep( f, "lsfile " ) ) == 0
    
    # now make it exist and run through to see if the tests work

    writefile( "file.txt", """
        this is file.txt
        """)

    out,np,nd,nf,nn = run_vvtest( '-R' )
    assert np == 4 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/*/execute.log' )
    assert len(fL) == 4
    for f in fL:
        assert len( filegrep( f, "lsfile file.txt" ) ) == 1


def links3():
    """
    link & copy files of files that start with ..
    """
    writefile( "subdir/links.xml", """
        <rtest name="links">
            <link_files> ../file.txt </link_files>
            <copy_files> ../files/gfile*.txt </copy_files>
            <execute>
                foreach f ( `ls` )
                    echo "lsfile $f"
                end
            </execute>
        </rtest>""")
    writefile( "file.txt", """the text file""" )
    writefile( "files/gfile1.txt", """G text file 1""" )
    writefile( "files/gfileA.txt", """G text file A""" )
    
    out,np,nd,nf,nn = run_vvtest( 'subdir' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    pL = glob.glob( 'TestResults.*' )
    assert len(pL) == 1
    f = os.path.join( pL[0], 'links', 'execute.log' )
    assert len( filegrep( f, "lsfile file.txt" ) ) == 1
    assert len( filegrep( f, "lsfile gfile1.txt" ) ) == 1
    assert len( filegrep( f, "lsfile gfileA.txt" ) ) == 1
    assert os.path.islink( os.path.join( pL[0], 'links', 'file.txt' ) )
    assert not os.path.islink( os.path.join( pL[0], 'links', 'gfile1.txt' ) )
    assert not os.path.islink( os.path.join( pL[0], 'links', 'gfileA.txt' ) )


#####################################################################

def exitstat():
    """
    check different exit statuses
    """
    writefile( "PassTest.xml", """
        <rtest name="PassTest">
          <execute> <![CDATA[
        sleep 1
        echo "Exiting with pass status"
        ]]>
          </execute>
        </rtest>""")

    writefile( "FailTest.xml", """
        <rtest name="FailTest">
          <execute> <![CDATA[
        sleep 1
        echo "Exiting with failure status"
        exit 1
        ]]>
          </execute>
        </rtest>""")

    writefile( "DiffTest.xml", """
        <rtest name="DiffTest">
          <execute> <![CDATA[
        sleep 1
        echo "Exiting with diff status"
        set have_diff = yes
        ]]>
          </execute>
        </rtest>""")

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 1 and nf == 1 and nn == 0

    # use -L option (and wipe)

    out,np,nd,nf,nn = run_vvtest( "-w -L -n 1" )
    assert np == 1 and nd == 1 and nf == 1 and nn == 0
    L = re.findall( "Starting test:", out )
    assert len(L) == 3, "three tests should have run; got "+str(len(L))

    # check running within the test results directory

    cwd = os.getcwd()
    tdir = results_dir()
    os.chdir(tdir+"/PassTest")

    out,np,nd,nf,nn = run_vvtest( "-R" )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    os.chdir( cwd )


#####################################################################

def xmldir():
    """
    check the XMLDIR variable
    """
    cwd = os.getcwd()

    writefile( "xdir.xml", """
        <rtest name="xdir">
          <execute> <![CDATA[
        set echo
        cd $XMLDIR || exit 1
        set xdir = `pwd`
        cd """+cwd+""" || exit 1
        set cdir = `pwd`
        if ( $xdir != $cdir ) then
          echo "*** XMLDIR not equal to """+cwd+""""
          exit 1
        endif
        ]]>
          </execute>
        </rtest>""")

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    tdir = results_dir()
    remove_results()

    # check using the -M option

    os.mkdir( 'mir' )
    out,np,nd,nf,nn = run_vvtest( "-M "+cwd+"/mir" )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    # cd into a test and run it

    os.chdir( tdir + '/xdir' )
    out,np,nd,nf,nn = run_vvtest( "-R" )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    os.chdir(cwd)


#####################################################################

def options():
    """
    check option -gG
    """
    cwd = os.getcwd()

    writefile( 'helloworld.xml', """
        <rtest name="helloworld">
          <execute> <![CDATA[
        ${XMLDIR}/helloworld.csh
        ]]>
          </execute>
        </rtest>""" )

    writescript( 'helloworld.csh', """
        #!/bin/csh -f
        echo "hello world"
        exit 0""" )

    out,np,nd,nf,nn = run_vvtest( "-gG" )
    tdir = results_dir()
    os.chdir(tdir+'/helloworld')
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tL = testlist(out)
    assert len(tL) == 1
    assert len( filegrep( 'execute.log', "^hello world$" ) ) == 1
    os.chdir(cwd)


#####################################################################

def params():
    """
    check specifying parameters
    """
    writefile( "param.xml", """
        <rtest name="param">
          <parameterize hello="world mars"/>
          <execute> <![CDATA[
        sleep 1
        echo "parm=$hello"
        ]]>
          </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 0 and nf == 0 and nn == 0

    # force a parameter to take on a user defined value

    out,np,nd,nf,nn = run_vvtest( "-S hello=jupiter" )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( "-i" )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    tL = testlist(out)
    nj = 0 ; nm = 0 ; nw = 0
    for line in tL:
      if line[-1].find( "hello=jupiter" ) >= 0: nj = nj + 1
      if line[-1].find( "hello=mars" ) >= 0: nm = nm + 1
      if line[-1].find( "hello=world" ) >= 0: nw = nw + 1
    assert nj == 1 and nm == 1 and nw == 1


#####################################################################

def autolink():
    """
    the test specification file should be automatically linked
    """
    writefile( "auto1.xml", """
        <rtest name="auto1">
          <execute>
            set echo=1
            ls -l $NAME.xml || exit 1
          </execute>
        </rtest>""" )

    writefile( "auto2.xml", """
        <rtest name="auto2">
          <link> $NAME.xml </link>
          <execute>
            set echo=1
            ls -l $NAME.xml || exit 1
          </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/auto1/auto1.xml' )
    assert len(fL) == 1
    fL = glob.glob( 'TestResults.*/auto2/auto2.xml' )
    assert len(fL) == 1


#####################################################################

def tname1():
    """
    filtering execute blocks by testname
    """
    writefile( "multi.xml", """
        <rtest name="multi">
            <rtest name="multi2"/>
            <execute testname="multi"> echo "multi only" </execute>
            <execute testname="multi2"> echo "multi2 only" </execute>
            <execute testname="multi or multi2"> echo "both tests" </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/multi/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'multi only' ) ) >= 1
    assert len( filegrep( fL[0], 'both tests' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'multi2 only' ) ) >= 1
    assert len( filegrep( fL[0], 'both tests' ) ) >= 1

def tname2():
    """
    using "not" in the testname filter
    """
    writefile( "multi.xml", """
        <rtest name="multi">
            <rtest name="multi2"/>
            <execute testname="multi"> echo "multi only" </execute>
            <execute testname="not multi"> echo "multi2 only" </execute>
            <execute testname="multi or multi2"> echo "both tests" </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/multi/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'multi only' ) ) >= 1
    assert len( filegrep( fL[0], 'both tests' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'multi2 only' ) ) >= 1
    assert len( filegrep( fL[0], 'both tests' ) ) >= 1


#####################################################################

def duplicate():
    """
    two tests with duplicate path from root to test
    """
    writefile( "adir/subdir/dup.xml", """
        <rtest name="dup">
            <execute> echo "test adir" </execute>
        </rtest>""" )

    writefile( "bdir/subdir/dup.xml", """
        <rtest name="dup">
            <execute> echo "test bdir" </execute>
        </rtest>""" )

    # the bdir test should be selected because it is scanned first
    out,np,nd,nf,nn = run_vvtest( 'bdir adir' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    xf = os.path.join( tdir, 'subdir', 'dup', 'execute.log' )
    assert len( filegrep( xf, 'test bdir' ) ) == 1
    assert len( filegrep( xf, 'test adir' ) ) == 0

    fl = os.readlink( os.path.join( tdir, 'subdir', 'dup', 'dup.xml' ) )
    s = 'bdir/subdir/dup.xml'
    assert fl[-len(s):] == s

    remove_results()

    # now the adir test should be selected
    out,np,nd,nf,nn = run_vvtest( 'adir bdir' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    xf = os.path.join( tdir, 'subdir', 'dup', 'execute.log' )
    assert len( filegrep( xf, 'test adir' ) ) == 1
    assert len( filegrep( xf, 'test bdir' ) ) == 0

    fl = os.readlink( os.path.join( tdir, 'subdir', 'dup', 'dup.xml' ) )
    s = 'adir/subdir/dup.xml'
    assert fl[-len(s):] == s


#####################################################################

def postclean():
    """
    using -C to clean out after the test
    """
    writefile( "pclean.xml", """
        <rtest name="pclean">
            <execute>
                echo "Elvis has left the building" > afile.txt || exit 1
                mkdir asubdir || exit 1
                echo "True that" > asubdir/somefile.txt || exit 1
            </execute>
        </rtest>""" )
    
    writescript( 'ana.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : P = 1 2
        #VVT: analyze : ana.py
        import os
        import script_util as vvt
        print3 = vvt.print3
        fp = open( 'genfile.txt', 'w' )
        fp.write( 'param P='+vvt.P+'\\n' )
        fp.close()
        """ )
    writescript( "ana.py", """
        #!/usr/bin/env python
        import os
        import script_util as vvt
        for P in vvt.PARAM_P:
            fn = '../'+vvt.NAME+'.P='+P+'/genfile.txt'
            assert os.path.exists( fn )
            fp = open( 'anagen.txt', 'a' )
            fp.write( 'file = '+fn+'\\n' )
            fp.close()
        """ )

    run_postclean( '' )
    run_postclean( '--plat '+core_platform_name()+' --batch' )

def run_postclean( opt ):
    ""
    remove_results()

    vrun = vvtestRunner( opt )
    assert vrun.num_pass == 4 and vrun.num_fail == 0
    tdir = vrun.testdir

    assert len( glob.glob( tdir+'/pclean/afile.txt' ) ) == 1
    assert len( glob.glob( tdir+'/pclean/runscript' ) ) == 1
    assert len( glob.glob( tdir+'/pclean/execute.log' ) ) == 1
    assert os.path.isdir( tdir+'/pclean/asubdir' )
    assert len( glob.glob( tdir+'/pclean/asubdir/somefile.txt' ) ) == 1

    assert len( glob.glob( tdir+'/ana/ana.vvt' ) ) == 1
    assert len( glob.glob( tdir+'/ana/ana.py' ) ) == 1
    assert len( glob.glob( tdir+'/ana.P=1/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/ana.P=1/ana.py' ) ) == 0
    assert len( glob.glob( tdir+'/ana.P=2/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/ana.P=2/ana.py' ) ) == 0
    assert len( glob.glob( tdir+'/ana/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/ana/anagen.txt' ) ) == 1

    vrun = vvtestRunner( opt+' -R -C' )
    assert vrun.num_pass == 4 and vrun.num_fail == 0
    assert tdir == vrun.testdir

    assert len( glob.glob( tdir+'/pclean/afile.txt' ) ) == 0
    assert len( glob.glob( tdir+'/pclean/runscript' ) ) == 1
    assert len( glob.glob( tdir+'/pclean/execute.log' ) ) == 1
    assert not os.path.exists( tdir+'/pclean/asubdir' )
    assert not os.path.exists( tdir+'/pclean/asubdir/somefile.txt' )

    # note that the ana.P=1 & 2 tests still have genfile.txt (which if they
    # did not, the analyze test would fail); that is, the postclean is not
    # applied to child tests
    assert len( glob.glob( tdir+'/ana/ana.vvt' ) ) == 1
    assert len( glob.glob( tdir+'/ana/ana.py' ) ) == 1
    assert len( glob.glob( tdir+'/ana.P=1/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/ana.P=1/ana.py' ) ) == 0
    assert len( glob.glob( tdir+'/ana.P=2/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/ana.P=2/ana.py' ) ) == 0
    assert len( glob.glob( tdir+'/ana/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/ana/anagen.txt' ) ) == 0


############################################################################

main()
