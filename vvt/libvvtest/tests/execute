#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import glob
import time
import unittest

import testutils as util
from testutils import print3


class execute_tests( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_simple_xml_test_file(self):
        ""
        util.writefile( "null.xml", """
            <rtest name="null">
            </rtest>""" )

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        tL = util.testlist(out)
        assert len(tL) == 1
        p = tL[0][-1]
        assert os.path.exists(p)

    def test_simple_script_test_file(self):
        ""
        util.writefile( 'helloworld.xml', """
            <rtest name="helloworld">
              <execute> <![CDATA[
            ${XMLDIR}/helloworld.csh
            ]]>
              </execute>
            </rtest>""" )

        util.writescript( 'helloworld.csh', """
            #!/bin/csh -f
            echo "hello world"
            exit 0""" )

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        tL = util.testlist(out)
        assert len(tL) == 1
        p = tL[0][-1]
        assert os.path.exists(p)
        assert len( util.filegrep( p+'/execute.log', "^hello world$" ) ) == 1

    def test_file_link_and_copy_globbing(self):
        ""
        util.writefile( "glob1.txt", """
            this is glob1.txt
            """)
        util.writefile( "glob2.txt", """
            this is glob2.txt
            """)
        util.writefile( "Aglob.txt", """
            this is Aglob2.txt
            """)

        util.writefile( "glob.xml", """
            <rtest name="glob">
              <link_files> glob?.txt </link_files>
              <copy_files> Aglob.* </copy_files>
              <execute> <![CDATA[
                cat glob1.txt || exit 1
                cat glob2.txt || exit 1
                cat Aglob.txt || exit 1
              ]]> 
              </execute>
            </rtest>""")

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

    def test_link_and_copy_files_that_do_not_exist(self):
        ""
        util.writefile( "link1.xml", """
            <rtest name="link1">
                <link_files> file.txt </link_files>
                <execute>
                    foreach f ( `ls` )
                        echo "lsfile $f"
                    end
                </execute>
            </rtest>""")
        util.writefile( "copy1.xml", """
            <rtest name="copy1">
                <copy_files> file.txt </copy_files>
                <execute>
                    foreach f ( `ls` )
                        echo "lsfile $f"
                    end
                </execute>
            </rtest>""")
        util.writefile( "link2.xml", """
            <rtest name="link2">
                <link_files linkname="file.txt"> file.txt </link_files>
                <execute>
                    foreach f ( `ls` )
                        echo "lsfile $f"
                    end
                </execute>
            </rtest>""")
        util.writefile( "copy2.xml", """
            <rtest name="copy2">
                <copy_files linkname="file.txt"> file.txt </copy_files>
                <execute>
                    foreach f ( `ls` )
                        echo "lsfile $f"
                    end
                </execute>
            </rtest>""")

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 0 and nd == 0 and nf == 4 and nn == 0
        fL = glob.glob( 'TestResults.*/*/execute.log' )
        assert len(fL) == 4
        for f in fL:
            assert len( util.filegrep( f, "lsfile " ) ) == 0

        # now make it exist and run through to see if the tests work

        util.writefile( "file.txt", """
            this is file.txt
            """)

        out,np,nd,nf,nn = util.run_vvtest( '-R' )
        assert np == 4 and nd == 0 and nf == 0 and nn == 0
        fL = glob.glob( 'TestResults.*/*/execute.log' )
        assert len(fL) == 4
        for f in fL:
            assert len( util.filegrep( f, "lsfile file.txt" ) ) == 1

    def test_link_and_copy_files_that_refer_to_parent_directory(self):
        ""
        util.writefile( "subdir/links.xml", """
            <rtest name="links">
                <link_files> ../file.txt </link_files>
                <copy_files> ../files/gfile*.txt </copy_files>
                <execute>
                    foreach f ( `ls` )
                        echo "lsfile $f"
                    end
                </execute>
            </rtest>""")
        util.writefile( "file.txt", """the text file""" )
        util.writefile( "files/gfile1.txt", """G text file 1""" )
        util.writefile( "files/gfileA.txt", """G text file A""" )

        out,np,nd,nf,nn = util.run_vvtest( 'subdir' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        pL = glob.glob( 'TestResults.*' )
        assert len(pL) == 1
        f = os.path.join( pL[0], 'links', 'execute.log' )
        assert len( util.filegrep( f, "lsfile file.txt" ) ) == 1
        assert len( util.filegrep( f, "lsfile gfile1.txt" ) ) == 1
        assert len( util.filegrep( f, "lsfile gfileA.txt" ) ) == 1
        assert os.path.islink( os.path.join( pL[0], 'links', 'file.txt' ) )
        assert not os.path.islink( os.path.join( pL[0], 'links', 'gfile1.txt' ) )
        assert not os.path.islink( os.path.join( pL[0], 'links', 'gfileA.txt' ) )

    def test_different_test_exit_statuses(self):
        ""
        util.writefile( "PassTest.xml", """
            <rtest name="PassTest">
              <execute> <![CDATA[
            sleep 1
            echo "Exiting with pass status"
            ]]>
              </execute>
            </rtest>""")

        util.writefile( "FailTest.xml", """
            <rtest name="FailTest">
              <execute> <![CDATA[
            sleep 1
            echo "Exiting with failure status"
            exit 1
            ]]>
              </execute>
            </rtest>""")

        util.writefile( "DiffTest.xml", """
            <rtest name="DiffTest">
              <execute> <![CDATA[
            sleep 1
            echo "Exiting with diff status"
            set have_diff = yes
            ]]>
              </execute>
            </rtest>""")

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 1 and nd == 1 and nf == 1 and nn == 0

        # use -L option (and wipe)

        out,np,nd,nf,nn = util.run_vvtest( "-w -L -n 1" )
        assert np == 1 and nd == 1 and nf == 1 and nn == 0
        L = re.findall( "Starting test:", out )
        assert len(L) == 3, "three tests should have run; got "+str(len(L))

        # check running within the test results directory

        tdir = util.results_dir()
        os.chdir(tdir+"/PassTest")

        out,np,nd,nf,nn = util.run_vvtest( "-R" )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

    def test_the_XMLDIR_variable(self):
        ""
        cwd = os.getcwd()

        util.writefile( "xdir.xml", """
            <rtest name="xdir">
              <execute> <![CDATA[
            set echo
            cd $XMLDIR || exit 1
            set xdir = `pwd`
            cd """+cwd+""" || exit 1
            set cdir = `pwd`
            if ( $xdir != $cdir ) then
              echo "*** XMLDIR not equal to """+cwd+""""
              exit 1
            endif
            ]]>
              </execute>
            </rtest>""")

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        tdir = util.results_dir()
        util.remove_results()

        # check using the -M option

        os.mkdir( 'mir' )
        out,np,nd,nf,nn = util.run_vvtest( "-M "+cwd+"/mir" )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        # cd into a test and run it

        os.chdir( tdir + '/xdir' )
        out,np,nd,nf,nn = util.run_vvtest( "-R" )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

    def test_generate_options_g_and_G(self):
        ""
        util.writefile( 'helloworld.xml', """
            <rtest name="helloworld">
              <execute> <![CDATA[
            ${XMLDIR}/helloworld.csh
            ]]>
              </execute>
            </rtest>""" )

        util.writescript( 'helloworld.csh', """
            #!/bin/csh -f
            echo "hello world"
            exit 0""" )

        out,np,nd,nf,nn = util.run_vvtest( "-gG" )
        tdir = util.results_dir()
        os.chdir(tdir+'/helloworld')
        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        tL = util.testlist(out)
        assert len(tL) == 1
        assert len( util.filegrep( 'execute.log', "^hello world$" ) ) == 1

    def test_forcing_parameterize_values_on_command_line(self):
        ""
        util.writefile( "param.xml", """
            <rtest name="param">
              <parameterize hello="world mars"/>
              <execute> <![CDATA[
            sleep 1
            echo "parm=$hello"
            ]]>
              </execute>
            </rtest>""" )

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 2 and nd == 0 and nf == 0 and nn == 0

        # force a parameter to take on a user defined value

        out,np,nd,nf,nn = util.run_vvtest( "-S hello=jupiter" )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        out,np,nd,nf,nn = util.run_vvtest( "-i" )
        assert np == 3 and nd == 0 and nf == 0 and nn == 0
        tL = util.testlist(out)
        nj = 0 ; nm = 0 ; nw = 0
        for line in tL:
          if line[-1].find( "hello=jupiter" ) >= 0: nj = nj + 1
          if line[-1].find( "hello=mars" ) >= 0: nm = nm + 1
          if line[-1].find( "hello=world" ) >= 0: nw = nw + 1
        assert nj == 1 and nm == 1 and nw == 1

    def test_that_the_test_specification_file_is_automatically_soft_linked(self):
        ""
        util.writefile( "auto1.xml", """
            <rtest name="auto1">
              <execute>
                set echo=1
                ls -l $NAME.xml || exit 1
              </execute>
            </rtest>""" )

        util.writefile( "auto2.xml", """
            <rtest name="auto2">
              <link> $NAME.xml </link>
              <execute>
                set echo=1
                ls -l $NAME.xml || exit 1
              </execute>
            </rtest>""" )

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        fL = glob.glob( 'TestResults.*/auto1/auto1.xml' )
        assert len(fL) == 1
        fL = glob.glob( 'TestResults.*/auto2/auto2.xml' )
        assert len(fL) == 1

    def test_filtering_execute_blocks_by_test_name(self):
        ""
        util.writefile( "multi.xml", """
            <rtest name="multi">
                <rtest name="multi2"/>
                <execute testname="multi"> echo "multi only" </execute>
                <execute testname="multi2"> echo "multi2 only" </execute>
                <execute testname="multi or multi2"> echo "both tests" </execute>
            </rtest>""" )

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        fL = glob.glob( 'TestResults.*/multi/execute.log' )
        assert len(fL) == 1
        assert len( util.filegrep( fL[0], 'multi only' ) ) >= 1
        assert len( util.filegrep( fL[0], 'both tests' ) ) >= 1
        fL = glob.glob( 'TestResults.*/multi2/execute.log' )
        assert len(fL) == 1
        assert len( util.filegrep( fL[0], 'multi2 only' ) ) >= 1
        assert len( util.filegrep( fL[0], 'both tests' ) ) >= 1

    def test_using_NOT_in_the_test_name_filter(self):
        ""
        util.writefile( "multi.xml", """
            <rtest name="multi">
                <rtest name="multi2"/>
                <execute testname="multi"> echo "multi only" </execute>
                <execute testname="not multi"> echo "multi2 only" </execute>
                <execute testname="multi or multi2"> echo "both tests" </execute>
            </rtest>""" )

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        fL = glob.glob( 'TestResults.*/multi/execute.log' )
        assert len(fL) == 1
        assert len( util.filegrep( fL[0], 'multi only' ) ) >= 1
        assert len( util.filegrep( fL[0], 'both tests' ) ) >= 1
        fL = glob.glob( 'TestResults.*/multi2/execute.log' )
        assert len(fL) == 1
        assert len( util.filegrep( fL[0], 'multi2 only' ) ) >= 1
        assert len( util.filegrep( fL[0], 'both tests' ) ) >= 1

    def test_behavior_when_two_tests_have_the_same_filename_path(self):
        ""
        util.writefile( "adir/subdir/dup.xml", """
            <rtest name="dup">
                <execute> echo "test adir" </execute>
            </rtest>""" )

        util.writefile( "bdir/subdir/dup.xml", """
            <rtest name="dup">
                <execute> echo "test bdir" </execute>
            </rtest>""" )

        # the bdir test should be selected because it is scanned first
        out,np,nd,nf,nn = util.run_vvtest( 'bdir adir' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        tdir = util.results_dir()
        xf = os.path.join( tdir, 'subdir', 'dup', 'execute.log' )
        assert len( util.filegrep( xf, 'test bdir' ) ) == 1
        assert len( util.filegrep( xf, 'test adir' ) ) == 0

        fl = os.readlink( os.path.join( tdir, 'subdir', 'dup', 'dup.xml' ) )
        s = 'bdir/subdir/dup.xml'
        assert fl[-len(s):] == s

        util.remove_results()

        # now the adir test should be selected
        out,np,nd,nf,nn = util.run_vvtest( 'adir bdir' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        tdir = util.results_dir()
        xf = os.path.join( tdir, 'subdir', 'dup', 'execute.log' )
        assert len( util.filegrep( xf, 'test adir' ) ) == 1
        assert len( util.filegrep( xf, 'test bdir' ) ) == 0

        fl = os.readlink( os.path.join( tdir, 'subdir', 'dup', 'dup.xml' ) )
        s = 'adir/subdir/dup.xml'
        assert fl[-len(s):] == s


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
