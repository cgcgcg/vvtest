#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import unittest

import vvtestutils as vtu
import testutils as util
from testutils import print3


class runtimes_and_tmin_tmax( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_tmin_tmax_using_previous_test_results_timings(self):
        ""
        util.writescript( "AA.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(1)
            """ )
        util.writescript( "BB.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(3)
            """ )
        util.writescript( "CC.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(7)
            """ )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=3, npass=3 )

        vtu.runvvtest( '-i' ).assertCounts( total=3, npass=3 )

        vrun = vtu.runvvtest( '-i --tmax 6' )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == [ 'AA', 'BB' ]

        vrun = vtu.runvvtest( '-i --tmin 3' )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == [ 'BB', 'CC' ]

    def test_if_tmax_filtered_out_a_test_then_its_not_rerun(self):
        ""
        util.writescript( "tests/AA.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(1)
            """ )
        util.writescript( "tests/BB.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(3)
            """ )
        util.writescript( "tests/CC.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(7)
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            if os.path.exists( 'timings' ):
                os.remove( 'timings' )

            vrun = vtu.runvvtest( 'tests', batch=batch )
            vrun.assertCounts( total=3, npass=3 )
            tdir = vrun.resultsDir()

            # create a timings file
            util.runcmd( vtu.resultspy + ' save', chdir='tests' )
            vtu.runvvtest( '-i --save-results', chdir=tdir )
            resultsfname = util.globfile('results.*')
            util.runcmd( vtu.resultspy + ' merge -x '+resultsfname )

            vtu.remove_results()

            # select tests based on the timings file
            vrun = vtu.runvvtest( '--tmax 6 tests', batch=batch )
            vrun.assertCounts( total=2, npass=2 )
            assert vrun.getTestIds() == [ 'AA', 'BB' ]

            # the --tmax 6 above filtered out test CC, which means test CC should
            # not be in the TestResults test list;  check this by running vvtest
            # inside the TestResults directory (test CC should never be run)

            vrun = vtu.runvvtest( batch=batch, chdir=tdir )
            vrun.assertCounts( total=0 )

            # if we force tests to rerun, only 2 should be run
            vrun = vtu.runvvtest( '-R', batch=batch, chdir=tdir )
            vrun.assertCounts( total=2, npass=2 )
            assert vrun.getTestIds() == [ 'AA', 'BB' ]

    def test_that_tmin_tmax_work_with_execute_analyze_tests(self):
        """
        runtime min/max with execute/analyze tests
        """
        util.writescript( "tests/AA.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(1)
            """ )
        util.writescript( "tests/BB.vvt", """
            #!/usr/bin/env python
            #VVT: parameterize : planet=mercury mars venus
            #VVT: analyze : --analyze
            import os, sys, time
            import script_util as vvt
            if '--analyze' not in sys.argv:
                if vvt.planet == 'mercury':
                    time.sleep(1)
                elif vvt.planet == 'mars':
                    time.sleep(3)
                elif vvt.planet == 'venus':
                    time.sleep(7)
            else:
                time.sleep(2)
            """ )
        util.writescript( "tests/CC.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(7)
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            if os.path.exists( 'timings' ):
                os.remove( 'timings' )

            vrun = vtu.runvvtest( 'tests', batch=batch )
            vrun.assertCounts( total=6, npass=6 )
            tdir = vrun.resultsDir()

            # create a timings file
            util.runcmd( vtu.resultspy + ' save', chdir='tests' )
            vtu.runvvtest( '-i --save-results', chdir=tdir )
            resultsfname = util.globfile('results.*')
            util.runcmd( vtu.resultspy + ' merge -x '+resultsfname )

            vtu.remove_results()

            # none of the execute/analyze tests should have been selected
            vrun = vtu.runvvtest( '--tmax 6 tests', batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            assert vrun.getTestIds() == [ 'AA' ]

            vrun = vtu.runvvtest( batch=batch, chdir=tdir )
            vrun.assertCounts( total=0 )

            vrun = vtu.runvvtest( '-R', batch=batch, chdir=tdir )
            vrun.assertCounts( total=1, npass=1 )
            assert vrun.getTestIds() == [ 'AA' ]

    def test_using_tmin_tmax_wont_destroy_previous_results(self):
        """
        runtime min/max with excluding previously run tests
        """
        util.writescript( "tests/AA.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(1)
            """ )
        util.writescript( "tests/BB.vvt", """
            #!/usr/bin/env python
            #VVT: parameterize : planet=mercury mars venus
            #VVT: analyze : --analyze
            import os, sys, time
            import script_util as vvt
            if '--analyze' not in sys.argv:
                if vvt.planet == 'mercury':
                    time.sleep(1)
                elif vvt.planet == 'mars':
                    time.sleep(3)
                elif vvt.planet == 'venus':
                    time.sleep(7)
            else:
                pass  # the analyze test
            """ )
        util.writescript( "tests/CC.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(7)
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( 'tests', batch=batch )
            vrun.assertCounts( total=6, npass=6 )
            tdir = vrun.resultsDir()

            vrun = vtu.runvvtest( '--tmin 3 tests', batch=batch )
            vrun.assertCounts( total=0 )

            # check that the test list in TestResults.* directory is intact
            vrun = vtu.runvvtest( '-i', chdir=tdir )
            vrun.assertCounts( total=6, npass=6 )

            vrun = vtu.runvvtest( '-R --tmin 3 tests', batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            assert vrun.getTestIds() == [ 'CC' ]

            # check that the test list in TestResults.* directory has old results
            vrun = vtu.runvvtest( '-i', chdir=tdir )
            vrun.assertCounts( total=6, npass=6 )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
