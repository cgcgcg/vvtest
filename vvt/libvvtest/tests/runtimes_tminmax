#!/usr/bin/env python
#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob
import unittest

import testutils as util
from testutils import print3


class runtimes_and_tmin_tmax( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_tmin_tmax_using_previous_test_results_timings(self):
        ""
        util.writescript( "AA.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(1)
            """ )
        util.writescript( "BB.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(3)
            """ )
        util.writescript( "CC.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(7)
            """ )
        time.sleep(1)

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 3 and nd == 0 and nf == 0 and nn == 0

        out,np,nd,nf,nn = util.run_vvtest( '-i' )
        assert np == 3 and nd == 0 and nf == 0 and nn == 0

        out,np,nd,nf,nn = util.run_vvtest( '-i --tmax 6' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        assert len( util.greptestlist( out, 'AA' ) ) == 1
        assert len( util.greptestlist( out, 'BB' ) ) == 1
        assert len( util.greptestlist( out, 'CC' ) ) == 0

        out,np,nd,nf,nn = util.run_vvtest( '-i --tmin 3' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        assert len( util.greptestlist( out, 'AA' ) ) == 0
        assert len( util.greptestlist( out, 'BB' ) ) == 1
        assert len( util.greptestlist( out, 'CC' ) ) == 1

    def test_if_tmax_filtered_out_a_test_then_its_not_rerun(self):
        ""
        util.writescript( "tests/AA.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(1)
            """ )
        util.writescript( "tests/BB.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(3)
            """ )
        util.writescript( "tests/CC.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(7)
            """ )

        platname = self.run_if_tmax_filtered_out_a_test_then_its_not_rerun( '' )
        if platname in util.nonqueued_platform_names:
            self.run_if_tmax_filtered_out_a_test_then_its_not_rerun( '--batch' )

    def run_if_tmax_filtered_out_a_test_then_its_not_rerun(self, opt):
        ""
        util.remove_results()
        if os.path.exists( 'timings' ):
            os.remove( 'timings' )

        out,np,nd,nf,nn = util.run_vvtest( opt+' tests' )
        assert np == 3 and nd == 0 and nf == 0 and nn == 0

        tdir = os.path.abspath( util.results_dir() )
        platname = util.platform_name(out)

        # create a timings file
        util.run_cmd( util.resultspy + ' save', directory='tests' )
        util.run_vvtest( '--plat '+platname+' -i --save-results', directory=tdir )
        resultsfname = glob.glob('results.*')[0]
        ok,out = util.run_cmd( util.resultspy + ' merge -x '+resultsfname )
        assert ok

        # select tests based on the timings file
        util.remove_results()
        out,np,nd,nf,nn = util.run_vvtest( opt+' --tmax 6 tests' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        L = util.testlist( out )
        assert len(L) == 2
        assert L[0][0] == 'AA'
        assert L[1][0] == 'BB'

        # the --tmax 6 above filtered out test CC, which means test CC should
        # not be in the TestResults test list;  check this by running vvtest
        # inside the TestResults directory (test CC should never be run)

        out,np,nd,nf,nn = util.run_vvtest( opt, directory=tdir )
        assert np == 0 and nd == 0 and nf == 0 and nn == 0

        # if we force tests to rerun, only 2 should be run
        out,np,nd,nf,nn = util.run_vvtest( opt+' -R', directory=tdir )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        L = util.testlist( out )
        assert len(L) == 2
        assert L[0][0] == 'AA'
        assert L[1][0] == 'BB'

        return platname

    def test_that_tmin_tmax_work_with_execute_analyze_tests(self):
        """
        runtime min/max with execute/analyze tests
        """
        util.writescript( "tests/AA.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(1)
            """ )
        util.writescript( "tests/BB.vvt", """
            #!/usr/bin/env python
            #VVT: parameterize : planet=mercury mars venus
            #VVT: analyze : --analyze
            import os, sys, time
            import script_util as vvt
            if '--analyze' not in sys.argv:
                if vvt.planet == 'mercury':
                    time.sleep(1)
                elif vvt.planet == 'mars':
                    time.sleep(3)
                elif vvt.planet == 'venus':
                    time.sleep(7)
            else:
                time.sleep(2)
            """ )
        util.writescript( "tests/CC.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(7)
            """ )

        platname = self.run_that_tmin_tmax_work_with_execute_analyze_tests( '' )
        if platname in util.nonqueued_platform_names:
            self.run_that_tmin_tmax_work_with_execute_analyze_tests( '--batch' )

    def run_that_tmin_tmax_work_with_execute_analyze_tests(self, opt):
        ""
        util.remove_results()
        if os.path.exists( 'timings' ):
            os.remove( 'timings' )

        out,np,nd,nf,nn = util.run_vvtest( opt+' tests' )
        assert np == 6 and nd == 0 and nf == 0 and nn == 0

        tdir = os.path.abspath( util.results_dir() )
        platname = util.platform_name(out)

        # create a timings file
        util.run_cmd( util.resultspy + ' save', directory='tests' )
        util.run_vvtest( '-i --save-results', directory=tdir )
        resultsfname = glob.glob('results.*')[0]
        ok,out = util.run_cmd( util.resultspy + ' merge -x '+resultsfname )
        assert ok

        # none of the execute/analyze tests should have been selected
        util.remove_results()
        out,np,nd,nf,nn = util.run_vvtest( opt+' --tmax 6 tests' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        L = util.testlist( out )
        assert len(L) == 1
        assert L[0][-1].endswith( os.sep+'AA' )

        out,np,nd,nf,nn = util.run_vvtest( opt, directory=tdir )
        assert np == 0 and nd == 0 and nf == 0 and nn == 0

        out,np,nd,nf,nn = util.run_vvtest( opt+' -R', directory=tdir )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        L = util.testlist( out )
        assert len(L) == 1
        assert L[0][-1] == 'AA'

        return platname

    def test_using_tmin_tmax_wont_destroy_previous_results(self):
        """
        runtime min/max with excluding previously run tests
        """
        util.writescript( "tests/AA.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(1)
            """ )
        util.writescript( "tests/BB.vvt", """
            #!/usr/bin/env python
            #VVT: parameterize : planet=mercury mars venus
            #VVT: analyze : --analyze
            import os, sys, time
            import script_util as vvt
            if '--analyze' not in sys.argv:
                if vvt.planet == 'mercury':
                    time.sleep(1)
                elif vvt.planet == 'mars':
                    time.sleep(3)
                elif vvt.planet == 'venus':
                    time.sleep(7)
            else:
                pass  # the analyze test
            """ )
        util.writescript( "tests/CC.vvt", """
            #!/usr/bin/env python
            import os, sys, time
            time.sleep(7)
            """ )
        time.sleep(1)

        self.run_using_tmin_tmax_wont_destroy_previous_results( '' )
        self.run_using_tmin_tmax_wont_destroy_previous_results(
                '--plat '+util.core_platform_name()+' --batch' )

    def run_using_tmin_tmax_wont_destroy_previous_results(self, opt):
        ""
        util.remove_results()

        out,np,nd,nf,nn = util.run_vvtest( opt+' tests' )
        assert np == 6 and nd == 0 and nf == 0 and nn == 0

        tdir = os.path.abspath( util.results_dir() )
        platname = util.platform_name(out)

        out,np,nd,nf,nn = util.run_vvtest( opt+' --tmin 3 tests' )
        assert np == 0 and nd == 0 and nf == 0 and nn == 0

        # check that the test list in TestResults.* directory is intact
        out,np,nd,nf,nn = util.run_vvtest( '--plat '+platname+' -i', directory=tdir )
        assert np == 6 and nd == 0 and nf == 0 and nn == 0

        out,np,nd,nf,nn = util.run_vvtest( opt+' -R --tmin 3 tests' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        L = util.testlist( out )
        assert len(L) == 1
        assert L[0][-1].endswith( os.sep+'CC' )

        # check that the test list in TestResults.* directory has old results
        out,np,nd,nf,nn = util.run_vvtest( '--plat '+platname+' -i', directory=tdir )
        assert np == 6 and nd == 0 and nf == 0 and nn == 0


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
