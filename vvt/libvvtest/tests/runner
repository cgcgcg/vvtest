#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.testrunner as testrunner


class testrunner_free_functions( vtu.vvtestTestCase ):

    def test_execution_log_name(self):
        ""
        tcase = vtu.make_fake_TestCase()
        fn = testrunner.get_execution_log_filename( tcase, False )
        assert fn == 'execute.log'
        fn = testrunner.get_execution_log_filename( tcase, True )
        assert fn == 'baseline.log'

        tcase = vtu.make_fake_staged_TestCase( stage_index=0 )
        fn = testrunner.get_execution_log_filename( tcase, False )
        assert fn == 'execute_stage=1.log'

        tcase = vtu.make_fake_staged_TestCase( stage_index=1 )
        fn = testrunner.get_execution_log_filename( tcase, False )
        assert fn == 'execute_stage=2.log'

        tcase = vtu.make_fake_staged_TestCase( stage_index=2 )
        fn = testrunner.get_execution_log_filename( tcase, False )
        assert fn == 'execute_stage=3.log'

    def test_setting_PYTHONPATH(self):
        ""
        with util.set_environ( PYTHONPATH=None ):

            ps = testrunner.determine_PYTHONPATH( '/some/path', [] )
            assert ps == ':/some/path/config:/some/path'
            ps = testrunner.determine_PYTHONPATH( '/some/colon:path', [] )
            assert ps == ':'

            ps = testrunner.determine_PYTHONPATH( '/pypath', ['/foo/bar'] )
            assert ps == ':/foo/bar:/pypath/config:/pypath'
            ps = testrunner.determine_PYTHONPATH( '/pypath', ['/foo/bar:baz'] )
            assert ps == ':/pypath/config:/pypath'

            ps = testrunner.determine_PYTHONPATH( '/pypath', ['/foo/bar','/to/day'] )
            assert ps == ':/foo/bar:/to/day:/pypath/config:/pypath'

        with util.set_environ( PYTHONPATH='/usr/path:/an:other' ):
            ps = testrunner.determine_PYTHONPATH( '/pypath', [] )
            assert ps == ':/pypath/config:/pypath:/usr/path:/an:other'

        with util.set_environ( PYTHONPATH=None ):
            testrunner.set_PYTHONPATH( '/pypath', ['/foo/bar'] )
            assert os.environ['PYTHONPATH'] == ':/foo/bar:/pypath/config:/pypath'

    def prepare_for_link_and_copy(self):
        ""
        src1 = util.writefile( 'srcdir/file1.txt', "file1 contents\n" )

        util.writefile( 'srcdir/file2.txt', "file2 contents\n" )
        src2 = abspath( 'srcdir/symfile' )
        os.symlink( 'file2.txt', src2 )

        src3 = abspath( 'srcdir/adir' )
        util.writefile( 'srcdir/adir/file3.txt', "file3 contents\n" )

        os.mkdir( 'destdir1' )
        util.writefile( 'destdir2/file.txt', "wrong contents\n" )
        os.symlink( 'file.txt', 'destdir2/symfile' )
        util.writefile( 'destdir2/adir/wrongfile.txt', "wrongfile contents\n" )

        os.mkdir( 'destdir3' )

        return src1, src2, src3

    def test_force_copy_path(self):
        ""
        src1,src2,src3 = self.prepare_for_link_and_copy()
        time.sleep(1)

        with util.change_directory( 'destdir1' ):
            testrunner.force_copy_path_to_current_directory( src1, None )
            testrunner.force_copy_path_to_current_directory( src2, None )
            testrunner.force_copy_path_to_current_directory( src3, None )

        with util.change_directory( 'destdir2' ):
            testrunner.force_copy_path_to_current_directory( src1, None )
            testrunner.force_copy_path_to_current_directory( src2, None )
            testrunner.force_copy_path_to_current_directory( src3, None )

        with util.change_directory( 'destdir3' ):
            testrunner.force_copy_path_to_current_directory( src1, 'tryme' )

        time.sleep(1)

        for d in [ 'destdir1', 'destdir2' ]:
            assert util.readfile( d+'/file1.txt' ).strip() == 'file1 contents'
            assert not os.path.islink( d+'/symfile' )
            assert util.readfile( d+'/symfile' ).strip() == 'file2 contents'
            assert util.readfile( d+'/adir/file3.txt' ).strip() == 'file3 contents'

        assert not os.path.islink( 'destdir3/tryme' )
        assert util.readfile( 'destdir3/tryme' ).strip() == 'file1 contents'

    def test_force_link_path(self):
        ""
        src1,src2,src3 = self.prepare_for_link_and_copy()
        time.sleep(1)

        with util.change_directory( 'destdir1' ):
            testrunner.force_link_path_to_current_directory( src1, None )
            testrunner.force_link_path_to_current_directory( src2, None )
            testrunner.force_link_path_to_current_directory( src3, None )

        with util.change_directory( 'destdir2' ):
            testrunner.force_link_path_to_current_directory( src1, None )
            testrunner.force_link_path_to_current_directory( src2, None )
            testrunner.force_link_path_to_current_directory( src3, None )

        with util.change_directory( 'destdir3' ):
            testrunner.force_link_path_to_current_directory( src1, 'tryme' )

        time.sleep(1)

        for d in [ 'destdir1', 'destdir2' ]:
            assert os.path.islink( d+'/file1.txt' )
            assert util.readfile( d+'/file1.txt' ).strip() == 'file1 contents'
            assert os.path.islink( d+'/symfile' )
            assert util.readfile( d+'/symfile' ).strip() == 'file2 contents'
            assert os.path.islink( d+'/adir' )
            assert util.readfile( d+'/adir/file3.txt' ).strip() == 'file3 contents'

        assert os.path.islink( 'destdir3/tryme' )
        assert util.readfile( 'destdir3/tryme' ).strip() == 'file1 contents'

    def test_link_and_copy_files(self):
        ""
        self.prepare_for_link_and_copy()
        srcdir = abspath( 'srcdir' )
        util.writefile( 'srcdir/file1.*', 'file w/ wildcard char\n' )
        time.sleep(1)

        fL = testrunner.get_source_file_names( 'srcdir/file*.txt' )
        fL.sort()
        assert fL == [ 'srcdir/file1.txt', 'srcdir/file2.txt' ]

        fL = testrunner.get_source_file_names( 'srcdir/file1.*' )
        assert fL == [ 'srcdir/file1.*' ]

        fL = testrunner.get_source_file_names( 'srcdir/file2.*' )
        assert fL == [ 'srcdir/file2.txt' ]

        fL = testrunner.get_source_file_names( 'srcdir/file.*' )
        assert len( fL ) == 0

        with util.change_directory( 'destdir3' ):
            testrunner.link_and_copy_files( srcdir,
                                            [ ('file*.txt',None),
                                              (srcdir+'/file2.txt','lnk.txt') ],
                                            [ ('adir','bdir'),
                                              (srcdir+'/file2.txt','cpy.txt') ] )

            ok,out,err = util.call_capture_output(
                testrunner.link_and_copy_files, srcdir,
                                            [ ('junk*',None) ],
                                            [ ('file*.txt','dest.txt') ] )
            assert not ok
            print3( out.strip() )
            assert not err.strip()
            assert out.count( 'error: ' ) == 2
            assert out.count( 'non-existent file' ) == 1
            assert out.count( 'more than one file' ) == 1

        time.sleep(1)

        assert os.path.islink( 'destdir3/file1.txt' )
        assert util.readfile( 'destdir3/file1.txt' ).strip() == 'file1 contents'

        assert os.path.islink( 'destdir3/file2.txt' )
        assert util.readfile( 'destdir3/file2.txt' ).strip() == 'file2 contents'

        assert not os.path.islink( 'destdir3/bdir' )
        assert util.readfile( 'destdir3/bdir/file3.txt' ).strip() == 'file3 contents'

        assert os.path.islink( 'destdir3/lnk.txt' )
        assert util.readfile( 'destdir3/lnk.txt' ).strip() == 'file2 contents'

        assert not os.path.islink( 'destdir3/cpy.txt' )
        assert util.readfile( 'destdir3/cpy.txt' ).strip() == 'file2 contents'

    def make_example_execute_directory(self):
        ""
        util.writefile( 'xdir/execute.log', 'log\n' )
        util.writefile( 'xdir/execute_stage.log', 'stage log\n' )
        util.writefile( 'xdir/baseline.log', 'baseline log\n' )
        util.writefile( 'xdir/vvtest_util.sh', 'util sh\n' )
        util.writefile( 'xdir/vvtest_util.py', 'util py\n' )
        util.writefile( 'xdir/runscript', 'run me\n' )
        util.writefile( 'xdir/machinefile', 'sparky\n' )
        util.writefile( 'xdir/testdata.repr', 'repr data\n' )

        util.writefile( 'xdir/old.exo', 'exo data\n' )
        os.symlink( 'execute.log', 'xdir/alink' )
        util.writefile( 'xdir/subdir/afile', 'afile contents\n' )

    def test_pre_cleaning(self):
        ""
        self.make_example_execute_directory()
        time.sleep(1)

        with util.change_directory( 'xdir' ):
            # with xml specification form, the 'runscript' must not be removed
            testrunner.pre_clean_execute_directory( 'xml' )

        time.sleep(1)

        self.check_example_pre_cleaned_execute_directory( 'xml' )

        with util.change_directory( 'xdir' ):
            testrunner.pre_clean_execute_directory( None )

        self.check_example_pre_cleaned_execute_directory( None )

    def check_example_pre_cleaned_execute_directory(self, specform):
        ""
        assert os.path.exists( 'xdir/execute.log' )
        assert os.path.exists( 'xdir/execute_stage.log' )
        assert os.path.exists( 'xdir/baseline.log' )
        assert os.path.exists( 'xdir/vvtest_util.sh' )
        assert os.path.exists( 'xdir/vvtest_util.py' )

        if specform == 'xml':
            assert os.path.exists( 'xdir/runscript' )
        else:
            assert not os.path.exists( 'xdir/runscript' )

        assert not os.path.exists( 'xdir/testdata.repr' )
        assert not os.path.exists( 'xdir/machinefile' )
        assert not os.path.exists( 'xdir/old.exo' )
        assert not os.path.exists( 'xdir/alink' )
        assert not os.path.exists( 'xdir/subdir' )

    def test_post_cleaning(self):
        ""
        self.make_example_execute_directory()
        time.sleep(1)

        testrunner.post_clean_execute_directory( 'xdir', 'xml' )
        time.sleep(1)
        self.check_example_post_cleaned_execute_directory( 'xml' )

        testrunner.post_clean_execute_directory( 'xdir', None )
        time.sleep(1)
        self.check_example_post_cleaned_execute_directory( None )

    def check_example_post_cleaned_execute_directory(self, specform):
        ""
        assert os.path.exists( 'xdir/execute.log' )
        assert os.path.exists( 'xdir/execute_stage.log' )
        assert os.path.exists( 'xdir/baseline.log' )
        assert os.path.exists( 'xdir/vvtest_util.sh' )
        assert os.path.exists( 'xdir/vvtest_util.py' )
        assert os.path.exists( 'xdir/machinefile' )
        assert os.path.exists( 'xdir/testdata.repr' )

        if specform == 'xml':
            assert os.path.exists( 'xdir/runscript' )
        else:
            assert not os.path.exists( 'xdir/runscript' )

        assert not os.path.exists( 'xdir/old.exo' )
        assert     os.path.exists( 'xdir/alink' )
        assert not os.path.exists( 'xdir/subdir' )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
