#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import re

import vvtestutils as vtu
import testutils as util
from testutils import print3

from libvvtest.FilterExpressions import WordExpression
from libvvtest.FilterExpressions import ParamFilter
from libvvtest.FilterExpressions import split_but_retain_separator
from libvvtest.FilterExpressions import separate_expression_into_tokens
from libvvtest.FilterExpressions import convert_token_list_into_eval_string
from libvvtest.FilterExpressions import parse_non_results_expression


class word_expression_tests( vtu.vvtestTestCase ):

    def setUp(self):
        vtu.vvtestTestCase.setUp( self, cleanout=False )

    def test_WordExpression_use_cases(self):
        ""
        ex = WordExpression()
        print3( ex )
        assert str(ex) == 'WordExpression=None'
        assert ex.evaluate( list().count )

        ex.append(None)
        print3( ex )
        assert str(ex) == 'WordExpression=None'
        assert ex.evaluate( list().count )

        ex = WordExpression('')
        print3( ex )
        assert str(ex) == 'WordExpression=""'
        assert not ex.evaluate( list().count )

        ex.append('')
        print3( ex )
        assert str(ex) == 'WordExpression=""'
        assert not ex.evaluate( list().count )

        ex.append("")
        print3( ex )
        assert str(ex) == 'WordExpression=""'
        assert not ex.evaluate( list().count )

        ex.append(" ")
        print3( ex )
        assert str(ex) == 'WordExpression=""'
        assert not ex.evaluate( list().count )

        ex = WordExpression(" ")
        print3( ex )
        assert str(ex) == 'WordExpression=""'
        assert not ex.evaluate( list().count )

        ex = WordExpression(" hello  ")
        print3( ex )
        assert str(ex) == 'WordExpression="hello"'
        assert not ex.evaluate( list().count )
        assert ex.evaluate( list(['hello']).count )
        assert not ex.evaluate( list(['world']).count )

        ex.append(None)
        print3( ex )
        assert str(ex) == 'WordExpression="hello"'
        assert not ex.evaluate( list().count )
        assert ex.evaluate( list(['hello']).count )
        assert not ex.evaluate( list(['world']).count )

        ex.append("")
        print3( ex )
        assert str(ex) == 'WordExpression="hello"'
        assert not ex.evaluate( list().count )
        assert ex.evaluate( list(['hello']).count )
        assert not ex.evaluate( list(['world']).count )

        ex.append("  ")
        print3( ex )
        assert str(ex) == 'WordExpression="hello"'
        assert not ex.evaluate( list().count )
        assert ex.evaluate( list(['hello']).count )
        assert not ex.evaluate( list(['world']).count )

        ex.append("world")
        print3( ex )
        assert str(ex) == 'WordExpression="hello or world"'
        assert not ex.evaluate( list().count )
        assert ex.evaluate( list(['hello']).count )
        assert ex.evaluate( list(['world']).count )
        assert ex.evaluate( list(['hello','world']).count )
        assert not ex.evaluate( list(['the','next']).count )

        ex.append( "period", operator="and" )
        print3( ex )
        assert str(ex) == 'WordExpression="hello or world and period"'
        assert not ex.evaluate( list().count )
        assert     ex.evaluate( list(['hello']).count )
        assert not ex.evaluate( list(['world']).count )
        assert     ex.evaluate( list(['hello','world']).count )
        assert not ex.evaluate( list(['the','next']).count )
        assert not ex.evaluate( list(['period']).count )
        assert     ex.evaluate( list(['hello','period']).count )
        assert     ex.evaluate( list(['world','period']).count )
        assert     ex.evaluate( list(['hello','world','period']).count )

    def test_expression_and_or_precedence(self):
        ""
        ex = WordExpression("hello and world or period")
        print3( ex )
        assert str(ex) == 'WordExpression="hello and world or period"'
        assert ex.evaluate( list(['period']).count )

        ex = WordExpression("(hello and world) or period")
        print3( ex )
        assert str(ex) == 'WordExpression="(hello and world) or period"'
        assert ex.evaluate( list(['period']).count )

        ex = WordExpression("hello or world and period")
        print3( ex )
        assert str(ex) == 'WordExpression="hello or world and period"'
        assert ex.evaluate( list(['hello']).count )

        ex = WordExpression("hello or (world and period)")
        print3( ex )
        assert str(ex) == 'WordExpression="hello or (world and period)"'
        assert ex.evaluate( list(['hello']).count )

    def test_expression_errors(self):
        ""
        ex = WordExpression()

        self.assertRaises( Exception, ex.append, "aword","xor" )
        self.assertRaises( ValueError, WordExpression, "aword1) word2" )
        self.assertRaises( ValueError, WordExpression, "word1 not word2" )
        self.assertRaises( ValueError, WordExpression, "word1 word2" )
        self.assertRaises( ValueError, WordExpression, "word1 and" )
        self.assertRaises( ValueError, WordExpression, "word1 or" )
        self.assertRaises( ValueError, WordExpression, "(word or)" )
        self.assertRaises( ValueError, WordExpression, "(word and)" )
        self.assertRaises( ValueError, WordExpression, "word and ()" )
        self.assertRaises( ValueError, WordExpression, "()" )
        self.assertRaises( ValueError, WordExpression, "word1 and and word2" )
        self.assertRaises( ValueError, WordExpression, "word1 and or word2" )
        self.assertRaises( ValueError, WordExpression, "word1 or and word2" )
        self.assertRaises( ValueError, WordExpression, "word1 or not or word2" )
        self.assertRaises( ValueError, WordExpression, "word1 and not and word2" )
        self.assertRaises( ValueError, WordExpression, "and word1" )
        self.assertRaises( ValueError, WordExpression, "or word1" )
        self.assertRaises( ValueError, WordExpression, "word1 word2" )
        self.assertRaises( ValueError, WordExpression, "word and" )
        self.assertRaises( ValueError, WordExpression, "word or" )

    def test_using_parens_in_expressions(self):
        ""
        ex = WordExpression("( word1 and word2 ) or (word3 and word4)")
        print3( ex )
        assert     ex.evaluate( list(['word1','word2']).count )
        assert     ex.evaluate( list(['word3','word4']).count )
        assert not ex.evaluate( list(['word1','word3']).count )
        assert not ex.evaluate( list(['word2','word4']).count )

        ex = WordExpression("( word1 and not (word2 or word3) ) or word4")
        print3( ex )
        assert     ex.evaluate( list(['word4']).count )
        assert     ex.evaluate( list(['word1']).count )
        assert not ex.evaluate( list(['word1','word2']).count )
        assert not ex.evaluate( list(['word1','word3']).count )

        ex = WordExpression("word1 and not (word2 or word3) or word4")
        print3( ex )
        assert     ex.evaluate( list(['word4']).count )
        assert     ex.evaluate( list(['word1']).count )
        assert not ex.evaluate( list(['word1','word2']).count )
        assert not ex.evaluate( list(['word1','word3']).count )

        ex = WordExpression("word4 or word1 and not (word2 or word3)")
        print3( ex )
        assert     ex.evaluate( list(['word4']).count )
        assert     ex.evaluate( list(['word1']).count )
        assert not ex.evaluate( list(['word1','word2']).count )
        assert not ex.evaluate( list(['word1','word3']).count )

    def test_get_word_list_after_construction(self):
        ""
        ex = WordExpression( "word4 or word1 and not (word2 or word3 )" )
        wL = ex.getWordList()
        wL.sort()
        assert wL == ['word1','word2','word3','word4']

        ex = WordExpression()
        assert ex.getWordList() == []

        ex = WordExpression( '' )
        assert ex.getWordList() == []

    def test_tokenizing_expressions(self):
        ""
        assert split_but_retain_separator( '', '(' ) == ['']
        assert split_but_retain_separator( ' ', '(' ) == [' ']
        assert split_but_retain_separator( 'abc', '(' ) == ['abc']
        assert split_but_retain_separator( '(', '(' ) == ['','(','']
        assert split_but_retain_separator( 'a(', '(' ) == ['a','(','']
        assert split_but_retain_separator( '(b', '(' ) == ['','(','b']
        assert split_but_retain_separator( 'a(b', '(' ) == ['a','(','b']
        assert split_but_retain_separator( 'a(b (c(', '(' ) == \
                                           ['a','(','b ','(','c','(','']
        assert split_but_retain_separator( ')a)b', ')' ) == \
                                           ['',')','a',')','b']

        assert separate_expression_into_tokens( '' ) == ['']
        assert separate_expression_into_tokens( ' ' ) == ['']
        assert separate_expression_into_tokens( 'word' ) == ['word']
        assert separate_expression_into_tokens( ' word ' ) == ['word']
        assert separate_expression_into_tokens( 'word1  or word2 ' ) == \
                                            ['word1','or','word2']
        assert separate_expression_into_tokens( ' not  word' ) == \
                                            ['not','word']
        assert separate_expression_into_tokens( ' not ( word )' ) == \
                                            ['not','(','word',')']
        assert separate_expression_into_tokens( ' not(word) ' ) == \
                                            ['not','(','word',')']
        assert separate_expression_into_tokens(
            'not ( word1 or word2) and word3 or (word4)' ) == \
            ['not','(','word1','or','word2',')','and','word3','or','(','word4',')']

    def test_creating_eval_string(self):
        ""
        def evalfunc(tok):
            assert tok != None and tok.strip()
            return tok == 'word'

        es = convert_token_list_into_eval_string( [''] )
        val = eval( es )
        assert val == False and type(val) == type(True)

        es = convert_token_list_into_eval_string( ['not','word'] )
        val = eval( es )
        assert val == False and type(val) == type(True)

        es = convert_token_list_into_eval_string( ['not','foo'] )
        val = eval( es )
        assert val == True and type(val) == type(True)

        es = convert_token_list_into_eval_string( ['not','(','foo',')'] )
        val = eval( es )
        assert val == True and type(val) == type(True)

        es = convert_token_list_into_eval_string( ['(','word',')'] )
        val = eval( es )
        assert val == True and type(val) == type(True)

        es = convert_token_list_into_eval_string(
                                    ['(','word',')','or','not','word'] )
        val = eval( es )
        assert val == True and type(val) == type(True)

    def test_parsing_expr_for_non_results_evaluation(self):
        ""
        def evalfunc(tok):
            return tok == 'word'

        ex = parse_non_results_expression( '' )
        print3( ex )
        assert not eval( ex )

        ex = parse_non_results_expression( 'notrun' )
        assert ex == None

        ex = parse_non_results_expression( 'not pass' )
        assert ex == None

        ex = parse_non_results_expression( 'not ( pass or diff )' )
        assert ex == None

        ex = parse_non_results_expression( 'word and fail' )
        assert eval( ex ) == True

        ex = parse_non_results_expression( 'fail and word' )
        print3( ex )
        assert eval( ex ) == True

        ex = parse_non_results_expression( 'not word and fail' )
        print3( ex )
        assert eval( ex ) == False

        ex = parse_non_results_expression( 'fail and not word' )
        print3( ex )
        assert eval( ex ) == False

        ex = parse_non_results_expression( '( foo or word ) and ( pass or fail )' )
        print3( ex )
        assert eval( ex ) == True

        ex = parse_non_results_expression(
                            '( foo or word ) and not ( pass or fail )' )
        print3( ex )
        assert eval( ex ) == True

        ex = parse_non_results_expression(
                            '( pass or fail ) and ( foo or word ) ' )
        print3( ex )
        assert eval( ex ) == True

        ex = parse_non_results_expression( 'word1 and not word2' )
        print3( ex )
        assert eval( ex ) == False

        def evalfunc(tok):
            return tok in ['word1','word3']

        ex = parse_non_results_expression(
                    '( word1 and not (word2 or word3) ) or word' )
        print3( ex )
        assert eval( ex ) == False

    def test_removing_results_keywords_from_expressions(self):
        ""
        ex = WordExpression( "foo and bar" )
        assert not ex.containsResultsKeywords()
        assert not ex.evaluate( ['foo'].count )
        assert not ex.evaluate( ['foo'].count, include_results=False )
        assert     ex.evaluate( ['foo','bar'].count )
        assert     ex.evaluate( ['foo','bar'].count, include_results=False )

        ex = WordExpression( "notrun or notdone" )
        assert     ex.containsResultsKeywords()
        assert     ex.evaluate( ['aword','notdone'].count )
        assert not ex.evaluate( ['aword','pass'].count )
        assert     ex.evaluate( ['aword','pass'].count, include_results=False )

        ex = WordExpression( "notrun and word" )
        assert     ex.containsResultsKeywords()
        assert     ex.evaluate( ['word','notrun'].count )
        assert     ex.evaluate( ['word','notrun'].count, include_results=False )
        assert not ex.evaluate( ['word','pass'].count )
        assert     ex.evaluate( ['word','pass'].count, include_results=False )

        ex = WordExpression( "not pass and not ( foo or bar )" )
        assert     ex.containsResultsKeywords()
        assert     ex.evaluate( ['foobar','notrun'].count )
        assert     ex.evaluate( ['foobar','notrun'].count, include_results=False )
        assert not ex.evaluate( ['foobar','pass'].count )
        assert not ex.evaluate( ['foobar','pass'].count )
        assert     ex.evaluate( ['foobar','pass'].count, include_results=False )

        ex = WordExpression( "not pass or not ( foo or bar )" )
        assert     ex.containsResultsKeywords()
        assert     ex.evaluate( ['foo','notrun'].count )
        assert not ex.evaluate( ['foo','notrun'].count, include_results=False )


class cmd_line_word_expression_tests( vtu.vvtestTestCase ):

    def setUp(self):
        vtu.vvtestTestCase.setUp( self )

    def write_filter_test_script(self, filename, args_true, args_false):
        ""
        util.writescript( filename, """
            #!"""+sys.executable+"""
            import sys, subprocess

            cmd = '"""+sys.executable +"""'
            cmd += ' """+vtu.vvtdir+"""/libvvtest/FilterExpressions.py'
            cmd_true = cmd + ' """+args_true+"""'
            cmd_false = cmd + ' """+args_false+"""'

            pop = subprocess.Popen( cmd_true, shell=True, stdout=subprocess.PIPE )
            out,err = pop.communicate()
            assert pop.returncode == 0
            if sys.version_info[0] >= 3:
                out = out.decode()
            assert out.strip() == 'true'

            pop = subprocess.Popen( cmd_false, shell=True, stdout=subprocess.PIPE )
            out,err = pop.communicate()
            assert pop.returncode == 0
            if sys.version_info[0] >= 3:
                out = out.decode()
            assert out.strip() == 'false'
            """ )

    def test_invoking_FilterExpressions_as_an_executable(self):
        ""
        self.write_filter_test_script( 'run_platform_expr',
                '-f "Linux or Darwin" Linux',
                '-f "Linux or Darwin" IRIX' )
        self.write_filter_test_script( 'run_param_expr',
                '-p "AA<101" "AA/11 BB/22"',
                '-p "AA<101" "AA/102 BB/22"' )
        self.write_filter_test_script( 'run_option_expr',
                '-o "debug or gcc" "debug intel"',
                '-o "debug or gcc" "intel"' )
        time.sleep(1)

        util.runcmd( './run_platform_expr' )
        util.runcmd( './run_param_expr' )
        util.runcmd( './run_option_expr' )


class param_expression_tests( vtu.vvtestTestCase ):

    def setUp(self):
        vtu.vvtestTestCase.setUp( self, cleanout=False )

    def test_ParamFilters_with_integer_param_types(self):
        ""
        pf = ParamFilter( ['np=4'] )
        assert not pf.evaluate( {} )
        assert     pf.evaluate( {'np':4} )
        assert not pf.evaluate( {'np':2} )
        assert not pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {'size':"10", 'np':4} )
        assert not pf.evaluate( {'size':"10"} )

        pf = ParamFilter( ['np=1/np=4'] )
        assert not pf.evaluate( {} )
        assert     pf.evaluate( {'np':4} )
        assert     pf.evaluate( {'np':1} )
        assert     pf.evaluate( {'size':"10", 'np':4} )
        assert not pf.evaluate( {'np':3} )
        assert not pf.evaluate( {'size':"10", 'np':3} )
        assert not pf.evaluate( {'size':"10"} )

        pf = ParamFilter( ['np=1/!np'] )
        assert not pf.evaluate( {'np':4} )
        assert     pf.evaluate( {'np':1} )
        assert     pf.evaluate( {'size':"10", 'np':1} )
        assert     pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {} )

        pf = ParamFilter( ['np=1/np!='] )
        assert not pf.evaluate( {'np':4} )
        assert     pf.evaluate( {'np':1} )
        assert     pf.evaluate( {'size':"10", 'np':1} )
        assert     pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {} )

        pf = ParamFilter( ['!np'] )
        assert not pf.evaluate( {'np':4} )
        assert not pf.evaluate( {'size':"10", 'np':1} )
        assert     pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {} )

        pf = ParamFilter( ['np=1', 'size'] )
        assert not pf.evaluate( {'np':4} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {'size':"10", 'np':4} )
        assert     pf.evaluate( {'size':"10", 'np':1} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( ['np=1', 'size='] )
        assert not pf.evaluate( {'np':4} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {'size':"10", 'np':4} )
        assert     pf.evaluate( {'size':"10", 'np':1} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( ['np!=1', 'np!=4'] )
        assert not pf.evaluate( {'np':1} )
        assert not pf.evaluate( {'np':4} )
        assert     pf.evaluate( {'np':2} )

        pf = ParamFilter( ['np<=13'] )
        assert     pf.evaluate( {'np':2} )
        assert not pf.evaluate( {'np':14} )
        assert     pf.evaluate( {'np':13} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( ['np>=13'] )
        assert not pf.evaluate( {'np':2} )
        assert     pf.evaluate( {'np':13} )
        assert     pf.evaluate( {'np':14} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( ['np<13'] )
        assert     pf.evaluate( {'np':2} )
        assert not pf.evaluate( {'np':14} )
        assert not pf.evaluate( {'np':15} )
        assert not pf.evaluate( {'np':13} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( ['np>13'] )
        assert not pf.evaluate( {'np':2} )
        assert not pf.evaluate( {'np':13} )
        assert     pf.evaluate( {'np':14} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

    def test_ParamFilters_with_string_param_types(self):
        ""
        pf = ParamFilter( ['np=4'] )
        assert not pf.evaluate( {} )
        assert     pf.evaluate( {'np':'4'} )
        assert not pf.evaluate( {'np':'2'} )
        assert not pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {'size':"10", 'np':'4'} )
        assert not pf.evaluate( {'size':"10"} )

        pf = ParamFilter( ['np=1/np=4'] )
        assert not pf.evaluate( {} )
        assert     pf.evaluate( {'np':'4'} )
        assert     pf.evaluate( {'np':'1'} )
        assert     pf.evaluate( {'size':"10", 'np':'4'} )
        assert not pf.evaluate( {'np':'3'} )
        assert not pf.evaluate( {'size':"10", 'np':'3'} )
        assert not pf.evaluate( {'size':"10"} )

        pf = ParamFilter( ['np=1/!np'] )
        assert not pf.evaluate( {'np':'4'} )
        assert     pf.evaluate( {'np':'1'} )
        assert     pf.evaluate( {'size':"10", 'np':'1'} )
        assert     pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {} )

        pf = ParamFilter( ['np=1/np!='] )
        assert not pf.evaluate( {'np':'4'} )
        assert     pf.evaluate( {'np':'1'} )
        assert     pf.evaluate( {'size':"10", 'np':'1'} )
        assert     pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {} )

        pf = ParamFilter( ['!np'] )
        assert not pf.evaluate( {'np':'4'} )
        assert not pf.evaluate( {'size':"10", 'np':'1'} )
        assert     pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {} )

        pf = ParamFilter( ['np=1', 'size'] )
        assert not pf.evaluate( {'np':'4'} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {'size':"10", 'np':'4'} )
        assert     pf.evaluate( {'size':"10", 'np':'1'} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( ['np=1', 'size='] )
        assert not pf.evaluate( {'np':'4'} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {'size':"10", 'np':'4'} )
        assert     pf.evaluate( {'size':"10", 'np':'1'} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( ['np!=1', 'np!=4'] )
        assert not pf.evaluate( {'np':'1'} )
        assert not pf.evaluate( {'np':'4'} )
        assert     pf.evaluate( {'np':'2'} )

        pf = ParamFilter( ['np<=13'] )
        assert     pf.evaluate( {'np':'2'} )
        assert not pf.evaluate( {'np':'20'} )
        assert     pf.evaluate( {'np':'13'} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( ['np>=13'] )
        assert not pf.evaluate( {'np':'2'} )
        assert     pf.evaluate( {'np':'13'} )
        assert     pf.evaluate( {'np':'20'} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( ['np<13'] )
        assert     pf.evaluate( {'np':'2'} )
        assert not pf.evaluate( {'np':'20'} )
        assert not pf.evaluate( {'np':'15'} )
        assert not pf.evaluate( {'np':'13'} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( ['np>13'] )
        assert not pf.evaluate( {'np':'2'} )
        assert not pf.evaluate( {'np':'13'} )
        assert     pf.evaluate( {'np':'14'} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

    def test_ParamFilters_with_mixed_types(self):
        ""
        pf = ParamFilter( ['np=13'] )
        assert not pf.evaluate( {'np':'a'} )

        pf = ParamFilter( ['np=ab'] )
        assert not pf.evaluate( {'np':'13'} )

        pf = ParamFilter( ['np=ab'] )
        assert     pf.evaluate( {'np':'ab'} )


        pf = ParamFilter( ['np!=13'] )
        assert     pf.evaluate( {'np':'a'} )

        pf = ParamFilter( ['np!=ab'] )
        assert     pf.evaluate( {'np':'13'} )

        pf = ParamFilter( ['np!=ab'] )
        assert not pf.evaluate( {'np':'ab'} )


        pf = ParamFilter( ['np<=13'] )
        assert not pf.evaluate( {'np':'a'} )

        pf = ParamFilter( ['np<=13'] )
        assert     pf.evaluate( {'np':'0a'} )

        pf = ParamFilter( ['np<=ab'] )
        assert     pf.evaluate( {'np':'13'} )

        pf = ParamFilter( ['np<=ab'] )
        assert     pf.evaluate( {'np':'ab'} )


        pf = ParamFilter( ['np>=13'] )
        assert     pf.evaluate( {'np':'a'} )

        pf = ParamFilter( ['np>=13'] )
        assert not pf.evaluate( {'np':'0a'} )

        pf = ParamFilter( ['np>=ab'] )
        assert not pf.evaluate( {'np':'13'} )

        pf = ParamFilter( ['np>=ab'] )
        assert     pf.evaluate( {'np':'ab'} )


        pf = ParamFilter( ['np<13'] )
        assert not pf.evaluate( {'np':'a'} )

        pf = ParamFilter( ['np<13'] )
        assert     pf.evaluate( {'np':'0a'} )

        pf = ParamFilter( ['np<ab'] )
        assert     pf.evaluate( {'np':'13'} )

        pf = ParamFilter( ['np<ab'] )
        assert not pf.evaluate( {'np':'ab'} )


        pf = ParamFilter( ['np>13'] )
        assert     pf.evaluate( {'np':'a'} )

        pf = ParamFilter( ['np>13'] )
        assert not pf.evaluate( {'np':'0a'} )

        pf = ParamFilter( ['np>ab'] )
        assert not pf.evaluate( {'np':'13'} )

        pf = ParamFilter( ['np>ab'] )
        assert not pf.evaluate( {'np':'ab'} )

    def test_using_word_expressions_instead_of_a_list(self):
        ""
        pf = ParamFilter( 'np' )
        assert not pf.evaluate( {} )
        assert not pf.evaluate( { 'foo':5 } )
        assert     pf.evaluate( { 'np':2 } )

        pf = ParamFilter( '!np' )
        assert     pf.evaluate( {} )
        assert     pf.evaluate( { 'foo':5 } )
        assert not pf.evaluate( { 'np':2 } )

        pf = ParamFilter( 'np>2' )
        assert not pf.evaluate( {} )
        assert not pf.evaluate( {'foo':5} )
        assert not pf.evaluate( {'np':2} )
        assert     pf.evaluate( {'np':3} )

        # Note: the expr np<=2 is not the same as !np>2
        #       this is because np<=2 actually means
        #           (np is defined) AND (np<=2)
        #       and therefore !np<=2 actually means
        #           NOT [ (np is defined) AND (np<=2) ]
        #       or
        #           (np is not defined) OR (np>2)

        pf = ParamFilter( 'np<=2' )
        assert     pf.evaluate( {'np':2} )
        assert not pf.evaluate( {'np':3} )
        assert not pf.evaluate( {} )
        assert not pf.evaluate( { 'foo':5 } )

        pf = ParamFilter( '!np>2' )
        assert     pf.evaluate( {'np':2} )
        assert not pf.evaluate( {'np':3} )
        assert     pf.evaluate( {} )
        assert     pf.evaluate( { 'foo':5 } )

        pf = ParamFilter( '!np>3 and np!=1' )
        assert not pf.evaluate( {'np':1} )
        assert     pf.evaluate( {'np':2} )
        assert     pf.evaluate( {'np':3} )
        assert not pf.evaluate( {'np':4} )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
