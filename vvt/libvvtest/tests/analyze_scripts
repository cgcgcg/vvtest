#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3


class parameterize_analyze_script_specs( vtu.vvtestTestCase ):

    def test_simple_use_case(self):
        ""
        util.writescript( 'ana.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : V=a b
            #VVT: analyze : -a
            import os, sys
            if '-a' in sys.argv:
                print ( 'running analyze' )
            else:
                print ( 'running execute' )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            assert len( glob.glob( 'TestResults.*/ana*/execute.log' ) ) == 3
            assert len( util.grepfiles( 'running execute',
                        'TestResults.*/ana.V=a/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running execute',
                        'TestResults.*/ana.V=b/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running analyze',
                        'TestResults.*/ana/execute.log' ) ) == 1

    def test_analyze_with_only_one_parameterize_value(self):
        ""
        util.writescript( 'ana.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : V=a
            #VVT: analyze : -a
            import os, sys
            if '-a' in sys.argv:
                print ( 'running analyze' )
            else:
                print ( 'running execute' )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            assert len( glob.glob( 'TestResults.*/ana*/execute.log' ) ) == 2
            assert len( util.grepfiles( 'running execute',
                        'TestResults.*/ana.V=a/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running analyze',
                        'TestResults.*/ana/execute.log' ) ) == 1

    def test_analyze_is_a_separate_script(self):
        ""    
        util.writescript( 'ana.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : V=a b
            #VVT: analyze : ana.sh
            import os, sys
            import vvtest_util as vvt
            print ( 'running execute with param '+vvt.V )
            """ )
        util.writescript( 'ana.sh', """
            #!/bin/sh
            source ./vvtest_util.sh
            echo "running analyze"
            echo "name is $NAME with children params $PARAM_V"
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            assert len( glob.glob( 'TestResults.*/ana*/execute.log' ) ) == 3
            assert len( util.grepfiles( 'running execute',
                        'TestResults.*/ana.V=a/execute.log' ) ) == 1
            assert len( util.grepfiles( 'param a',
                        'TestResults.*/ana.V=a/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running execute',
                        'TestResults.*/ana.V=b/execute.log' ) ) == 1
            assert len( util.grepfiles( 'param b',
                        'TestResults.*/ana.V=b/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running analyze',
                        'TestResults.*/ana/execute.log' ) ) == 1
            assert len( util.grepfiles( 'params a b',
                        'TestResults.*/ana/execute.log' ) ) == 1

    def test_non_executable_analyze_file_should_be_run_using_python(self):
        ""    
        util.writescript( 'ana.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : V=a b
            #VVT: analyze : analyze
            import os, sys
            print ( 'running py execute' )
            """ )
        util.writefile( 'analyze', """
            import vvtest_util as vvt
            print ( "running py analyze" )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            assert len( glob.glob( 'TestResults.*/ana*/execute.log' ) ) == 3
            assert len( util.grepfiles( 'running py execute',
                        'TestResults.*/ana.V=a/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running py execute',
                        'TestResults.*/ana.V=b/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running py analyze',
                        'TestResults.*/ana/execute.log' ) ) == 1

    def test_parameterize_values_get_filtered_out(self):
        """
        execute/analyze where all but one parameter value is filtered out
        """    
        util.writescript( 'scr.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : V=a b
            #VVT: analyze : -a
            import os, sys
            import vvtest_util as vvt
            if '-a' in sys.argv:
                print ( 'running analyze with V='+repr(vvt.PARAM_V) )
            else:
                print ( 'running execute' )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-p "V<b or !V"', batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            assert len( glob.glob( 'TestResults.*/scr*/execute.log' ) ) == 2
            assert len( util.grepfiles( 'running execute',
                        'TestResults.*/scr.V=a/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running execute',
                        'TestResults.*/scr.V=a/execute.log' ) ) == 1
            assert len( glob.glob( 'TestResults.*/scr.V=b/execute.log' ) ) == 0
            assert len( util.grepfiles( 'running analyze',
                        'TestResults.*/scr/execute.log' ) ) == 1

    def test_using_analyze_command_line_option(self):
        """
        using the -a or --analyze option with script test
        """    
        util.writescript( 'pytest.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : ival = 1 2
            #VVT: analyze : --analyze
            import os, sys
            import vvtest_util as vvt
            if '--analyze' not in sys.argv[1:]:
                if not vvt.opt_analyze:
                    print ( 'running touch' )
                    fp = open( 'afile.'+vvt.ival, 'w' ) ; fp.close()
                print ( 'running execute' )
            else:
                print ( "running analyze" )
                assert os.path.exists( '../pytest.ival=1/afile.1' )
                assert os.path.exists( '../pytest.ival=2/afile.2' )
            """ )
        util.writescript( 'shtest.vvt', """
            #!/bin/sh
            #VVT: parameterize : ival = 1 2
            #VVT: analyze : --analyze
            source ./vvtest_util.sh
            if cmdline_option --analyze ;
            then
                echo "running analyze"
                ls ../shtest.ival=1/afile.1 || exit 1
                ls ../shtest.ival=2/afile.2 || exit 1
            else
                [ $opt_analyze = 1 ] || {
                    echo "running touch"
                    touch afile.$ival
                }
                echo "running execute"
            fi
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=6, npass=6 )

            for tname in ['pytest','shtest']:
                assert len( util.grepfiles( 'running touch',
                    'TestResults.*/'+tname+'.ival=1/execute.log' ) ) == 1
                assert len( util.grepfiles( 'running execute',
                    'TestResults.*/'+tname+'.ival=1/execute.log' ) ) == 1
                assert len( util.grepfiles( 'running touch',
                    'TestResults.*/'+tname+'.ival=2/execute.log' ) ) == 1
                assert len( util.grepfiles( 'running execute',
                    'TestResults.*/'+tname+'.ival=2/execute.log' ) ) == 1
                assert len( util.grepfiles( 'running analyze',
                    'TestResults.*/'+tname+'/execute.log' ) ) == 1
                assert len( util.grepfiles( 'running touch',
                    'TestResults.*/'+tname+'/execute.log' ) ) == 0

            vrun = vtu.runvvtest( '-Ra', batch=batch )
            vrun.assertCounts( total=6, npass=6 )

            for tname in ['pytest','shtest']:
                assert len( util.grepfiles( 'running touch',
                    'TestResults.*/'+tname+'.ival=1/execute.log' ) ) == 0
                assert len( util.grepfiles( 'running execute',
                    'TestResults.*/'+tname+'.ival=1/execute.log' ) ) == 1
                assert len( util.grepfiles( 'running touch',
                    'TestResults.*/'+tname+'.ival=2/execute.log' ) ) == 0
                assert len( util.grepfiles( 'running execute',
                    'TestResults.*/'+tname+'.ival=2/execute.log' ) ) == 1
                assert len( util.grepfiles( 'running analyze',
                    'TestResults.*/'+tname+'/execute.log' ) ) == 1
                assert len( util.grepfiles( 'running touch',
                    'TestResults.*/'+tname+'/execute.log' ) ) == 0


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
