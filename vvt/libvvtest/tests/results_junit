#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3


class junit_output_format_tests( vtu.vvtestTestCase ):

    def test_producing_a_JUnit_results_file(self):
        ""
        write_three_test_files()
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )

        vrun = vtu.runvvtest( '-i --junit=../ju.xml', chdir=vrun.resultsDir() )
        time.sleep(1)

        doc = util.read_xml_file( 'ju.xml' )
        self.assert_junit_test_names( doc )
        self.assert_output_for_diff_and_fail_tests( doc )

    def test_producing_a_JUnit_results_file_as_part_of_the_execution(self):
        ""
        write_three_test_files()
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--junit ju.xml', batch=batch )
            vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )

            doc = util.read_xml_file( 'ju.xml' )
            self.assert_junit_test_names( doc )

    def assert_junit_test_names(self, doc):
        ""
        tL = []
        for nd in doc.getElementsByTagName('testcase'):
            tL.append( (nd.getAttribute('name'),nd.getAttribute('time')) )
        tL.sort()
        assert [ tup[0] for tup in tL ] == [ 'DiffTest.np=1',
                                             'DiffTest.np=2',
                                             'FailTest',
                                             'subdir/param.hello=mars',
                                             'subdir/param.hello=world' ]
        assert abs( int(tL[0][1]) - 4 ) <= 2
        assert abs( int(tL[1][1]) - 4 ) <= 2
        assert abs( int(tL[2][1]) - 3 ) <= 2
        assert abs( int(tL[3][1]) - 2 ) <= 2
        assert abs( int(tL[4][1]) - 2 ) <= 2

    def assert_output_for_diff_and_fail_tests(self, doc):
        ""
        for nd in doc.getElementsByTagName('testcase'):
            sysnd = util.find_child_xml_node( nd, 'system-out' )
            if nd.getAttribute('name').startswith( 'DiffTest' ):
                txt = util.get_subtext_from_xml_node(sysnd)
                assert 'fake difference of 29' in txt
            elif nd.getAttribute('name').startswith( 'FailTest' ):
                txt = util.get_subtext_from_xml_node(sysnd)
                assert 'pitch a fake exception' in txt

    def test_no_tests_to_run_still_produces_a_junit_file(self):
        ""
        util.writefile( "subdir/param.vvt", """
            # error on purpose so vvtest skips this test
            #VVT: parameterize : hello
            pass
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--junit ju.xml' )
            vrun.assertCounts( total=0 )

            assert os.path.exists( 'ju.xml' )
            doc = util.read_xml_file( 'ju.xml' )
            assert len( doc.getElementsByTagName('testcase') ) == 0


def write_three_test_files():
    ""
    util.writefile( "subdir/param.vvt", """
        #VVT: parameterize : hello = world mars
        import time
        time.sleep(1)
        """ )
    util.writefile( "FailTest.vvt", """
        import os, sys, time
        import vvtest_util as vvt
        time.sleep(2)
        raise Exception( 'pitch a fake exception' )
        """)
    util.writefile( "DiffTest.xml", """
        <rtest name="DiffTest">
            <parameterize np="1 2"/>
            <execute>
                sleep 3
                echo "fake difference of 29"
                set have_diff = yes
            </execute>
        </rtest>""")


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
