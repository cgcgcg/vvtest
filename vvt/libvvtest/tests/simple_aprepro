#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import glob
import unittest
import time

import testutils as util
from testutils import print3



class Simple_Aprepro( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_simple1(self):
        ""
        util.writefile( 'values.aprepro', """
            # {secret = 3 * 6}
            """ )
        util.writefile( 'testA.py.vvt', """
            #VVT: copy : values.aprepro
            import script_util as util

            apr = util.simple_aprepro("values.aprepro", None)

            assert apr['secret'] == 18
            """ )
        time.sleep(1)

        self.simple2( '' )
        self.simple2('--plat '+util.core_platform_name()+' --batch')

    def simple1(self, opt):
        ""
        util.remove_results()

        vrun = util.vvtestRunner( opt+' -N 4' )

        assert vrun.num_pass == 1

    def test_simple2(self):
        ""
        util.writefile( 'values.aprepro', """
            # {first_secret = 2 * 5 - 3}
            """ )
        util.writefile( 'input.yaml.apr', """
            # 'first_secret' should be overridden
            # {first_secret = 1}
            # {second_secret = first_secret + 1}
            """ )
        util.writefile( 'testA.py.vvt', """
            #VVT: copy : values.aprepro input.yaml.apr
            import script_util as util

            apr = util.simple_aprepro("values.aprepro", None)
            apr = util.simple_aprepro("input.yaml.apr", "input.yaml", override=apr)

            assert apr['first_secret'] == 7
            assert apr['second_secret'] == 8
            """ )
        time.sleep(1)

        self.simple2( '' )
        self.simple2('--plat '+util.core_platform_name()+' --batch')

    def simple2(self, opt):
        ""
        util.remove_results()

        vrun = util.vvtestRunner( opt+' -N 4' )

        assert vrun.num_pass == 1


    def test_simple3(self):
        ""
        txt_in = """# abc = { abc = PI }
            # abc = { abc }
            # xyz = { xyz = 123.456 }
            # xyz = { xyz }"""
        txt_out = """# abc = 3.141592653589793
            # abc = 3.141592653589793
            # xyz = 123.456
            # xyz = 123.456"""
        util.writefile( 'values.aprepro', txt_in )
        util.writefile( 'values.gold', txt_out )
        util.writefile( 'testA.py.vvt', """
            #VVT: copy : values.aprepro values.gold
            import math
            import script_util as util

            apr = util.simple_aprepro("values.aprepro", "values.comp")

            assert apr == {'abc': math.pi, 'xyz': 123.456}

            with open("values.gold", 'r') as F:
                gold = F.read()
            with open("values.comp", 'r') as F:
                comp = F.read()
            assert gold == comp
            """ )
        time.sleep(1)

        self.simple2( '' )
        self.simple2('--plat '+util.core_platform_name()+' --batch')

    def simple3(self, opt):
        ""
        util.remove_results()

        vrun = util.vvtestRunner( opt+' -N 4' )

        assert vrun.num_pass == 1

############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
