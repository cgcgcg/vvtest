#!/usr/bin/env python
#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import unittest
import time
import glob

import testutils as util
from testutils import print3


class Testing_boostrap_file( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_without_a_bootstrap_file(self):
        ""
        util.writefile( 'hello.py.vvt', """
            import os, sys
            print ( "hello from the python test script" )
            """ )
        time.sleep(1)

        ok,out = util.run_cmd( util.vvtest )
        assert ok
        assert util.numpass( out ) == 1

    def test_using_a_softlink_to_vvtest(self):
        ""
        util.writefile( 'hello.py.vvt', """
            import os, sys
            print ( "hello from the python test script" )
            """ )
        os.symlink( util.vvtest, 'vvtest' )
        time.sleep(1)

        ok,out = util.run_cmd( os.path.abspath( 'vvtest' ) )
        assert ok
        assert util.numpass( out ) == 1

    def test_with_a_bootstrap_file(self):
        ""
        util.writefile( 'hello.py.vvt', """
            import os, sys
            print ( "special env var="+os.environ['SPECIAL_TEST_VAR'] )
            """ )
        os.symlink( util.vvtest, 'vvtest' )
        util.writefile( 'vvtest_bootstrap.py', """
            import os
            os.environ['SPECIAL_TEST_VAR'] = 'special value'
            """ )
        time.sleep(1)

        ok,out = util.run_cmd( os.path.abspath( 'vvtest' ) )
        assert ok
        assert util.numpass( out ) == 1

        fL = glob.glob( 'TestResults*/hello.py*/execute.log' )
        assert len(fL) == 1
        L = util.filegrep( fL[0], 'var=special value' )
        assert len(L) == 1


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
