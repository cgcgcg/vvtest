#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3


class Testing_boostrap_file( vtu.vvtestTestCase ):

    def test_without_a_bootstrap_file(self):
        ""
        util.writefile( 'hello.py.vvt', """
            import os, sys
            print ( "hello from the python test script" )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( npass=1 )

    def run_soft_linked_vvtest_and_expect_one_test_pass(self, args=''):
        ""
        cmd = os.path.abspath( 'vvtest' )
        cmd += ' -v --plat ' + vtu.core_platform_name()
        if args:
            cmd += ' ' + args

        x,out = util.runcmd( cmd )
        assert x == 0
        counts = vtu.parse_vvtest_counts( out )
        assert counts['npass'] == 1

    def test_using_a_softlink_to_vvtest(self):
        ""
        util.writefile( 'hello.py.vvt', """
            import os, sys
            print ( "hello from the python test script" )
            """ )
        os.symlink( vtu.vvtest_file, 'vvtest' )
        time.sleep(1)

        self.run_soft_linked_vvtest_and_expect_one_test_pass()

    def test_with_a_bootstrap_file(self):
        ""
        util.writefile( 'hello.py.vvt', """
            import os, sys
            print ( "special env var="+os.environ['SPECIAL_TEST_VAR'] )
            """ )
        os.symlink( vtu.vvtest_file, 'vvtest' )
        util.writefile( 'vvtest_bootstrap.py', """
            import os
            os.environ['SPECIAL_TEST_VAR'] = 'special value'
            """ )
        time.sleep(1)

        self.run_soft_linked_vvtest_and_expect_one_test_pass()

        assert len( util.grepfiles( 'var=special value',
                    'TestResults*/hello.py*/execute.log' ) ) == 1

    def test_a_bootstrap_file_setting_the_config_dir(self):
        ""
        util.writefile( 'myconfig/script_util_plugin.py', """
            import os, sys
            def my_special_func():
                print ( 'my special function called' )
            """ )

        os.symlink( vtu.vvtest_file, 'vvtest' )
        util.writefile( 'vvtest_bootstrap.py', """
            import os
            os.environ['VVTEST_CONFIGDIR'] = '"""+os.path.abspath('myconfig')+"""'
            """ )

        util.writefile( 'hello.py.vvt', """
            import os, sys
            import script_util_plugin as util
            util.my_special_func()
            """ )

        time.sleep(1)

        self.run_soft_linked_vvtest_and_expect_one_test_pass()

        assert len( util.grepfiles( 'my special function called',
                    'TestResults*/hello.py*/execute.log' ) ) == 1

    def test_a_bootstrap_config_dir_is_overridden_with_command_line(self):
        ""
        util.writefile( 'myconfig/script_util_plugin.py', """
            import os, sys
            def my_special_func():
                print ( 'my special function called' )
            """ )

        util.writefile( 'cmdconfig/script_util_plugin.py', """
            import os, sys
            def my_special_func():
                print ( 'command config function called' )
            """ )

        os.symlink( vtu.vvtest_file, 'vvtest' )
        util.writefile( 'vvtest_bootstrap.py', """
            import os
            os.environ['VVTEST_CONFIGDIR'] = '"""+os.path.abspath('myconfig')+"""'
            """ )

        util.writefile( 'hello.py.vvt', """
            import os, sys
            import script_util_plugin as util
            util.my_special_func()
            """ )

        time.sleep(1)

        optcfg = '--config ' + os.path.abspath('cmdconfig')
        self.run_soft_linked_vvtest_and_expect_one_test_pass( optcfg )

        assert len( util.grepfiles( 'my special function called',
                    'TestResults*/hello.py*/execute.log' ) ) == 0
        assert len( util.grepfiles( 'command config function called',
                    'TestResults*/hello.py*/execute.log' ) ) == 1


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
