#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3

from libvvtest.RuntimeConfig import RuntimeConfig


class filter_and_num_processors( vtu.vvtestTestCase ):

    def test_batch_should_not_prune_based_on_max_procs(self):
        ""
        maxprocs = 4

        util.writescript( 'atest.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : np=1
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'btest.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : np="""+str(maxprocs)+"""
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'ctest.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : np="""+str(maxprocs+1)+"""
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'dtest.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : np="""+str(maxprocs+2)+"""
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '-N '+str(maxprocs+1), batch=True )
        vrun.assertCounts( total=3, npass=3 )

        assert len( glob.glob( 'TestResults*/atest.np=1/execute.log' ) ) == 1
        assert len( glob.glob( 'TestResults*/btest.np='+str(maxprocs)+'/execute.log' ) ) == 1
        assert len( glob.glob( 'TestResults*/ctest.np='+str(maxprocs+1)+'/execute.log' ) ) == 1
        assert len( glob.glob( 'TestResults*/dtest.*/execute.log' ) ) == 0

    def test_filter_out_tests_exceeding_max_procs_command_line_switch(self):
        ""
        util.writescript( 'btest.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : np = 1 2 4
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'ctest.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : np = 1 3 4
            #VVT: analyze : --analyze
            import sys
            import vvtest_util as vvt
            if '--analyze' in sys.argv:
                print ( 'executing analyze, np='+str(vvt.PARAM_np) )
            else:
                print ( 'executing test, np='+str(vvt.np) )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=7, npass=7 )

            vrun = vtu.runvvtest( '-R -N 2', batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            assert vrun.countTestLines( 'btest.np=1' ) == 1
            assert vrun.countTestLines( 'btest.np=2' ) == 1
            assert vrun.countTestLines( 'ctest' ) == 1

            vrun = vtu.runvvtest( '-R', batch=batch )
            vrun.assertCounts( total=7, npass=7 )

            vrun = vtu.runvvtest( '-R', batch=batch,
                                        chdir=vrun.resultsDir() )
            vrun.assertCounts( total=7, npass=7 )

            vtu.remove_results()

            vrun = vtu.runvvtest( '-N 2', batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            assert vrun.countTestLines( 'btest.np=1' ) == 1
            assert vrun.countTestLines( 'btest.np=2' ) == 1
            assert vrun.countTestLines( 'ctest' ) == 1

            vrun = vtu.runvvtest( '-R', batch=batch,
                                        chdir=vrun.resultsDir() )
            vrun.assertCounts( total=3, npass=3 )

            assert vrun.countTestLines( 'btest.np=1' ) == 1
            assert vrun.countTestLines( 'btest.np=2' ) == 1
            assert vrun.countTestLines( 'ctest' ) == 1

    def test_the_maxprocs_field_in_RuntimeConfig(self):
        ""
        rtconfig = RuntimeConfig()
        assert rtconfig.evaluate_maxsize( (1,0) )

        rtconfig = RuntimeConfig()
        rtconfig.setMaxSize( (5,0) )
        assert     rtconfig.evaluate_maxsize( (5,0) )
        assert not rtconfig.evaluate_maxsize( (6,0) )

    def test_max_procs_filter_is_not_applied_in_restart_mode(self):
        ""
        util.writefile( 'config/platform_plugin.py', """
            def initialize( plat ):
                plat.setattr( 'maxprocs', 4 )
            """ )
        util.writefile( 'procs.vvt', """
            #VVT: parameterize : np = 1 8
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( "--config config" )
        vrun.assertCounts( total=1, npass=1 )
        tdir = vrun.resultsDir()

        vrun = vtu.runvvtest( "-R --config", abspath('config'), chdir=tdir )
        vrun.assertCounts( total=1, npass=1 )

        vtu.remove_results()

        vrun = vtu.runvvtest( "-N 8 --config config" )
        vrun.assertCounts( total=2, npass=2 )

        vrun = vtu.runvvtest( "-R --config", abspath('config'), chdir=tdir )
        vrun.assertCounts( total=2, npass=2 )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
