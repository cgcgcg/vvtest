#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3

from libvvtest.ScriptReader import ScriptReader
from libvvtest.TestSpec import TestSpec
import libvvtest.TestSpecCreator as TSC
from libvvtest.filtering import TestFilter
import libvvtest.parsevvt as parsevvt


class exclude_tests( vtu.vvtestTestCase ):

    def write_exclude_test(self, include_line=''):
        ""
        util.writefile( "exclude.xml", """
            <rtest name="exclude">
              """+include_line+"""
              <execute>
                echo "running test"
              </execute>
            </rtest>""" )

    def test_exclude_and_include_on_current_platform(self):
        ""
        platname = vtu.core_platform_name()

        for batch in [False,True]:

            vtu.remove_results()

            self.write_exclude_test()
            time.sleep(1)
            vtu.runvvtest( batch=batch ).assertCounts( total=1, npass=1 )

            vtu.remove_results()

            self.write_exclude_test( '<include platforms="not '+platname+'"/>')
            time.sleep(1)
            vtu.runvvtest( batch=batch ).assertCounts( total=0 )

            # include the current platform

            vtu.remove_results()

            self.write_exclude_test( '<include platforms="'+platname+'"/>')
            time.sleep(1)
            vtu.runvvtest( batch=batch ).assertCounts( total=1, npass=1 )

            # add both an include and an exclude

            vtu.remove_results()

            self.write_exclude_test(
                    '<include platforms="'+platname+'"/> ' + \
                    '<include platforms="not '+platname+'"/>)' )
            time.sleep(1)
            vtu.runvvtest( batch=batch ).assertCounts( total=0 )

            # add -A option to ignore the include/exclude tags

            vtu.remove_results()

            vtu.runvvtest( '-A', batch=batch ).assertCounts( total=1, npass=1 )

            # an empty include

            vtu.remove_results()

            self.write_exclude_test( '<include platforms=""/>' )
            time.sleep(1)
            vtu.runvvtest( batch=batch ).assertCounts( total=0 )

    def test_using_platform_to_exclude_an_execute_block(self):
        ""
        platname = vtu.core_platform_name()

        util.writefile( "exe_exclude.xml", '''
            <rtest name="exe_exclude">
              <execute platforms="not '''+platname+'''">
                echo "findme line not excluded"
              </execute>
              <execute>
                echo "findme line number two included"
                sleep 1
              </execute>
            </rtest>''' )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=1, npass=1 )

        lines = util.grepfiles( 'findme', 'TestResults*/exe_exclude/execute.log' )
        assert len( lines ) == 1

    def test_using_an_option_attribute_with_include(self):
        ""
        util.writefile( "opt_exclude.xml", '''
            <rtest name="opt_exclude">
              <include options="2D and ( tridev or tri8 )"/>
              <execute>
                echo "findme line number one executed"
                sleep 1
              </execute>
            </rtest>''' )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=0 )

        vrun = vtu.runvvtest( '-w -o 2D+tridev' )
        vrun.assertCounts( total=1, npass=1 )

        vrun = vtu.runvvtest( '-w -o 2D+tri8' )
        vrun.assertCounts( total=1, npass=1 )

        vrun = vtu.runvvtest( '-w -o 2D -o tri8' )
        vrun.assertCounts( total=1, npass=1 )

        vrun = vtu.runvvtest( '-w -o 3D -o tri8' )
        vrun.assertCounts( total=0 )

        util.writefile( "opt_exclude.xml", '''
            <rtest name="opt_exclude">
              <include options="2D and ( tdev or t8 )"/>
              <execute>
                echo "findme line number one executed"
                sleep 1
              </execute>
            </rtest>''' )
        time.sleep(1)

        vtu.runvvtest( '-w' ).assertCounts( total=0 )

        vtu.runvvtest( '-w -o 2D+tdev' ).assertCounts( total=1, npass=1 )

    def test_using_a_platform_name_that_is_not_the_current_one(self):
        ""
        platname = vtu.core_platform_name()

        assert platname != "Fake"
        fakeplatname = "Fake"

        util.writefile( "plats.xml", '''
            <rtest name="plats">
            <include platforms="'''+fakeplatname+'''"/>
            </rtest>''' )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=0 )

        vtu.runvvtest( '-x '+fakeplatname ).assertCounts( total=1, npass=1 )

        vtu.remove_results()

        util.writefile( "plats.xml", '''
            <rtest name="plats">
            <include platforms="'''+fakeplatname+''' or Dummy"/>
            </rtest>''')

        vtu.runvvtest().assertCounts( total=0 )

        vtu.runvvtest( '-x '+fakeplatname ).assertCounts( total=1, npass=1 )

        vtu.remove_results()

        vtu.runvvtest( '-x '+platname+'/Junk' ).assertCounts( total=0 )

        vrun = vtu.runvvtest( '-x '+fakeplatname+'/Junk' )
        vrun.assertCounts( total=1, npass=1 )

        vtu.remove_results()

        util.writefile( "plats.xml", '''
            <rtest name="plats">
            </rtest>''' )

        vtu.runvvtest().assertCounts( total=1, npass=1 )

        vtu.remove_results()

        vtu.runvvtest( '-x '+fakeplatname ).assertCounts( total=1, npass=1 )

        vtu.remove_results()

        vtu.runvvtest( '-X '+fakeplatname ).assertCounts( total=0 )

        vrun = vtu.runvvtest( '-x '+platname+' -X '+fakeplatname )
        vrun.assertCounts( total=0 )

    def test_using_include_on_test_file_with_more_than_one_test_name(self):
        ""
        platname = vtu.core_platform_name()

        assert platname != "Fake"
        fakeplatname = "Fake"

        util.writefile( "multi.xml", '''
            <rtest name="multi">
              <rtest name="dual"/>
              <include testname="multi" platforms="'''+fakeplatname+'''"/>
              <include testname="dual" platforms="'''+platname+'''"/>
              <execute> echo "hello world" </execute>
            </rtest>''' )

        vtu.runvvtest().assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults.*/dual/execute.log' ) ) == 1

        vtu.runvvtest( '-w -x '+platname ).assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults.*/dual/execute.log' ) ) == 1

        vtu.runvvtest( '-w -X '+platname ).assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults.*/multi/execute.log' ) ) == 1

        vrun = vtu.runvvtest( '-w -x '+platname+'/'+fakeplatname )
        vrun.assertCounts( total=2, npass=2 )
        assert len( glob.glob( 'TestResults.*/multi/execute.log' ) ) == 1
        assert len( glob.glob( 'TestResults.*/dual/execute.log' ) ) == 1

    def test_the_enable_directive_on_script_test(self):
        ""
        platname = vtu.core_platform_name()

        # disable current platform
        util.writescript( 'exclude.vvt', """
            #!/bin/sh
            #VVT: enable (platforms=not """+platname+""")
            echo "hello world"
            """ )

        vtu.runvvtest().assertCounts( total=0 )

        # enable current platform
        util.writescript( 'exclude.vvt', """
            #!/bin/sh
            #VVT: enable (platforms="""+platname+""")
            echo "hello world"
            """ )

        vtu.runvvtest( '-w' ).assertCounts( total=1, npass=1 )

        # add both an enable and disable
        util.writescript( 'exclude.vvt', """
            #!/bin/sh
            #VVT: enable (platforms=not """+platname+""")
            #VVT: enable (platforms="""+platname+""")
            echo "hello world"
            """ )

        vtu.runvvtest( '-w' ).assertCounts( total=0 )

        # use -A to ignore enable/disable
        vtu.runvvtest( '-w -A' ).assertCounts( total=1, npass=1 )

        # an empty platform enable
        util.writescript( 'exclude.vvt', """
            #!/bin/sh
            #VVT: name=empty1
            #VVT: name=empty2
            #VVT: enable (testname=empty1, platforms=)
            echo "hello world"
            """ )

        vtu.runvvtest( '-w' ).assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults*/empty2/execute.log' ) ) == 1

        util.writescript( 'exclude.vvt', """
            #!/bin/sh
            #VVT: name=empty1
            #VVT: name=empty2
            #VVT: enable (testname=empty2, platforms)
            echo "hello world"
            """ )

        vtu.runvvtest( '-w' ).assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults*/empty1/execute.log' ) ) == 1

    def test_using_option_attributes_in_an_enable_directive(self):
        ""
        platname = vtu.core_platform_name()

        # some complex option expression
        util.writescript( 'opts.vvt', """
            #!/bin/sh
            #VVT: enable ( options="2D and ( tridev or tri8 )" )
            echo "hello world"
            """ )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=0 )

        vtu.runvvtest( '-w -o 2D+tridev' ).assertCounts( total=1, npass=1 )

        vtu.runvvtest( '-w -o 2D+tri8' ).assertCounts( total=1, npass=1 )

        vtu.runvvtest( '-w -o 2D -o tri8' ).assertCounts( total=1, npass=1 )

        vtu.runvvtest( '-w -o 3D -o tri8' ).assertCounts( total=0 )

        # combine platform with option expression
        util.writescript( 'opts.vvt', """
            #!/bin/sh
            #VVT: enable (options="2D and ( tridev or tri8 )",""" + \
                    """platforms="""+platname+""")
            echo "hello world"
            """ )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=0 )

        vtu.runvvtest( '-w -o 2D+tridev' ).assertCounts( total=1, npass=1 )

        vrun = vtu.runvvtest( '-w -o 2D+tridev -X '+platname )
        vrun.assertCounts( total=0 )

        vrun = vtu.runvvtest( '-w -o 2D+tridev -x '+platname )
        vrun.assertCounts( total=1, npass=1 )

        # reverse the order (and add an extra comma in the attributes)
        util.writescript( 'opts.vvt', """
            #!/bin/sh
            #VVT: enable ( platforms="""+platname+", " + \
                       """options="2D and ( tridev or tri8 )", )
            echo "hello world"
            """ )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=0 )

        vtu.runvvtest( '-w -o 2D+tridev' ).assertCounts( total=1, npass=1 )

        vrun = vtu.runvvtest( '-w -o 2D+tridev -X '+platname )
        vrun.assertCounts( total=0 )

    def test_parse_enable_directive(self):
        ""
        util.writefile( 'blue.vvt', """
            #VVT: enable (platforms=)
            """ )
        util.writefile( 'red.vvt', """
            #VVT: enable (platforms=XBox)
            """ )
        util.writefile( 'green1.vvt', """
            #VVT: enable
            """ )
        util.writefile( 'green2.vvt', """
            #VVT: enable = True
            """ )
        util.writefile( 'green3.vvt', """
            #VVT: enable = False
            """ )
        util.writefile( 'green4.vvt', """
            #VVT: enable : false
            """ )
        util.writefile( 'pink1.vvt', """
            #VVT: enable (platforms=) : false
            # this is an error
            """ )
        util.writefile( 'pink2.vvt', """
            #VVT: enable (options=) = false
            # this is an error
            """ )
        util.writefile( 'pink3.vvt', """
            #VVT: enable (options=foo) = true
            # this is ok but redundent/unnecessary
            """ )
        util.writefile( 'pink4.vvt', """
            #VVT: enable = foobar
            """ )
        time.sleep(1)

        vspecs = ScriptReader( 'blue.vvt' )
        tspec = TestSpec( 'blue', os.getcwd(), 'blue.vvt' )
        parsevvt.parse_enable( tspec, vspecs )

        exprL = tspec.getPlatformEnableExpressions()
        assert len( exprL ) == 1
        assert not exprL[0].evaluate( lambda word: True )

        vspecs = ScriptReader( 'red.vvt' )
        tspec = TestSpec( 'red', os.getcwd(), 'red.vvt' )
        parsevvt.parse_enable( tspec, vspecs )

        exprL = tspec.getPlatformEnableExpressions()
        assert len( exprL ) == 1
        assert     exprL[0].evaluate( lambda word: word == 'XBox' )
        assert not exprL[0].evaluate( lambda word: word == 'PS2' )

        vspecs = ScriptReader( 'green1.vvt' )
        tspec = TestSpec( 'green1', os.getcwd(), 'green1.vvt' )
        parsevvt.parse_enable( tspec, vspecs )
        assert tspec.isEnabled()

        vspecs = ScriptReader( 'green2.vvt' )
        tspec = TestSpec( 'green2', os.getcwd(), 'green2.vvt' )
        parsevvt.parse_enable( tspec, vspecs )
        assert tspec.isEnabled()

        vspecs = ScriptReader( 'green3.vvt' )
        tspec = TestSpec( 'green3', os.getcwd(), 'green3.vvt' )
        parsevvt.parse_enable( tspec, vspecs )
        assert not tspec.isEnabled()

        vspecs = ScriptReader( 'green4.vvt' )
        tspec = TestSpec( 'green4', os.getcwd(), 'green4.vvt' )
        parsevvt.parse_enable( tspec, vspecs )
        assert not tspec.isEnabled()

        vspecs = ScriptReader( 'pink1.vvt' )
        tspec = TestSpec( 'pink1', os.getcwd(), 'pink1.vvt' )
        self.assertRaises( TSC.TestSpecError, parsevvt.parse_enable, tspec, vspecs )

        vspecs = ScriptReader( 'pink2.vvt' )
        tspec = TestSpec( 'pink2', os.getcwd(), 'pink2.vvt' )
        self.assertRaises( TSC.TestSpecError, parsevvt.parse_enable, tspec, vspecs )

        vspecs = ScriptReader( 'pink3.vvt' )
        tspec = TestSpec( 'pink3', os.getcwd(), 'pink3.vvt' )
        parsevvt.parse_enable( tspec, vspecs )
        assert tspec.isEnabled()
        assert len( tspec.getOptionEnableExpressions() ) == 1

        vspecs = ScriptReader( 'pink4.vvt' )
        tspec = TestSpec( 'pink4', os.getcwd(), 'pink4.vvt' )
        self.assertRaises( TSC.TestSpecError, parsevvt.parse_enable, tspec, vspecs )

    def test_filtering_out_tests_by_enable(self):
        ""
        tcase = vtu.make_fake_TestCase()
        tf = TestFilter( None, None )
        assert tf.checkEnabled( tcase )

        tcase.getSpec().setEnabled( False )
        assert not tf.checkEnabled( tcase )

    def test_parse_enable_integration_test(self):
        ""
        util.writefile( 'blue.vvt', """
            #VVT: enable : True
            import vvtest_util
            """ )
        util.writefile( 'red.vvt', """
            #VVT: enable : False
            import vvtest_util
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '-vv' )
        vrun.assertCounts( total=2, npass=1, skip=1 )
        assert vrun.countTestLines( 'pass *blue' ) == 1
        assert vrun.countTestLines( 'skip *red' ) == 1


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
