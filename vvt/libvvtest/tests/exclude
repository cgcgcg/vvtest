#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob
import unittest

import testutils as util
from testutils import print3


class exclude_tests( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def write_exclude_test(self, include_line=''):
        ""
        util.writefile( "exclude.xml", """
            <rtest name="exclude">
              """+include_line+"""
              <execute>
                echo "running test"
              </execute>
            </rtest>""" )

    def test_exclude_and_include_on_current_platform(self):
        ""
        platname = util.core_platform_name()

        for batch in [False,True]:

            util.remove_results()

            self.write_exclude_test()
            time.sleep(1)
            util.runvvtest( batch=batch ).assertCounts( total=1, npass=1 )

            util.remove_results()

            self.write_exclude_test( '<include platforms="not '+platname+'"/>')
            time.sleep(1)
            util.runvvtest( batch=batch ).assertCounts( total=0 )

            # include the current platform

            util.remove_results()

            self.write_exclude_test( '<include platforms="'+platname+'"/>')
            time.sleep(1)
            util.runvvtest( batch=batch ).assertCounts( total=1, npass=1 )

            # add both an include and an exclude

            util.remove_results()

            self.write_exclude_test(
                    '<include platforms="'+platname+'"/> ' + \
                    '<include platforms="not '+platname+'"/>)' )
            time.sleep(1)
            util.runvvtest( batch=batch ).assertCounts( total=0 )

            # add -A option to ignore the include/exclude tags

            util.remove_results()

            util.runvvtest( '-A', batch=batch ).assertCounts( total=1, npass=1 )

            # an empty include

            util.remove_results()

            self.write_exclude_test( '<include platforms=""/>' )
            time.sleep(1)
            util.runvvtest( batch=batch ).assertCounts( total=0 )

    def test_using_platform_to_exclude_an_execute_block(self):
        ""
        platname = util.core_platform_name()

        util.writefile( "exe_exclude.xml", '''
            <rtest name="exe_exclude">
              <execute platforms="not '''+platname+'''">
                echo "findme line not excluded"
              </execute>
              <execute>
                echo "findme line number two included"
                sleep 1
              </execute>
            </rtest>''' )
        time.sleep(1)

        util.runvvtest().assertCounts( total=1, npass=1 )

        lines = util.grepfiles( 'findme', 'TestResults*/exe_exclude/execute.log' )
        assert len( lines ) == 1

    def test_using_an_option_attribute_with_include(self):
        ""
        util.writefile( "opt_exclude.xml", '''
            <rtest name="opt_exclude">
              <include options="2D and ( tridev or tri8 )"/>
              <execute>
                echo "findme line number one executed"
                sleep 1
              </execute>
            </rtest>''' )
        time.sleep(1)

        util.runvvtest().assertCounts( total=0 )

        vrun = util.runvvtest( '-w -o 2D+tridev' )
        vrun.assertCounts( total=1, npass=1 )

        vrun = util.runvvtest( '-w -o 2D+tri8' )
        vrun.assertCounts( total=1, npass=1 )

        vrun = util.runvvtest( '-w -o 2D -o tri8' )
        vrun.assertCounts( total=1, npass=1 )

        vrun = util.runvvtest( '-w -o 3D -o tri8' )
        vrun.assertCounts( total=0 )

        util.writefile( "opt_exclude.xml", '''
            <rtest name="opt_exclude">
              <include options="2D and ( tdev or t8 )"/>
              <execute>
                echo "findme line number one executed"
                sleep 1
              </execute>
            </rtest>''' )
        time.sleep(1)

        util.runvvtest( '-w' ).assertCounts( total=0 )

        util.runvvtest( '-w -o 2D+tdev' ).assertCounts( total=1, npass=1 )

    def test_using_a_platform_name_that_is_not_the_current_one(self):
        ""
        platname = util.core_platform_name()

        assert platname != "Fake"
        fakeplatname = "Fake"

        util.writefile( "plats.xml", '''
            <rtest name="plats">
            <include platforms="'''+fakeplatname+'''"/>
            </rtest>''' )
        time.sleep(1)

        util.runvvtest().assertCounts( total=0 )

        util.runvvtest( '-x '+fakeplatname ).assertCounts( total=1, npass=1 )

        util.remove_results()

        util.writefile( "plats.xml", '''
            <rtest name="plats">
            <include platforms="'''+fakeplatname+''' or Dummy"/>
            </rtest>''')

        util.runvvtest().assertCounts( total=0 )

        util.runvvtest( '-x '+fakeplatname ).assertCounts( total=1, npass=1 )

        util.remove_results()

        util.runvvtest( '-x '+platname+'/Junk' ).assertCounts( total=0 )

        vrun = util.runvvtest( '-x '+fakeplatname+'/Junk' )
        vrun.assertCounts( total=1, npass=1 )

        util.remove_results()

        util.writefile( "plats.xml", '''
            <rtest name="plats">
            </rtest>''' )

        util.runvvtest().assertCounts( total=1, npass=1 )

        util.remove_results()

        util.runvvtest( '-x '+fakeplatname ).assertCounts( total=1, npass=1 )

        util.remove_results()

        util.runvvtest( '-X '+fakeplatname ).assertCounts( total=0 )

        vrun = util.runvvtest( '-x '+platname+' -X '+fakeplatname )
        vrun.assertCounts( total=0 )

    def test_using_include_on_test_file_with_more_than_one_test_name(self):
        ""
        platname = util.core_platform_name()

        assert platname != "Fake"
        fakeplatname = "Fake"

        util.writefile( "multi.xml", '''
            <rtest name="multi">
              <rtest name="dual"/>
              <include testname="multi" platforms="'''+fakeplatname+'''"/>
              <include testname="dual" platforms="'''+platname+'''"/>
              <execute> echo "hello world" </execute>
            </rtest>''' )

        util.runvvtest().assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults.*/dual/execute.log' ) ) == 1

        util.runvvtest( '-w -x '+platname ).assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults.*/dual/execute.log' ) ) == 1

        util.runvvtest( '-w -X '+platname ).assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults.*/multi/execute.log' ) ) == 1

        vrun = util.runvvtest( '-w -x '+platname+'/'+fakeplatname )
        vrun.assertCounts( total=2, npass=2 )
        assert len( glob.glob( 'TestResults.*/multi/execute.log' ) ) == 1
        assert len( glob.glob( 'TestResults.*/dual/execute.log' ) ) == 1

    def test_the_enable_directive_on_script_test(self):
        ""
        platname = util.core_platform_name()

        # disable current platform
        util.writescript( 'exclude.vvt', """
            #!/bin/sh
            #VVT: enable (platforms=not """+platname+""")
            echo "hello world"
            """ )

        util.runvvtest().assertCounts( total=0 )

        # enable current platform
        util.writescript( 'exclude.vvt', """
            #!/bin/sh
            #VVT: enable (platforms="""+platname+""")
            echo "hello world"
            """ )

        util.runvvtest( '-w' ).assertCounts( total=1, npass=1 )

        # add both an enable and disable
        util.writescript( 'exclude.vvt', """
            #!/bin/sh
            #VVT: enable (platforms=not """+platname+""")
            #VVT: enable (platforms="""+platname+""")
            echo "hello world"
            """ )

        util.runvvtest( '-w' ).assertCounts( total=0 )

        # use -A to ignore enable/disable
        util.runvvtest( '-w -A' ).assertCounts( total=1, npass=1 )

        # an empty platform enable
        util.writescript( 'exclude.vvt', """
            #!/bin/sh
            #VVT: name=empty1
            #VVT: name=empty2
            #VVT: enable (testname=empty1, platforms=)
            echo "hello world"
            """ )

        util.runvvtest( '-w' ).assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults*/empty2/execute.log' ) ) == 1

        util.writescript( 'exclude.vvt', """
            #!/bin/sh
            #VVT: name=empty1
            #VVT: name=empty2
            #VVT: enable (testname=empty2, platforms)
            echo "hello world"
            """ )

        util.runvvtest( '-w' ).assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults*/empty1/execute.log' ) ) == 1

    def test_using_option_attributes_in_an_enable_directive(self):
        ""
        platname = util.core_platform_name()

        # some complex option expression
        util.writescript( 'opts.vvt', """
            #!/bin/sh
            #VVT: enable ( options="2D and ( tridev or tri8 )" )
            echo "hello world"
            """ )
        time.sleep(1)

        util.runvvtest().assertCounts( total=0 )

        util.runvvtest( '-w -o 2D+tridev' ).assertCounts( total=1, npass=1 )

        util.runvvtest( '-w -o 2D+tri8' ).assertCounts( total=1, npass=1 )

        util.runvvtest( '-w -o 2D -o tri8' ).assertCounts( total=1, npass=1 )

        util.runvvtest( '-w -o 3D -o tri8' ).assertCounts( total=0 )

        # combine platform with option expression
        util.writescript( 'opts.vvt', """
            #!/bin/sh
            #VVT: enable (options="2D and ( tridev or tri8 )",""" + \
                    """platforms="""+platname+""")
            echo "hello world"
            """ )
        time.sleep(1)

        util.runvvtest().assertCounts( total=0 )

        util.runvvtest( '-w -o 2D+tridev' ).assertCounts( total=1, npass=1 )

        vrun = util.runvvtest( '-w -o 2D+tridev -X '+platname )
        vrun.assertCounts( total=0 )

        vrun = util.runvvtest( '-w -o 2D+tridev -x '+platname )
        vrun.assertCounts( total=1, npass=1 )

        # reverse the order (and add an extra comma in the attributes)
        util.writescript( 'opts.vvt', """
            #!/bin/sh
            #VVT: enable ( platforms="""+platname+", " + \
                       """options="2D and ( tridev or tri8 )", )
            echo "hello world"
            """ )
        time.sleep(1)

        util.runvvtest().assertCounts( total=0 )

        util.runvvtest( '-w -o 2D+tridev' ).assertCounts( total=1, npass=1 )

        vrun = util.runvvtest( '-w -o 2D+tridev -X '+platname )
        vrun.assertCounts( total=0 )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
