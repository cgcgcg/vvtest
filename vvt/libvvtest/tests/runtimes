#!/usr/bin/env python

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import string, re
import time
import filecmp
import shutil
import glob

# this will os.chdir() to a subdirectory
from testutils import *

import results
import TestSpec
import TestSpecCreator
import xmlwrapper

timesfname = results.runtimes_filename
multifname = results.multiruntimes_filename

xreader = xmlwrapper.XmlDocReader()

def main():
    """
    """
    argL = get_arg_list()

    if len(argL) == 0:
        argL = """test01 test02 test03 test04 test05 test06
               """.split()

    # set these for the pipeline tests
    os.environ['VVTEST_BATCH_READ_DELAY'] = '5'
    os.environ['VVTEST_BATCH_READ_DELAY_MAX'] = '15'
    os.environ['VVTEST_BATCH_SLEEP_LENGTH'] = '1'
    
    savedir = os.getcwd()
    for func in argL:
        os.chdir( savedir )

        # force the results files to be written locally for testing here;
        # it is used in vvtest when handling the --save-results option
        os.environ['TESTING_DIRECTORY'] = os.getcwd()

        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )
        eval( func+'()' )


#######################################################################

def test01():
    """
    create and use a runtimes file
    """
    writefile( "tests/dir1/one.xml", """
        <rtest name="one">
          <execute>
            sleep 1
          </execute>
        </rtest>""")
    writefile( "tests/dir1/two.xml", """
        <rtest name="two">
          <execute>
            sleep 2
          </execute>
        </rtest>""")
    writefile( "tests/dir2/three.xml", """
        <rtest name="three">
          <execute>
            sleep 3
          </execute>
        </rtest>""")

    out,np,nd,nf,nn = run_vvtest('tests')
    assert np == 3 and nd == 0 and nf == 0 and nn == 0

    tdir = os.path.join( os.getcwd(), results_dir() )
    platname = platform_name(out)

    # create a test source tree runtimes file but without any test results
    tr = results.TestResults()
    tr.writeRuntimes( 'tests', None )

    # even though a rootrel directory could be determined, no runtime is available
    tst = TestSpecCreator.createTestObjects( os.getcwd()+'/tests', 'dir1/one.xml' )[0]
    cache = results.LookupCache( platname, 'cplr' )
    tm,tv = cache.getRunTime( tst )
    print "time", tm
    assert tm == None

    # re-save the testing results (this time the test rootrels can be determined)
    # and create a multiplatform results file
    os.environ['TESTING_DIRECTORY'] = os.path.abspath( 'testing' )
    os.mkdir('testing')
    run_vvtest( '-i --save-results' )
    resultsfname = os.path.abspath( glob.glob('testing/results.*')[0] )
    plat,cplr = get_platform_compiler( resultsfname )
    ok,out = run_cmd( resultspy + ' merge '+resultsfname, directory='testing' )
    assert ok

    # leave the source tree runtimes file empty and use the multiplatform results
    cache = results.LookupCache( plat, cplr, os.path.abspath('testing') )
    tm,tv = cache.getRunTime( tst )
    print "time", tm
    assert tm != None and tm > 0 and tm < 10

    # populate the test source tree runtimes file
    tr.readResults( resultsfname )
    tr.writeRuntimes( 'tests', None )

    # a time for the test should be found from the source tree runtimes file
    cache = results.LookupCache( platname, 'cplr' )
    tm,tv = cache.getRunTime( tst )
    print "time", tm
    assert tm != None and tm > 0 and tm < 10


def test02():
    """
    exercise runtime min/max with TestResults.* timings
    """
    writescript( "AA.vvt", """
        #!/usr/bin/env python
        import os, sys, time
        time.sleep(1)
        """ )
    writescript( "BB.vvt", """
        #!/usr/bin/env python
        import os, sys, time
        time.sleep(3)
        """ )
    writescript( "CC.vvt", """
        #!/usr/bin/env python
        import os, sys, time
        time.sleep(7)
        """ )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 3 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-i' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-i --tmax 6' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert len( grep( out, 'AA' ) ) == 1
    assert len( grep( out, 'BB' ) ) == 1
    assert len( grep( out, 'CC' ) ) == 0

    out,np,nd,nf,nn = run_vvtest( '-i --tmin 3' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert len( grep( out, 'AA' ) ) == 0
    assert len( grep( out, 'BB' ) ) == 1
    assert len( grep( out, 'CC' ) ) == 1


def test03():
    """
    exercise runtime min/max using a timings file
    """
    writescript( "tests/AA.vvt", """
        #!/usr/bin/env python
        import os, sys, time
        time.sleep(1)
        """ )
    writescript( "tests/BB.vvt", """
        #!/usr/bin/env python
        import os, sys, time
        time.sleep(3)
        """ )
    writescript( "tests/CC.vvt", """
        #!/usr/bin/env python
        import os, sys, time
        time.sleep(7)
        """ )

    # without a runtimes available, all tests should run
    out,np,nd,nf,nn = run_vvtest( '--tmax 6 tests' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0

    tdir = os.path.abspath( results_dir() )
    platname = platform_name(out)

    # create a timings file
    run_cmd( resultspy + ' save', directory='tests' )
    run_vvtest( '-i --save-results', directory=tdir )
    resultsfname = glob.glob('results.*')[0]
    ok,out = run_cmd( resultspy + ' merge -x '+resultsfname )
    assert ok

    # select tests based on the timings file
    remove_results()
    out,np,nd,nf,nn = run_vvtest( '--tmax 6 tests' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    L = testlist( out )
    assert len(L) == 2
    assert L[0][0] == 'AA'
    assert L[1][0] == 'BB'


def test04():
    """
    runtime min/max selected tests in TestResults.*
    """
    writescript( "tests/AA.vvt", """
        #!/usr/bin/env python
        import os, sys, time
        time.sleep(1)
        """ )
    writescript( "tests/BB.vvt", """
        #!/usr/bin/env python
        import os, sys, time
        time.sleep(3)
        """ )
    writescript( "tests/CC.vvt", """
        #!/usr/bin/env python
        import os, sys, time
        time.sleep(7)
        """ )

    out,np,nd,nf,nn = run_vvtest( 'tests' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0

    tdir = os.path.abspath( results_dir() )
    platname = platform_name(out)

    # create a timings file
    run_cmd( resultspy + ' save', directory='tests' )
    run_vvtest( '-i --save-results', directory=tdir )
    resultsfname = glob.glob('results.*')[0]
    ok,out = run_cmd( resultspy + ' merge -x '+resultsfname )
    assert ok

    # select tests based on the timings file
    remove_results()
    out,np,nd,nf,nn = run_vvtest( '--tmax 6 tests' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    L = testlist( out )
    assert len(L) == 2
    assert L[0][0] == 'AA'
    assert L[1][0] == 'BB'

    # when run inside the TestResults.* directory, the test list should
    # reflect the previous test selection;  if vvtest is run within the
    # TestResults.* directory (and without arguments) and the test list is
    # incorrect, then additional tests will get run;  we check that does
    # not happen
    os.chdir( results_dir() )
    out,np,nd,nf,nn = run_vvtest()
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    # and if we force tests to rerun, only 2 should be run
    out,np,nd,nf,nn = run_vvtest( '-R' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    L = testlist( out )
    assert len(L) == 2
    assert L[0][0] == 'AA'
    assert L[1][0] == 'BB'


def test05():
    """
    runtime min/max with execute/analyze tests
    """
    writescript( "tests/AA.vvt", """
        #!/usr/bin/env python
        import os, sys, time
        time.sleep(1)
        """ )
    writescript( "tests/BB.vvt", """
        #!/usr/bin/env python
        #VVT: parameterize : planet=mercury mars venus
        #VVT: analyze : --analyze
        import os, sys, time
        import script_util as vvt
        if '--analyze' not in sys.argv:
            if vvt.planet == 'mercury':
                time.sleep(1)
            elif vvt.planet == 'mars':
                time.sleep(3)
            elif vvt.planet == 'venus':
                time.sleep(7)
        else:
            time.sleep(2)
        """ )
    writescript( "tests/CC.vvt", """
        #!/usr/bin/env python
        import os, sys, time
        time.sleep(7)
        """ )

    out,np,nd,nf,nn = run_vvtest( 'tests' )
    assert np == 6 and nd == 0 and nf == 0 and nn == 0

    tdir = os.path.abspath( results_dir() )
    platname = platform_name(out)

    # create a timings file
    run_cmd( resultspy + ' save', directory='tests' )
    run_vvtest( '-i --save-results', directory=tdir )
    resultsfname = glob.glob('results.*')[0]
    ok,out = run_cmd( resultspy + ' merge -x '+resultsfname )
    assert ok

    # none of the execute/analyze tests should have been selected
    remove_results()
    out,np,nd,nf,nn = run_vvtest( '--tmax 6 tests' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    L = testlist( out )
    assert len(L) == 1
    assert L[0][-1].endswith( os.sep+'AA' )

    os.chdir( results_dir() )
    out,np,nd,nf,nn = run_vvtest()
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-R' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    L = testlist( out )
    assert len(L) == 1
    assert L[0][-1] == 'AA'


def test06():
    """
    runtime min/max with excluding previously run tests
    """
    writescript( "tests/AA.vvt", """
        #!/usr/bin/env python
        import os, sys, time
        time.sleep(1)
        """ )
    writescript( "tests/BB.vvt", """
        #!/usr/bin/env python
        #VVT: parameterize : planet=mercury mars venus
        #VVT: analyze : --analyze
        import os, sys, time
        import script_util as vvt
        if '--analyze' not in sys.argv:
            if vvt.planet == 'mercury':
                time.sleep(1)
            elif vvt.planet == 'mars':
                time.sleep(3)
            elif vvt.planet == 'venus':
                time.sleep(7)
        else:
            pass  # the analyze test
        """ )
    writescript( "tests/CC.vvt", """
        #!/usr/bin/env python
        import os, sys, time
        time.sleep(7)
        """ )

    out,np,nd,nf,nn = run_vvtest( 'tests' )
    assert np == 6 and nd == 0 and nf == 0 and nn == 0

    tdir = os.path.abspath( results_dir() )
    platname = platform_name(out)

    out,np,nd,nf,nn = run_vvtest( '--tmin 3 tests' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    # check that the test list in TestResults.* directory is intact
    out,np,nd,nf,nn = run_vvtest( '-i', directory=tdir )
    assert np == 6 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-R --tmin 3 tests' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    L = testlist( out )
    assert len(L) == 1
    assert L[0][-1].endswith( os.sep+'CC' )

    # check that the test list in TestResults.* directory is has old results
    out,np,nd,nf,nn = run_vvtest( '-i', directory=tdir )
    assert np == 6 and nd == 0 and nf == 0 and nn == 0


############################################################################

def get_platform_compiler( resultsfname ):
    """
    """
    fmt,vers,hdr,nskip = results.read_file_header( resultsfname )
    pn = hdr['PLATFORM']
    cp = hdr['COMPILER']
    return pn,cp


########################################################################

main()
