#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import basename
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.paramset as ParameterSet
from libvvtest.TestSpec import TestSpec
from libvvtest.testcase import TestCase
from libvvtest.ScriptReader import ScriptReader
from libvvtest.RuntimeConfig import RuntimeConfig
import libvvtest.depend as depend

import libvvtest.TestSpecCreator as TSC


class staged_parameters( vtu.vvtestTestCase ):

    def test_marking_parameters_as_staged(self):
        ""
        pset = ParameterSet.ParameterSet()
        pset.addParameterGroup( ('stage','np'), [ ('1','1'), ('2','4') ] )

        tmap = {}
        for pdict in pset.getInstances():
            ts = TestSpec( 'aname', os.getcwd(), 'aname.vvt' )
            ts.setParameters( pdict )

            if pdict['stage'] == '1':
                ts.setStagedParameters( True, False, 'stage', 'np' )
            else:
                ts.setStagedParameters( False, True, 'stage', 'np' )

            tmap[ ts.getID() ] = ts

            assert ts.getExecuteDirectory() == 'aname.np'

            if pdict['np'] == '1':
                assert ts.getDisplayString().endswith( 'stage=1(np=1)' )
                assert ts.getStageID() == 'stage=1'
                assert ts.isFirstStage()
                assert not ts.isLastStage()
            else:
                assert pdict['np'] == '4'
                assert ts.getDisplayString().endswith( 'stage=2(np=4)' )
                assert ts.getStageID() == 'stage=2'
                assert not ts.isFirstStage()
                assert ts.isLastStage()

        assert len( tmap ) == 2

    def test_stage_index_accessor(self):
        ""
        tcase = vtu.make_fake_TestCase()
        assert tcase.getSpec().isFirstStage()
        assert tcase.getSpec().isLastStage()

        tcase = vtu.make_fake_staged_TestCase( stage_index=0 )
        assert tcase.getSpec().isFirstStage()
        assert not tcase.getSpec().isLastStage()

        tcase = vtu.make_fake_staged_TestCase( stage_index=1 )
        assert not tcase.getSpec().isFirstStage()
        assert not tcase.getSpec().isLastStage()

        tcase = vtu.make_fake_staged_TestCase( stage_index=2 )
        assert not tcase.getSpec().isFirstStage()
        assert tcase.getSpec().isLastStage()

    def test_consistency(self):
        ""
        pass
        # marking staging parameters when they are not parameters
        # changing the parameters when the markings have already been set
        # multiple parameters in a stage
        # test pre-clean and post-clean with staging

    def test_parse_staged_parameters(self):
        ""
        util.writefile( 'blue.vvt', """
            #VVT: parameterize (staged) : np = 1 8 1
            """ )
        util.writefile( 'err1.vvt', """
            #VVT: parameterize (staged) : np = 1 8 1
            #VVT: parameterize          : hsize = 1.1 2.2
            #VVT: parameterize (staged) : run = one two
            """ )
        time.sleep(1)

        evaluator = TSC.ExpressionEvaluator( 'atari', [] )

        vspecs = ScriptReader( 'blue.vvt' )
        pset = TSC.parseTestParameters_scr( vspecs, 'blue', evaluator, None )

        assert len( pset.getInstances() ) == 3
        nL,vL = pset.getStagedGroup()
        assert nL == [ 'stage', 'np' ]
        assert vL == [ ['1','1'], ['2','8'], ['3','1'] ]

        vspecs = ScriptReader( 'err1.vvt' )
        self.assertRaises( TSC.TestSpecError,
                TSC.parseTestParameters_scr, vspecs, 'err1', evaluator, None )

    def create_test_list(self, spec_file):
        ""
        tname = os.path.splitext( basename( spec_file ) )[0]

        vspecs = ScriptReader( spec_file )
        evaluator = TSC.ExpressionEvaluator( 'atari', [] )
        pset = TSC.parseTestParameters_scr( vspecs, tname, evaluator, None )

        testL = TSC.generate_test_objects( tname, os.getcwd(), spec_file, pset )

        return pset, testL

    def test_staged_parameter_names_are_stored_in_the_parameterset(self):
        ""
        util.writefile( 'blue.vvt', """
            #VVT: parameterize (staged) : np = 1 8 1
            """ )
        util.writefile( 'red.vvt', """
            #VVT: parameterize (staged) : np,sz = 1, 1.1  8, 10.0
            """ )
        time.sleep(1)

        pset,testL = self.create_test_list( 'blue.vvt' )

        nameL,valL = pset.getStagedGroup()
        assert nameL == [ 'stage', 'np' ]
        assert valL == [ ['1','1'], ['2','8'], ['3','1'] ]

        pset,testL = self.create_test_list( 'red.vvt' )

        nameL,valL = pset.getStagedGroup()
        assert nameL == [ 'stage', 'np', 'sz' ]
        assert valL == [ ['1','1','1.1'], ['2','8','10.0'] ]

    def test_staging_oracle_knows_how_many_stages(self):
        ""
        util.writefile( 'blue.vvt', """
            #VVT: parameterize (staged) : np = 1 8 1
            """ )
        util.writefile( 'red.vvt', """
            #VVT: parameterize (staged) : np,sz = 1, 1.1  8, 10.0
            """ )
        time.sleep(1)

        pset,testL = self.create_test_list( 'blue.vvt' )
        oracle = TSC.StagingOracle( pset.getStagedGroup(), testL )
        assert oracle.numStages() == 3

        pset,testL = self.create_test_list( 'red.vvt' )
        oracle = TSC.StagingOracle( pset.getStagedGroup(), testL )
        assert oracle.numStages() == 2

    def test_staging_oracle_can_determine_the_stage_index_of_a_test(self):
        ""
        util.writefile( 'blue.vvt', """
            #VVT: parameterize (staged) : np = 2 8 1
            """ )
        util.writefile( 'red.vvt', """
            #VVT: parameterize (staged) : np,sz = 1, 1.1  8, 10.0
            """ )
        util.writefile( 'pink.vvt', """
            #VVT: parameterize (staged) : np = 1 8
            #VVT: parameterize          : sz = 1.1 2.2
            """ )
        time.sleep(1)

        pset,testL = self.create_test_list( 'blue.vvt' )
        oracle = TSC.StagingOracle( pset.getStagedGroup(), testL )
        assert len( testL ) == 3
        for ts in testL:
            if ts.getParameterValue( 'np' ) == '2':
                assert oracle.getStageIndex( ts ) == 0
            elif ts.getParameterValue( 'np' ) == '8':
                assert oracle.getStageIndex( ts ) == 1
            elif ts.getParameterValue( 'np' ) == '1':
                assert oracle.getStageIndex( ts ) == 2

        pset,testL = self.create_test_list( 'red.vvt' )
        oracle = TSC.StagingOracle( pset.getStagedGroup(), testL )
        assert len( testL ) == 2
        for ts in testL:
            if ts.getParameterValue( 'np' ) == '1':
                assert oracle.getStageIndex( ts ) == 0
            elif ts.getParameterValue( 'np' ) == '8':
                assert oracle.getStageIndex( ts ) == 1

        pset,testL = self.create_test_list( 'pink.vvt' )
        oracle = TSC.StagingOracle( pset.getStagedGroup(), testL )
        assert len( testL ) == 4
        num_idx_0 = num_idx_1 = 0
        for ts in testL:
            if ts.getParameterValue( 'np' ) == '1':
                assert oracle.getStageIndex( ts ) == 0
                num_idx_0 += 1
            elif ts.getParameterValue( 'np' ) == '8':
                assert oracle.getStageIndex( ts ) == 1
                num_idx_1 += 1
        assert num_idx_0 == 2
        assert num_idx_1 == 2

    def test_staging_oracle_can_find_previous_stage_test(self):
        ""
        util.writefile( 'blue.vvt', """
            #VVT: parameterize (staged) : np = 2 8 1
            """ )
        util.writefile( 'red.vvt', """
            #VVT: parameterize (staged) : np,sz = 1, 1.1  8, 10.0
            """ )
        util.writefile( 'pink.vvt', """
            #VVT: parameterize (staged) : np = 1 8
            #VVT: parameterize          : sz = 1.1 2.2
            """ )
        time.sleep(1)

        pset,testL = self.create_test_list( 'blue.vvt' )
        oracle = TSC.StagingOracle( pset.getStagedGroup(), testL )
        for ts in testL:
            prev = oracle.findPreviousStageTest( ts )
            np = ts.getParameterValue( 'np' )
            if np == '2':
                assert prev == None
            elif np == '8':
                assert prev.getParameterValue( 'np' ) == '2'
            elif np == '1':
                assert prev.getParameterValue( 'np' ) == '8'
            else:
                raise Exception( 'unexpected np value: '+str(np) )

        pset,testL = self.create_test_list( 'red.vvt' )
        oracle = TSC.StagingOracle( pset.getStagedGroup(), testL )
        for ts in testL:
            prev = oracle.findPreviousStageTest( ts )
            np = ts.getParameterValue( 'np' )
            if np == '1':
                assert prev == None
            elif np == '8':
                assert prev.getParameterValue( 'np' ) == '1'
                assert prev.getParameterValue( 'sz' ) == '1.1'
            else:
                raise Exception( 'unexpected np value: '+str(np) )

        pset,testL = self.create_test_list( 'pink.vvt' )
        oracle = TSC.StagingOracle( pset.getStagedGroup(), testL )
        for ts in testL:
            prev = oracle.findPreviousStageTest( ts )
            np = ts.getParameterValue( 'np' )
            if np == '1':
                assert prev == None
            elif np == '8':
                assert prev.getParameterValue( 'np' ) == '1'
                assert prev.getParameterValue( 'sz' ) == ts.getParameterValue( 'sz' )
            else:
                raise Exception( 'unexpected np value: '+str(np) )

    def test_specifications_with_staging(self):
        ""
        util.writefile( 'blue.vvt', """
            #VVT: parameterize (staged) : np = 2 8 1
            """ )
        util.writefile( 'red.vvt', """
            #VVT: parameterize (staged) : np,sz = 1, 1.1  8, 10.0
            """ )
        util.writefile( 'pink.vvt', """
            #VVT: parameterize (staged) : np = 1 8
            #VVT: parameterize          : sz = 1.1 2.2
            """ )
        time.sleep(1)

        pset,testL = self.create_test_list( 'blue.vvt' )
        TSC.mark_staged_tests( pset, testL )

        for tspec in testL:
            np = tspec.getParameterValue( 'np' )
            if np == '2':
                displ = basename( tspec.getDisplayString() )
                assert displ == 'blue.np stage=1(np=2)'
                assert tspec.getStageID() == 'stage=1'
                assert     tspec.isFirstStage()
                assert not tspec.isLastStage()
                assert tspec.getExecuteDirectory() == 'blue.np'
            elif np == '8':
                displ = basename( tspec.getDisplayString() )
                assert displ == 'blue.np stage=2(np=8)'
                assert tspec.getStageID() == 'stage=2'
                assert not tspec.isFirstStage()
                assert not tspec.isLastStage()
                assert tspec.getExecuteDirectory() == 'blue.np'
            elif np == '1':
                displ = basename( tspec.getDisplayString() )
                assert displ == 'blue.np stage=3(np=1)'
                assert tspec.getStageID() == 'stage=3'
                assert not tspec.isFirstStage()
                assert     tspec.isLastStage()
                assert tspec.getExecuteDirectory() == 'blue.np'
            else:
                raise Exception( 'unexpected np value: '+str(np) )

        pset,testL = self.create_test_list( 'red.vvt' )
        TSC.mark_staged_tests( pset, testL )

        for tspec in testL:
            np = tspec.getParameterValue( 'np' )
            if np == '1':
                displ = basename( tspec.getDisplayString() )
                assert displ == 'red.np.sz stage=1(np=1,sz=1.1)'
                assert tspec.getStageID() == 'stage=1'
                assert     tspec.isFirstStage()
                assert not tspec.isLastStage()
                assert tspec.getExecuteDirectory() == 'red.np.sz'
            elif np == '8':
                displ = basename( tspec.getDisplayString() )
                assert displ == 'red.np.sz stage=2(np=8,sz=10.0)'
                assert tspec.getStageID() == 'stage=2'
                assert not tspec.isFirstStage()
                assert     tspec.isLastStage()
                assert tspec.getExecuteDirectory() == 'red.np.sz'
            else:
                raise Exception( 'unexpected np value: '+str(np) )

        pset,testL = self.create_test_list( 'pink.vvt' )
        TSC.mark_staged_tests( pset, testL )

        for tspec in testL:
            np = tspec.getParameterValue( 'np' )
            sz = tspec.getParameterValue( 'sz' )
            if np == '1' and sz == '1.1':
                displ = basename( tspec.getDisplayString() )
                assert displ == 'pink.np.sz=1.1 stage=1(np=1)'
                assert tspec.getStageID() == 'stage=1'
                assert     tspec.isFirstStage()
                assert not tspec.isLastStage()
                assert tspec.getExecuteDirectory() == 'pink.np.sz=1.1'
            elif np == '1' and sz == '2.2':
                displ = basename( tspec.getDisplayString() )
                assert displ == 'pink.np.sz=2.2 stage=1(np=1)'
                assert tspec.getStageID() == 'stage=1'
                assert     tspec.isFirstStage()
                assert not tspec.isLastStage()
                assert tspec.getExecuteDirectory() == 'pink.np.sz=2.2'
            elif np == '8' and sz == '1.1':
                displ = basename( tspec.getDisplayString() )
                assert displ == 'pink.np.sz=1.1 stage=2(np=8)'
                assert tspec.getStageID() == 'stage=2'
                assert not tspec.isFirstStage()
                assert     tspec.isLastStage()
                assert tspec.getExecuteDirectory() == 'pink.np.sz=1.1'
            elif np == '8' and sz == '2.2':
                displ = basename( tspec.getDisplayString() )
                assert displ == 'pink.np.sz=2.2 stage=2(np=8)'
                assert tspec.getStageID() == 'stage=2'
                assert not tspec.isFirstStage()
                assert     tspec.isLastStage()
                assert tspec.getExecuteDirectory() == 'pink.np.sz=2.2'
            else:
                raise Exception( 'unexpected np,sz value: '+str(np)+','+str(sz) )

    def test_stages_and_their_dependencies(self):
        ""
        util.writefile( 'blue.vvt', """
            #VVT: parameterize (staged) : np = 2 8 1
            """ )
        util.writefile( 'pink.vvt', """
            #VVT: parameterize (staged) : np = 1 8
            #VVT: parameterize          : sz = 1.1 2.2
            """ )
        time.sleep(1)

        pset,testL = self.create_test_list( 'blue.vvt' )
        TSC.mark_staged_tests( pset, testL )

        for tspec in testL:
            depL = tspec.getDependencies()
            np = tspec.getParameterValue( 'np' )
            if np == '2':
                assert len( depL ) == 0
            elif np == '8':
                assert len( depL ) == 1
                dep = find_single_dependency( tspec, testL )
                assert dep.getDisplayString() == 'blue.np stage=1(np=2)'
            elif np == '1':
                assert len( depL ) == 1
                dep = find_single_dependency( tspec, testL )
                assert dep.getDisplayString() == 'blue.np stage=2(np=8)'
            else:
                raise Exception( 'unexpected np value: '+str(np) )

        pset,testL = self.create_test_list( 'pink.vvt' )
        TSC.mark_staged_tests( pset, testL )

        for tspec in testL:
            depL = tspec.getDependencies()
            np = tspec.getParameterValue( 'np' )
            sz = tspec.getParameterValue( 'sz' )
            if np == '1' and sz == '1.1':
                assert len( depL ) == 0
            elif np == '1' and sz == '2.2':
                assert len( depL ) == 0
            elif np == '8' and sz == '1.1':
                assert len( depL ) == 1
                dep = find_single_dependency( tspec, testL )
                assert dep.getDisplayString() == 'pink.np.sz=1.1 stage=1(np=1)'
            elif np == '8' and sz == '2.2':
                assert len( depL ) == 1
                dep = find_single_dependency( tspec, testL )
                assert dep.getDisplayString() == 'pink.np.sz=2.2 stage=1(np=1)'
            else:
                raise Exception( 'unexpected np,sz value: '+str(np)+','+str(sz) )

    def test_full_integration_run_with_staging(self):
        ""
        util.writefile( 'blue.vvt', """
            #VVT: parameterize (staged) : np = 1 3 1
            import vvtest_util as vvt
            print ( 'blue_stage='+vvt.stage + ' blue_np='+vvt.np  )
            """ )
        util.writefile( 'green.vvt', """
            #VVT: parameterize (staged) : np = 2 3
            #VVT: parameterize : part = piston valve
            import vvtest_util as vvt
            print ( 'green_stage='+vvt.stage + ' green_np='+vvt.np + ' green_part='+vvt.part )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-n 10', batch=batch )
            vrun.assertCounts( total=7, npass=7 )

            assert len( util.grepfiles( 'blue_stage=1 blue_np=1',
                                        '*/blue.np/exec*.log' ) ) == 1
            assert len( util.grepfiles( 'blue_stage=2 blue_np=3',
                                        '*/blue.np/exec*.log' ) ) == 1
            assert len( util.grepfiles( 'blue_stage=3 blue_np=1',
                                        '*/blue.np/exec*.log' ) ) == 1

            assert len( util.grepfiles( 'green_stage=1 green_np=2 green_part=piston',
                                        '*/green.np.part=piston/exec*.log' ) ) == 1
            assert len( util.grepfiles( 'green_stage=1 green_np=2 green_part=valve',
                                        '*/green.np.part=valve/exec*.log' ) ) == 1
            assert len( util.grepfiles( 'green_stage=2 green_np=3 green_part=piston',
                                        '*/green.np.part=piston/exec*.log' ) ) == 1
            assert len( util.grepfiles( 'green_stage=2 green_np=3 green_part=valve',
                                        '*/green.np.part=valve/exec*.log' ) ) == 1

# magic:
#   - a restart will also fail, bc the staging is not reparsed
#       - true still?  the staging is saved to the testlist file
#   - two parameterize with one of them staged


def has_dependency( testcase, dep_testcase ):
    ""
    tmap = { testcase.getSpec().getID() : testcase,
             dep_testcase.getSpec().getID() : dep_testcase }

    xdir = testcase.getSpec().getExecuteDirectory()
    idset = set()
    for pat,expr in testcase.getSpec().getDependencies():
        idset.update( depend.find_tests_by_pattern( xdir, pat, tmap ) )

    assert len(idset) <= 1

    if len(idset) > 0:
        tcase = tmap[ idset.pop() ]
        assert id(tcase) == id(dep_testcase)
        return True

    return False


def find_single_dependency( tspec, testL ):
    ""
    testcasemap = {}
    for ts in testL:
        testcasemap[ ts.getID() ] = TestCase( ts, None )

    depL = tspec.getDependencies()
    assert len( depL ) == 1
    pat,expr = depL[0]

    xdir = tspec.getExecuteDirectory()

    idset = depend.find_tests_by_pattern( xdir, pat, testcasemap )
    assert len( idset ) == 1

    tcase = testcasemap[ idset.pop() ]

    return tcase.getSpec()


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
