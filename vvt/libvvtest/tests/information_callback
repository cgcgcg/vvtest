#!/usr/bin/env python
#
# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.
#
#RUNTEST:
import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import re
import time
import signal

import vvtestutils as vtu
import testutils as util


class InformationCallback( vtu.vvtestTestCase ):

    def run_information_callback(self, batch):
        ""
        util.writescript( 'myscript2.vvt', """
            #!/usr/bin/env python
            import time
            time.sleep(6)
            print('hello from myscript')
            """ )
        time.sleep(1)

        out = vtu.launch_vvtest_then_terminate_it(
            #cmd_args,
            signum=signal.SIGQUIT,
            seconds_before_signaling=4,
            ligfilename='run.log',
            batch=batch)

        print(out)

        if not batch:
            print("Checking 'not batch'")
            assert '\nInformation:\n' in out

            lines = out.split('\n')
            idx = lines.index("Information:")

            assert len(re.findall(r'^Information:$',                  lines[idx+0])) == 1
            assert len(re.findall(r'^  \* Total runtime: 0:00:0\d$',  lines[idx+1])) == 1
            assert len(re.findall(r'^  \* 1 running test\(s\):$',     lines[idx+2])) == 1
            assert len(re.findall(r'^    \* myscript2 \(0:00:0\d\)$', lines[idx+3])) == 1
        else:
            print("Checking 'batch'")
            assert '\nInformation:\n' in out

            lines = out.split('\n')
            idx = lines.index("Information:")

            assert len(re.findall(r'^Information:$',                                lines[idx+0])) == 1
            assert len(re.findall(r'^  \* Total runtime: 0:00:0\d$',                lines[idx+1])) == 1
            assert len(re.findall(r'^  \* 1 batch job\(s\) in flight:$',            lines[idx+2])) == 1
            assert len(re.findall(r'^    \* qbat.0 \(0:00:0\d since submitting\)$', lines[idx+3])) == 1
            assert len(re.findall(r'^      \* myscript2$',                          lines[idx+4])) == 1

    def test_nonbatch_information_callback(self):
        ""
        self.run_information_callback(batch=False)

    def test_batch_information_callback(self):
        ""
        self.run_information_callback(batch=True)


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
