#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import unittest
import time
import glob

import testutils as util
from testutils import print3

import libvvtest.testlistio as tio
import libvvtest.TestList as TestList
import libvvtest.TestSpec as TestSpec


class TestSpec_to_and_from_string( unittest.TestCase ):

    def setUp(self):
        util.setup_test( cleanout=False )

    def test_converting_a_test_to_a_string_and_back(self):
        ""
        ts = make_fake_TestSpec()

        sid = tio.test_to_string( ts )
        assert '\n' not in sid
        print3( "test string id", sid )
        ts2 = tio.string_to_test(sid)

        assert_TestSpec_same_as_fake( ts2 )


class TestList_read_write( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_write_test_list_file_then_read_it(self):
        ""
        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start()
        time.sleep(2)
        tlw.finish()
        time.sleep(1)

        tlr = tio.TestListReader( 'tests.out' )
        tlr.read()
        d1 = tlr.getStartDate()
        d2 = tlr.getFinishDate()
        assert d2-d1 > 1 and d2-d1 < 5
        assert time.time() - d1 < 10

    def test_write_then_read_test_list_attributes(self):
        ""
        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start( strname='some value', intname=101, floatname=1.01 )
        tlw.finish()
        time.sleep(1)

        tlr = tio.TestListReader( 'tests.out' )
        tlr.read()

        assert tlr.getAttr( 'foobar', 'default value' ) == 'default value'
        self.assertRaises( Exception, tlr.getAttr, 'foobar' )
        assert tlr.getAttr( 'strname' ) == 'some value'
        assert tlr.getAttr( 'intname' ) == 101
        assert tlr.getAttr( 'floatname' ) == 1.01

    def test_write_and_read_a_test(self):
        ""
        write_test_list_with_fake_test( 'tests.out' )

        time.sleep(1)

        tlr = tio.TestListReader( 'tests.out' )
        tlr.read()

        tspec = get_single_test_from_test_list( tlr )
        assert_TestSpec_same_as_fake( tspec )

    def test_write_and_read_using_an_include_file(self):
        ""
        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start()
        tlw.addIncludeFile( 'tests.0' )

        t1 = time.time()
        time.sleep(2)

        write_test_list_with_fake_test( 'tests.0' )

        t2 = time.time()
        time.sleep(2)

        tlw.finish()

        t3 = time.time()
        time.sleep(1)

        tlr = tio.TestListReader( 'tests.out' )
        tlr.read()

        tspec = get_single_test_from_test_list( tlr )
        assert_TestSpec_same_as_fake( tspec )

        tm = tlr.getStartDate()
        assert t1 >= tm and t1-tm < 2
        tm = tlr.getFinishDate()
        assert t3 >= tm and t3-tm < 2


class TestList_results_file( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_writing_a_results_file(self):
        ""
        write_test_results_using_TestList( 'results' )
        time.sleep(1)
        read_test_list_and_check_fake_results_test( 'results' )

    def test_writing_a_results_file_with_an_include(self):
        ""
        tl = TestList.TestList()
        tl.initializeResultsFile( 'results' )
        tl.AddIncludeFile( 'results.0' )

        write_test_results_using_TestList( 'results.0' )

        tl.writeFinished()
        time.sleep(1)

        read_test_list_and_check_fake_results_test( 'results.0' )


############################################################################

def make_fake_TestSpec():
    ""
    ts = TestSpec.TestSpec( 'atest', os.getcwd(), 'atest.xml' )

    ts.setKeywords( ['key1','key2'] )

    ts.setParameters( { 'P1':'V1', 'P2':'V2' } )

    ts.setAttr("aname1", "a value")
    ts.setAttr("aname2", "a\nvalue")
    ts.setAttr("aname3", 'a"value"')
    ts.setAttr("aname4", "a'value'")
    ts.setAttr('aname5', 23)
    ts.setAttr('aname6', 23.23)
    ts.setAttr('aname7', None)

    return ts


def assert_TestSpec_same_as_fake( tspec ):
    ""
    assert tspec.getName() == 'atest'
    assert tspec.getRootpath() == os.getcwd()
    assert tspec.getFilename() == os.path.abspath('atest.xml')

    kL = tspec.getKeywords()
    kL.sort()
    assert kL == [ 'key1', 'key2' ]

    pD = {}
    for n,v in tspec.getParameters().items():
        pD[n] = v
    assert pD == { 'P1':'V1', 'P2':'V2' }

    assert tspec.getAttr('aname1') == "a value"
    assert tspec.getAttr('aname2') == 'a\nvalue'
    assert tspec.getAttr('aname3') == 'a"value"'
    assert tspec.getAttr('aname4') == "a'value'"
    assert tspec.getAttr('aname5') == 23
    assert tspec.getAttr('aname6') == 23.23
    assert tspec.getAttr('aname7') == None


def make_fake_TestSpec_with_results():
    ""
    ts = TestSpec.TestSpec( 'atest', os.getcwd(), 'atest.xml' )

    ts.setAttr( 'state', "notdone" )
    ts.setAttr( 'xtime', -1 )
    ts.setAttr( 'xdate', int(time.time()) )

    return ts


def get_single_test_from_test_list( testlist ):
    ""
    tD = testlist.getTests()
    assert len(tD) == 1
    tspec = list( tD.values() )[0]
    return tspec


def write_test_list_with_fake_test( filename ):
    ""
    tlw = tio.TestListWriter( filename )
    tlw.start()
    tspec = make_fake_TestSpec()
    tlw.append( tspec )
    tlw.finish()


def write_test_results_using_TestList( filename ):
    ""
    tl = TestList.TestList()
    tl.initializeResultsFile( filename )
    tspec = make_fake_TestSpec_with_results()
    tl.AppendTestResult( tspec )
    tl.writeFinished()


def read_test_list_and_check_fake_results_test( filename ):
    ""
    tlr = tio.TestListReader( filename )
    tlr.read()

    d1 = tlr.getStartDate()
    d2 = tlr.getFinishDate()
    assert d1 <= d2 and d2-d1 < 5
    assert time.time() - d1 < 10

    tD = tlr.getTests()
    assert len(tD) == 1
    tspec = list( tD.values() )[0]
    assert tspec.getAttr( 'state' ) == 'notdone'
    assert time.time() - tspec.getAttr( 'xdate' ) < 10


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
