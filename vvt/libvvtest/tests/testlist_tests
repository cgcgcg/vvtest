#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import unittest
import time
import glob

import testutils as util
from testutils import print3

import libvvtest.testlistio as tio
import libvvtest.TestList as TestList
import libvvtest.TestSpec as TestSpec


class TestSpec_to_and_from_string( unittest.TestCase ):

    def setUp(self):
        util.setup_test( cleanout=False )

    def test_converting_a_test_to_a_string_and_back(self):
        ""
        ts = make_fake_TestSpec()

        sid = tio.test_to_string( ts )
        assert '\n' not in sid
        #print3( "test string id", sid )
        ts2 = tio.string_to_test(sid)

        assert_TestSpec_same_as_fake( ts2 )


class test_list_file_read_write( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_write_test_list_file_then_read_it(self):
        ""
        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start()
        time.sleep(2)
        tlw.finish()
        time.sleep(1)

        tlr = tio.TestListReader( 'tests.out' )
        tlr.read()
        d1 = tlr.getStartDate()
        d2 = tlr.getFinishDate()
        assert d2-d1 > 1 and d2-d1 < 5
        assert time.time() - d1 < 10

    def test_write_then_read_test_list_attributes(self):
        ""
        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start( strname='some value', intname=101, floatname=1.01 )
        tlw.finish()
        time.sleep(1)

        tlr = tio.TestListReader( 'tests.out' )
        tlr.read()

        assert tlr.getAttr( 'foobar', 'default value' ) == 'default value'
        self.assertRaises( Exception, tlr.getAttr, 'foobar' )
        assert tlr.getAttr( 'strname' ) == 'some value'
        assert tlr.getAttr( 'intname' ) == 101
        assert tlr.getAttr( 'floatname' ) == 1.01

    def test_write_and_read_a_test(self):
        ""
        write_test_list_with_fake_test( 'tests.out' )

        time.sleep(1)

        tlr = tio.TestListReader( 'tests.out' )
        tlr.read()

        tspec = get_single_test_from_test_list( tlr )
        assert_TestSpec_same_as_fake( tspec )

    def test_read_an_unfinished_test_results_file(self):
        ""
        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start()
        tspec = make_fake_TestSpec()
        tlw.append( tspec )

        time.sleep(1)

        tlr = tio.TestListReader( 'tests.out' )
        tlr.read()

        tm = time.time()
        assert tm - tlr.getStartDate() < 5
        assert tlr.getFinishDate() == None
        tspec = get_single_test_from_test_list( tlr )
        assert_TestSpec_same_as_fake( tspec )

    def test_write_and_read_using_an_include_file(self):
        ""
        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start()
        tlw.addIncludeFile( 'tests.0' )

        t1 = time.time()
        time.sleep(2)

        write_test_list_with_fake_test( 'tests.0' )

        t2 = time.time()
        time.sleep(2)

        tlw.finish()

        t3 = time.time()
        time.sleep(1)

        tlr = tio.TestListReader( 'tests.out' )
        tlr.read()

        tspec = get_single_test_from_test_list( tlr )
        assert_TestSpec_same_as_fake( tspec )

        tm = tlr.getStartDate()
        assert t1 >= tm and t1-tm < 2
        tm = tlr.getFinishDate()
        assert t3 >= tm and t3-tm < 2

    def test_include_files_are_relative_to_parent_file_directory(self):
        ""
        os.mkdir( 'subdir' )
        os.mkdir( 'rundir' )
        time.sleep(1)

        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start()
        tlw.addIncludeFile( 'subdir/tests.0' )

        write_test_list_with_fake_test( 'subdir/tests.0' )

        tlw.finish()
        time.sleep(1)

        rootdir = os.getcwd()
        tfile = os.path.abspath( 'tests.out' )
        os.chdir( 'rundir' )
        tlr = tio.TestListReader( tfile )
        tlr.read()

        tspec = get_single_test_from_test_list( tlr )
        assert_TestSpec_same_as_fake( tspec, rootdir )

    def test_write_a_test_file_then_scan_it_for_the_finish_date(self):
        ""
        write_test_list_with_fake_test( 'tests.out' )

        time.sleep(1)

        tlr = tio.TestListReader( 'tests.out' )
        tm = tlr.scanForFinishDate()
        assert tm and (time.time() - tm) < 10

        tlr = tio.TestListReader( 'tests.out' )
        tlr.read()
        assert abs( tlr.getFinishDate() - tm ) < 2

    def test_scan_an_unfinished_test_results_file(self):
        ""
        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start()
        tspec = make_fake_TestSpec_with_results()
        tlw.append( tspec )

        time.sleep(1)

        tlr = tio.TestListReader( 'tests.out' )
        tm = tlr.scanForFinishDate()
        assert tm == None

    def test_read_unfinished_results_file_with_include(self):
        ""
        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start()
        tlw.addIncludeFile( 'tests.0' )

        write_test_list_with_fake_test( 'tests.0' )

        time.sleep(1)

        tlr = tio.TestListReader( 'tests.out' )
        tlr.read()

        tspec = get_single_test_from_test_list( tlr )
        assert_TestSpec_same_as_fake( tspec )

        tm = tlr.getStartDate()
        assert tm != None and time.time() - tm < 10
        assert tlr.getFinishDate() == None


class TestList_results_file( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_write_a_test_list_file_then_read_it(self):
        ""
        write_TestList_with_fake_test( 'testlist' )
        time.sleep(1)
        read_TestList_and_check_fake_test( 'testlist' )

    def test_write_a_test_list_then_results_then_read_it(self):
        ""
        tl = write_TestList_with_fake_test( 'testlist' )
        time.sleep(1)
        rfile = write_TestList_fake_results( tl )
        time.sleep(1)

        assert rfile.startswith( 'testlist' ) and rfile != 'testlist'

        fL = glob.glob( 'testlist.*' )
        assert len(fL) == 1 and fL[0] == rfile

        read_TestList_and_check_fake_test( rfile )

    def test_a_workflow_using_a_results_suffix(self):
        ""
        tl = write_TestList_with_fake_test( 'testlist', results_suffix=True )
        sfx = tl.getResultsSuffix()
        time.sleep(2)

        tl = TestList.TestList()
        tl.readFile( 'testlist' )
        assert tl.getResultsSuffix() == sfx
        rfile = write_TestList_fake_results( tl )
        time.sleep(1)

        assert rfile.endswith( sfx )
        read_TestList_and_check_fake_test( 'testlist.'+sfx )

    def test_results_workflow_with_include_file(self):
        ""
        # the origin test list
        tl = write_TestList_with_fake_test( 'testlist' )
        time.sleep(1)

        # create suffix for the include files
        sfx = tl.setResultsSuffix()

        # write include test list file containing suffix attribute
        ts = list( tl.getTests() )[0]
        tlincl = TestList.TestList()
        tlincl.setResultsSuffix( sfx )
        tl.addTest( ts )
        tlincl.stringFileWrite( 'subtests', include_results_suffix=True )
        time.sleep(1)

        # start the comprehensive results file (with the include in it)
        rfile = tl.initializeResultsFile()
        tl.addIncludeFile( 'subtests' )
        time.sleep(1)

        # create the sublist test results
        tlsub = TestList.TestList()
        tlsub.readFile( 'subtests' )
        rfile = write_TestList_fake_results( tlsub )
        time.sleep(1)

        tl.writeFinished()
        time.sleep(1)

        # should be able to read comprehensive results file
        read_TestList_and_check_fake_test( rfile )

    def test_read_an_unfinished_test_list_file(self):
        ""
        tl = TestList.TestList( filename='testlist' )
        rfile = tl.initializeResultsFile()
        tspec = make_fake_TestSpec()
        tl.appendTestResult( tspec )

        time.sleep(1)

        tl = TestList.TestList()
        tl.readFile( rfile )

        tm = tl.getDateStamp()
        assert tm != None and time.time() - tm < 10
        assert tl.getFinishDate() == None

        read_TestList_and_check_fake_test( rfile )

    def test_scan_an_unfinished_test_list_file(self):
        ""
        tl = TestList.TestList( filename='testlist' )
        rfile = tl.initializeResultsFile()
        tspec = make_fake_TestSpec()
        tl.appendTestResult( tspec )

        time.sleep(1)

        tlr = tio.TestListReader( rfile )
        tm = tlr.scanForFinishDate()
        assert tm == None


############################################################################

def make_fake_TestSpec():
    ""
    ts = TestSpec.TestSpec( 'atest', os.getcwd(), 'atest.xml' )

    ts.setKeywords( ['key1','key2'] )

    ts.setParameters( { 'P1':'V1', 'P2':'V2' } )

    ts.setAttr("aname1", "a value")
    ts.setAttr("aname2", "a\nvalue")
    ts.setAttr("aname3", 'a"value"')
    ts.setAttr("aname4", "a'value'")
    ts.setAttr('aname5', 23)
    ts.setAttr('aname6', 23.23)
    ts.setAttr('aname7', None)

    return ts


def assert_TestSpec_same_as_fake( tspec, rootdir=None ):
    ""
    if not rootdir:
        rootdir = os.getcwd()

    assert tspec.getName() == 'atest'
    assert tspec.getRootpath() == rootdir
    assert tspec.getFilename() == os.path.join( rootdir, 'atest.xml' )

    kL = tspec.getKeywords()
    kL.sort()
    assert kL == [ 'key1', 'key2' ]

    pD = {}
    for n,v in tspec.getParameters().items():
        pD[n] = v
    assert pD == { 'P1':'V1', 'P2':'V2' }

    assert tspec.getAttr('aname1') == "a value"
    assert tspec.getAttr('aname2') == 'a\nvalue'
    assert tspec.getAttr('aname3') == 'a"value"'
    assert tspec.getAttr('aname4') == "a'value'"
    assert tspec.getAttr('aname5') == 23
    assert tspec.getAttr('aname6') == 23.23
    assert tspec.getAttr('aname7') == None


def make_fake_TestSpec_with_results():
    ""
    ts = make_fake_TestSpec()

    ts.setAttr( 'state', "notdone" )
    ts.setAttr( 'xtime', -1 )
    ts.setAttr( 'xdate', int(time.time()) )

    return ts


def get_single_test_from_test_list( testlist ):
    ""
    tD = testlist.getTests()
    assert len(tD) == 1
    tspec = list( tD.values() )[0]
    return tspec


def write_test_list_with_fake_test( filename, **kwargs ):
    ""
    tlw = tio.TestListWriter( filename )
    tlw.start()
    tspec = make_fake_TestSpec()
    for k,v in kwargs.items():
        tspec.setAttr( k, v )
    tlw.append( tspec )
    tlw.finish()


def write_TestList_with_fake_test( filename, **kwargs ):
    ""
    dosuffix = kwargs.pop( 'results_suffix', False )

    tl = TestList.TestList()

    if dosuffix:
        tl.setResultsSuffix()

    tspec = make_fake_TestSpec()
    for k,v in kwargs.items():
        tspec.setAttr( k, v )
    tl.addTest( tspec )

    tl.stringFileWrite( filename, include_results_suffix=dosuffix )

    return tl


def write_TestList_fake_results( testlistobj ):
    ""
    rfile = testlistobj.initializeResultsFile()
    tsr = make_fake_TestSpec_with_results()
    testlistobj.appendTestResult( tsr )
    testlistobj.writeFinished()

    return rfile


def read_TestList_and_check_fake_test( filename ):
    ""
    tl = TestList.TestList()
    tl.readFile( filename )
    tL = list( tl.getTests() )
    assert len(tL) == 1
    assert_TestSpec_same_as_fake( tL[0] )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
