#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import glob
import time
import unittest

import testutils as util
from testutils import print3


class generate_tests( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_simple_generate(self):
        ""
        util.writefile( "null.xml", """
            <rtest name="null">
            </rtest>""" )
        time.sleep(1)

        util.runvvtest( '-g' ).assertCounts( total=1, notrun=1 )
        self.grep_testlist( 'null', 1 )

    def grep_testlist(self, pattern, expected_count, subdir=None):
        ""
        if subdir:
            fpat = subdir+'/TestResults*/testlist'
        else:
            fpat = 'TestResults*/testlist'

        lines = util.grepfiles( pattern, fpat )
        assert len( lines ) == expected_count

    def assert_9_testlist(self, subdir=None):
        ""
        self.grep_testlist( 'null', 1, subdir )
        self.grep_testlist( 'boom', 2, subdir )
        self.grep_testlist( 'hello*world', 1, subdir )
        self.grep_testlist( 'hello*mars', 1, subdir )
        self.grep_testlist( 'double', 6, subdir )
        self.grep_testlist( 'one*val1', 3, subdir )
        self.grep_testlist( 'one*val2', 3, subdir )
        self.grep_testlist( 'two*gimp', 2, subdir )
        self.grep_testlist( 'val1*val2', 0, subdir )
        self.grep_testlist( 'val2*val1', 0, subdir )

    def test_generating_a_parameterized_test(self):
        """
        a parameterized test
        """
        util.writefile( "null.xml", """
            <rtest name="null">
            </rtest>""" )
        util.writefile( "boom.xml", """
            <rtest name="boom">
              <parameterize hello="world mars"/>
              <execute>
            sleep 1
            echo "parm=$hello"
              </execute>
            </rtest>""" )
        time.sleep(1)

        util.runvvtest( '-g' ).assertCounts( total=3, notrun=3 )
        self.grep_testlist( 'null', 1 )
        self.grep_testlist( 'boom', 2 )
        self.grep_testlist( 'hello*world', 1 )
        self.grep_testlist( 'hello*mars', 1 )

        util.writefile( "double.xml", """
            <rtest name="double">
              <parameterize one="val1 val2"/>
              <parameterize two="spot skip gimp"/>
            </rtest>""")
        time.sleep(1)

        util.runvvtest( '-g' ).assertCounts( total=9, notrun=9 )
        self.assert_9_testlist()

    def test_when_xml_files_are_in_a_subdirectory(self):
        ""
        util.writefile( "subdir/null.xml", """
            <rtest name="null">
            </rtest>""" )
        util.writefile( "subdir/param.xml", """
            <rtest name="boom">
              <parameterize hello="world mars"/>
              <execute>
            sleep 1
            echo "parm=$hello"
              </execute>
            </rtest>""" )
        util.writefile( "subdir/double.xml", """
            <rtest name="double">
              <parameterize one="val1 val2"/>
              <parameterize two="spot skip gimp"/>
            </rtest>""")
        os.mkdir('temp1')
        os.mkdir('temp2')
        os.mkdir('temp3')
        time.sleep(1)

        util.runvvtest( '-g' ).assertCounts( total=9, notrun=9 )
        self.assert_9_testlist()

        util.remove_results()

        # put the name of the subdir on the command line

        vrun = util.runvvtest( '-g ../subdir', chdir='temp1' )
        vrun.assertCounts( total=9, notrun=9 )
        self.assert_9_testlist( 'temp1' )

        # try an absolute path

        vrun = util.runvvtest( '-g '+os.path.abspath( 'subdir' ),
                               chdir='temp2' )
        vrun.assertCounts( total=9, notrun=9 )
        self.assert_9_testlist( 'temp2' )
        assert not os.path.exists('temp2/testlist')

        # check the runscript with -g
        vrun = util.runvvtest( '-g ../subdir', chdir='temp3' )
        assert len( util.findfiles( 'runscript', 'temp3' ) ) == 9

        # try out the -S option with -g
        vrun = util.runvvtest( '-gS hello=jupiter subdir' )
        assert vrun.countTestLines( 'boom[.]hello=jupiter' ) == 1

    def test_that_TestResults_and_Build_directories_are_excluded_from_scans(self):
        ""
        util.writefile( "one.xml", """
            <rtest name="one">
              <execute> echo "one ran" </execute>
            </rtest>""" )
        time.sleep(1)

        vrun = util.runvvtest()
        vrun.assertCounts( total=1, npass=1 )

        util.writefile( vrun.resultsDir()+'/two.xml', """
            <rtest name="two">
              <execute> echo "two ran" </execute>
            </rtest>""" )
        time.sleep(1)

        util.runvvtest().assertCounts( total=0 )

        util.runvvtest( '-R' ).assertCounts( total=1, npass=1 )

        os.mkdir( 'Build_gnu4_opt' )
        util.writefile( "Build_gnu4_opt/three.xml", """
            <rtest name="three">
              <execute> echo "three ran" </execute>
            </rtest>""" )
        time.sleep(1)

        util.runvvtest().assertCounts( total=0 )

        util.runvvtest( '-R' ).assertCounts( total=1, npass=1 )

    def test_that_soft_links_are_followed(self):
        ""
        util.writefile( "one/one.xml", """
            <rtest name="one">
              <execute> echo "one ran" </execute>
            </rtest>""" )
        util.writefile( "two/two.xml", """
            <rtest name="two">
              <execute> echo "two ran" </execute>
            </rtest>""" )
        util.writefile( "three/three.xml", """
            <rtest name="three">
              <execute> echo "three ran" </execute>
            </rtest>""" )

        os.symlink( '../two/two.xml', 'one/two.xml' )

        os.mkdir( 'subdir' )
        os.symlink( '../three', 'subdir/symthree' )

        os.symlink( '../subdir', 'one/symdir' )

        time.sleep(1)

        util.runvvtest( 'one' ).assertCounts( total=3, npass=3 )

    def test_that_multiple_tests_in_one_xml_file_works(self):
        ""
        util.writefile( "multi.xml", """
            <rtest name="multi">
              <rtest name="multi_2nd"/>
              <keywords> common </keywords>
              <keywords testname="multi"> justmulti </keywords>
              <keywords testname="multi_2nd"> just2nd </keywords>
              <execute> echo "test name ${NAME}XXX" </execute>
            </rtest>""" )
        time.sleep(1)

        vrun = util.runvvtest()
        vrun.assertCounts( total=2, npass=2 )

        assert len( util.findfiles( 'execute.log', 'TestResults*' ) ) == 2
        assert vrun.countGrepLogs( 'test name multiXXX' ) == 1
        assert vrun.countGrepLogs( 'test name multi_2ndXXX' ) == 1

    def test_selection_by_keyword_when_multiple_tests_are_in_one_file(self):
        ""
        util.writefile( "multi.xml", """
            <rtest name="multi">
              <rtest name="multi_2nd"/>
              <keywords> common </keywords>
              <keywords testname="multi"> justmulti </keywords>
              <keywords testname="multi_2nd"> just2nd </keywords>
              <execute> echo "test name ${NAME}XXX" </execute>
            </rtest>""" )
        time.sleep(1)

        vrun = util.runvvtest( '-k justmulti' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.countGrepLogs( 'test name multiXXX' ) == 1
        assert vrun.countGrepLogs( 'test name multi_2ndXXX' ) == 0

        vrun = util.runvvtest( '-w -k just2nd' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.countGrepLogs( 'test name multiXXX' ) == 0
        assert vrun.countGrepLogs( 'test name multi_2ndXXX' ) == 1

        vrun = util.runvvtest( '-w -k common' )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.countGrepLogs( 'test name multiXXX' ) == 1
        assert vrun.countGrepLogs( 'test name multi_2ndXXX' ) == 1

    def test_parameters_that_depend_on_test_name(self):
        ""
        util.writefile( "multi.xml", """
            <rtest name="multi">
              <rtest name="multi_2nd"/>
              <parameterize testname="multi" paramA="one two"/>
              <parameterize testname="multi_2nd" paramA="three four five"/>
              <execute> echo "test name ${NAME}XXX" </execute>
            </rtest>""" )
        time.sleep(1)

        vrun = util.runvvtest()
        vrun.assertCounts( total=5, npass=5 )
        assert vrun.countTestLines( 'multi[.]paramA=one' ) == 1
        assert vrun.countTestLines( 'multi[.]paramA=two' ) == 1
        assert vrun.countTestLines( 'multi_2nd[.]paramA=three' ) == 1
        assert vrun.countTestLines( 'multi_2nd[.]paramA=four' ) == 1
        assert vrun.countTestLines( 'multi_2nd[.]paramA=five' ) == 1
        assert vrun.countGrepLogs( 'test name multiXXX' ) == 2
        assert vrun.countGrepLogs( 'test name multi_2ndXXX' ) == 3

        util.writefile( "multi.xml", """
            <rtest name="multi">
              <rtest name="multi_2nd"/>
              <parameterize testname="multi" paramA="one two"/>
              <parameterize testname="multi_2nd" paramB="three four five"/>
              <execute> echo "test name ${NAME}XXX" </execute>
            </rtest>""" )
        time.sleep(1)

        vrun = util.runvvtest( '-w' )
        vrun.assertCounts( total=5, npass=5 )
        assert vrun.countTestLines( 'multi[.]paramA=one' ) == 1
        assert vrun.countTestLines( 'multi[.]paramA=two' ) == 1
        assert vrun.countTestLines( 'multi_2nd[.]paramB=three' ) == 1
        assert vrun.countTestLines( 'multi_2nd[.]paramB=four' ) == 1
        assert vrun.countTestLines( 'multi_2nd[.]paramB=five' ) == 1
        assert vrun.countGrepLogs( 'test name multiXXX' ) == 2
        assert vrun.countGrepLogs( 'test name multi_2ndXXX' ) == 3

        vrun = util.runvvtest( '-w -p paramB' )
        vrun.assertCounts( total=3, npass=3 )
        assert vrun.countTestLines( 'multi[.]paramA=one' ) == 0
        assert vrun.countTestLines( 'multi[.]paramA=two' ) == 0
        assert vrun.countTestLines( 'multi_2nd[.]paramB=three' ) == 1
        assert vrun.countTestLines( 'multi_2nd[.]paramB=four' ) == 1
        assert vrun.countTestLines( 'multi_2nd[.]paramB=five' ) == 1
        assert vrun.countGrepLogs( 'test name multiXXX' ) == 0
        assert vrun.countGrepLogs( 'test name multi_2ndXXX' ) == 3


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
