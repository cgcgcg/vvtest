#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import time
import filecmp
import shutil

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.xmlwrapper as xmlwrapper

import results_util as ru

import libvvtest.fmtresults as fmtresults


class tdd_tests( vtu.vvtestTestCase ):

    def test_that_tests_marked_TDD_are_skipped_by_default(self):
        ""
        util.writefile( "testone.xml", """
            <rtest name="testone">
                <keywords> junk TDD </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writefile( "testtwo.xml", """
            <rtest name="testtwo">
                <keywords> gold </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writescript( 'testthree.vvt', """
            #!"""+sys.executable+"""
            #VVT: keywords = pink
            import time
            time.sleep(1)
            """ )
        util.writescript( 'testfour.vvt', """
            #!"""+sys.executable+"""
            #VVT: keywords = blue TDD
            import time
            time.sleep(1)
            """ )
        time.sleep(1)

        # by default, tests with TDD in keywords should not run

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == [ 'testthree', 'testtwo' ]

        tdir = vrun.resultsDir()

        vrun = vtu.runvvtest( '-i -v' )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == [ 'testthree', 'testtwo' ]

        vrun = vtu.runvvtest( '-i -v', chdir=tdir )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == [ 'testthree', 'testtwo' ]

        vtu.remove_results()

        vrun = vtu.runvvtest( batch=True )
        vrun.assertCounts( total=2, npass=2 )

        vrun = vtu.runvvtest( '-R', chdir=tdir )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == [ 'testthree', 'testtwo' ]

        vtu.remove_results()

        # the --include-tdd option means run the tests with TDD

        vrun = vtu.runvvtest( '--include-tdd' )
        vrun.assertCounts( total=4, npass=4 )
        assert vrun.getTestIds() == [ 'testfour',
                                      'testone',
                                      'testthree',
                                      'testtwo' ]

        vrun = vtu.runvvtest( '-i -v' )
        vrun.assertCounts( total=4, npass=4 )
        assert vrun.getTestIds() == [ 'testfour',
                                      'testone',
                                      'testthree',
                                      'testtwo' ]

        vrun = vtu.runvvtest( '-i -v', chdir=tdir )
        vrun.assertCounts( total=4, npass=4 )
        assert vrun.getTestIds() == [ 'testfour',
                                      'testone',
                                      'testthree',
                                      'testtwo' ]

        vtu.remove_results()

        vrun = vtu.runvvtest( '--include-tdd', batch=True )
        vrun.assertCounts( total=4, npass=4 )

    def test_that_tests_marked_TDD_carry_the_mark_to_the_test_results_file(self):
        ""
        util.writefile( "testone.xml", """
            <rtest name="testone">
                <keywords> junk TDD </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writefile( "testtwo.xml", """
            <rtest name="testtwo">
                <keywords> gold </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writescript( 'testthree.vvt', """
            #!"""+sys.executable+"""
            #VVT: keywords = pink
            import time
            time.sleep(1)
            """ )
        util.writescript( 'testfour.vvt', """
            #!"""+sys.executable+"""
            #VVT: keywords = blue TDD
            import time
            time.sleep(1)
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '--include-tdd' )
        vrun.assertCounts( total=4, npass=4 )
        tdir = vrun.resultsDir()

        resultsfname = ru.create_runtimes_and_results_file( tdir )

        assert len( util.grepfiles( "testone*TDD",    resultsfname ) ) == 1
        assert len( util.grepfiles( "testtwo*pass",   resultsfname ) ) == 1
        assert len( util.grepfiles( "testtwo*TDD",    resultsfname ) ) == 0
        assert len( util.grepfiles( "testthree*pass", resultsfname ) ) == 1
        assert len( util.grepfiles( "testthree*TDD",  resultsfname ) ) == 0
        assert len( util.grepfiles( "testfour*TDD",   resultsfname ) ) == 1

    def test_that_tests_marked_TDD_are_distinguished_in_reporting(self):
        ""
        os.mkdir( 'config' )  # force the test to use default plat & cplr

        util.writefile( "testone.xml", """
            <rtest name="testone">
                <keywords> junk TDD </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writefile( "testtwo.xml", """
            <rtest name="testtwo">
                <keywords> gold </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writescript( 'testthree.vvt', """
            #!"""+sys.executable+"""
            #VVT: keywords = pink
            import time
            time.sleep(1)
            """ )
        util.writescript( 'testfour.vvt', """
            #!"""+sys.executable+"""
            #VVT: keywords = blue TDD
            import time
            time.sleep(1)
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '--include-tdd --config config' )
        vrun.assertCounts( total=4, npass=4 )
        tdir = vrun.resultsDir()

        rf1 = ru.create_runtimes_and_results_file( tdir )

        rf2 = '.'.join( rf1.split('.')[:2] + [ 'Fake', 'gcc' ] )
        ru.copy_results_file_with_new_platid( rf1, rf2, 'Fake/gcc', '/fake/path' )

        x,out = util.runcmd( vtu.resultspy + ' report ' + rf1 + ' ' + rf2 )

        assert len( util.greplines( 'Fake.gcc', out ) ) == 1
        assert len( util.greplines( 'pass=2 ', out ) ) == 2
        assert len( util.greplines( 'diff= ', out ) ) == 0
        assert len( util.greplines( 'fail= ', out ) ) == 0

        # excercise this, but verifying the values is hard without just
        # bringing up a browser
        ok = util.run_redirect(
                vtu.resultspy + ' report --html . ' + rf1 + ' ' + rf2,
                           'short.html' )
        assert ok


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
