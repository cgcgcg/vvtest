#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import time
import filecmp
import shutil
import unittest

import testutils as util
from testutils import print3

import libvvtest.TestSpec as TestSpec
import libvvtest.TestSpecCreator as TestSpecCreator
import libvvtest.xmlwrapper as xmlwrapper

sys.path.insert( 0, os.path.dirname( os.path.dirname( util.testsrcdir ) ) )
import results

timesfname = results.runtimes_filename
multifname = results.multiruntimes_filename


class tdd_tests( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def test_that_tests_marked_TDD_are_skipped_by_default(self):
        ""
        util.writefile( "testone.xml", """
            <rtest name="testone">
                <keywords> junk TDD </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writefile( "testtwo.xml", """
            <rtest name="testtwo">
                <keywords> gold </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writescript( 'testthree.vvt', """
            #!/usr/bin/env python
            #VVT: keywords = pink
            import time
            time.sleep(1)
            """ )
        util.writescript( 'testfour.vvt', """
            #!/usr/bin/env python
            #VVT: keywords = blue TDD
            import time
            time.sleep(1)
            """ )
        time.sleep(1)

        # by default, tests with TDD in keywords should not run

        vrun = util.runvvtest()
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == [ 'testthree', 'testtwo' ]

        tdir = vrun.resultsDir()

        vrun = util.runvvtest( '-i' )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == [ 'testthree', 'testtwo' ]

        vrun = util.runvvtest( '-i', chdir=tdir )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == [ 'testthree', 'testtwo' ]

        util.remove_results()

        vrun = util.runvvtest( batch=True )
        vrun.assertCounts( total=2, npass=2 )

        vrun = util.runvvtest( '-R', chdir=tdir )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == [ 'testthree', 'testtwo' ]

        util.remove_results()

        # the --include-tdd option means run the tests with TDD

        vrun = util.runvvtest( '--include-tdd' )
        vrun.assertCounts( total=4, npass=4 )
        assert vrun.getTestIds() == [ 'testfour',
                                      'testone',
                                      'testthree',
                                      'testtwo' ]

        vrun = util.runvvtest( '-i' )
        vrun.assertCounts( total=4, npass=4 )
        assert vrun.getTestIds() == [ 'testfour',
                                      'testone',
                                      'testthree',
                                      'testtwo' ]

        vrun = util.runvvtest( '-i', chdir=tdir )
        vrun.assertCounts( total=4, npass=4 )
        assert vrun.getTestIds() == [ 'testfour',
                                      'testone',
                                      'testthree',
                                      'testtwo' ]

        util.remove_results()

        vrun = util.runvvtest( '--include-tdd', batch=True )
        vrun.assertCounts( total=4, npass=4 )

    def test_that_tests_marked_TDD_carry_the_mark_to_the_test_results_file(self):
        ""
        util.writefile( "testone.xml", """
            <rtest name="testone">
                <keywords> junk TDD </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writefile( "testtwo.xml", """
            <rtest name="testtwo">
                <keywords> gold </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writescript( 'testthree.vvt', """
            #!/usr/bin/env python
            #VVT: keywords = pink
            import time
            time.sleep(1)
            """ )
        util.writescript( 'testfour.vvt', """
            #!/usr/bin/env python
            #VVT: keywords = blue TDD
            import time
            time.sleep(1)
            """ )
        time.sleep(1)

        vrun = util.runvvtest( '--include-tdd' )
        vrun.assertCounts( total=4, npass=4 )

        # bootstrap with runtimes files then save the test results
        util.runcmd( util.resultspy + ' save' )
        vrun = util.runvvtest( '-i --save-results' )

        resultsfname = util.globfile('results.*')
        tr = results.TestResults( resultsfname )

        assert len( util.grepfiles( "testone*TDD",    resultsfname ) ) == 1
        assert len( util.grepfiles( "testtwo*pass",   resultsfname ) ) == 1
        assert len( util.grepfiles( "testtwo*TDD",    resultsfname ) ) == 0
        assert len( util.grepfiles( "testthree*pass", resultsfname ) ) == 1
        assert len( util.grepfiles( "testthree*TDD",  resultsfname ) ) == 0
        assert len( util.grepfiles( "testfour*TDD",   resultsfname ) ) == 1

    def test_that_tests_marked_TDD_are_distinguished_in_reporting(self):
        ""
        os.mkdir( 'config' )  # force the test to use default plat & cplr

        util.writefile( "testone.xml", """
            <rtest name="testone">
                <keywords> junk TDD </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writefile( "testtwo.xml", """
            <rtest name="testtwo">
                <keywords> gold </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writescript( 'testthree.vvt', """
            #!/usr/bin/env python
            #VVT: keywords = pink
            import time
            time.sleep(1)
            """ )
        util.writescript( 'testfour.vvt', """
            #!/usr/bin/env python
            #VVT: keywords = blue TDD
            import time
            time.sleep(1)
            """ )
        time.sleep(1)

        vrun = util.runvvtest( '--include-tdd --config config' )
        vrun.assertCounts( total=4, npass=4 )

        # bootstrap with runtimes files then save the test results
        util.runcmd( util.resultspy + ' save' )
        util.runvvtest( '--config config -i --save-results' )

        rf1 = util.globfile('results.*')
        tr = results.TestResults( rf1 )
        platname,cplrname = tr.platform(), tr.compiler()
        L = rf1.split('.')
        rf2 = L[0]+'.'+L[1]+'.Fake.'+L[3]
        mach = os.uname()[1]
        tr.writeResults( rf2, 'Fake', L[3], mach, '/some/fake/path' )

        x,out = util.runcmd( util.resultspy + ' report ' + rf1 + ' ' + rf2 )

        assert len( util.grep( out, 'Fake.gcc' ) ) == 1
        assert len( util.grep( out, 'pass=2 ' ) ) == 2
        assert len( util.grep( out, 'diff= ' ) ) == 0
        assert len( util.grep( out, 'fail= ' ) ) == 0

        # excercise this, but verifying the values is hard without just
        # bringing up a browser
        ok = util.run_redirect(
                util.resultspy + ' report --html . ' + rf1 + ' ' + rf2,
                           'short.html' )
        assert ok


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
