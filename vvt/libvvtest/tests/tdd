#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import time
import filecmp
import shutil
import glob
import unittest

import testutils as util
from testutils import print3

import libvvtest.TestSpec as TestSpec
import libvvtest.TestSpecCreator as TestSpecCreator
import libvvtest.xmlwrapper as xmlwrapper

sys.path.insert( 0, os.path.dirname( os.path.dirname( util.testsrcdir ) ) )
import results

timesfname = results.runtimes_filename
multifname = results.multiruntimes_filename


class tdd_tests( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

        # force the results files to be written locally for testing here;
        # it is used in vvtest when handling the --save-results option
        os.environ['TESTING_DIRECTORY'] = os.getcwd()

    def test_that_tests_marked_TDD_are_skipped_by_default(self):
        ""
        util.writefile( "testone.xml", """
            <rtest name="testone">
                <keywords> junk TDD </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writefile( "testtwo.xml", """
            <rtest name="testtwo">
                <keywords> gold </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writescript( 'testthree.vvt', """
            #!/usr/bin/env python
            #VVT: keywords = pink
            import time
            time.sleep(1)
            """ )
        util.writescript( 'testfour.vvt', """
            #!/usr/bin/env python
            #VVT: keywords = blue TDD
            import time
            time.sleep(1)
            """ )

        # by default, tests with TDD in keywords should not run

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        tdir = os.path.abspath( util.results_dir() )
        platname = util.platform_name( out )

        assert len( util.grep( out, 'testtwo' ) ) > 0
        assert len( util.grep( out, 'testthree' ) ) > 0
        assert len( util.grep( out, 'testone' ) ) == 0
        assert len( util.grep( out, 'testfour' ) ) == 0

        out,np,nd,nf,nn = util.run_vvtest( '-i' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        assert len( util.grep( out, 'testtwo' ) ) > 0
        assert len( util.grep( out, 'testthree' ) ) > 0
        assert len( util.grep( out, 'testone' ) ) == 0
        assert len( util.grep( out, 'testfour' ) ) == 0

        cwd = os.getcwd()
        os.chdir( tdir )
        out,np,nd,nf,nn = util.run_vvtest( '-i' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        assert len( util.grep( out, 'testtwo' ) ) > 0
        assert len( util.grep( out, 'testthree' ) ) > 0
        assert len( util.grep( out, 'testone' ) ) == 0
        assert len( util.grep( out, 'testfour' ) ) == 0
        os.chdir( cwd )

        util.remove_results()
        out,np,nd,nf,nn = util.run_vvtest(
            '--plat '+util.core_platform_name()+' --batch' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        tdir = os.path.abspath( util.results_dir() )

        os.chdir( tdir )
        out,np,nd,nf,nn = util.run_vvtest( '-R' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        assert len( util.grep( out, 'testtwo' ) ) > 0
        assert len( util.grep( out, 'testthree' ) ) > 0
        assert len( util.grep( out, 'testone' ) ) == 0
        assert len( util.grep( out, 'testfour' ) ) == 0

        # the --include-tdd option means run the tests with TDD

        os.chdir( cwd )
        util.remove_results()
        out,np,nd,nf,nn = util.run_vvtest( '--include-tdd' )
        tdir = os.path.abspath( util.results_dir() )
        assert np == 4 and nd == 0 and nf == 0 and nn == 0
        assert len( util.grep( out, 'testtwo' ) ) > 0
        assert len( util.grep( out, 'testthree' ) ) > 0
        assert len( util.grep( out, 'testone' ) ) > 0
        assert len( util.grep( out, 'testfour' ) ) > 0

        out,np,nd,nf,nn = util.run_vvtest( '-i' )
        assert np == 4 and nd == 0 and nf == 0 and nn == 0
        assert len( util.grep( out, 'testtwo' ) ) > 0
        assert len( util.grep( out, 'testthree' ) ) > 0
        assert len( util.grep( out, 'testone' ) ) > 0
        assert len( util.grep( out, 'testfour' ) ) > 0

        os.chdir( tdir )
        out,np,nd,nf,nn = util.run_vvtest( '-i' )
        assert np == 4 and nd == 0 and nf == 0 and nn == 0
        assert len( util.grep( out, 'testtwo' ) ) > 0
        assert len( util.grep( out, 'testthree' ) ) > 0
        assert len( util.grep( out, 'testone' ) ) > 0
        assert len( util.grep( out, 'testfour' ) ) > 0
        os.chdir( cwd )

        util.remove_results()
        out,np,nd,nf,nn = util.run_vvtest( '--plat '+util.core_platform_name() + \
                                      ' --batch --include-tdd' )
        assert np == 4 and nd == 0 and nf == 0 and nn == 0

    def test_that_tests_marked_TDD_carry_the_mark_to_the_test_results_file(self):
        ""
        util.writefile( "testone.xml", """
            <rtest name="testone">
                <keywords> junk TDD </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writefile( "testtwo.xml", """
            <rtest name="testtwo">
                <keywords> gold </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writescript( 'testthree.vvt', """
            #!/usr/bin/env python
            #VVT: keywords = pink
            import time
            time.sleep(1)
            """ )
        util.writescript( 'testfour.vvt', """
            #!/usr/bin/env python
            #VVT: keywords = blue TDD
            import time
            time.sleep(1)
            """ )

        out,np,nd,nf,nn = util.run_vvtest( '--include-tdd' )
        assert np == 4 and nd == 0 and nf == 0 and nn == 0
        tdir = os.path.abspath( util.results_dir() )

        # bootstrap with runtimes files then save the test results
        ok,out = util.run_cmd( util.resultspy + ' save' )
        assert ok
        util.run_vvtest( '-i --save-results' )

        resultsfname = glob.glob('results.*')[0]
        tr = results.TestResults( resultsfname )

        assert len( util.filegrep( resultsfname, "testone.*TDD" ) ) == 1
        assert len( util.filegrep( resultsfname, "testtwo.*pass" ) ) == 1
        assert len( util.filegrep( resultsfname, "testtwo.*TDD" ) ) == 0
        assert len( util.filegrep( resultsfname, "testthree.*pass" ) ) == 1
        assert len( util.filegrep( resultsfname, "testthree.*TDD" ) ) == 0
        assert len( util.filegrep( resultsfname, "testfour.*TDD" ) ) == 1

    def test_that_tests_marked_TDD_are_distinguished_in_reporting(self):
        ""
        os.mkdir( 'config' )  # force the test to use default plat & cplr

        util.writefile( "testone.xml", """
            <rtest name="testone">
                <keywords> junk TDD </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writefile( "testtwo.xml", """
            <rtest name="testtwo">
                <keywords> gold </keywords>
                <execute> sleep 1 </execute>
            </rtest>""" )
        util.writescript( 'testthree.vvt', """
            #!/usr/bin/env python
            #VVT: keywords = pink
            import time
            time.sleep(1)
            """ )
        util.writescript( 'testfour.vvt', """
            #!/usr/bin/env python
            #VVT: keywords = blue TDD
            import time
            time.sleep(1)
            """ )

        out,np,nd,nf,nn = util.run_vvtest( '--include-tdd --config config' )
        assert np == 4 and nd == 0 and nf == 0 and nn == 0
        tdir = os.path.abspath( util.results_dir() )

        # bootstrap with runtimes files then save the test results
        ok,out = util.run_cmd( util.resultspy + ' save' )
        assert ok
        util.run_vvtest( '--config config -i --save-results' )

        rf1 = glob.glob('results.*')[0]
        tr = results.TestResults( rf1 )
        platname,cplrname = tr.platform(), tr.compiler()
        L = rf1.split('.')
        rf2 = L[0]+'.'+L[1]+'.Fake.'+L[3]
        mach = os.uname()[1]
        tr.writeResults( rf2, 'Fake', L[3], mach, '/some/fake/path' )

        ok,out = util.run_cmd( util.resultspy + ' report ' + rf1 + ' ' + rf2 )
        assert ok

        assert len( util.grep( out, 'Fake.gcc' ) ) == 1
        assert len( util.grep( out, 'pass=2 ' ) ) == 2
        assert len( util.grep( out, 'diff= ' ) ) == 0
        assert len( util.grep( out, 'fail= ' ) ) == 0

        # excercise this, but verifying the values is hard without just
        # bringing up a browser
        ok = util.run_redirect(
                util.resultspy + ' report --html . ' + rf1 + ' ' + rf2,
                           'short.html' )
        assert ok


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
