#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import time
import subprocess
import shutil
from glob import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3


class the_tests( vtu.vvtestTestCase ):

    def test_procbatch_smoke_test(self):
        ""
        util.writefile( 'script', """
            echo "running script"
            touch """+os.path.abspath( 'touch.txt' )+"""
            """ )
        script = os.path.abspath('script')
        workdir = os.getcwd()
        outfile = os.path.abspath('out.txt')
        time.sleep(1)

        from libvvtest.procbatch import ProcessBatch

        obj = ProcessBatch( 8 )

        hdr = obj.header( 8, 123, workdir, os.path.abspath('out.txt') , {} )

        cmd,out,jobid,err = obj.submit( script, workdir, outfile )

        time.sleep(4)
        cmd,out,err,stateD = obj.query( [jobid] )

        assert len( stateD ) == 1
        assert stateD[ jobid ] == ''

        assert os.path.exists( 'touch.txt' )
        assert len( util.grepfiles( 'running script', 'out.txt' ) ) == 1

    def test_slurm_smoke_test(self):
        ""
        from libvvtest.slurm import BatchSLURM

        obj = BatchSLURM( 16 )
        obj.setRunCommand( mock_slurm_run_command )

        hdr = obj.header( 8, 123, os.getcwd(), os.path.abspath('out.txt') , {} )
        assert 'SBATCH' in hdr

        cmd,out,jobid,err = obj.submit( 'batchscript',
                                        'work_directory',
                                        'out_filename' )
        assert jobid == 291041

        cmd,out,err,stateD = obj.query( [ 16004368, 16014368 ] )
        assert len( stateD ) == 2
        assert stateD[ 16004368 ] == 'running'
        assert stateD[ 16014368 ] == ''

    def test_slurm_qos_test(self):
        """
        Make sure the header function can correctly include the --qos tag.
        """
        from libvvtest.slurm import BatchSLURM

        obj = BatchSLURM( 16 )
        obj.setRunCommand( mock_slurm_run_command )

        hdr = obj.header( 8, 123, os.getcwd(), os.path.abspath('out.txt') , {'QoS': 'long'} )
        print("This is hdr", hdr)
        assert '#SBATCH --qos=long' in hdr


    def test_craypbs_smoke_test(self):
        ""
        from libvvtest.craypbs import BatchCrayPBS

        obj = BatchCrayPBS( 16 )
        obj.setRunCommand( mock_craypbs_run_command )

        hdr = obj.header( 8, 123, os.getcwd(), os.path.abspath('out.txt'), {} )
        assert 'MSUB' in hdr

        cmd,out,jobid,err = obj.submit( 'batchscript',
                                        'work_directory',
                                        'out_filename' )
        assert jobid == '12345.sdb'

        cmd,out,err,stateD = obj.query( [ '12345.sdb', '123457.sdb', '7345.sdb' ] )
        assert len( stateD ) == 3
        assert stateD[ '12345.sdb' ] == 'running'
        assert stateD[ '123457.sdb' ] == 'pending'
        assert stateD[ '7345.sdb' ] == ''

    def test_pbs_smoke_test(self):
        ""
        from libvvtest.pbs import BatchPBS

        obj = BatchPBS( 16 )
        obj.setRunCommand( mock_pbs_run_command )

        hdr = obj.header( 8, 123, os.getcwd(), os.path.abspath('out.txt'), {})
        assert 'PBS' in hdr

        cmd,out,jobid,err = obj.submit( 'batchscript',
                                        'work_directory',
                                        'out_filename' )
        assert jobid == '12345.ladmin1'

        cmd,out,err,stateD = obj.query(
                    [ '12345.ladmin1', '123456.ladmin1', '7345.ladmin1' ] )
        assert len( stateD ) == 3
        assert stateD[ '12345.ladmin1' ] == 'running'
        assert stateD[ '123456.ladmin1' ] == 'pending'
        assert stateD[ '7345.ladmin1' ] == ''

    def test_the_runcmd_function_which_lives_in_its_own_file(self):
        ""
        from libvvtest.runcmd import runcmd

        x,out = runcmd( [ 'uname', '-a' ] )

        assert x == 0
        assert os.uname()[1] in out.strip()


#############################################################

def mock_slurm_run_command( cmdL, changedir=None ):
    ""
    if cmdL[0] == 'sbatch':
        return 0, 'Submitted batch job 291041'

    if cmdL[0] == 'squeue':
        return 0, """
15994641 PD
16004759 PD
16004368 R
16001384 R
16001384 CD
"""
    raise Exception( 'mock failure' )


def mock_craypbs_run_command( cmdL, changedir=None ):
    ""
    if cmdL[0] == 'msub':
        return 0, '12345.sdb'

    if cmdL[0] == 'showq':
        return 0, """
123456.sdb n/a Running field
12345.sdb n/a Running field
123457.sdb n/a Idle field
"""
    raise Exception( 'mock failure' )


def mock_pbs_run_command( cmdL, changedir=None ):
    ""
    if cmdL[0] == 'qsub':
        return 0, '12345.ladmin1'

    if cmdL[0] == 'qstat':
        return 0, """
123456.ladmin1 field1 field2 field3 Q field6
12345.ladmin1 field1 field2 field3 R field6
123457.ladmin1 field1 field2 field3 C field6
"""
    raise Exception( 'mock failure' )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
