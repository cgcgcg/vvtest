#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

from batch.batching import BatchQueueInterface


class general_tests( vtu.vvtestTestCase ):

    def test_the_runcmd_function_which_lives_in_its_own_file(self):
        ""
        from batch.runcmd import runcmd

        x,out = runcmd( [ 'uname', '-a' ] )

        assert x == 0
        assert os.uname()[1] in out.strip()

    def test_queue_type_construction(self):
        ""
        for qtype in ['procbatch','craypbs','pbs','slurm','moab','lsf']:
            bq = BatchQueueInterface()
            assert not bq.isBatched()
            bq.setQueueType( qtype, 12 )
            assert bq.isBatched()


class procbatch_tests( vtu.vvtestTestCase ):

    def test_smoke_test(self):
        ""
        util.writefile( 'script', """
            echo "running script"
            touch """+abspath( 'touch.txt' )+"""
            """ )
        script = abspath('script')
        workdir = os.getcwd()
        outfile = abspath('out.txt')
        time.sleep(1)

        from batch.procbatch import ProcessBatch

        obj = ProcessBatch( 8 )

        hdr = obj.header( (8,0), 123, workdir, abspath('out.txt') , {} )

        cmd,out,jobid,err = obj.submit( script, workdir, outfile )

        time.sleep(4)
        cmd,out,err,stateD = obj.query( [jobid] )

        assert len( stateD ) == 1
        assert stateD[ jobid ] == ''

        assert os.path.exists( 'touch.txt' )
        assert len( util.grepfiles( 'running script', 'out.txt' ) ) == 1


class slurm_tests( vtu.vvtestTestCase ):

    save_cmds = []

    def mock_run_command(self, cmdL, changedir=None):
        ""
        slurm_tests.save_cmds.append( cmdL )

        if cmdL[0] == 'sbatch':
            return 0, 'Submitted batch job 291041'

        if cmdL[0] == 'squeue':
            return 0, """
15994641 PD
16004759 PD
16004368 R
16001384 R
16001384 CD
"""

        if cmdL[0] == 'scancel':
            return 0, ''

        raise Exception( 'mock failure' )

    def test_smoke_test(self):
        ""
        from batch.slurm import BatchSLURM

        obj = BatchSLURM( 16 )
        obj.setRunCommand( self.mock_run_command )

        hdr = obj.header( (8,0), 123, os.getcwd(), abspath('out.txt') , {} )
        assert 'SBATCH' in hdr and 'nodes=1' in hdr

        cmd,out,jobid,err = obj.submit( 'batchscript',
                                        'work_directory',
                                        'out_filename' )
        assert jobid == 291041

        cmd,out,err,stateD = obj.query( [ 16004368, 16014368 ] )
        assert len( stateD ) == 2
        assert stateD[ 16004368 ] == 'running'
        assert stateD[ 16014368 ] == ''

    def test_num_nodes_computation(self):
        ""
        from batch.slurm import BatchSLURM

        obj = BatchSLURM( 16 )
        assert obj.computeNumNodes( (1,0) ) == 1
        assert obj.computeNumNodes( (16,0) ) == 1
        assert obj.computeNumNodes( (17,0) ) == 2
        assert obj.computeNumNodes( (31,0) ) == 2
        assert obj.computeNumNodes( (31,None) ) == 2

        obj = BatchSLURM( 16, devices_per_node=4 )
        assert obj.computeNumNodes( (4,0) ) == 1
        assert obj.computeNumNodes( (1,2) ) == 1
        assert obj.computeNumNodes( (1,4) ) == 1
        assert obj.computeNumNodes( (32,4) ) == 2
        assert obj.computeNumNodes( (16,6) ) == 2
        assert obj.computeNumNodes( (32,6) ) == 2
        assert obj.computeNumNodes( (31,None) ) == 2

    def test_qos_test(self):
        """
        Make sure the header function can correctly include the --qos tag.
        """
        from batch.slurm import BatchSLURM

        obj = BatchSLURM( 16 )
        obj.setRunCommand( self.mock_run_command )

        hdr = obj.header( (8,0), 123, os.getcwd(), abspath('out.txt') , {'QoS': 'long'} )
        print("This is hdr", hdr)
        assert '#SBATCH --qos=long' in hdr

    def test_cancel_function(self):
        ""
        from batch.slurm import BatchSLURM

        obj = BatchSLURM( 16 )
        obj.setRunCommand( self.mock_run_command )

        obj.cancel( 123456 )
        assert int( slurm_tests.save_cmds[-1][-1] ) == 123456


class lsf_tests( vtu.vvtestTestCase ):

    save_cmds = []

    def mock_run_command(self, cmdL, changedir=None):
        ""
        lsf_tests.save_cmds.append( cmdL )

        if cmdL[0] == 'bsub':
            return 0, 'Job <68628> is submitted to default queue <normal>.'

        if cmdL[0] == 'bjobs':
            return 0, """
68628   PEND
68728   RUN
"""

        if cmdL[0] == 'bkill':
            return 0, ''

        raise Exception( 'mock failure' )

    def test_smoke_test(self):
        ""
        from batch.lsf import BatchLSF

        obj = BatchLSF( 44 )
        obj.setRunCommand( self.mock_run_command )

        hdr = obj.header( (8,0), 123, os.getcwd(), abspath('out.txt') , {} )
        assert 'BSUB' in hdr and 'nnodes 1' in hdr

        cmd,out,jobid,err = obj.submit( 'batchscript',
                                        'work_directory',
                                        'out_filename' )
        assert jobid == 68628

        cmd,out,err,stateD = obj.query( [ 68628, 68728, 38594 ] )
        assert len( stateD ) == 3
        assert stateD[ 68628 ] == 'pending'
        assert stateD[ 68728 ] == 'running'
        assert stateD[ 38594 ] == ''

    def test_num_nodes_computation(self):
        ""
        from batch.lsf import BatchLSF

        obj = BatchLSF( 16 )
        assert obj.computeNumNodes( (1,0) ) == 1
        assert obj.computeNumNodes( (16,0) ) == 1
        assert obj.computeNumNodes( (17,0) ) == 2
        assert obj.computeNumNodes( (31,0) ) == 2
        assert obj.computeNumNodes( (31,None) ) == 2

        obj = BatchLSF( 16, devices_per_node=4 )
        assert obj.computeNumNodes( (4,0) ) == 1
        assert obj.computeNumNodes( (1,2) ) == 1
        assert obj.computeNumNodes( (1,4) ) == 1
        assert obj.computeNumNodes( (32,4) ) == 2
        assert obj.computeNumNodes( (16,6) ) == 2
        assert obj.computeNumNodes( (32,6) ) == 2
        assert obj.computeNumNodes( (31,None) ) == 2

    def test_cancel_function(self):
        ""
        from batch.lsf import BatchLSF

        obj = BatchLSF( 44 )
        obj.setRunCommand( self.mock_run_command )

        obj.cancel( 123456 )
        assert int( lsf_tests.save_cmds[-1][-1] ) == 123456


class craypbs_tests( vtu.vvtestTestCase ):

    def mock_run_command(self, cmdL, changedir=None):
        ""
        if cmdL[0] == 'msub':
            return 0, '12345.sdb'

        if cmdL[0] == 'showq':
            return 0, """
123456.sdb n/a Running field
12345.sdb n/a Running field
123457.sdb n/a Idle field
"""
        raise Exception( 'mock failure' )

    def test_smoke_test(self):
        ""
        from batch.craypbs import BatchCrayPBS

        obj = BatchCrayPBS( 16 )
        obj.setRunCommand( self.mock_run_command )

        hdr = obj.header( (8,0), 123, os.getcwd(), abspath('out.txt'), {} )
        assert 'MSUB' in hdr

        cmd,out,jobid,err = obj.submit( 'batchscript',
                                        'work_directory',
                                        'out_filename' )
        assert jobid == '12345.sdb'

        cmd,out,err,stateD = obj.query( [ '12345.sdb', '123457.sdb', '7345.sdb' ] )
        assert len( stateD ) == 3
        assert stateD[ '12345.sdb' ] == 'running'
        assert stateD[ '123457.sdb' ] == 'pending'
        assert stateD[ '7345.sdb' ] == ''


class pbs_tests( vtu.vvtestTestCase ):

    def mock_run_command(self, cmdL, changedir=None):
        ""
        if cmdL[0] == 'qsub':
            return 0, '12345.ladmin1'

        if cmdL[0] == 'qstat':
            return 0, """
123456.ladmin1 field1 field2 field3 Q field6
12345.ladmin1 field1 field2 field3 R field6
123457.ladmin1 field1 field2 field3 C field6
"""
        raise Exception( 'mock failure' )

    def test_smoke_test(self):
        ""
        from batch.pbs import BatchPBS

        obj = BatchPBS( 16 )
        obj.setRunCommand( self.mock_run_command )

        hdr = obj.header( (8,0), 123, os.getcwd(), abspath('out.txt'), {})
        assert 'PBS' in hdr

        cmd,out,jobid,err = obj.submit( 'batchscript',
                                        'work_directory',
                                        'out_filename' )
        assert jobid == '12345.ladmin1'

        cmd,out,err,stateD = obj.query(
                    [ '12345.ladmin1', '123456.ladmin1', '7345.ladmin1' ] )
        assert len( stateD ) == 3
        assert stateD[ '12345.ladmin1' ] == 'running'
        assert stateD[ '123456.ladmin1' ] == 'pending'
        assert stateD[ '7345.ladmin1' ] == ''


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
