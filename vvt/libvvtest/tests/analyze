#!/usr/bin/env python
#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import glob
import time

import testutils as util
optD,argL = util.initialize( sys.argv )
if 'TESTUTILS_RUNDIR' not in os.environ:
    os.chdir( util.working_directory )

from testutils import *


def main():
    """
    """
    global argL

    if len(argL) == 0:
        argL = """test01 test02 test05 test06 test07
                  test08 test09 test10 test11 test12
                  test13a test13b test14 test15 test16 test17 test18
               """.split()

    savedir = os.getcwd()
    for func in argL:
        os.chdir( savedir )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )

        # for batch tests
        os.environ['VVTEST_BATCH_READ_INTERVAL'] = '5'
        os.environ['VVTEST_BATCH_READ_TIMEOUT'] = '15'
        os.environ['VVTEST_BATCH_SLEEP_LENGTH'] = '1'

        eval( func+'()' )


#####################################################################

def test01():
    """
    put a parameterize/analyze test at the top level
    """
    writefile( 'top/param_analyze.xml', """
        <rtest name="param_analyze">
          <keywords> fast medium </keywords>
          <parameterize keywords="fast"     np="1"/>
          <parameterize not_keywords="fast" np="2 4"/>
          <link_files> $NAME.inp </link_files>
          <execute>
             touch execute_file.np=$np || exit 1
             ls $NAME.inp || exit 1
          </execute>
          <analyze keywords="fast">
             ls ../param_analyze.np=1/execute_file.np=1 || exit 1
          </analyze>
          <analyze not_keywords="fast">
             ls ../param_analyze.np=2/execute_file.np=2 || exit 1
             ls ../param_analyze.np=4/execute_file.np=4 || exit 1
          </analyze>
        </rtest>""" )

    writefile( 'top/param_analyze.inp', """
        some sort of input deck
        """ )

    writefile( 'parentchild/good.xml', """
        <rtest name="good">
          <keywords> fast medium </keywords>
          <parameterize timestep="1 2"/>
          <execute>
            touch afile.$timestep
          </execute>
          <analyze>
             ls ../good.timestep=1/afile.1 || exit 1
             ls ../good.timestep=2/afile.2 || exit 1
          </analyze>
        </rtest>""" )

    run_test01( '' )
    run_test01( '--plat '+core_platform_name()+' --batch' )

def run_test01( opt ):
    ""
    writefile( 'parentchild/bad.xml', """
        <rtest name="bad">
          <keywords> fast medium </keywords>
          <parameterize timestep="1 2"/>
          <execute>
            echo "fake failure"
            exit 1
          </execute>
          <analyze>
             ls ../bad.timestep=1/bfile.1 || exit 1
             ls ../bad.timestep=2/bfile.2 || exit 1
          </analyze>
        </rtest>""" )

    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt+" parentchild" )
    assert np == 3 and nd == 0 and nf == 2 and nn == 1

    # "fix" the bad test
    writefile( 'parentchild/bad.xml', """
        <rtest name="bad">
          <keywords> fast medium </keywords>
          <parameterize timestep="1 2"/>
          <execute>
            touch bfile.$timestep
          </execute>
          <analyze>
             ls ../bad.timestep=1/bfile.1 || exit 1
             ls ../bad.timestep=2/bfile.2 || exit 1
          </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( opt+' -R -k notdone/notrun/fail parentchild' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0


def test02():
    """
    exercise logic with only one analyze
    """
    writefile( 'parentchild/good.xml', """
        <rtest name="good">
          <keywords> fast medium </keywords>
          <parameterize timestep="1 2"/>
          <execute>
            touch afile.$timestep
          </execute>
          <analyze>
             ls ../good.timestep=1/afile.1 || exit 1
             ls ../good.timestep=2/afile.2 || exit 1
          </analyze>
        </rtest>""" )

    run_test02( '' )
    run_test02( '--plat '+core_platform_name()+' --batch' )

def run_test02( opt ):
    ""
    writefile( 'parentchild/bad.xml', """
        <rtest name="bad">
          <keywords> fast medium </keywords>
          <parameterize timestep="1 2"/>
          <execute>
            if ( "$timestep" == 2 ) then
              echo "fake failure"
              exit 1
            else
              touch bfile.$timestep
            endif
          </execute>
          <analyze>
             ls ../bad.timestep=1/bfile.1 || exit 1
             ls ../bad.timestep=2/bfile.2 || exit 1
          </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( opt+' -k bad parentchild' )
    assert np == 1 and nd == 0 and nf == 1 and nn == 1

    # "fix" the bad test
    writefile( 'parentchild/bad.xml', """
        <rtest name="bad">
          <keywords> fast medium </keywords>
          <parameterize timestep="1 2"/>
          <execute>
            touch bfile.$timestep
          </execute>
          <analyze>
             ls ../bad.timestep=1/bfile.1 || exit 1
             ls ../bad.timestep=2/bfile.2 || exit 1
          </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( opt+' -R -k notdone/notrun/fail ' + \
                                      '-k bad parentchild' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0


def test05():
    """
    check the case where no parameterize but an analyze is given
    """
    writefile( 'noparam.xml', """
        <rtest name="noparam">
          <keywords> fast medium </keywords>
          <execute> echo "exec standard" </execute>
          <analyze>
            echo "exec analyze"
          </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 0 and nd == 0 and nf == 0 and nn == 0
    assert len( grep( out, 'skipping .*noparam'  ) ) == 1


def test06():
    """
    using testname filter with analyze
    """
    writefile( 'multi.xml', """
        <rtest name="multi">
          <rtest name="multi2"/>
          <parameterize param="one two"/>
          <execute> echo "exec test $NAME param $param" </execute>
          <analyze testname="multi">
            echo "analyze test $NAME (multi)"
          </analyze>
          <analyze testname="multi2">
            echo "analyze test $NAME (multi2)"
          </analyze>
        </rtest>""" )

    run_test06( '' )
    run_test06( '--plat '+core_platform_name()+' --batch' )

def run_test06( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 6 and nd == 0 and nf == 0 and nn == 0
    
    fL = glob.glob( 'TestResults.*/multi.param=one/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi.param=two/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'analyze test multi ' ) ) >= 1
    
    fL = glob.glob( 'TestResults.*/multi2.param=one/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi2 ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2.param=two/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi2 ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'analyze test multi2 ' ) ) >= 1


def test07():
    """
    testname filter with analyze where one test does not have an analyze
    """
    writefile( 'multi.xml', """
        <rtest name="multi">
          <rtest name="multi2"/>
          <parameterize param="one two"/>
          <execute> echo "exec test $NAME param $param" </execute>
          <analyze testname="multi2">
            echo "analyze test $NAME (multi2)"
          </analyze>
        </rtest>""" )

    run_test07( '' )
    run_test07( '--plat '+core_platform_name()+' --batch' )

def run_test07( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 5 and nd == 0 and nf == 0 and nn == 0
    
    fL = glob.glob( 'TestResults.*/multi.param=one/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi.param=two/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi/execute.log' )
    assert len(fL) == 0
    
    fL = glob.glob( 'TestResults.*/multi2.param=one/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi2 ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2.param=two/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi2 ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'analyze test multi2 ' ) ) >= 1


########################################################################

def test08():
    """
    analyze tests should not wait until the end to run
    """
    writefile( 'test1.xml', """
        <rtest name="test1">
          <parameterize timestep="1 2"/>
          <execute>
            sleep 1
            touch afile.$timestep
          </execute>
          <analyze>
             ls ../test1.timestep=1/afile.1 || exit 1
             ls ../test1.timestep=2/afile.2 || exit 1
          </analyze>
        </rtest>""" )
    writefile( 'test2.xml', """
        <rtest name="test2">
          <execute>
            sleep 10
            echo "that was a nice nap"
          </execute>
        </rtest>""" )

    run_test08( '' )
    run_test08( '--plat '+core_platform_name()+' --batch --qsub-limit 5' )

def run_test08( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt+' -n 4 --sort x' )
    assert np == 4 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )

    tL = testtimes( out )
    assert len(tL) == 4
    assert tL[0][0] == tdir+'/test1'
    assert tL[1][0] == tdir+'/test1.timestep=1'
    assert tL[2][0] == tdir+'/test1.timestep=2'
    assert tL[3][0] == tdir+'/test2'
    assert tL[0][1] >= tL[1][2] and tL[0][1] >= tL[2][2]
    assert tL[0][1] < tL[3][2]


def test09():
    """
    analyze should not run if a child failed previously
    """
    run_test09( '' )
    run_test09( '--plat '+core_platform_name()+' --batch' )

def run_test09( opt ):
    ""
    remove_results()

    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize timestep="1 2"/>
          <execute>
            if ( "$timestep" == 2 ) then
              echo "fake failure"
              exit 1
            else
              touch afile.$timestep
            endif
          </execute>
          <analyze>
             ls ../atest.timestep=1/afile.1 || exit 1
             ls ../atest.timestep=2/afile.2 || exit 1
          </analyze>
        </rtest>""" )
    
    # the analyze should not run because a child fails
    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 1 and nd == 0 and nf == 1 and nn == 1
    tdir = results_dir()
    platname = platform_name( out )

    # the analyze should not run here
    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0
    
    # double check the state
    out,np,nd,nf,nn = run_vvtest( "--plat "+platname+" -i" )
    assert np == 1 and nd == 0 and nf == 1 and nn == 1
    
    # "fix" the failure
    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize timestep="1 2"/>
          <execute>
            touch afile.$timestep
          </execute>
          <analyze>
             ls ../atest.timestep=1/afile.1 || exit 1
             ls ../atest.timestep=2/afile.2 || exit 1
          </analyze>
        </rtest>""" )
    
    # rerun the failure
    out,np,nd,nf,nn = run_vvtest( opt+' -k fail' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    
    # now the analyze should run
    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    
    out,np,nd,nf,nn = run_vvtest( "--plat "+platname+" -i" )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0


def test10():
    """
    behavior with previous children test results
    """
    run_test10( '' )
    run_test10( '--batch --qsub-length 1 --qsub-limit 5' )

def run_test10( opt ):
    ""
    remove_results()

    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize timestep="1 2"/>
          <execute>
            sleep 5
            touch afile.$timestep
          </execute>
          <analyze>
             ls ../atest.timestep=1/bfile.1 || exit 1
             ls ../atest.timestep=2/bfile.2 || exit 1
          </analyze>
        </rtest>""" )
    
    # the analyze should fail
    out,np,nd,nf,nn = run_vvtest( opt+' -n 3' )
    assert np == 2 and nd == 0 and nf == 1 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )

    # "fix" the execute
    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize timestep="1 2"/>
          <execute>
            sleep 5
            touch bfile.$timestep
          </execute>
          <analyze>
             ls ../atest.timestep=1/bfile.1 || exit 1
             ls ../atest.timestep=2/bfile.2 || exit 1
          </analyze>
        </rtest>""" )
    
    # the analyze test should NOT run at the same time as the children
    # (if it does in this case, then the analyze test will show a fail)
    out,np,nd,nf,nn = run_vvtest( opt+' -R -n 3' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0


def test11():
    """
    make sure if a child test takes more processors than available, then
    the analyze will still wait for all the children to finish
    """
    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize np="1 1 2 2" foo="bar baz bar baz"/>
          <execute>
            sleep 4
            touch afile.$foo.$np
          </execute>
          <analyze>
             ls ../atest.foo=bar.np=1/afile.bar.1 || exit 1
             ls ../atest.foo=baz.np=1/afile.baz.1 || exit 1
             ls ../atest.foo=bar.np=2/afile.bar.2 || exit 1
             ls ../atest.foo=baz.np=2/afile.baz.2 || exit 1
          </analyze>
        </rtest>""" )
    
    out,np,nd,nf,nn = run_vvtest( '-n 1' )
    assert np == 5 and nd == 0 and nf == 0 and nn == 0


def test12():
    """
    analyze tests that have bad children are not pruned when using -i
    """
    writefile( 'bad.xml', """
    <rtest name="bad">
      <keywords> fast medium </keywords>
      <parameterize timestep="1 2"/>
      <execute>
        if ( "$timestep" == 2 ) then
          echo "fake failure"
          exit 1
        else
          touch bfile.$timestep
        endif
      </execute>
      <analyze>
         ls ../bad.timestep=1/bfile.1 || exit 1
         ls ../bad.timestep=2/bfile.2 || exit 1
      </analyze>
    </rtest>""" )

    # the analyze should be run here
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 1 and nn == 1

    # the analyze should show up in the listing here
    out,np,nd,nf,nn = run_vvtest( '-i -k notrun/pass' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 1


########################################################################

def test13a():
    """
    execute/analyze in a script test
    """    
    writescript( 'ana.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : V=a b
        #VVT: analyze : -a
        import os, sys
        import script_util as vvt
        if '-a' in sys.argv:
            print ( 'running analyze' )
        else:
            print ( 'running execute' )
        """ )

    run_test13a( '' )
    run_test13a( '--plat '+core_platform_name()+' --batch' )

def run_test13a( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )

    assert len( glob.glob( tdir+'/ana*/execute.log' ) ) == 3
    assert len( filegrep( tdir+'/ana.V=a/execute.log', 'running execute' ) ) == 1
    assert len( filegrep( tdir+'/ana.V=b/execute.log', 'running execute' ) ) == 1
    assert len( filegrep( tdir+'/ana/execute.log', 'running analyze' ) ) == 1


def test13b():
    """
    execute/analyze in a script test with only a single parameter value
    """
    writescript( 'ana.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : V=a
        #VVT: analyze : -a
        import os, sys
        import script_util as vvt
        if '-a' in sys.argv:
            print ( 'running analyze' )
        else:
            print ( 'running execute' )
        """ )

    run_test13b( '' )
    run_test13b( '--plat '+core_platform_name()+' --batch' )

def run_test13b( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )

    assert len( glob.glob( tdir+'/ana*/execute.log' ) ) == 2
    assert len( filegrep( tdir+'/ana.V=a/execute.log', 'running execute' ) ) == 1
    assert len( filegrep( tdir+'/ana/execute.log', 'running analyze' ) ) == 1


def test14():
    """
    execute/analyze in a script test where the analyze is a script
    """    
    writescript( 'ana.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : V=a b
        #VVT: analyze : ana.sh
        import os, sys
        import script_util as vvt
        print ( 'running execute with param '+vvt.V )
        """ )
    writescript( 'ana.sh', """
        #!/bin/sh
        source vvtest_util.sh
        echo "running analyze"
        echo "name is $NAME with children params $PARAM_V"
        """ )

    run_test14( '' )
    run_test14( '--plat '+core_platform_name()+' --batch' )

def run_test14( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )

    assert len( glob.glob( tdir+'/ana*/execute.log' ) ) == 3
    assert len( filegrep( tdir+'/ana.V=a/execute.log', 'running execute' ) ) == 1
    assert len( filegrep( tdir+'/ana.V=a/execute.log', 'param a' ) ) == 1
    assert len( filegrep( tdir+'/ana.V=b/execute.log', 'running execute' ) ) == 1
    assert len( filegrep( tdir+'/ana.V=b/execute.log', 'param b' ) ) == 1
    assert len( filegrep( tdir+'/ana/execute.log', 'running analyze' ) ) == 1
    assert len( filegrep( tdir+'/ana/execute.log', 'params a b' ) ) == 1


def test15():
    """
    execute/analyze in a script test where the analyze method is chosen
    """    
    writescript( 'ana1.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : V=a b
        #VVT: analyze (file) : -ana.sh
        import os, sys
        import script_util as vvt
        print ( 'running py execute' )
        """ )
    writescript( '-ana.sh', """
        #!/bin/sh
        source vvtest_util.sh
        echo "running sh analyze"
        """ )
    writescript( 'ana2.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : V=a b
        #VVT: analyze (argument) : yep
        import os, sys
        import script_util as vvt
        if 'yep' in sys.argv[1:]:
            print ( 'running analyze' )
        else:
            print ( 'running execute' )
        """ )

    run_test15( '' )
    run_test15( '--plat '+core_platform_name()+' --batch' )

def run_test15( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 6 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )
    
    assert len( glob.glob( tdir+'/ana1*/execute.log' ) ) == 3
    assert len( filegrep( tdir+'/ana1.V=a/execute.log', 'running py execute' ) ) == 1
    assert len( filegrep( tdir+'/ana1.V=b/execute.log', 'running py execute' ) ) == 1
    assert len( filegrep( tdir+'/ana1/execute.log', 'running sh analyze' ) ) == 1
    assert len( glob.glob( tdir+'/ana2*/execute.log' ) ) == 3
    assert len( filegrep( tdir+'/ana2.V=a/execute.log', 'running execute' ) ) == 1
    assert len( filegrep( tdir+'/ana2.V=b/execute.log', 'running execute' ) ) == 1
    assert len( filegrep( tdir+'/ana2/execute.log', 'running analyze' ) ) == 1


def test16():
    """
    execute/analyze where all but one parameter value is filtered out
    """    
    writescript( 'scr.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : V=a b
        #VVT: analyze : -a
        import os, sys
        import script_util as vvt
        if '-a' in sys.argv:
            print ( 'running analyze with V='+repr(vvt.PARAM_V) )
        else:
            print ( 'running execute' )
        """ )

    run_test16( [] )
    run_test16( ['--plat',core_platform_name(),'--batch'] )

def run_test16( optL ):
    ""
    remove_results()

    ok,out = run_cmd( [vvtest]+optL+['-p','V<b or !V'] )
    assert ok
    np,nd,nf,nn = numpass(out),numdiff(out),numfail(out),numnotrun(out)
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )

    assert len( glob.glob( tdir+'/scr*/execute.log' ) ) == 2
    assert len( filegrep( tdir+'/scr.V=a/execute.log', 'running execute' ) ) == 1
    assert not os.path.exists( tdir+'/scr.V=b/execute.log' )
    assert len( filegrep( tdir+'/scr/execute.log', 'running analyze' ) ) == 1


########################################################################

def test17():
    """
    using the -a or --analyze option
    """    
    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize ival="1 2"/>
          <execute>
            echo "running touch"
            touch afile.$ival
          </execute>
          <execute analyze="yes">
            echo "running execute analyze"
          </execute>
          <analyze>
            echo "running analyze"
            ls ../atest.ival=1/afile.1 || exit 1
            ls ../atest.ival=2/afile.2 || exit 1
          </analyze>
        </rtest>""" )

    run_test17( '' )
    run_test17( '--plat '+core_platform_name()+' --batch' )

def run_test17( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )

    assert len( filegrep( tdir+'/atest.ival=1/execute.log',
                          'running touch' ) ) == 1
    assert len( filegrep( tdir+'/atest.ival=1/execute.log',
                          'running execute analyze' ) ) == 1
    assert len( filegrep( tdir+'/atest.ival=2/execute.log',
                          'running touch' ) ) == 1
    assert len( filegrep( tdir+'/atest.ival=2/execute.log',
                          'running execute analyze' ) ) == 1
    assert len( filegrep( tdir+'/atest/execute.log',
                          'running analyze' ) ) == 1
    assert len( filegrep( tdir+'/atest/execute.log',
                          'running touch' ) ) == 0
    
    out,np,nd,nf,nn = run_vvtest( opt+' -Ra' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( tdir+'/atest.ival=1/execute.log',
                          'running touch' ) ) == 0
    assert len( filegrep( tdir+'/atest.ival=1/execute.log',
                          'running execute analyze' ) ) == 1
    assert len( filegrep( tdir+'/atest.ival=2/execute.log',
                          'running touch' ) ) == 0
    assert len( filegrep( tdir+'/atest.ival=2/execute.log',
                          'running execute analyze' ) ) == 1
    assert len( filegrep( tdir+'/atest/execute.log',
                          'running analyze' ) ) == 1
    assert len( filegrep( tdir+'/atest/execute.log',
                          'running touch' ) ) == 0


def test18():
    """
    using the -a or --analyze option with script test
    """    
    writescript( 'pytest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : ival = 1 2
        #VVT: analyze : --analyze
        import os
        from script_util import *
        if '--analyze' not in sys.argv[1:]:
            if not analyze_only():
                print3( 'running touch' )
                fp = open( 'afile.'+ival, 'w' ) ; fp.close()
            print3( 'running execute' )
        else:
            print3( "running analyze" )
            assert os.path.exists( '../pytest.ival=1/afile.1' )
            assert os.path.exists( '../pytest.ival=2/afile.2' )
        """ )
    writescript( 'shtest.vvt', """
        #!/bin/sh
        #VVT: parameterize : ival = 1 2
        #VVT: analyze : --analyze
        source vvtest_util.sh
        if cmdline_option --analyze ;
        then
            echo "running analyze"
            ls ../shtest.ival=1/afile.1 || exit 1
            ls ../shtest.ival=2/afile.2 || exit 1
        else
            analyze_only || {
                echo "running touch"
                touch afile.$ival
            }
            echo "running execute"
        fi
        """ )

    run_test18( '' )
    run_test18( '--plat '+core_platform_name()+' --batch' )

def run_test18( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 6 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )
    
    for tname in ['pytest','shtest']:
        assert len( filegrep( tdir+'/'+tname+'.ival=1/execute.log',
                              'running touch' ) ) == 1
        assert len( filegrep( tdir+'/'+tname+'.ival=1/execute.log',
                              'running execute' ) ) == 1
        assert len( filegrep( tdir+'/'+tname+'.ival=2/execute.log',
                              'running touch' ) ) == 1
        assert len( filegrep( tdir+'/'+tname+'.ival=2/execute.log',
                              'running execute' ) ) == 1
        assert len( filegrep( tdir+'/'+tname+'/execute.log',
                              'running analyze' ) ) == 1
        assert len( filegrep( tdir+'/'+tname+'/execute.log',
                              'running touch' ) ) == 0
    
    out,np,nd,nf,nn = run_vvtest( opt+' -Ra' )
    assert np == 6 and nd == 0 and nf == 0 and nn == 0
    
    for tname in ['pytest','shtest']:
        assert len( filegrep( tdir+'/'+tname+'.ival=1/execute.log',
                              'running touch' ) ) == 0
        assert len( filegrep( tdir+'/'+tname+'.ival=1/execute.log',
                              'running execute' ) ) == 1
        assert len( filegrep( tdir+'/'+tname+'.ival=2/execute.log',
                              'running touch' ) ) == 0
        assert len( filegrep( tdir+'/'+tname+'.ival=2/execute.log',
                              'running execute' ) ) == 1
        assert len( filegrep( tdir+'/'+tname+'/execute.log',
                              'running analyze' ) ) == 1
        assert len( filegrep( tdir+'/'+tname+'/execute.log',
                              'running touch' ) ) == 0


########################################################################

main()
