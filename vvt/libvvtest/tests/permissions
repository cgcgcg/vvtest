#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import stat

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.PermissionSetter as PS


########################################################################

class unit_tests( vtu.vvtestTestCase ):

    def test_specification_error(self):
        ""
        self.assertRaises( Exception, PS.PermissionSetter, '.', 'g=rq' )

    def test_dummy_permissions_class(self):
        ""
        perms = PS.DummyPermissionSetter()
        perms.set( 'blah' )
        perms.recurse( 'blah' )


class integration_tests( vtu.vvtestTestCase ):

    def test_turning_off_group_and_world_permissions(self):
        ""
        util.writefile( "one/cat.xml", """
            <rtest name="cat">
              <execute> sleep 1 </execute>
            </rtest>""" )
        util.writefile( "one/dog.xml", """
            <rtest name="dog">
              <execute> sleep 2 </execute>
            </rtest>""" )
        util.writefile( "two/circle.xml", """
            <rtest name="circle">
              <execute> sleep 3 </execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--perms g=,o=', batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            pL = util.list_all_paths( os.path.abspath( vrun.resultsDir() ) )
            for p in pL:
                assert util.has_no_group_permissions(p)
                assert util.has_no_world_permissions(p)

    def test_turn_on_group_and_world_permissions(self):
        ""
        util.writefile( "one/cat.xml", """
            <rtest name="cat">
              <execute> sleep 1 </execute>
            </rtest>""" )
        util.writefile( "one/dog.xml", """
            <rtest name="dog">
              <execute> sleep 2 </execute>
            </rtest>""" )
        util.writefile( "two/circle.xml", """
            <rtest name="circle">
              <execute> sleep 3 </execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--perms g=rws,o=rwx', batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            tdir = os.path.abspath( vrun.resultsDir() )

            dL = util.list_all_directories( tdir )
            for d in dL:
                assert util.has_group_sticky(d)
                assert util.has_group_execute(d)
                assert util.has_world_execute(d)

            # spot check a file that should have execute set
            f = os.path.join( tdir, 'one', 'dog', 'runscript' )
            assert util.has_group_execute(f) and util.has_world_execute(f)

            for p in util.list_all_paths( tdir ):
                assert util.has_group_read(p) and util.has_group_write(p)
                if util.has_owner_execute(p):
                    assert util.has_group_execute(p) and util.has_world_execute(p)


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
