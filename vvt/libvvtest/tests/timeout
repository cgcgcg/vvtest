#!/usr/bin/env python
#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import testutils as util
optD,argL = util.initialize( sys.argv )
if 'TESTUTILS_RUNDIR' not in os.environ:
    os.chdir( util.working_directory )

from testutils import *


def main():
    """
    """
    global argL

    if len(argL) == 0:
        argL = """test01 test03 test05
               """.split()

    cwd = os.getcwd()
    for func in argL:
        os.chdir( cwd )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )

        # for batch tests
        os.environ['VVTEST_BATCH_READ_INTERVAL'] = '5'
        os.environ['VVTEST_BATCH_READ_TIMEOUT'] = '15'
        os.environ['VVTEST_BATCH_SLEEP_LENGTH'] = '1'

        eval( func+'()' )


########################################################################

def test01():
    """
    excercise timeout mechanism
    """
    platname = core_platform_name()

    # sleep1 should timeout
    writefile( "sleep1.xml", '''
        <rtest name="sleep1">
          <keywords> fast </keywords>
          <execute>
        echo "sleep1 test is sleeping 10 seconds"
        sleep 10
          </execute>
          <timeout value="3"/>
        </rtest>''' )

    # sleep2 should not timeout
    writefile( "sleep2.xml", '''
        <rtest name="sleep2">
          <keywords> fast </keywords>
          <execute>
        echo "sleep2 test is sleeping 10 seconds"
        sleep 10
          </execute>
          <timeout value="3"/>
          <timeout platforms="'''+platname+'''" value="0"/>
        </rtest>''' )

    # sleep3 should not timeout
    writefile( "sleep3.xml", '''
        <rtest name="sleep3">
          <keywords> fast </keywords>
          <execute>
        echo "sleep3 test is sleeping 10 seconds"
        sleep 10
          </execute>
          <timeout value="3"/>
          <timeout platforms="'''+platname+'''" value="15"/>
        </rtest>''' )

    run_test01( '--plat '+platname )
    run_test01( '--plat '+platname+' --batch' )

def run_test01( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 1

    out,np,nd,nf,nn = run_vvtest( opt+' -wT 1.5' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 3

    out,np,nd,nf,nn = run_vvtest( opt+' -wT 20' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 0


########################################################################

def test03():
    """
    timeout mechanism with scripts
    """
    platname = core_platform_name()

    # sleep1 should timeout
    writescript( 'sleep1.vvt', """
        #!/bin/sh
        #VVT: timeout : 3
        echo "sleep1 is sleeping 10 seconds"
        sleep 10
        """ )

    # sleep2 should not timeout
    writescript( 'sleep2.vvt', """
        #!/bin/sh
        #VVT: timeout : 3
        #VVT: timeout (platforms="""+platname+"""): 0
        echo "sleep2 is sleeping 10 seconds"
        sleep 10
        """ )

    # sleep3 should not timeout
    writescript( 'sleep3.vvt', """
        #!/bin/sh
        #VVT: timeout : 3
        #VVT: timeout ( platforms = """+platname+""" ): 15
        echo "sleep3 is sleeping 10 seconds"
        sleep 10
        """ )

    run_test03( '--plat '+platname )
    run_test03( '--plat '+platname+' --batch' )

def run_test03( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 1

    out,np,nd,nf,nn = run_vvtest( opt+' -wT 1.5' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 3

    out,np,nd,nf,nn = run_vvtest( opt+' -wT 20' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 0


def test05():
    """
    excercise --max-timeout option
    """
    writescript( 'atest.vvt', """
        #!/usr/bin/env python
        import os, sys, time
        import script_util as vvt
        time.sleep(1)
        """ )
    writescript( 'btest.vvt', """
        #!/usr/bin/env python
        import os, sys, time
        import script_util as vvt
        time.sleep(8)
        """ )

    run_test05( '' )
    run_test05( '--plat '+core_platform_name()+' --batch' )

def run_test05( opt ):
    ""
    remove_results()

    out,np,nd,nf,nn = run_vvtest( opt+' -T 30' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0

    remove_results()
    out,np,nd,nf,nn = run_vvtest( opt+' --max-timeout 6' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 1

    remove_results()
    out,np,nd,nf,nn = run_vvtest( opt+' -T 30 --max-timeout 6' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 1


########################################################################

main()
