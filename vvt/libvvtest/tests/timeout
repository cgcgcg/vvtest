#!/usr/bin/env python

import os, sys
import time

# this will os.chdir() to a subdirectory
from testutils import *

def main():
    """
    """
    argL = get_arg_list()

    if len(argL) == 0:
        argL = """test01 test02 test03 test04 test05
               """.split()

    # set these for the pipeline tests
    os.environ['VVTEST_BATCH_READ_DELAY'] = '5'
    os.environ['VVTEST_BATCH_READ_DELAY_MAX'] = '15'
    os.environ['VVTEST_BATCH_SLEEP_LENGTH'] = '1'
    
    cwd = os.getcwd()
    for func in argL:
        os.chdir( cwd )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )
        eval( func+'()' )


########################################################################

def test01():
    """
    excercise timeout mechanism
    """
    writefile( "null.xml", """
        <rtest name="null">
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    platname = platform_name( out )
    print "Extracted platname =", platname


    # sleep1 should timeout
    writefile( "sleep1.xml", '''
        <rtest name="sleep1">
          <keywords> fast </keywords>
          <execute>
        echo "sleep1 test is sleeping 10 seconds"
        sleep 10
          </execute>
          <timeout value="3"/>
        </rtest>''' )

    # sleep2 should not timeout
    writefile( "sleep2.xml", '''
        <rtest name="sleep2">
          <keywords> fast </keywords>
          <execute>
        echo "sleep2 test is sleeping 10 seconds"
        sleep 10
          </execute>
          <timeout value="3"/>
          <timeout platforms="'''+platname+'''" value="0"/>
        </rtest>''' )

    # sleep3 should not timeout
    writefile( "sleep3.xml", '''
        <rtest name="sleep3">
          <keywords> fast </keywords>
          <execute>
        echo "sleep3 test is sleeping 10 seconds"
        sleep 10
          </execute>
          <timeout value="3"/>
          <timeout platforms="'''+platname+'''" value="15"/>
        </rtest>''' )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 1

    out,np,nd,nf,nn = run_vvtest( '-wT 1.5' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 3

    out,np,nd,nf,nn = run_vvtest( '-wT 20' )
    assert np == 4 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 0


def test02():
    """
    same as test02 but in batch mode
    """
    writefile( "null.xml", """
        <rtest name="null">
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )
    
    if platname in batchplatforms:
      
        # sleep1 should timeout
        writefile( "sleep1.xml", '''
            <rtest name="sleep1">
              <keywords> fast </keywords>
              <execute>
            echo "sleep1 test is sleeping 10 seconds"
            sleep 10
              </execute>
              <timeout value="3"/>
            </rtest>''' )
        
        # sleep2 should not timeout
        writefile( "sleep2.xml", '''
            <rtest name="sleep2">
              <keywords> fast </keywords>
              <execute>
            echo "sleep2 test is sleeping 10 seconds"
            sleep 10
              </execute>
              <timeout value="3"/>
              <timeout platforms="'''+platname+'''" value="0"/>
            </rtest>''' )
        
        # sleep3 should not timeout
        writefile( "sleep3.xml", '''
            <rtest name="sleep3">
              <keywords> fast </keywords>
              <execute>
            echo "sleep3 test is sleeping 10 seconds"
            sleep 10
              </execute>
              <timeout value="3"/>
              <timeout platforms="'''+platname+'''" value="15"/>
            </rtest>''' )
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        assert numtimeout(out) == 1
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline -wT 1.5' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        assert numtimeout(out) == 3
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline -wT 20' )
        assert np == 4 and nd == 0 and nf == 0 and nn == 0
        assert numtimeout(out) == 0


########################################################################

def test03():
    """
    timeout mechanism with scripts
    """
    writefile( "null.xml", """
        <rtest name="null">
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )
    os.remove( 'null.xml' )
    remove_results()


    # sleep1 should timeout
    writescript( 'sleep1.vvt', """
        #!/bin/sh
        #VVT: timeout : 3
        echo "sleep1 is sleeping 10 seconds"
        sleep 10
        """ )

    # sleep2 should not timeout
    writescript( 'sleep2.vvt', """
        #!/bin/sh
        #VVT: timeout : 3
        #VVT: timeout (platforms="""+platname+"""): 0
        echo "sleep2 is sleeping 10 seconds"
        sleep 10
        """ )

    # sleep3 should not timeout
    writescript( 'sleep3.vvt', """
        #!/bin/sh
        #VVT: timeout : 3
        #VVT: timeout ( platforms = """+platname+""" ): 15
        echo "sleep3 is sleeping 10 seconds"
        sleep 10
        """ )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 1

    out,np,nd,nf,nn = run_vvtest( '-wT 1.5' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 3

    out,np,nd,nf,nn = run_vvtest( '-wT 20' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 0


def test04():
    """
    same as test03 but in batch mode
    """
    writefile( "null.xml", """
        <rtest name="null">
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )
    os.remove( 'null.xml' )
    remove_results()


    # sleep1 should timeout
    writescript( 'sleep1.vvt', """
        #!/bin/sh
        #VVT: timeout : 3
        echo "sleep1 is sleeping 10 seconds"
        sleep 10
        """ )

    # sleep2 should not timeout
    writescript( 'sleep2.vvt', """
        #!/bin/sh
        #VVT: timeout : 3
        #VVT: timeout (platforms="""+platname+"""): 0
        echo "sleep2 is sleeping 10 seconds"
        sleep 10
        """ )

    # sleep3 should not timeout
    writescript( 'sleep3.vvt', """
        #!/bin/sh
        #VVT: timeout : 3
        #VVT: timeout ( platforms = """+platname+""" ): 15
        echo "sleep3 is sleeping 10 seconds"
        sleep 10
        """ )
    
    if platname in batchplatforms:
        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        assert numtimeout(out) == 1
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline -wT 1.5' )
        assert np == 0 and nd == 0 and nf == 0 and nn == 0
        assert numtimeout(out) == 3
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline -wT 20' )
        assert np == 3 and nd == 0 and nf == 0 and nn == 0
        assert numtimeout(out) == 0


def test05():
    """
    excercise --timeout-max option
    """
    writescript( 'atest.vvt', """
        #!/usr/bin/env python
        import os, sys, time
        import script_util as vvt
        time.sleep(1)
        """ )
    writescript( 'btest.vvt', """
        #!/usr/bin/env python
        import os, sys, time
        import script_util as vvt
        time.sleep(8)
        """ )

    out,np,nd,nf,nn = run_vvtest( '-T 30' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0

    platname = platform_name( out )
    tdir = results_dir()

    remove_results()
    out,np,nd,nf,nn = run_vvtest( '--timeout-max 6' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 1

    remove_results()
    out,np,nd,nf,nn = run_vvtest( '-T 30 --timeout-max 6' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert numtimeout(out) == 1

    if platname in batchplatforms:
        remove_results()

        out,np,nd,nf,nn = run_vvtest( '--pipeline -T 30' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0

        remove_results()
        out,np,nd,nf,nn = run_vvtest( '--pipeline --timeout-max 6' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        assert numtimeout(out) == 1

        remove_results()
        out,np,nd,nf,nn = run_vvtest( '--pipeline -T 30 --timeout-max 6' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        assert numtimeout(out) == 1


########################################################################

main()
