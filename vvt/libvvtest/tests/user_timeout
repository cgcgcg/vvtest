#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util

from libvvtest.filtering import TestFilter
from libvvtest.teststatus import TestStatusHandler


class validate_plugin_unit_tests( vtu.vvtestTestCase ):

    def test_a_timeout_plugin_function(self):
        ""
        plug = vtu.make_user_plugin( """
            def test_timeout( specs ):
                ""
                timeout = specs['timeout']
                if timeout == None: return 10
                elif timeout == 20: return 30
                else: return None
            """ )

        tspec = vtu.make_fake_TestSpec( TestStatusHandler() )
        assert plug.testTimeout( tspec ) == 10

        tspec.setTimeout( 20 )
        assert plug.testTimeout( tspec ) == 30

        tspec.setTimeout( 40 )
        assert plug.testTimeout( tspec ) == None

    def test_a_timeout_function_that_fails_with_an_exception(self):
        ""
        plug = vtu.make_user_plugin( """
            def test_timeout( specs ):
                raise Exception( 'fake exception' )
            """ )

        tspec = vtu.make_fake_TestSpec( TestStatusHandler() )
        rtn, out, err = util.call_capture_output( plug.testTimeout, tspec )
        assert rtn == None
        assert 'Exception' in out and 'fake exception' in out
        assert 'Traceback' in out

        # multiple exceptions are not printed (uniquified by exception string)
        tspec = vtu.make_fake_TestSpec( TestStatusHandler(), name='btest' )
        rtn, out, err = util.call_capture_output( plug.testTimeout, tspec )
        assert rtn == None
        assert 'Exception' not in out and 'fake exception' not in out
        assert 'Traceback' not in out

    def test_an_error_if_timeout_function_returns_a_string(self):
        ""
        plug = vtu.make_user_plugin( """
            def test_timeout( specs ):
                return 'abc'
            """ )

        tspec = vtu.make_fake_TestSpec( TestStatusHandler() )
        rtn, out, err = util.call_capture_output( plug.testTimeout, tspec )
        assert rtn == None
        assert 'Traceback' in out

    def test_a_negative_timeout_is_changed_to_zero(self):
        ""
        plug = vtu.make_user_plugin( """
            def test_timeout( specs ):
                return -1
            """ )

        tspec = vtu.make_fake_TestSpec( TestStatusHandler() )
        rtn, out, err = util.call_capture_output( plug.testTimeout, tspec )
        assert rtn == 0
        assert 'Traceback' not in out


class timeout_plugin_integration_tests( vtu.vvtestTestCase ):

    def test_changing_test_timeouts(self):
        ""
        util.writefile( 'tlong.vvt', """
            #VVT: keywords = long
            #VVT: timeout = 5000
            import os
            print ( 'TIMEOUT = '+os.environ['VVTEST_TIMEOUT'] )
            """ )
        util.writefile( 'tfast.vvt', """
            #VVT: keywords = fast
            #VVT: timeout = 500
            import os
            print ( 'TIMEOUT = '+os.environ['VVTEST_TIMEOUT'] )
            """ )
        util.writefile( 'tmedium.vvt', """
            #VVT: keywords = medium
            import os
            print ( 'TIMEOUT = '+os.environ['VVTEST_TIMEOUT'] )
            """ )
        util.writefile( 'adir/vvtest_user_plugin.py', """
            def test_timeout( specs ):
                ""
                plat = specs['platform']
                keys = specs['keywords']
                timeout = specs['timeout']
                if 'long' in keys: return 4*timeout
                if 'fast' in keys: return None
                if 'medium' in keys:
                    if timeout == None:
                        return 10000
                    return 1
            """ )
        adir = os.path.abspath( 'adir' )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--config', adir, batch=batch )
            vrun.assertCounts( total=3, npass=3 )
            tm = parse_timeout( vrun.greplogs( 'TIMEOUT', 'long' )[0] )
            assert tm >= 20000 and tm < 30000
            tm = parse_timeout( vrun.greplogs( 'TIMEOUT', 'medium' )[0]  )
            assert tm >= 10000 and tm < 15000
            tm = parse_timeout( vrun.greplogs( 'TIMEOUT', 'fast' )[0]  )
            assert tm >= 500 and tm < 1000

    def test_the_timeout_takes_effect_on_restarts(self):
        ""
        util.writefile( 'atest.vvt', """
            import time
            time.sleep(5)
            """ )
        time.sleep(1)

        adir = os.path.abspath( 'adir' )

        for batch in [False,True]:

            vtu.remove_results()

            util.writefile( 'adir/vvtest_user_plugin.py', """
                def test_timeout( specs ):
                    return 2
                """ )
            time.sleep(1)

            vrun = vtu.runvvtest( '--config', adir, batch=batch )
            vrun.assertCounts( total=1, timeout=1 )

            util.writefile( 'adir/vvtest_user_plugin.py', """
                def test_timeout( specs ):
                    return 10
                """ )
            time.sleep(1)

            vrun = vtu.runvvtest( '-R --config', adir, batch=batch )
            vrun.assertCounts( total=1, npass=1 )


def parse_timeout( timeout_string ):
    ""
    return int( timeout_string.split( '=', 1 )[1] )


############################################################################

util.run_test_cases(sys.argv, sys.modules[__name__])
