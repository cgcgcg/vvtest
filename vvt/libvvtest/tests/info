#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import unittest

import testutils as util
from testutils import print3


class info_tests( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_obtaining_keywords_and_test_files(self):
        ""
        util.writefile( "param.xml", """
            <rtest name="param">
              <parameterize hello="world mars"/>
              <execute> <![CDATA[
            sleep 1
            echo "parm=$hello"
            ]]>
              </execute>
            </rtest>""" )

        util.writefile( "FailTest.xml", """
            <rtest name="FailTest">
              <execute> <![CDATA[
            sleep 1
            echo "Exiting with failure status"
            exit 1
            ]]>
              </execute>
            </rtest>""")

        util.writefile( "DiffTest.xml", """
            <rtest name="DiffTest">
              <execute> <![CDATA[
            sleep 1
            echo "Exiting with diff status"
            set have_diff = yes
            ]]>
              </execute>
            </rtest>""")

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 2 and nd == 1 and nf == 1 and nn == 0
        assert len( util.testlist(out) ) == 4, "expected 4 tests to have run"
        out,np,nd,nf,nn = util.run_vvtest( '-i' )
        assert np == 2 and nd == 1 and nf == 1 and nn == 0
        assert len( util.testlist(out) ) == 4, "expected 4 tests to have run"

        # cd into the run directory and check the -i output
        saved = os.getcwd()
        os.chdir( util.results_dir() )
        out,np,nd,nf,nn = util.run_vvtest( '-i' )
        assert np == 2 and nd == 1 and nf == 1 and nn == 0
        assert len( util.testlist(out) ) == 4, "expected 4 tests to have run"
        os.chdir(saved)

        util.remove_results()

        # again but with a build option

        out,np,nd,nf,nn = util.run_vvtest( '-o dbg' )
        assert np == 2 and nd == 1 and nf == 1 and nn == 0
        assert len( util.testlist(out) ) == 4, "expected 4 tests to have run"

        os.chdir( util.results_dir() )
        out,np,nd,nf,nn = util.run_vvtest( '-i' )
        assert np == 2 and nd == 1 and nf == 1 and nn == 0
        assert len( util.testlist(out) ) == 4, "expected 4 tests to have run"
        os.chdir(saved)

        util.remove_results()

        util.writefile( 'keys.xml', """
              <rtest name="keys">
                <keywords> hello world </keywords>
              </rtest>
            """ )

        util.writefile( 'sdir/skeys.xml', """
              <rtest name="skeys">
                <keywords> mars jupiter fast </keywords>
              </rtest>
            """ )

        rootd = os.getcwd()

        out,np,nd,nf,nn = util.run_vvtest( '--keys' )
        L = extract_keywords(out)
        print3( "keywords", L )
        assert L == ['fast', 'hello', 'jupiter', 'mars', 'world']

        out,np,nd,nf,nn = util.run_vvtest( '--files' )
        L = extract_files(out, rootd)
        print3( "files", L )
        assert L == [ 'DiffTest.xml', 'FailTest.xml', 'keys.xml', \
                      'param.xml', 'sdir/skeys.xml']

        out,np,nd,nf,nn = util.run_vvtest( '-k fast --files' )
        L = extract_files(out, rootd)
        print3( "files", L )
        assert L == [ 'sdir/skeys.xml']

        out,np,nd,nf,nn = util.run_vvtest( '-K fast -K medium -K long --files' )
        L = extract_files(out, rootd)
        print3( "files", L )
        assert L == [ 'DiffTest.xml', 'FailTest.xml', 'keys.xml', 'param.xml']

        out,np,nd,nf,nn = util.run_vvtest()
        out,np,nd,nf,nn = util.run_vvtest( '-R --keys' )
        L = extract_keywords(out)
        print3( "keywords", L )
        assert L == ['fast', 'hello', 'jupiter', 'mars', 'world']

        out,np,nd,nf,nn = util.run_vvtest( '-i --keys' )
        L = extract_keywords(out)
        print3( "keywords", L )
        assert L == ['fast', 'hello', 'jupiter', 'mars', 'world']

        out,np,nd,nf,nn = util.run_vvtest( '-i --files' )
        L = extract_files(out, rootd)
        print3( "files", L )
        assert L == [ 'DiffTest.xml', 'FailTest.xml', 'keys.xml', \
                      'param.xml', 'sdir/skeys.xml']

        os.chdir( util.results_dir() )

        out,np,nd,nf,nn = util.run_vvtest( '-R --keys' )
        L = extract_keywords(out)
        print3( "keywords", L )
        assert L == ['fast', 'hello', 'jupiter', 'mars', 'world']

        out,np,nd,nf,nn = util.run_vvtest( '-i --keys' )
        L = extract_keywords(out)
        print3( "keywords", L )
        assert L == ['fast', 'hello', 'jupiter', 'mars', 'world']

        out,np,nd,nf,nn = util.run_vvtest( '-i --files' )
        L = extract_files(out, rootd)
        print3( "files", L )
        assert L == [ 'DiffTest.xml', 'FailTest.xml', 'keys.xml', \
                      'param.xml', 'sdir/skeys.xml']

        os.chdir( 'sdir' )

        out,np,nd,nf,nn = util.run_vvtest( '-i' )
        assert np+nd+nf == 1

        out,np,nd,nf,nn = util.run_vvtest( '-R --keys' )
        L = extract_keywords(out)
        print3( "keywords", L )
        assert L == ['fast', 'jupiter', 'mars']

        out,np,nd,nf,nn = util.run_vvtest( '-i --keys' )
        L = extract_keywords(out)
        print3( "keywords", L )
        assert L == ['fast', 'jupiter', 'mars']

        out,np,nd,nf,nn = util.run_vvtest( '-i --files' )
        L = extract_files(out, rootd)
        print3( "files", L )
        assert L == ['sdir/skeys.xml']

    def test_sorting_the_test_listing(self):
        ""
        util.writefile( "one/zebra.xml", """
            <rtest name="zebra">
              <execute>
                sleep 1
                exit 1
              </execute>
            </rtest>""" )
        util.writefile( "one/marmot.xml", """
            <rtest name="marmot">
              <execute>
                sleep 3
                set have_diff=yes
              </execute>
            </rtest>""" )
        util.writefile( "two/ardvark.xml", """
            <rtest name="ardvark">
              <execute>
                sleep 5
              </execute>
            </rtest>""" )
        util.writefile( "two/otter.xml", """
            <rtest name="otter">
              <execute>
                sleep 20
              </execute>
            </rtest>""" )

        out,np,nd,nf,nn = util.run_vvtest( '-T 10 -n 1' )
        assert np == 1 and nd == 1 and nf == 1 and nn == 0
        tdir = os.path.abspath( util.results_dir() )

        L = util.greptestlist( out, 'TestResults' )
        assert len(L) == 4
        assert [ s.split()[0] for s in L ] == ['ardvark','marmot','otter','zebra']

        out,np,nd,nf,nn = util.run_vvtest( '-i', directory=tdir )
        L = util.testlines( out )
        assert [ s.split()[0] for s in L ] == ['ardvark','marmot','otter','zebra']

        out,np,nd,nf,nn = util.run_vvtest( '-i --sort nx', directory=tdir )
        L = util.testlines( out )
        assert [ s.split()[0] for s in L ] == ['ardvark','marmot','otter','zebra']

        out,np,nd,nf,nn = util.run_vvtest( '-i --sort x', directory=tdir )
        L = util.testlines( out )
        assert [ s.split()[0] for s in L ] == ['marmot','zebra','ardvark','otter']

        out,np,nd,nf,nn = util.run_vvtest( '-i --sort t', directory=tdir )
        L = util.testlines( out )
        assert [ s.split()[0] for s in L ] == ['zebra','marmot','ardvark','otter']

        out,np,nd,nf,nn = util.run_vvtest( '-i --sort sr', directory=tdir )
        L = util.testlines( out )
        assert [ s.split()[0] for s in L ] == ['otter','ardvark','zebra','marmot']

        out,np,nd,nf,nn = util.run_vvtest( '-i --sort d', directory=tdir )
        L = util.testlines( out )
        # just make sure the dates are sorted in ascending order
        L2 = [ line.split()[4]+' '+line.split()[5] for line in L ]
        L3 = [] + L2
        L3.sort()
        assert L2 == L3

    def test_using_the_files_option_with_a_multi_test_xml_file(self):
        ""
        util.writefile( "multi.xml", """
            <rtest name="zebra">
              <rtest name="horse"/>
              <keywords testname="zebra"> stripes </keywords>
              <keywords testname="horse"> patchwork </keywords>
              <execute> echo "hello world" </execute>
            </rtest>""" )

        cwd = os.getcwd()

        out,np,nd,nf,nn = util.run_vvtest( '--files' )
        L = extract_files( out, cwd )
        print3( "files", L )
        assert len(L) == 1

        out,np,nd,nf,nn = util.run_vvtest( '--files -k stripes' )
        L = extract_files( out, cwd )
        print3( "files", L )
        assert len(L) == 1

        out,np,nd,nf,nn = util.run_vvtest( '--files -k patchwork' )
        L = extract_files( out, cwd )
        print3( "files", L )
        assert len(L) == 1

        out,np,nd,nf,nn = util.run_vvtest( '--files -k stripes -k patchwork' )
        L = extract_files( out, cwd )
        print3( "files", L )
        assert len(L) == 0

    def test_using_the_files_option_with_a_multi_test_script_file(self):
        ""
        util.writescript( "multi.vvt", """
            #!/bin/sh
            #VVT: name = zebra
            #VVT: name = horse
            #VVT: keywords (testname=zebra) : stripes
            #VVT: keywords (testname=horse) : patchwork
            echo "hello world"
            """ )

        cwd = os.getcwd()

        out,np,nd,nf,nn = util.run_vvtest( '--files' )
        L = extract_files( out, cwd )
        print3( "files", L )
        assert len(L) == 1

        out,np,nd,nf,nn = util.run_vvtest( '--files -k stripes' )
        L = extract_files( out, cwd )
        print3( "files", L )
        assert len(L) == 1

        out,np,nd,nf,nn = util.run_vvtest( '--files -k patchwork' )
        L = extract_files( out, cwd )
        print3( "files", L )
        assert len(L) == 1

        out,np,nd,nf,nn = util.run_vvtest( '--files -k stripes -k patchwork' )
        L = extract_files( out, cwd )
        print3( "files", L )
        assert len(L) == 0

    def test_using_files_option_should_apply_max_processors_filtering(self):
        ""
        util.writescript( "null.vvt", """
            #!/bin/sh
            echo "null"
            """ )
        out,np,nd,nf,nn = util.run_vvtest()
        platname = util.platform_name( out )
        tdir = util.results_dir()
        os.remove( 'null.vvt' )
        L = util.grep( out, 'max procs' )
        assert len(L) == 1
        maxprocs = L[0].split( 'max procs', 1 )[1].strip().lstrip('=').strip()
        maxprocs = int( maxprocs )
        assert maxprocs > 0
        util.remove_results()

        util.writescript( 'atest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np=1
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'btest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np="""+str(maxprocs)+"""
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'ctest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np="""+str(maxprocs+1)+"""
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'dtest.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : np="""+str(maxprocs+2)+"""
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )

        rootd = os.getcwd()

        out,np,nd,nf,nn = util.run_vvtest( '--files' )
        L = extract_files( out, rootd )
        print3( "files", L )
        assert L == [ 'atest.vvt', 'btest.vvt']

    def test_producing_a_JUnit_results_file(self):
        ""
        util.writefile( "subdir/param.xml", """
            <rtest name="param">
              <parameterize hello="world mars"/>
              <execute> <![CDATA[
            sleep 1
            echo "parm=$hello"
            ]]>
              </execute>
            </rtest>""" )

        util.writefile( "FailTest.xml", """
            <rtest name="FailTest">
              <execute> <![CDATA[
            sleep 1
            echo "Exiting with failure status"
            exit 1
            ]]>
              </execute>
            </rtest>""")

        util.writefile( "DiffTest.xml", """
            <rtest name="DiffTest">
              <parameterize np="1 2"/>
              <execute> <![CDATA[
            sleep 1
            echo "Exiting with diff status"
            set have_diff = yes
            ]]>
              </execute>
            </rtest>""")

        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 2 and nd == 2 and nf == 1 and nn == 0
        assert len( util.testlist(out) ) == 5, "expected 5 tests to have run"

        # cd into the run directory and produce the JUnit XML file
        saved = os.getcwd()
        os.chdir( util.results_dir() )
        util.run_vvtest( '-i --junit=../ju.xml' )
        os.chdir(saved)
        assert len( util.filegrep( 'ju.xml', '<testcase ' ) ) == 5


############################################################################

def extract_keywords( out ):
    start = False
    kL = []
    for line in out.split( '\n' ):
      if start:
        kL.extend( line.split() )
      elif line.strip()[:14] == 'test keywords:':
        start = True
    D = {}
    for k in kL:
      D[k] = None
    L = list( D.keys() )
    L.sort()
    return L

def extract_files( out, rootd ):
    D = {}
    for line in out.split( '\n' ):
      line = line.strip()
      if line and line[0] == '/':
        D[line] = None
    fL = list( D.keys() )
    lend = len(rootd)
    for i in range(len(fL)):
      fL[i] = fL[i][lend+1:]
    fL.sort()
    return fL


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
