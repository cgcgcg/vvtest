#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3


class info_tests( vtu.vvtestTestCase ):

    def test_obtaining_keywords_and_test_files(self):
        ""
        util.writefile( "param.xml", """
            <rtest name="param">
              <parameterize hello="world mars"/>
              <execute>
                sleep 1
                echo "parm=$hello"
              </execute>
            </rtest>""" )
        util.writefile( "FailTest.xml", """
            <rtest name="FailTest">
              <execute>
                sleep 1
                echo "Exiting with failure status"
                exit 1
              </execute>
            </rtest>""")
        util.writefile( "DiffTest.xml", """
            <rtest name="DiffTest">
              <execute>
                sleep 1
                echo "Exiting with diff status"
                set have_diff = yes
              </execute>
            </rtest>""")
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=4, npass=2, diff=1, fail=1 )
        tdir = vrun.resultsDir()

        vrun = vtu.runvvtest( '-i' )
        vrun.assertCounts( total=4, npass=2, diff=1, fail=1 )

        # cd into the run directory and check the -i output
        vrun = vtu.runvvtest( '-i', chdir=tdir )
        vrun.assertCounts( total=4, npass=2, diff=1, fail=1 )

        vtu.remove_results()

        # again but with a build option

        vrun = vtu.runvvtest( '-o dbg' )
        vrun.assertCounts( total=4, npass=2, diff=1, fail=1 )
        tdir = vrun.resultsDir()

        vrun = vtu.runvvtest( '-i', chdir=tdir )
        vrun.assertCounts( total=4, npass=2, diff=1, fail=1 )

        vtu.remove_results()

        util.writefile( 'keys.xml', """
              <rtest name="keys">
                <keywords> hello world </keywords>
              </rtest>
            """ )
        util.writefile( 'sdir/skeys.xml', """
              <rtest name="skeys">
                <keywords> mars jupiter fast </keywords>
              </rtest>
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '--keys' )
        assert_keywords( vrun, ['fast', 'hello', 'jupiter', 'mars', 'world'] )

        vrun = vtu.runvvtest( '--files' )
        assert_files( vrun, [ 'DiffTest.xml', 'FailTest.xml', 'keys.xml',
                              'param.xml', 'sdir/skeys.xml' ] )

        vrun = vtu.runvvtest( '-k fast --files' )
        assert_files( vrun, [ 'sdir/skeys.xml'] )

        vrun = vtu.runvvtest( '-K fast -K medium -K long --files' )
        assert_files( vrun, [ 'DiffTest.xml', 'FailTest.xml',
                              'keys.xml', 'param.xml'] )

        vrun = vtu.runvvtest()
        tdir = vrun.resultsDir()

        vrun = vtu.runvvtest( '-R --keys' )
        assert_keywords( vrun, ['fast', 'hello', 'jupiter', 'mars', 'world'] )

        vrun = vtu.runvvtest( '-i --keys' )
        assert_keywords( vrun, ['fast', 'hello', 'jupiter', 'mars', 'world'] )

        vrun = vtu.runvvtest( '-i --files' )
        assert_files( vrun, [ 'DiffTest.xml', 'FailTest.xml', 'keys.xml',
                              'param.xml', 'sdir/skeys.xml'] )

        vrun = vtu.runvvtest( '-R --keys', chdir=tdir )
        assert_keywords( vrun, ['fast', 'hello', 'jupiter', 'mars', 'world'] )

        vrun = vtu.runvvtest( '-i --keys', chdir=tdir )
        assert_keywords( vrun, ['fast', 'hello', 'jupiter', 'mars', 'world'] )

        vrun = vtu.runvvtest( '-i --files', chdir=tdir )
        assert_files( vrun, [ 'DiffTest.xml', 'FailTest.xml', 'keys.xml',
                              'param.xml', 'sdir/skeys.xml'] )

        vtu.runvvtest( '-i', chdir=tdir ).assertCounts( total=6 )
        vrun = vtu.runvvtest( '-i', chdir=tdir+'/sdir' )
        vrun.assertCounts( total=1 )
        assert vrun.countTestLines( ' skeys' ) == 1

        vrun = vtu.runvvtest( '-R --keys', chdir=tdir+'/sdir' )
        assert_keywords( vrun, ['fast', 'jupiter', 'mars'] )

        vrun = vtu.runvvtest( '-i --keys', chdir=tdir+'/sdir' )
        assert_keywords( vrun, ['fast', 'jupiter', 'mars'] )

        vrun = vtu.runvvtest( '-i --files', chdir=tdir+'/sdir' )
        assert_files( vrun, [ 'sdir/skeys.xml'] )

    def test_command_line_keyword_dump_does_not_include_parameters(self):
        ""
        util.writefile( 'keys.vvt', """
              #VVT: keywords = jupiter mars
              #VVT: parameterize : np = 1 4
              pass
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '--keys' )
        assert_keywords( vrun, ['jupiter', 'mars'] )

    def test_sorting_the_test_listing(self):
        ""
        util.writefile( "one/zebra.xml", """
            <rtest name="zebra">
              <execute>
                sleep 1
                exit 1
              </execute>
            </rtest>""" )
        util.writefile( "one/marmot.xml", """
            <rtest name="marmot">
              <execute>
                sleep 3
                set have_diff=yes
              </execute>
            </rtest>""" )
        util.writefile( "two/ardvark.xml", """
            <rtest name="ardvark">
              <execute>
                sleep 5
              </execute>
            </rtest>""" )
        util.writefile( "two/otter.xml", """
            <rtest name="otter">
              <execute>
                sleep 20
              </execute>
            </rtest>""" )
        time.sleep(1)

        vrun = vtu.runvvtest( '-T 10 -n 1' )
        vrun.assertCounts( total=4, npass=1, diff=1, fail=1, timeout=1 )

        finL = vrun.grepLines( 'Finished: ' )
        assert len(finL) == 4
        xorder = [ line.split()[1] for line in finL ]
        for nam in ['ardvark','marmot','otter','zebra']:
            assert nam in xorder

        tdir = vrun.resultsDir()

        vrun = vtu.runvvtest( '-i', chdir=tdir )
        assert test_names( vrun ) == ['ardvark','marmot','otter','zebra']

        vrun = vtu.runvvtest( '-i --sort nx', chdir=tdir )
        assert test_names( vrun ) == ['ardvark','marmot','otter','zebra']

        vrun = vtu.runvvtest( '-i --sort x', chdir=tdir )
        assert test_names( vrun ) == ['marmot','zebra','ardvark','otter']

        vrun = vtu.runvvtest( '-i --sort t', chdir=tdir )
        assert test_names( vrun ) == ['zebra','marmot','ardvark','otter']

        vrun = vtu.runvvtest( '-i --sort sr', chdir=tdir )
        assert test_names( vrun ) == ['otter','ardvark','zebra','marmot']

        vrun = vtu.runvvtest( '-i --sort d', chdir=tdir )
        assert test_names( vrun ) == xorder

    def test_using_the_files_option_with_a_multi_test_xml_file(self):
        ""
        util.writefile( "multi.xml", """
            <rtest name="zebra">
              <rtest name="horse"/>
              <keywords testname="zebra"> stripes </keywords>
              <keywords testname="horse"> patchwork </keywords>
              <execute> echo "hello world" </execute>
            </rtest>""" )
        time.sleep(1)

        vrun = vtu.runvvtest( '--files' )
        assert_files( vrun, [ 'multi.xml'] )

        vrun = vtu.runvvtest( '--files -k stripes' )
        assert_files( vrun, [ 'multi.xml'] )

        vrun = vtu.runvvtest( '--files -k patchwork' )
        assert_files( vrun, [ 'multi.xml'] )

        vrun = vtu.runvvtest( '--files -k stripes -k patchwork' )
        assert_files( vrun, [] )

    def test_using_the_files_option_with_a_multi_test_script_file(self):
        ""
        util.writescript( "multi.vvt", """
            #!/bin/sh
            #VVT: name = zebra
            #VVT: name = horse
            #VVT: keywords (testname=zebra) : stripes
            #VVT: keywords (testname=horse) : patchwork
            echo "hello world"
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '--files' )
        assert_files( vrun, [ 'multi.vvt'] )

        vrun = vtu.runvvtest( '--files -k stripes' )
        assert_files( vrun, [ 'multi.vvt'] )

        vrun = vtu.runvvtest( '--files -k patchwork' )
        assert_files( vrun, [ 'multi.vvt'] )

        vrun = vtu.runvvtest( '--files -k stripes -k patchwork' )
        assert_files( vrun, [] )

    def test_using_files_option_should_apply_max_processors_filtering(self):
        ""
        maxprocs = 4

        util.writescript( 'atest.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : np=1
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'btest.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : np="""+str(maxprocs)+"""
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'ctest.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : np="""+str(maxprocs+1)+"""
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.writescript( 'dtest.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : np="""+str(maxprocs+2)+"""
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )

        vrun = vtu.runvvtest( '-N '+str(maxprocs)+' --files' )
        assert_files( vrun, [ 'atest.vvt', 'btest.vvt' ] )


############################################################################

def assert_keywords( vrun, keywordlist ):
    ""
    kL = extract_keywords( vrun.out )
    assert kL == keywordlist


def assert_files( vrun, relative_filenames ):
    ""
    fL = extract_files( vrun.out, os.getcwd() )
    assert fL == relative_filenames


def test_names( vrun ):
    ""
    nameL = []
    for line in vtu.extract_testlines( vrun.out ):
        nameL.append( line.split()[0] )
    return nameL


def extract_keywords( out ):
    ""
    start = False
    kL = []
    for line in out.split( '\n' ):
        if start:
            kL.extend( line.split() )
        elif line.strip()[:14] == 'test keywords:':
            start = True

    D = {}
    for k in kL:
        D[k] = None

    L = list( D.keys() )
    L.sort()

    return L


def extract_files( out, rootd ):
    ""
    D = {}
    for line in out.split( '\n' ):
        line = line.strip()
        if line and line[0] == '/':
            D[line] = None
    fL = list( D.keys() )

    lend = len(rootd)
    for i in range(len(fL)):
        fL[i] = fL[i][lend+1:]

    fL.sort()

    return fL


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
