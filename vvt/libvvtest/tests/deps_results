#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import glob
import unittest
import time

import testutils as util
from testutils import print3

import TestSpecCreator as creator
from RuntimeConfig import RuntimeConfig
from TestSpec import TestSpec


class dependency_result_expressions( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_by_default_failed_dependencies_stop_execution(self):
        ""
        util.writescript( 'testX.vvt', """
            #!/usr/bin/env python
            #VVT: depends on : testY
            import os, sys, time
            sys.stdout.write( 'time='+str(time.time())+os.linesep )
            """ )
        util.writescript( 'testY.vvt', """
            #!/usr/bin/env python
            import os, sys, time
            raise Exception( 'fake exception' )
            """ )
        time.sleep(1)

        self.by_default_failed_dependencies_stop_execution( '' )
        self.by_default_failed_dependencies_stop_execution(
                '--plat '+util.core_platform_name()+' --batch' )

    def by_default_failed_dependencies_stop_execution(self, opt):
        ""
        util.remove_results()

        vrun = util.vvtestRunner( opt+' -N 4' )

        assert vrun.num_fail == 1 and vrun.num_notrun == 1
        pat = os.path.join( vrun.testdir, 'testX', 'execute.log' )
        assert len( glob.glob( pat ) ) == 0

    def test_allow_dependent_to_run_even_if_dependency_fails(self):
        ""
        util.writescript( 'testX.vvt', """
            #!/usr/bin/env python
            #VVT: depends on (result="pass or diff or fail"): testY
            import os, sys, time
            sys.stdout.write( 'time='+str(time.time())+os.linesep )
            """ )
        util.writescript( 'testY.vvt', """
            #!/usr/bin/env python
            import os, sys, time
            raise Exception( 'fake exception' )
            """ )
        time.sleep(1)

        self.allow_dependent_to_run_even_if_dependency_fails( '' )
        self.allow_dependent_to_run_even_if_dependency_fails(
                '--plat '+util.core_platform_name()+' --batch' )

    def allow_dependent_to_run_even_if_dependency_fails(self, opt):
        ""
        util.remove_results()

        vrun = util.vvtestRunner( opt+' -N 4' )

        assert vrun.num_fail == 1 and vrun.num_pass == 1
        pat = os.path.join( vrun.testdir, 'testX', 'execute.log' )
        fL = glob.glob( pat )
        assert len( fL ) == 1
        assert len( util.filegrep( fL[0], 'time=' ) ) == 1

    def test_use_wildcard_value_to_ignore_dependency_result(self):
        ""
        util.writescript( 'testX.vvt', """
            #!/usr/bin/env python
            #VVT: depends on (result="*"): testY
            import os, sys, time
            sys.stdout.write( 'time='+str(time.time())+os.linesep )
            """ )
        util.writescript( 'testY.vvt', """
            #!/usr/bin/env python
            import os, sys, time
            raise Exception( 'fake exception' )
            """ )
        time.sleep(1)

        self.use_wildcard_value_to_ignore_dependency_result( '' )
        self.use_wildcard_value_to_ignore_dependency_result(
                '--plat '+util.core_platform_name()+' --batch' )

    def use_wildcard_value_to_ignore_dependency_result(self, opt):
        ""
        util.remove_results()

        vrun = util.vvtestRunner( opt+' -N 4' )

        assert vrun.num_fail == 1 and vrun.num_pass == 1
        pat = os.path.join( vrun.testdir, 'testX', 'execute.log' )
        fL = glob.glob( pat )
        assert len( fL ) == 1
        assert len( util.filegrep( fL[0], 'time=' ) ) == 1


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
