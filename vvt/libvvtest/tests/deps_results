#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import glob
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.TestSpecCreator as creator
from libvvtest.RuntimeConfig import RuntimeConfig
from libvvtest.TestSpec import TestSpec


class dependency_result_expressions( vtu.vvtestTestCase ):

    def test_by_default_failed_dependencies_stop_execution(self):
        ""
        util.writescript( 'testX.vvt', """
            #!"""+sys.executable+"""
            #VVT: depends on : testY
            import os, sys, time
            sys.stdout.write( 'time='+str(time.time())+os.linesep )
            """ )
        util.writescript( 'testY.vvt', """
            #!"""+sys.executable+"""
            import os, sys, time
            raise Exception( 'fake exception' )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, fail=1, notrun=1 )

            assert len( glob.glob( 'TestResults*/testX/execute.log' ) ) == 0

    def test_allow_dependent_to_run_even_if_dependency_fails(self):
        ""
        util.writescript( 'testX.vvt', """
            #!"""+sys.executable+"""
            #VVT: depends on (result="pass or diff or fail"): testY
            import os, sys, time
            sys.stdout.write( 'time='+str(time.time())+os.linesep )
            """ )
        util.writescript( 'testY.vvt', """
            #!"""+sys.executable+"""
            import os, sys, time
            raise Exception( 'fake exception' )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, npass=1, fail=1 )

            lineL = util.grepfiles( 'time=', 'TestResults*/testX/execute.log' )
            assert len( lineL ) == 1

    def test_use_wildcard_value_to_ignore_dependency_result(self):
        ""
        util.writescript( 'testX.vvt', """
            #!"""+sys.executable+"""
            #VVT: depends on (result="*"): testY
            import os, sys, time
            sys.stdout.write( 'time='+str(time.time())+os.linesep )
            """ )
        util.writescript( 'testY.vvt', """
            #!"""+sys.executable+"""
            import os, sys, time
            raise Exception( 'fake exception' )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, npass=1, fail=1 )

            lineL = util.grepfiles( 'time=', 'TestResults*/testX/execute.log' )
            assert len( lineL ) == 1


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
