#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
from os.path import getsize as getfsize

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.outpututils as outpututils


class misc_tests( vtu.vvtestTestCase ):

    def test_make_date_stamp(self):
        ""
        tm0 = time.mktime( time.strptime( 'Sun Oct 11 13:20:58 2018' ) )
        tm1 = tm0 - 600

        s = outpututils.make_date_stamp( tm0, None )
        assert s == '2018_10_11'

        s = outpututils.make_date_stamp( tm0, None, "%Y-%m-%d_%H:%M:%S" )
        assert s == '2018-10-11_13:20:58'

        s = outpututils.make_date_stamp( tm0, 'foobar' )
        assert s == 'foobar'

        s = outpututils.make_date_stamp( tm0, tm1, "%Y-%m-%d_%H:%M:%S" )
        assert s == '2018-10-11_13:10:58'

    def test_pretty_time(self):
        ""
        assert outpututils.pretty_time( 0 ) == '1s'
        assert outpututils.pretty_time( 1 ) == '1s'
        assert outpututils.pretty_time( 5.2 ) == '5s'
        assert outpututils.pretty_time( 67.3 ) == '1m 7s'
        assert outpututils.pretty_time( 3*60*60 + 67.3 ) == '3h 1m 7s'

    def test_colon_separated_time(self):
        ""
        assert outpututils.colon_separated_time( 0 ) == '0:00'
        assert outpututils.colon_separated_time( 1 ) == '0:01'
        assert outpututils.colon_separated_time( 5.2 ) == '0:05'
        assert outpututils.colon_separated_time( 67.3 ) == '1:07'
        assert outpututils.colon_separated_time( 3*60*60 + 67.3 ) == '3:01:07'
        assert outpututils.colon_separated_time( 30*60*60 + 67.3 ) == '30:01:07'

    def test_reading_file_with_size_limit(self):
        ""
        util.writefile( 'afile.txt', """
            line one is number one
            line two is last one wins
            """ )
        time.sleep(1)

        buf = outpututils.file_read_with_limit( 'afile.txt', 10 )
        assert len( buf.splitlines() ) > 2
        assert len( util.greplines( 'line one', buf ) ) == 1
        assert len( util.greplines( 'line two', buf ) ) == 1

    def test_reading_a_file_that_has_its_middle_taken_out(self):
        ""
        line = 'All work and no play makes Jack a dull boy.\n'
        with open( 'afile.txt', 'w' ) as fp:
            fp.write( 'The Overlook Hotel.\n' )
            fp.write( line * 10000 )
            fp.write( 'REDRUM!  REDRUM!\n' )
        time.sleep(1)

        assert getfsize( 'afile.txt' ) > 1*1024
        buf = outpututils.file_read_with_limit( 'afile.txt', 1 )
        assert len( buf ) <= 1*1024
        assert len( buf.splitlines() ) > 10
        assert buf.lstrip().startswith( 'The Overlook Hotel' )
        assert buf.rstrip().endswith( 'REDRUM!  REDRUM!' )
        assert len( util.greplines(
                        'middle of this file has been removed', buf ) ) == 1


class html_output_format_tests( vtu.vvtestTestCase ):

    def test_producing_an_HTML_results_file(self):
        ""
        write_three_test_files()
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )

        vrun = vtu.runvvtest( '-i --html=../tr.htm', chdir=vrun.resultsDir() )
        time.sleep(1)

        doc = util.read_xml_file( 'tr.htm' )
        lines = get_status_lines_from_html( doc )
        self.assert_tests_in_html( lines )

    def assert_tests_in_html(self, lines):
        ""
        assert len( lines ) == 5
        linestr = ' '.join(lines)
        assert len( util.greplines( 'FailTest', linestr ) ) == 1
        assert len( util.greplines( 'DiffTest.np=1', linestr ) ) == 1
        assert len( util.greplines( 'DiffTest.np=2', linestr ) ) == 1
        assert len( util.greplines( 'subdir/param.hello=mars', linestr ) ) == 1
        assert len( util.greplines( 'subdir/param.hello=world', linestr ) ) == 1

    def test_producing_an_HTML_results_file_as_part_of_execution(self):
        ""
        write_three_test_files()
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--html tr.html' )
            vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )
            time.sleep(1)

            doc = util.read_xml_file( 'tr.html' )
            lines = get_status_lines_from_html( doc )
            self.assert_tests_in_html( lines )


def write_three_test_files():
    ""
    util.writefile( "subdir/param.vvt", """
        #VVT: parameterize : hello = world mars
        import time
        time.sleep(1)
        """ )
    util.writefile( "FailTest.vvt", """
        import os, sys, time
        import vvtest_util as vvt
        time.sleep(2)
        raise Exception( 'pitch a fake exception' )
        """)
    util.writefile( "DiffTest.xml", """
        <rtest name="DiffTest">
            <parameterize np="1 2"/>
            <execute>
                sleep 3
                echo "fake difference of 29"
                set have_diff = yes
            </execute>
        </rtest>""")


def get_status_lines_from_html( htmldoc ):
    ""
    lines = []

    nodes = gather_list_items_starting_with( htmldoc, 'Status:' )
    for nd in nodes:
        assert nd.hasChildNodes()
        lines.append( util.get_subtext_from_xml_node( nd ) )

    return lines


def gather_list_items_starting_with( doc, starttext ):
    ""
    nodes = []

    for nd in doc.getElementsByTagName('li'):
        if nd.hasChildNodes:
            firstchild = nd.childNodes[0]
            val = firstchild.nodeValue
            if val and val.strip().startswith( starttext ):
                nodes.append( nd )

    return nodes


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
