#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import unittest
import signal
import glob

import testutils as util
from testutils import print3


class running_after_vvtest_is_killed( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_vvtest_closes_files_ok_under_KeyboardInterrupt(self):
        ""
        util.writefile( "sleeper.xml", """
            <rtest name="sleeper">
                <execute> sleep 10 </execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            util.remove_results()

            out = util.launch_vvtest_then_terminate_it( batch=batch,
                                                        signum=signal.SIGINT )
            print3( out )

            counts = util.parse_vvtest_counts( out )
            assert counts['total'] == 1 and counts['notrun'] == 1

            vrun = util.runvvtest()
            vrun.assertCounts( total=1, npass=1 )
            assert vrun.countGrepLines( 'rror.*another process' ) == 0

    def test_vvtest_fails_to_run_if_a_previous_run_was_killed(self):
        ""
        util.writefile( "sleeper.xml", """
            <rtest name="sleeper">
                <execute> sleep 10 </execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            util.remove_results()

            out = util.launch_vvtest_then_terminate_it( batch=batch )
            print3( out )

            counts = util.parse_vvtest_counts( out )
            assert counts['total'] == 1 and counts['notrun'] == 1

            vrun = util.runvvtest( raise_on_error=False )
            assert vrun.x > 0
            assert vrun.countGrepLines( 'rror.*another process' ) == 1

    def test_running_vvtest_after_killed_but_in_TestResults_directory(self):
        ""
        util.writefile( "sleeper.xml", """
            <rtest name="sleeper">
                <execute> sleep 10 </execute>
            </rtest>""" )
        time.sleep(1)

        out = util.launch_vvtest_then_terminate_it()
        print3( out )

        tdir = util.globfile( 'TestResults*' )

        counts = util.parse_vvtest_counts( out )
        assert counts['total'] == 1 and counts['notrun'] == 1

        vrun = util.runvvtest( raise_on_error=False, chdir=tdir )
        assert vrun.x > 0
        assert vrun.countGrepLines( 'rror.*another process' ) == 1

    def test_forcing_vvtest_to_run_after_previous_was_killed(self):
        ""
        util.writefile( "sleeper1.xml", """
            <rtest name="sleeper1">
                <timeout value="20"/>
                <execute> sleep 5 </execute>
            </rtest>""" )
        util.writefile( "sleeper2.xml", """
            <rtest name="sleeper2">
                <timeout value="20"/>
                <execute> sleep 5 </execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            util.remove_results()

            # using SIGTERM prevents the "finished" mark from getting placed
            spec = util.interrupt_test_hook( batch=batch, count=1,
                                             signum='SIGTERM' )
            util.run_vvtest_with_hook( '--qsub-limit 1 -n 1', spec, batch=batch )

            # this one should fail
            vrun = util.runvvtest( raise_on_error=False, batch=batch )
            assert vrun.x > 0
            assert vrun.countGrepLines( 'rror.*another process' ) == 1

            # this one should be forced to run
            vrun = util.runvvtest( '--force', batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            assert vrun.countGrepLines( 'rror.*another process' ) == 0

            util.runvvtest( '-i' ).assertCounts( total=2, npass=2 )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
