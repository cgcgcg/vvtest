#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import unittest

import testutils as util
from testutils import print3


class options_tests( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_of_each_mode_of_operation(self):
        ""
        util.writefile( "null.xml", """
            <rtest name="null">
            </rtest>""" )
        time.sleep(1)

        util.run_vvtest( ' -h' )
        util.run_vvtest( ' -H' )
        util.run_vvtest( ' --help' )
        util.run_vvtest( ' -g' )
        out,np,nd,nf,nn = util.run_vvtest()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        L = []
        for f in os.listdir('.'):
          if f[:11] == "TestResults":
            L.append(L)
        assert len(L) == 1
        out,np,nd,nf,nn = util.run_vvtest( ' -i' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        util.run_vvtest( ' -b' )

    def test_mode_combinations_that_are_not_allowed(self):
        ""
        x,out = util.run_cmd( util.vvtest + ' -gr' )
        assert not x
        x,out = util.run_cmd( util.vvtest + ' -gi' )
        assert not x
        x,out = util.run_cmd( util.vvtest + ' -gb' )
        assert not x
        x,out = util.run_cmd( util.vvtest + ' -gf file1 -f file2' )
        assert not x
        x,out = util.run_cmd( util.vvtest + ' -lf file1' )
        assert not x
        x,out = util.run_cmd( util.vvtest + ' -Ri' )
        assert not x
        x,out = util.run_cmd( util.vvtest + ' -Rb' )
        assert not x
        x,out = util.run_cmd( util.vvtest + ' -ib' )
        assert not x

    def test_some_bad_option_values(self):
        ""
        x,out = util.run_cmd( util.vvtest + ' -j dir1 -j dir2' )
        assert not x
        x,out = util.run_cmd( util.vvtest + ' -M dir1 -M dir2' )
        assert not x
        x,out = util.run_cmd( util.vvtest + ' -n 1 -n 2' )
        assert not x
        x,out = util.run_cmd( util.vvtest + ' -n text' )
        assert not x
        x,out = util.run_cmd( util.vvtest + ' -n -3' )
        assert not x


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
