#!/usr/bin/env python
#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import unittest
import time

import testutils as util
from testutils import print3

import TestSpecCreator as creator
from RuntimeConfig import RuntimeConfig


class Parse_Dependencies( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_simple_dependencies(self):
        ""
        util.writefile( 'testX.py.vvt', """
            #VVT: depends on : testY
            """ )
        util.writefile( 'testA.py.vvt', """
            #VVT: depends on : testC testB
            """ )
        time.sleep(1)

        nofltr = RuntimeConfig()

        tL = creator.createTestObjects( '.', 'testX.py.vvt', None, nofltr )

        assert len(tL) == 1
        assert len( tL[0].getDependencies() ) == 1
        name,wx = tL[0].getDependencies()[0]
        assert name == 'testY'
        assert wx.evaluate( lambda word: word == "pass" )
        assert wx.evaluate( lambda word: word == "diff" )
        assert not wx.evaluate( lambda word: word == "fail" )

        tL = creator.createTestObjects( '.', 'testA.py.vvt', None, nofltr )

        assert len(tL) == 1
        assert len( tL[0].getDependencies() ) == 2
        nameL = []
        for name,wx in tL[0].getDependencies():
            nameL.append( name )
            assert wx.evaluate( lambda word: word == "pass" )
            assert wx.evaluate( lambda word: word == "diff" )
            assert not wx.evaluate( lambda word: word == "fail" )
        nameL.sort()
        assert nameL == [ 'testB', 'testC' ]

    def test_result_attribute_with_dependency(self):
        ""
        util.writefile( 'testX.py.vvt', """
            #VVT: depends on (result=fail): testY testZ
            """ )
        util.writefile( 'testA.py.vvt', """
            #VVT: depends on (result="fail or diff") : testB
            """ )
        time.sleep(1)

        nofltr = RuntimeConfig()

        tL = creator.createTestObjects( '.', 'testX.py.vvt', None, nofltr )

        assert len(tL) == 1
        assert len( tL[0].getDependencies() ) == 2
        nameL = []
        for name,wx in tL[0].getDependencies():
            nameL.append( name )
            assert not wx.evaluate( lambda word: word == "pass" )
            assert not wx.evaluate( lambda word: word == "diff" )
            assert wx.evaluate( lambda word: word == "fail" )
        nameL.sort()
        assert nameL == [ 'testY', 'testZ' ]

        tL = creator.createTestObjects( '.', 'testA.py.vvt', None, nofltr )

        assert len(tL) == 1
        assert len( tL[0].getDependencies() ) == 1
        name,wx = tL[0].getDependencies()[0]
        assert name == 'testB'
        assert not wx.evaluate( lambda word: word == "pass" )
        assert wx.evaluate( lambda word: word == "diff" )
        assert wx.evaluate( lambda word: word == "fail" )

    def test_multiple_dependency_specifications(self):
        ""
        util.writefile( 'testX.py.vvt', """
            #VVT: depends on (result=fail): testY testZ
            #VVT: depends on (result="fail or diff") : testB
            #VVT: depends on : testW
            """ )
        time.sleep(1)

        nofltr = RuntimeConfig()

        tL = creator.createTestObjects( '.', 'testX.py.vvt', None, nofltr )

        assert len(tL) == 1
        assert len( tL[0].getDependencies() ) == 4
        nameL = []
        for name,wx in tL[0].getDependencies():
            nameL.append( name )
            if name == 'testY' or name == 'testZ':
                assert not wx.evaluate( lambda word: word == "pass" )
                assert not wx.evaluate( lambda word: word == "diff" )
                assert wx.evaluate( lambda word: word == "fail" )
            elif name == 'testB':
                assert not wx.evaluate( lambda word: word == "pass" )
                assert wx.evaluate( lambda word: word == "diff" )
                assert wx.evaluate( lambda word: word == "fail" )
            elif name == 'testW':
                assert wx.evaluate( lambda word: word == "pass" )
                assert wx.evaluate( lambda word: word == "diff" )
                assert not wx.evaluate( lambda word: word == "fail" )
        nameL.sort()
        assert nameL == [ 'testB', 'testW', 'testY', 'testZ' ]

    def test_using_filter_attributes(self):
        ""
        util.writefile( 'testX.py.vvt', """
            #VVT: depends on (platforms="XBox", result="fail") : testY
            #VVT: depends on (platforms="not XBox") : testZ
            """ )
        time.sleep(1)

        fltr = RuntimeConfig( platform_name='XBox' )

        tL = creator.createTestObjects( '.', 'testX.py.vvt', None, fltr )

        assert len(tL) == 1
        assert len( tL[0].getDependencies() ) == 1
        name,wx = tL[0].getDependencies()[0]
        assert name == 'testY'
        assert not wx.evaluate( lambda word: word == "pass" )
        assert not wx.evaluate( lambda word: word == "diff" )
        assert wx.evaluate( lambda word: word == "fail" )

        fltr = RuntimeConfig( platform_name='PlayStation' )

        tL = creator.createTestObjects( '.', 'testX.py.vvt', None, fltr )

        assert len(tL) == 1
        assert len( tL[0].getDependencies() ) == 1
        name,wx = tL[0].getDependencies()[0]
        assert name == 'testZ'
        assert wx.evaluate( lambda word: word == "pass" )
        assert wx.evaluate( lambda word: word == "diff" )
        assert not wx.evaluate( lambda word: word == "fail" )


class Single_dependency_tests( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_the_dependency_should_run_first(self):
        ""
        util.writefile( 'testX.py.vvt', """
            #VVT: depends on : testY
            import os
            import vvtest_util as vvt
            assert len( vvt.deps ) == 1
            Yfile = os.path.join( vvt.deps[0], 'Y.out' )
            assert os.path.exists( Yfile )
            """ )
        util.writefile( 'testY.py.vvt', """
            import time
            time.sleep(4)  # make the dependency take awhile
            fp = open( 'Y.out', 'w' )
            fp.close()
            """ )
        time.sleep(1)

        vrun = util.vvtestRunner( '-N 2' )

        assert vrun.num_pass == 2


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
