#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath, dirname
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

from libvvtest.location import find_vvtest_test_root_file
from libvvtest.location import determine_configdir
from libvvtest.location import split_by_largest_existing_path
import libvvtest.TestList as TestList


class Function_find_vvtest_test_root_file( vtu.vvtestTestCase ):

    def test_no_marker_file_exists(self):
        ""
        p = find_vvtest_test_root_file( os.getcwd(), None, 'foobar.baz' )
        assert p == None

        p = find_vvtest_test_root_file( os.getcwd(), os.getcwd(), 'foobar.baz' )
        assert p == None

    def test_marker_file_in_start_directory(self):
        ""
        util.writefile( 'foobar.baz', 'junk' )
        time.sleep(1)

        p = find_vvtest_test_root_file( os.getcwd(), None, 'foobar.baz' )
        assert p == abspath( 'foobar.baz' )

        p = find_vvtest_test_root_file( os.getcwd(), os.getcwd(), 'foobar.baz' )
        assert p == abspath( 'foobar.baz' )

    def test_marker_file_in_parent_directory(self):
        ""
        util.writefile( 'foobar.baz', 'junk' )
        os.makedirs( 'subdir/deep' )
        time.sleep(1)

        startd = abspath( 'subdir' )
        markf = abspath( 'foobar.baz' )

        p = find_vvtest_test_root_file( startd, None, 'foobar.baz' )
        assert p == markf

        p = find_vvtest_test_root_file( startd, os.getcwd(), 'foobar.baz' )
        assert p == None

        startd = abspath( 'subdir/deep' )
        markf = abspath( 'foobar.baz' )

        p = find_vvtest_test_root_file( startd, None, 'foobar.baz' )
        assert p == markf

        p = find_vvtest_test_root_file( startd, os.getcwd(), 'foobar.baz' )
        assert p == None


class configdir_handling( vtu.vvtestTestCase ):

    def test_simple_configdir_specification(self):
        ""
        dL = determine_configdir( [], None )
        assert dL == []

        dL = determine_configdir( ['/a/path'], None )
        assert dL == [ '/a/path' ]

        dL = determine_configdir( [], '/a/path' )
        assert dL == [ '/a/path' ]

        dL = determine_configdir( ['/a/path'], '/b/path' )
        assert dL == [ '/a/path' ]

    def test_abspath_is_applied(self):
        ""
        os.mkdir( 'subdir' )
        time.sleep(1)

        dL = determine_configdir( ['subdir'], None )
        assert dL == [ abspath('subdir') ]

        dL = determine_configdir( [], '..' )
        assert dL == [ dirname( os.getcwd() ) ]

    def test_multiple_paths(self):
        ""
        os.mkdir( 'subdir' )
        time.sleep(1)

        dL = determine_configdir( ['/a/path','/b/path'], None )
        assert dL == ['/a/path','/b/path']

        dL = determine_configdir( ['/a/path:/b/path'], None )
        assert dL == ['/a/path','/b/path']

        dL = determine_configdir( [], '/a/path:/b/path' )
        assert dL == ['/a/path','/b/path']

        dL = determine_configdir( [], '/a/path:subdir' )
        assert dL == ['/a/path',abspath('subdir')]

    def test_directories_with_colons(self):
        ""
        os.mkdir( 'subdir' )
        os.mkdir( 'some:dir' )
        time.sleep(1)

        d1,d2 = split_by_largest_existing_path( abspath('subdir') )
        assert d1 == abspath('subdir') and d2 == None

        d1,d2 = split_by_largest_existing_path( abspath('some:dir') )
        assert d1 == abspath('some:dir') and d2 == None

        d1,d2 = split_by_largest_existing_path( 'some:dir' )
        assert d1 == 'some:dir' and d2 == None

        d1,d2 = split_by_largest_existing_path( 'subdir:some:dir' )
        assert d1 == 'subdir' and d2 == 'some:dir'

        d1,d2 = split_by_largest_existing_path( 'foo:some:dir' )
        assert d1 == None and d2 == 'foo:some:dir'

        d1,d2 = split_by_largest_existing_path( 'some:dir:foo' )
        assert d1 == 'some:dir' and d2 == 'foo'

        d1,d2 = split_by_largest_existing_path( 'some:dir:foo:bar' )
        assert d1 == 'some:dir' and d2 == 'foo:bar'

        d1,d2 = split_by_largest_existing_path( 'subdir:some:dir' )
        assert d1 == 'subdir' and d2 == 'some:dir'

        d1,d2 = split_by_largest_existing_path( 'foo:bar' )
        assert d1 == None and d2 == 'foo:bar'


        dL = determine_configdir( [], 'some:dir:subdir' )
        assert dL == [abspath('some:dir'),abspath('subdir')]

        dL = determine_configdir( [], 'subdir:some:dir' )
        assert dL == [abspath('subdir'),abspath('some:dir')]

        dL = determine_configdir( [], 'foo:some:dir' )
        assert dL == [abspath('foo'),abspath('some:dir')]


class exit_status_controls( vtu.vvtestTestCase ):

    def test_encoding_an_integer_by_tests_notrun_or_notpass(self):
        ""
        tl = TestList.TestList( None )
        tl.addTest( vtu.make_fake_TestCase( 'pass' ) )
        assert tl.encodeIntegerWarning() == 0

        tl = TestList.TestList( None )
        tl.addTest( vtu.make_fake_TestCase( 'diff' ) )
        assert tl.encodeIntegerWarning() == 2**1

        tl = TestList.TestList( None )
        tl.addTest( vtu.make_fake_TestCase( 'fail' ) )
        assert tl.encodeIntegerWarning() == 2**2

        tl = TestList.TestList( None )
        tl.addTest( vtu.make_fake_TestCase( 'timeout' ) )
        assert tl.encodeIntegerWarning() == 2**3

        tl = TestList.TestList( None )
        tl.addTest( vtu.make_fake_TestCase( 'notdone' ) )
        assert tl.encodeIntegerWarning() == 2**4

        tl = TestList.TestList( None )
        tl.addTest( vtu.make_fake_TestCase( 'notrun' ) )
        assert tl.encodeIntegerWarning() == 2**5

    def test_encoding_tests_notrun_or_notpass_in_the_exit_status(self):
        ""
        util.writefile( 'tpass.vvt', """
            pass
            """ )
        util.writefile( 'timeo.vvt', """
            #VVT: parameterize : P = a b
            import time
            time.sleep( 10 )
            """ )
        util.writefile( 'tdiff.vvt', """
            #VVT: parameterize : P = a b
            import sys
            import vvtest_util as vvt
            sys.exit( vvt.diff_exit_status )
            """ )
        util.writefile( 'tfail.vvt', """
            #VVT: parameterize : P = a b
            raise Exception( 'fake exception' )
            """ )
        util.writefile( 'tnada.vvt', """
            #VVT: parameterize : P = a b
            #VVT: depends on : tfail*
            """ )
        time.sleep(1)

        code = 2**1 + 2**2 + 2**3 + 2**5

        vrun = vtu.runvvtest( '-T 3 --encode-exit-status',
                              raise_on_error=False )
        assert vrun.x == code
        tdir = vrun.resultsDir()

        vrun = vtu.runvvtest( '-i --encode-exit-status',
                              raise_on_error=False )
        assert vrun.x == code

        vrun = vtu.runvvtest( '-R -T 3 --encode-exit-status',
                              chdir=tdir,
                              raise_on_error=False )
        assert vrun.x == code

    def test_exit_status_encoding_does_not_consider_skips(self):
        ""
        util.writefile( 'testA.vvt', """
            #VVT: keywords : one
            """ )
        util.writefile( 'testB.vvt', """
            #VVT: keywords : two
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '-vv -k one/two --encode-exit-status',
                              raise_on_error=False )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.x == 0

        vtu.remove_results()

        vrun = vtu.runvvtest( '-vv -k one --encode-exit-status',
                              raise_on_error=False )
        vrun.assertCounts( total=2, npass=1, skip=1 )
        assert vrun.x == 0


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
