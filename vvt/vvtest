#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import join as pjoin
import time
import shlex

import libvvtest.cmdline as cmdline
import libvvtest.misc as misc
from libvvtest.execlist import TestExecList
import libvvtest.pathutil as pathutil
from libvvtest.errors import FatalError
import libvvtest.location as location
import libvvtest.execute as execute
from libvvtest.outpututils import pretty_time


version = '1.2'

search_fnmatch = ['*.inp','*.apr','*.i']

testlist_name = 'testlist'

USER_PLUGIN_MODULE_NAME = 'vvtest_user_plugin'


class MainEntry:

    def __init__(self, argv, vvtestdir, exepath):
        ""
        self.argv = argv
        self.vvtestdir = vvtestdir
        self.exepath = exepath

    def constructObjects(self):
        ""
        start_epoch = time.time()

        check_for_bootstrap_file()

        # this may call sys.exit (for help or errors)
        self.opts, self.optD, self.dirs = \
            cmdline.parse_command_line( self.argv[1:], version )

        self.rtdata = RuntimeData( self.argv, self.vvtestdir, self.exepath )

        self.constructConfiguration()

        insert_configdir_into_sys_path( self.rtdata )

        test_cache_dir = self.readCacheData()

        self.constructPlatform()

        self.constructTestSubdirectory()

        self.rtdata.setTestResultsDir( test_cache_dir )

        self.rtdata.setPermissionsObject( self.opts, self.optD )

        self.constructResultsWriter( start_epoch )

        self.rtdata.setFilterPath()

        self.constructFilteringObjects()

    def execute(self):
        ""
        exitstat = 0

        if self.opts.dash_i or self.opts.keys or self.opts.files:
            mode = InformationMode( self.opts, self.optD, self.rtdata )
            exitstat = mode.run( self.dirs )

        elif self.opts.dash_g:
            generateTestList( self.opts, self.optD, self.dirs, self.rtdata )

        elif self.opts.dash_b:

            if self.opts.dash_R or self.opts.dash_w:
                print3( "*** error: cannot use -R or -w with -b (baseline)" )
                sys.exit(1)

            baselineTests( self.opts, self.optD, self.rtdata )

        elif self.opts.extract:
            extractTestFiles( self.optD['param_dict'],
                              self.dirs, self.opts.extract, self.rtdata )

        else:

            # if no results keywords are specified, then add -k notrun/notdone
            if not self.opts.dash_w and not self.opts.dash_R:
                rtconfig = self.rtdata.getRuntimeConfig()
                rtconfig.addResultsKeywordExpression( 'notrun or notdone' )

            if self.rtdata.isRestartMode():
                exitstat = restartTests( self.opts, self.optD, self.rtdata )
            else:
                exitstat = runTests( self.opts, self.optD,
                                     self.rtdata, self.dirs )

        if self.opts.encode_exit_status:
            return exitstat

    def constructConfiguration(self):
        ""
        config = create_configuration( self.opts, self.optD,
                                       self.rtdata.getVvtestDir() )
        self.rtdata.setConfiguration( config )

    def readCacheData(self):
        ""
        # non-None only if the CWD is in a TestResults.* directory
        test_cache_dir = readCommandInfo( self.opts, self.optD, self.rtdata )

        if test_cache_dir and self.optD['param_dict']:
            print3( "*** error: cannot use -S in a TestResults directory" )
            sys.exit(1)

        if test_cache_dir and self.opts.dash_g:
            print3( "*** error: cannot use -g in a TestResults directory" )
            sys.exit(1)

        # this is scheduled for deprecation
        if self.opts.check:
            for n in self.opts.check:
                os.environ[ 'CHECK_' + n.upper() ] = ''

        return test_cache_dir

    def constructPlatform(self):
        ""
        plat = construct_platform_instance( self.rtdata.getVvtestDir(),
                                            self.opts, self.optD )
        self.rtdata.setPlatformObject( plat )

    def constructTestSubdirectory(self):
        ""
        sd = location.test_results_subdir_name(
                            self.opts.run_dir,
                            self.optD['onopts'], self.optD['offopts'],
                            self.rtdata.getPlatformObject().getName() )
        self.rtdata.setTestSubdir( sd )

    def constructResultsWriter(self, start_epoch):
        ""
        resw = construct_results_writers( self.opts, self.optD, start_epoch,
                                          self.rtdata.getVvtestDir(),
                                          self.rtdata.getTestResultsDir(),
                                          self.rtdata.getPermissionsObject(),
                                          self.rtdata.getPlatformObject(),
                                          self.rtdata.cmdL )
        self.rtdata.setResultsWriter( resw )

    def constructFilteringObjects(self):
        ""
        from libvvtest.TestSpecCreator import TestCreator
        from libvvtest.filtering import TestFilter
        from libvvtest.timeout import TimeHandler

        platobj = self.rtdata.getPlatformObject()

        rtconfig = construct_RuntimeConfig( platobj, self.opts, self.optD )
        self.rtdata.setRuntimeConfig( rtconfig )

        creator = TestCreator( rtconfig )
        self.rtdata.setTestCreator( creator )

        plug = import_plugin_module( rtconfig )
        self.rtdata.setUserPlugin( plug )

        testfilter = TestFilter( rtconfig, plug )
        self.rtdata.setTestFilter( testfilter )

        timehandler = TimeHandler( plug, platobj,
                                   self.opts.dash_T,
                                   self.opts.timeout_multiplier,
                                   self.opts.max_timeout )
        self.rtdata.setTestTimeHandler( timehandler )


def import_plugin_module( rtconfig ):
    ""
    import libvvtest.userplugin as userplugin

    try:
        plugmod = userplugin.import_module_by_name( USER_PLUGIN_MODULE_NAME )

    except userplugin.UserPluginError:
        print3( '*** error in user plugin script:',
                str( sys.exc_info()[1] ).strip() )
        print3( '*** user plugin disabled\n' )
        plugmod = None

    plug = userplugin.UserPluginBridge( rtconfig, plugmod )

    return plug


class Configuration:
    
    defaults = { \
                 'vvtestdir':None,  # the top level vvtest directory
                 'configdir':None,  # the configuration directory
                 'exepath':None,  # the path to the executables
                 'onopts':[],
                 'offopts':[],
                 'refresh':1,
                 'postclean':0,
                 'timeout':None,
                 'multiplier':1.0,
                 'preclean':1,
                 'analyze':0,
                 'logfile':1,
                 'testargs':[],
               }
    
    def get(self, name):
        ""
        return self.attrs[name]
    
    def set(self, name, value):
        ""
        if value == None:
          self.attrs[name] = Configuration.defaults[name]
        else:
          self.attrs[name] = value
    
    def __init__(self):
        self.attrs = {}
        for n,v in Configuration.defaults.items():
          self.attrs[n] = v


def create_configuration( opts, optD, vvtestdir ):
    ""
    config = Configuration()

    config.set( 'vvtestdir', vvtestdir )

    if optD['onopts']:
        config.set( 'onopts', optD['onopts'] )
    if optD['offopts']:
        config.set( 'offopts', optD['offopts'] )

    if opts.bin_dir:
        config.set( 'exepath', opts.bin_dir )

    if opts.config:
        config.set( 'configdir', opts.config[-1] )
    else:
        d = os.getenv( 'VVTEST_CONFIGDIR' )
        if d == None:
            d = pjoin( vvtestdir, 'config' )
        config.set( 'configdir', os.path.abspath(d) )

    config.set( 'refresh', not opts.dash_m )
    config.set( 'postclean', opts.postclean == True )

    if opts.dash_T != None:
        config.set( 'timeout', opts.dash_T )
    if opts.timeout_multiplier != None:
        config.set( 'multiplier', opts.timeout_multiplier )

    config.set( 'preclean', not opts.dash_m )
    config.set( 'analyze', opts.analyze == True )
    config.set( 'logfile', not opts.dash_L )

    if opts.test_args:
        argL = []
        for args in opts.test_args:
            argL.extend( shlex.split( args ) )
        config.set( 'testargs', argL )

    return config


class RuntimeData:

    def __init__(self, cmdL, vvtestdir, exepath):
        """
        'vvtestdir' is the directory containing the vvtest script
        'exepath' is the absolute path to vvtest (without following soft links)
        """
        self.cmdL = [ os.path.abspath( cmdL[0] ) ]
        self.cmdL.extend( cmdL[1:] )

        self.vvtestdir = vvtestdir
        self.exepath = exepath

    def getVvtestDir(self): return self.vvtestdir
    def getVvtestPath(self): return self.exepath

    def setConfiguration(self, config): self.config = config
    def getConfiguration(self): return self.config

    def setPlatformObject(self, platobj): self.plat = platobj
    def getPlatformObject(self): return self.plat

    def setRuntimeConfig(self, rtconfig): self.rtconfig = rtconfig
    def getRuntimeConfig(self): return self.rtconfig

    def setTestCreator(self, creator): self.creator = creator
    def getTestCreator(self): return self.creator

    def setUserPlugin(self, plugin): self.plugin = plugin
    def getUserPlugin(self): return self.plugin

    def setTestFilter(self, testfilter): self.testfilter = testfilter
    def getTestFilter(self): return self.testfilter

    def setTestSubdir(self, subdir): self.testsubdir = subdir
    def getTestSubdir(self): return self.testsubdir

    def setTestResultsDir(self, test_cache_dir):
        ""
        if test_cache_dir:
            assert os.path.isabs( test_cache_dir )
            self.test_dir = test_cache_dir
            self.is_restart = True
        else:
            self.test_dir = os.path.abspath( self.testsubdir )
            self.is_restart = False

    def getTestResultsDir(self): return self.test_dir

    def isRestartMode(self):
        """
        True if the CWD is within an existing test results directory
        """
        return self.is_restart

    def setPermissionsObject(self, opts, optD):
        self.perms = make_PermissionSetter( self.test_dir, opts.perms )
    def getPermissionsObject(self): return self.perms

    def setResultsWriter(self, writer): self.results_writer = writer
    def getResultsWriter(self): return self.results_writer

    def setTestTimeHandler(self, timehandler): self.timehandler = timehandler
    def getTestTimeHandler(self): return self.timehandler

    def setFilterPath(self):
        ""
        cwd = os.getcwd()
        if pathutil.issubdir( self.test_dir, cwd ):
            d = pathutil.compute_relative_path( self.test_dir, cwd )
            self.filterdir = d
        else:
            self.filterdir = None

    def getFilterPath(self):
        """
        If the current working directory is a subdir of an existing test
        results directory, then this returns the relative path from the
        top of the test results directory to the current working directory.
        """
        return self.filterdir


def construct_platform_instance( vvtestdir, opts, optD ):
    ""
    import libvvtest.vvplatform as vvplatform

    plat = vvplatform.create_Platform_instance(
                vvtestdir,
                opts.plat,
                optD['platopt_dict'],  # --platopt
                opts.dash_e,
                opts.dash_n,
                opts.dash_N,
                optD['onopts'],        # -o
                optD['offopts'],       # -O
                opts.qsub_id )         # --qsub-id

    return plat


def construct_RuntimeConfig( plat, opts, optD ):
    ""
    from libvvtest.RuntimeConfig import RuntimeConfig

    rtconfig = RuntimeConfig( \
                  param_expr_list=optD['param_list'],
                  keyword_expr=optD['keyword_expr'],
                  option_list=( optD['onopts'] + [plat.getCompiler()] ),
                  platform_name=plat.getName(),
                  ignore_platforms=( opts.dash_A == True ),
                  set_platform_expr=optD['platform_expr'],
                  search_file_globs=search_fnmatch,
                  search_regexes=optD['search_regexes'],
                  include_tdd=( opts.include_tdd == True ),
                  runtime_range=[ opts.tmin, opts.tmax ],
                  runtime_sum=opts.tsum,
                  maxprocs=plat.getMaxProcs() )

    if opts.qsub_id != None:
        rtconfig.setAttr( 'include_all', True )

    return rtconfig


class InformationMode:

    def __init__(self, opts, optD, rtdata):
        ""
        self.opts = opts
        self.optD = optD
        self.rtdata = rtdata

    def run(self, scan_dirs):
        ""
        exitcode = 0

        # always include tdd in info mode
        self.rtdata.getRuntimeConfig().setAttr( 'include_tdd', True )

        plat = self.rtdata.getPlatformObject()

        tlist = self.loadTestList( scan_dirs )

        test_dir = self.rtdata.getTestResultsDir()

        if self.opts.keys:
            self.printKeywordUnion( tlist )

        elif self.opts.files:
            self.printTestFiles( tlist )

        else:
            self.rtdata.getResultsWriter().info( tlist )
            exitcode = tlist.encodeIntegerWarning()

        return exitcode

    def loadTestList(self, scan_dirs):
        ""
        test_dir = self.rtdata.getTestResultsDir()

        tlist = self.createTestList()

        if self.rtdata.isRestartMode():
            tlist.readTestList()
            tlist.readTestResults()

        elif self.opts.keys or self.opts.files:
            scan_test_source_directories( tlist, scan_dirs,
                                          self.optD['param_dict'] )

        elif os.path.exists( test_dir ):
            tlist.readTestList()
            tlist.readTestResults()

        tlist.determineActiveTests( filter_dir=self.rtdata.getFilterPath() )

        return tlist

    def createTestList(self):
        ""
        test_dir = self.rtdata.getTestResultsDir()

        tfile = pjoin( test_dir, testlist_name )
        if not os.path.exists( tfile ):
            tfile = None

        return make_TestList( self.rtdata, tfile )

    def printKeywordUnion(self, tlist):
        ""
        from libvvtest.teststatus import RESULTS_KEYWORDS

        print3( "\nresults keywords: " + ' '.join( RESULTS_KEYWORDS ) )
        kd = {}
        for tcase in tlist.getActiveTests():
            for k in tcase.getSpec().getKeywords( include_implicit=False ):
                kd[k] = None
        L = list( kd.keys() )
        L.sort()
        print3( "\ntest keywords: " )
        while len(L) > 0:
            k1 = L.pop(0)
            if len(L) > 0: k2 = L.pop(0)
            else:          k2 = ''
            if len(L) > 0: k3 = L.pop(0)
            else:          k3 = ''
            print3( "  %-20s %-20s %-20s" % (k1,k2,k3) )

    def printTestFiles(self, tlist):
        ""
        D = {}
        for tcase in tlist.getActiveTests():
            d = os.path.normpath( tcase.getSpec().getFilename() )
            D[d] = None
        L = list( D.keys() )
        L.sort()
        for d in L:
            print3( d )


def make_TestList( rtdata, filename ):
    ""
    import libvvtest.TestList as TestList

    rtconfig = rtdata.getRuntimeConfig()
    creator = rtdata.getTestCreator()
    testfilter = rtdata.getTestFilter()

    return TestList.TestList( filename, rtconfig, creator, testfilter )


##############################################################################

def scan_test_source_directories( tlist, scan_dirs, setparams ):
    ""
    from libvvtest.scanner import TestFileScanner

    scan = TestFileScanner( tlist, setparams )

    # default scan directory is the current working directory
    if len(scan_dirs) == 0:
        scan_dirs = ['.']

    scan.scanPaths( scan_dirs )


def generateTestList( opts, optD, dirs, rtdata ):
    """
    """
    config = rtdata.getConfiguration()
    plat = rtdata.getPlatformObject()
    testsubdir = rtdata.getTestSubdir()
    perms = rtdata.getPermissionsObject()
    timehandler = rtdata.getTestTimeHandler()
    plugin = rtdata.getUserPlugin()

    test_dir = os.path.abspath( testsubdir )

    tfile = pjoin( test_dir, testlist_name )

    tlist = make_TestList( rtdata, tfile )

    scan_test_source_directories( tlist, dirs, optD['param_dict'] )

    timehandler.load( tlist )

    tlist.applyPermanentFilters()

    rtdata.getResultsWriter().prerun( tlist, abbreviate=False )
    print3()

    location.createTestDir( testsubdir, perms, opts.dash_M )
    writeCommandInfo( opts, optD, rtdata, test_dir, plat, perms )

    tlist.stringFileWrite()
    perms.set( os.path.abspath( tfile ) )

    xlist = TestExecList( plugin, tlist )
    xlist.createTestExecs( test_dir, plat, config, perms )

    print3( "\nTest directory:", testsubdir )


def extractTestFiles( param_dict, dirs, target_dir, rtdata ):
    """
    Uses all the regular filtering mechanisms to gather tests from a test
    source area and copies the files used for each test into a separate
    directory.
    """
    import libvvtest.extract as extract

    tlist = make_TestList( rtdata, None )

    scan_test_source_directories( tlist, dirs, param_dict )

    rtdata.getTestTimeHandler().load( tlist )

    tlist.applyPermanentFilters()

    extract.copy_out_test_files( target_dir, tlist.getActiveTests() )


##############################################################################


def writeCommandInfo( opts, optD, rtdata, test_dir, plat, perms ):
    """
    Creates the test results information file.
    """
    config = rtdata.getConfiguration()

    f = pjoin(test_dir, 'test.cache')
    if not os.path.exists( f ):
        fp = open( f, "w" )
        fp.write( 'VERSION=' + str(version) + '\n' )
        fp.write( 'DIR=' + os.getcwd() + '\n' )
        if opts.plat:
              fp.write( 'PLATFORM=' + opts.plat.strip() + '\n' )
        else:
              fp.write( 'PLATFORM=' + plat.getName() + '\n' )
        if optD['param_list']:
            fp.write( 'PARAMETERS=' + str( optD['param_list'] ) + '\n' )
        if config.get('exepath'):
            fp.write( \
                'PROJECT=' + os.path.abspath( config.get('exepath') ) + '\n' )
        if optD['onopts']:
            fp.write( 'ONOPTS=' + '+'.join( optD['onopts'] ) + '\n' )
        if optD['offopts']:
            fp.write( 'OFFOPTS=' + '+'.join( optD['offopts'] ) + '\n' )
        if opts.dash_T != None:
            fp.write( 'TIMEOUT=' + str(opts.dash_T).strip() + '\n' )
        if opts.timeout_multiplier != None:
            fp.write( 'TIMEOUT_MULTIPLIER=' + \
                                   str(opts.timeout_multiplier).strip() + '\n' )
        if opts.dash_e:
            fp.write( 'USE_ENV=1\n' )
        if opts.dash_A:
            fp.write( 'ALL_PLATFORMS=1\n' )
        if opts.include_tdd:
            fp.write( 'INCLUDE_TDD=True\n' )
        if opts.check:
            fp.write( 'CHECK=' + ' '.join( opts.check ) + '\n' )
        fp.close()

    perms.set( os.path.abspath(f) )


def readCommandInfo( opts, optD, rtdata ):
    """
    Check for a file called 'test.cache' that indicates whether the
    current working directory is a TestResults directory (or subdirectory)
    then open that file for information.  The test results directory is
    returned, or None if not in a TestRestults directory.
    """
    config = rtdata.getConfiguration()

    # an environment variable is used to identify vvtest run recursion
    troot = os.environ.get( 'VVTEST_TEST_ROOT', None )

    test_cache = misc.find_vvtest_test_root_file(
                                        os.getcwd(), troot, 'test.cache' )

    if test_cache != None:

        if optD['onopts'] or optD['offopts'] or opts.dash_g:
            sys.stderr.write('*** error: ' + \
                'the -g, -o, and -O options are not allowed ' + \
                'in a TestResults directory\n')
            sys.exit(1);

        fp = open( test_cache, "r" )
        write_version = 0
        for line in fp.readlines():
            line = line.strip()
            kvpair = line.split( '=', 1 )
            if kvpair[0] == 'VERSION':
                write_version = kvpair[1]
            elif kvpair[0] == 'DIR':
                previous_run_dir = kvpair[1]
            elif kvpair[0] == 'PLATFORM':
                opts.plat = kvpair[1]
            elif kvpair[0] == 'PARAMETERS':
                L = eval( kvpair[1] )
                if optD['param_list']: optD['param_list'].extend(L)
                else:                  optD['param_list'] = L
            elif kvpair[0] == 'PROJECT':
                # do not replace if the command line contains -j
                if not opts.bin_dir:
                    opts.bin_dir = kvpair[1]
                    config.set( 'exepath', kvpair[1] )
            elif kvpair[0] == 'ONOPTS':
                optD['onopts'] = kvpair[1].split( '+' )
                config.set( 'onopts', optD['onopts'] )
            elif kvpair[0] == 'OFFOPTS':
                optD['offopts'] = kvpair[1].split( '+' )
                config.set( 'offopts', optD['offopts'] )
            elif kvpair[0] == 'TIMEOUT':
                # do not replace if the command line contains -T
                if opts.dash_T == None:
                    opts.dash_T = kvpair[1]
                    config.set( 'timeout', float(opts.dash_T) )
            elif kvpair[0] == 'TIMEOUT_MULTIPLIER':
                if not opts.timeout_multiplier:
                    opts.timeout_multiplier = float(kvpair[1])
                    config.set( 'multiplier', opts.timeout_multiplier )
            elif kvpair[0] == 'USE_ENV':
                opts.dash_e = True
            elif kvpair[0] == 'ALL_PLATFORMS':
                opts.dash_A = True
            elif kvpair[0] == 'INCLUDE_TDD':
                opts.include_tdd = True
            elif kvpair[0] == 'CHECK':
                opts.check = kvpair[1].split()
        fp.close()

    if test_cache != None:
        return os.path.dirname( test_cache )
    return None


def runTests( opts, optD, rtdata, dirs ):
    """
    Executes a list of tests.
    """
    config = rtdata.getConfiguration()
    plat = rtdata.getPlatformObject()
    testsubdir = rtdata.getTestSubdir()
    timehandler = rtdata.getTestTimeHandler()
    plugin = rtdata.getUserPlugin()

    # determine the directory that stores the test results
    test_dir = os.path.abspath( testsubdir )
    tfile = pjoin( test_dir, testlist_name )

    tlist = make_TestList( rtdata, tfile )

    check_for_currently_running_vvtest( tlist.getResultsFilenames(), opts.force )

    # this variable allows vvtest tests to run vvtest (ie, allows recursion)
    os.environ['VVTEST_TEST_ROOT'] = os.path.normpath( test_dir )

    perms = rtdata.getPermissionsObject()

    location.createTestDir( testsubdir, perms, opts.dash_M )

    if opts.dash_w:
        pathutil.remove_directory_contents( testsubdir )

    writeCommandInfo( opts, optD, rtdata, test_dir, plat, perms )

    scan_test_source_directories( tlist, dirs, optD['param_dict'] )

    tlist.readTestList()

    timehandler.load( tlist )

    tlist.applyPermanentFilters()

    # save the test list in the TestResults directory
    tlist.stringFileWrite()
    perms.set( os.path.abspath( tfile ) )

    tlist.readTestResults()
    tlist.ensureInlinedTestResultIncludes()

    tlist.determineActiveTests()

    results_writer = rtdata.getResultsWriter()

    results_writer.prerun( tlist )
    print3()

    if tlist.numActive() > 0:
        run_test_exec_list( opts, optD, rtdata,
                            tlist, test_dir, perms,
                            results_writer )

    print3()
    results_writer.postrun( tlist )

    print3( "Test directory:", testsubdir )

    return tlist.encodeIntegerWarning()


def check_for_currently_running_vvtest( resultsfiles, optforce ):
    ""
    if not optforce:

        msg = '*** error: tests are currently running in another process\n' + \
              '    (or a previous run was killed); use --force to run anyway'

        if len(resultsfiles) > 0:

            import libvvtest.testlistio as testlistio

            rfile = resultsfiles[-1]

            tlr = testlistio.TestListReader( rfile )
            fin = tlr.scanForFinishDate()
            if fin == None:
                print3( msg )
                sys.exit(1)


def determine_verbose_integer( dash_v ):
    ""
    if dash_v:
        verb = 1 + dash_v
    else:
        verb = 1

    return verb


def construct_results_writers( opts, optD,
                               start_epoch, vvtestdir,
                               test_dir, perms,
                               platobj, cmdL ):
    ""
    import libvvtest.resultsout as resultsout

    writers = resultsout.ResultsWriters()

    conobj = construct_console_writer( test_dir, opts, optD )
    writers.addWriter( conobj )

    if opts.qsub_id == None:

        if opts.html:
            htmlobj = construct_html_writer( test_dir, opts, optD, perms )
            writers.addWriter( htmlobj )

        if opts.junit:
            junitobj = construct_junit_writer( test_dir, opts, optD, perms )
            writers.addWriter( junitobj )

        if opts.gitlab:
            wr = construct_gitlab_writer( test_dir, opts, optD, perms )
            writers.addWriter( wr )

        if opts.save_results:
            wr = construct_testlist_writer( test_dir, opts, optD, perms, platobj )
            writers.addWriter( wr )

    writers.setRunAttr( startepoch=start_epoch )
    writers.setRunAttr( startdate=time.ctime(start_epoch) )
    writers.setRunAttr( platform=platobj.getName() )
    writers.setRunAttr( compiler=platobj.getCompiler() )
    writers.setRunAttr( commandline=' '.join( cmdL ) )
    writers.setRunAttr( hostname=os.uname()[1] )
    writers.setRunAttr( rundir=test_dir )
    writers.setRunAttr( curdir=os.getcwd() )
    writers.setRunAttr( python=sys.executable )
    writers.setRunAttr( vvtest=vvtestdir )
    writers.setRunAttr( PYTHONPATH=os.environ.get( 'PYTHONPATH', '' ) )
    writers.setRunAttr( PATH=os.environ.get( 'PATH', '' ) )
    writers.setRunAttr( LOADEDMODULES=os.environ.get( 'LOADEDMODULES', '' ) )

    return writers


def construct_console_writer( test_dir, opts, optD ):
    ""
    import libvvtest.consolewriter as consolewriter

    verb = determine_verbose_integer( opts.dash_v )

    conobj = consolewriter.ConsoleWriter( sys.stdout, test_dir, verbose=verb )

    conobj.setSortingSpecification( optD['sort_letters'] )

    if opts.html or opts.junit or opts.gitlab or opts.save_results:
        conobj.setSuppressInfo()

    return conobj


def construct_html_writer( test_dir, opts, optD, perms ):
    ""
    import libvvtest.htmlwriter as htmlwriter

    htmlobj = htmlwriter.HTMLWriter( perms, opts.html, test_dir )

    return htmlobj


def construct_junit_writer( test_dir, opts, optD, perms ):
    ""
    import libvvtest.junitwriter as junitwriter

    junitobj = junitwriter.JUnitWriter( perms, opts.junit, test_dir )

    junitobj.setOutputDate( opts.results_date )

    return junitobj


def construct_gitlab_writer( test_dir, opts, optD, perms ):
    ""
    import libvvtest.gitlabwriter as gitlabwriter

    # gr = load_gitresults_module( vvtestdir )
    # print3( 'magic: gr', help(gr.GitResults) )

    gitlabobj = gitlabwriter.GitLabWriter( opts.gitlab, test_dir, perms )

    gitlabobj.setSortingSpecification( optD['sort_letters'] )

    return gitlabobj


def construct_testlist_writer( test_dir, opts, optD, perms, platobj ):
    ""
    import libvvtest.listwriter as listwriter

    wlistobj = listwriter.ListWriter( perms,
                                      platobj.testingDirectory(),
                                      test_dir )

    wlistobj.setOutputDate( opts.results_date )
    wlistobj.setNamingTags( optD['onopts'], opts.results_tag )

    return wlistobj


def run_test_exec_list( opts, optD, rtdata,
                        tlist, test_dir, perms,
                        results_writer ):
    ""
    config = rtdata.getConfiguration()
    plat = rtdata.getPlatformObject()
    testsubdir = rtdata.getTestSubdir()
    plugin = rtdata.getUserPlugin()

    xlist = TestExecList( plugin, tlist )
    xlist.createTestExecs( test_dir, plat, config, perms )

    if not opts.batch:
        execute.run_test_list( opts.qsub_id, tlist, xlist, test_dir, plat,
                               perms, results_writer )

    else:
        batchTestList( opts, optD, rtdata,
                       tlist, xlist, test_dir, plat, perms,
                       results_writer )


def batchTestList( opts, optD, rtdata,
                   tlist, xlist, test_dir, plat, perms,
                   results_writer ):
    """
    The 'tlist' is a TestList class instance.
    """
    import libvvtest.batchutils as batchutils

    assert opts.qsub_id == None

    qsublimit = opts.batch_limit
    if qsublimit == None:
        qsublimit = plat.getDefaultQsubLimit()

    vvtestcmd = vvtest_command_line_for_batch( opts, optD,
                                               rtdata.getVvtestPath(),
                                               rtdata.getConfiguration() )

    batch = batchutils.Batcher( vvtestcmd, testlist_name,
                                plat, tlist, xlist, perms,
                                test_dir, qsublimit,
                                opts.batch_length,
                                opts.max_timeout )

    plat.display()

    rundate = tlist.setRunDate()

    # write testlist files for each qsub
    batch.writeQsubScripts( rundate )

    execute.run_batch( batch, tlist, xlist, perms, results_writer,
                       test_dir, qsublimit )


def vvtest_command_line_for_batch( opts, optD, vvtestpath, config ):
    ""
    cmd = vvtestpath

    if opts.dash_e: cmd += ' -e'
    if opts.dash_m: cmd += ' -m'
    if opts.postclean: cmd += ' -C'
    if opts.analyze: cmd += ' -a'

    if opts.perms:
        cmd += ' --perms '+','.join( opts.perms )

    if config.get('configdir'):
        cmd += ' --config='+config.get('configdir')

    if optD['platopt_dict']:
        for k,v in optD['platopt_dict'].items():
            if v:
                cmd += ' --platopt ' + k + '=' + v
            else:
                cmd += ' --platopt ' + k 

    for arg in config.get('testargs'):
        cmd += ' --test-args="'+arg+'"'

    return cmd


def restartTests( opts, optD, rtdata ):
    ""
    config = rtdata.getConfiguration()
    plat = rtdata.getPlatformObject()
    test_dir = rtdata.getTestResultsDir()
    plugin = rtdata.getUserPlugin()

    # this variable allows vvtest tests to run vvtest (ie, allows recursion)
    os.environ['VVTEST_TEST_ROOT'] = test_dir

    qid = opts.qsub_id
    if qid == None:
        tfile = pjoin( test_dir, testlist_name )
        apply_filters = True
    else:
        # batch jobs have --qsub-id set and land here
        import libvvtest.batchutils as batchutils
        namer = batchutils.BatchFileNamer( test_dir, testlist_name )
        tfile = namer.getTestListName( qid )
        apply_filters = False

    tlist = make_TestList( rtdata, tfile )

    tlist.readTestList()
    tlist.readTestResults()
    tlist.ensureInlinedTestResultIncludes()

    check_for_currently_running_vvtest( tlist.getResultsFilenames(), opts.force )

    if qid == None:
        timehandler = rtdata.getTestTimeHandler()
        timehandler.load( tlist )

    reld = rtdata.getFilterPath()

    tlist.determineActiveTests( filter_dir=reld, apply_filters=apply_filters )

    perms = rtdata.getPermissionsObject()

    perms.set( os.path.abspath( tfile ) )

    results_writer = rtdata.getResultsWriter()

    results_writer.prerun( tlist )
    print3()

    if tlist.numActive() > 0:
        run_test_exec_list( opts, optD, rtdata,
                            tlist, test_dir, perms,
                            results_writer )

    print3()
    results_writer.postrun( tlist )

    return tlist.encodeIntegerWarning()


def baselineTests( opts, optD, rtdata ):
    ""
    rtconfig = rtdata.getRuntimeConfig()
    config = rtdata.getConfiguration()
    plat = rtdata.getPlatformObject()
    test_dir = rtdata.getTestResultsDir()
    plugin = rtdata.getUserPlugin()

    tfile = pjoin( test_dir, testlist_name )

    tlist = make_TestList( rtdata, tfile )

    tlist.readTestList()
    tlist.readTestResults()
    tlist.ensureInlinedTestResultIncludes()

    # if the keyword expression does not include a results keyword, then
    # add the 'diff' keyword so that only diffs are rebaselined by default
    rtconfig.addResultsKeywordExpression( 'diff' )

    tlist.determineActiveTests( filter_dir=rtdata.getFilterPath(),
                                baseline=True )

    rtdata.getResultsWriter().prerun( tlist, abbreviate=False )
    print3()

    if tlist.numActive() > 0:

        perms = rtdata.getPermissionsObject()

        xlist = TestExecList( plugin, tlist )
        xlist.createTestExecs( test_dir, plat, config, perms )

        execute.run_baseline( xlist, plat )


###########################################################################

def print3( *args, **kwargs ):
    s = ' '.join( [ str(x) for x in args ] )
    if len(kwargs) > 0:
        s += ' ' + ' '.join( [ str(k)+'='+str(v) for k,v in kwargs.items() ] )
    sys.stdout.write( s + os.linesep )
    sys.stdout.flush()


###########################################################################

def check_for_bootstrap_file():
    """
    if vvtest_bootstrap.py exists in the same directory as vvtest,
    then import it (which may set os.environ variables)
    """
    try:
        import vvtest_bootstrap

    except ImportError:
        # to allow for vvtest to be a soft link to an installed vvtest area,
        # look for a bootstrap file in the directory containing the soft link
        bindir = os.path.dirname( os.path.abspath( sys.argv[0] ) )
        boot = pjoin( bindir, 'vvtest_bootstrap.py' )
        if os.path.exists( boot ):
            sys.path.append( bindir )
            import vvtest_bootstrap


def insert_configdir_into_sys_path( rtdata ):
    ""
    d1 = os.path.normpath( pjoin( rtdata.getVvtestDir(), 'config' ) )

    d2 = rtdata.getConfiguration().get( 'configdir' )
    if d2:
        d2 = os.path.normpath( d2 )

        if d1 != d2:
            sys.path.insert( 1, d1 )

        sys.path.insert( 1, d2 )

    else:
        sys.path.insert( 1, d1 )


def make_PermissionSetter( test_dir, optperms ):
    ""
    if optperms:
        from libvvtest.permsetter import PermissionSetter
        perms = PermissionSetter( test_dir, optperms )

    else:
        class DummyPermissionSetter:
            def __init__(self): pass
            def set(self, path): pass
            def recurse(self, path): pass

        perms = DummyPermissionSetter()

    return perms


##############################################################################

def get_vvtest_directory():
    ""
    # if vvtest is a soft link, this will follow it
    d = sys.path[0]
    if not d:                  d = os.getcwd()
    elif not os.path.isabs(d): d = os.path.abspath(d)
    return d


def adjust_sys_path_for_shared_modules( vvtestdir ):
    ""
    trigdir = get_trig_directory( vvtestdir )

    if trigdir:
        if trigdir not in sys.path:
            sys.path.insert( 1, trigdir )
    else:
        raise FatalError( '*** vvtest error: '
                          'failed to find "trig" directory for imports' )


def get_trig_directory( vvtestdir ):
    """
    the trig directory is a sibling directory in the scidev repository, but
    a subdirectory when vvtest is installed with the 'install_vvtest' script
    """
    trigdir = os.path.normpath( pjoin( vvtestdir, 'trig' ) )

    if not os.path.isdir( trigdir ):
        trigdir = os.path.normpath( pjoin( vvtestdir, '..', 'trig' ) )

        if not os.path.isdir( trigdir ):
            trigdir = None

    return trigdir


if __name__ == '__main__':
    ""
    exepath = os.path.normpath( os.path.abspath( sys.argv[0] ) )
    vvtestdir = get_vvtest_directory()

    adjust_sys_path_for_shared_modules( vvtestdir )

    try:
        main = MainEntry( sys.argv, vvtestdir, exepath )
        main.constructObjects()

        exitstat = main.execute()
        if exitstat:
            sys.exit( exitstat )

    except FatalError as e:
        sys.stderr.write( '*** vvtest error: '+str(e)+'\n' )
        sys.exit(1)
