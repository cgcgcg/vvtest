#!/usr/bin/env python

import os, sys
import time
import pipes
from getopt import getopt

from batchjob import BatchJob
from batchconfig import construct_BatchConfiguration
from batchfactory import construct_batch_interface


help_string = """
USAGE:
    batrun [OPTIONS] [SHELL COMMANDS]

SYNOPSIS:
    Run commands or a script using a batch system.

OPTIONS:
    -h, --help : help

    --nodes <num nodes> : request this many nodes for the job
    --cores <num cores> : request this many cores for the job
    --ppn <cores per node> : use this number of processors per node

    -a, --account <account> :
                      specify an account string, needed by many batch systems

    -p <num seconds> : print job status on an interval basis; by default, the
                       status is printed when it changes
    -i <num seconds> : max seconds between polling the queuing system;
                       defaults to 4 seconds

    --batch-type <name> : specify the type of batch system; one of
                            proc  : executes jobs as subprocesses
                            slurm : uses sbatch, squeue, scancel
                            lsf   : 
                            pbs   : 
    --batch-queue <specs> : a string that specifies the queue parameters, such
                            as "ppn=16,maxtime=24hr"
    --config-path <path> : a colon separated list of directories to search
                           for a batchconfig_plugin.py file

    The command line options take precedence, then environment variables:

        BATCH_ACCOUNT      : same value as for --account
        CONFIG_BATCH_TYPE  : same value as for --batch-type
        CONFIG_BATCH_QUEUE : same value as for --batch-queue
        CONFIG_PATH        : same value as for --config-path
"""


def main():

    optL,argL = getopt( sys.argv[1:], 'ha:p:i:',
                        ['help','account=','nodes=','cores=','ppn=',
                         'config-path=','batch-type=','batch-queue='] )

    optD = {}
    for n,v in optL:
        if n in ['-h','--help']:
            print3( help_string.rstrip() )
            return
        elif n in ['--nodes','--cores','--ppn']:
            try:
                iv = int(v)
                assert iv > 0
            except Exception:
                sys.stderr.write( '*** error: expected a positive '
                                  'integer for '+n+', got '+repr(v)+'\n' )
                sys.exit(1)
            optD[n] = iv
        elif n in ['--batch-queue','--config-path']:
            if n not in optD:
                optD[n] = []
            optD[n].append( v )
        else:
            optD[n] = v

    cfg = construct_batch_configuration( optD )
    bat = construct_batch_interface( cfg, interactive=True )
    job = make_job( cfg, optD, argL )

    try:
        launch_job( bat, job )
        wait_on_job( bat, job, optD )

    except KeyboardInterrupt:
        bat.cancel( verbose=True )
        sys.exit(1)
    except:
        bat.cancel( verbose=True )
        raise


######################################################################

def construct_batch_configuration( optD ):
    """
    A BatchConfiguration instance is created from:

        - a machine database (first file named batchconfig_plugin.py found
          in path)
            --config-path=/some/dir1:/some/dir2
            CONFIG_PATH = /some/dir1:/some/dir2

        - environment variables
            CONFIG_BATCH_TYPE = SLURM, PBS, LSF, ...
            CONFIG_BATCH_QUEUE = "ppn=16,maxtime=24h,maxprocs=1024,
                                  short:ppn=16,maxtime=4h,maxprocs=512,
                                  batch: ppn=16,maxtime=24h,maxprocs=1024"

        - command line settings
            --config-batch-type=SLURM
            --config-batch-queue="ppn=16,maxtime=24h,maxprocs=1024"
            --config-batch-queue="short:ppn=16,maxtime=4h,maxprocs=512"
    """
    batch_type = None
    if '--batch-type' in optD:
        batch_type = optD['--batch-type']
    elif 'CONFIG_BATCH_TYPE' in os.environ:
        batch_type = os.environ['CONFIG_BATCH_TYPE'].strip()

    environ_config = None
    if 'CONFIG_BATCH_QUEUE' in os.environ:
        environ_config = os.environ['CONFIG_BATCH_QUEUE'].strip()

    queue_config = None
    if '--batch-queue' in optD:
        queue_config = ', '.join( optD['--batch-queue'] )

    config_path = None
    if '--config-path' in optD:
        config_path = ':'.join( optD['--config-path'] )
    elif 'CONFIG_PATH' in os.environ:
        config_path = os.environ['CONFIG_PATH'].strip()

    cfg = construct_BatchConfiguration( batch_type=batch_type,
                                        queue_config=queue_config,
                                        environ_config=environ_config,
                                        config_path=config_path )

    return cfg


def make_job( cfg, optD, argL ):
    ""
    job = BatchJob()

    if len(argL) > 0:
        cmds = ' '.join( [ pipes.quote( arg ) for arg in argL ] )
        job.setRunCommands( cmds )

    nnodes = optD.get( '--nodes', None )
    ncores = optD.get( '--cores', None )
    ppn = optD.get( '--ppn', cfg.getProcessorsPerNode() )

    job.setProcessors( ncores, nnodes, ppn=ppn )

    env = os.environ.get( 'BATCH_ACCOUNT', None )
    acnt = optD.get( '--account', optD.get( '-a', env  ) )
    if acnt != None:
        job.setAccount( acnt )

    return job


def launch_job( bat, job ):
    ""
    bat.writeJob( job )
    bat.submit( job )

    if job.getJobId() == None:
        out,err = job.getSubmitOutput()
        print3( out, err )
        sys.exit(1)

    else:
        print3( 'Job ID:', job.getJobId() )


def wait_on_job( bat, job, optD ):
    ""
    prev_msg = ''
    print_interval = None
    if '-p' in optD:
        print_interval = int( optD['-p'] )
        pval = 1
        prev_print = 0

    poll_interval = int( optD.get( '-i', 4 ) )
    ival = 1
    prev_poll = 0

    while True:

        bat.poll()

        msg = get_job_state( job )

        if print_interval == None:
            if msg != prev_msg:
                print3( msg )
                prev_msg = msg

        else:
            if time.time() - prev_print > pval:
                print3( msg )
                pval = min( 2*pval, print_interval )
                prev_print = time.time()

        if job.isFinished():
            break

        else:
            time.sleep( ival )
            ival = min( 2*ival, poll_interval )


def get_job_state( job ):
    ""
    msg = ''

    sub,pend,run,comp,qdone = job.getQueueDates()

    if   qdone: msg += 'Queue: DONE at '    + time.ctime(qdone)
    elif  comp: msg += 'Queue: COMPLETE at '+ time.ctime(comp)
    elif   run: msg += 'Queue: RUNNING at ' + time.ctime(run)
    elif  pend: msg += 'Queue: PENDING at ' + time.ctime(pend)
    else:       msg += 'Queue: SUBMIT at '  + time.ctime(sub)

    start,stop,sdone = job.getScriptDates()

    if   sdone: msg += ', Script: DONE at '  + time.ctime(sdone)
    elif  stop: msg += ', Script: STOP at '  + time.ctime(stop)
    elif start: msg += ', Script: START at ' + time.ctime(start)

    return msg


def print3( *args ):
    s = ' '.join( [ str(arg) for arg in args ] )
    sys.stdout.write( s + '\n' )
    sys.stdout.flush()


####################################################################

if __name__ == "__main__":
    main()
