#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import unittest
import time

try:
    from StringIO import StringIO
except:
    from io import StringIO

import testutils as util
from testutils import print3

import batchitf as bat


class Function_parse_variant( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test( cleanout=False )

    def test_empty(self):
        ""
        D = bat.parse_variant( '' )
        assert len(D) == 0

    def test_single_key_value(self):
        ""
        D = bat.parse_variant( 'key=value' )
        assert len(D) == 1
        assert D['key'] == 'value'

        D = bat.parse_variant( 'key=2' )
        assert len(D) == 1
        assert D['key'] == '2'

    def test_multiple_key_value(self):
        ""
        D = bat.parse_variant( 'key=value foo=2 bar=1.2' )
        assert len(D) == 3
        assert D['key'] == 'value'
        assert D['foo'] == '2'
        assert D['bar'] == '1.2'


class Function_lineprint( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test( cleanout=False )

    def test_empty_print(self):
        ""
        sio = StringIO()
        bat.lineprint( sio )
        assert len( sio.getvalue() ) == 0

    def test_print_empty_string(self):
        ""
        sio = StringIO()
        bat.lineprint( sio, '' )
        assert sio.getvalue() == '\n'

    def test_print_some_lines(self):
        ""
        sio = StringIO()
        bat.lineprint( sio, 'line one', 'line two' )
        assert sio.getvalue() == 'line one\nline two\n'


class Function_compute_num_nodes( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test( cleanout=False )

    def test_platform_ppn_is_one(self):
        ""
        assert bat.compute_num_nodes( 0, None, 1 ) == 1
        assert bat.compute_num_nodes( 1, None, 1 ) == 1
        assert bat.compute_num_nodes( 2, None, 1 ) == 2

    def test_platform_ppn_is_two(self):
        ""
        assert bat.compute_num_nodes( 0, None, 2 ) == 1
        assert bat.compute_num_nodes( 1, None, 2 ) == 1
        assert bat.compute_num_nodes( 2, None, 2 ) == 1
        assert bat.compute_num_nodes( 3, None, 2 ) == 2
        assert bat.compute_num_nodes( 4, None, 2 ) == 2
        assert bat.compute_num_nodes( 5, None, 2 ) == 3

    def test_requested_cores_per_node_equals_one(self):
        ""
        assert bat.compute_num_nodes( 1, 1, 8 ) == 1
        assert bat.compute_num_nodes( 2, 1, 8 ) == 2
        assert bat.compute_num_nodes( 0, 1, 8 ) == 1

    def test_requested_cores_per_node_equals_two(self):
        ""
        assert bat.compute_num_nodes( 0, 2, 8 ) == 1
        assert bat.compute_num_nodes( 1, 2, 8 ) == 1
        assert bat.compute_num_nodes( 2, 2, 8 ) == 1
        assert bat.compute_num_nodes( 3, 2, 8 ) == 2
        assert bat.compute_num_nodes( 4, 2, 8 ) == 2
        assert bat.compute_num_nodes( 5, 2, 8 ) == 3


class Function_parse_date_string( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test( cleanout=False )

    def test_invalid_form(self):
        ""
        tm = bat.parse_date_string( 'foo bar' )
        assert tm == None

    def test_RHEL6_date_format(self):
        ""
        tm = bat.parse_date_string( 'Sun Mar  4 10:29:22 MST 2018' )
        assert abs( tm - 1520184562 ) < 2

        tm = bat.parse_date_string( 'Wed Jul  4 10:29:22 MDT 2018' )
        assert abs( tm - 1530721762 ) < 2


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
