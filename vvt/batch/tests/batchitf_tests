#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import unittest
import time

try:
    from StringIO import StringIO
except:
    from io import StringIO

import testutils as util
from testutils import print3

import batchitf as bat
from batchjob import BatchJob


class Function_parse_variant( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test( cleanout=False )

    def test_empty(self):
        ""
        D = bat.parse_variant( '' )
        assert len(D) == 0

    def test_single_key_value(self):
        ""
        D = bat.parse_variant( 'key=value' )
        assert len(D) == 1
        assert D['key'] == 'value'

        D = bat.parse_variant( 'key=2' )
        assert len(D) == 1
        assert D['key'] == '2'

    def test_multiple_key_value(self):
        ""
        D = bat.parse_variant( 'key=value foo=2 bar=1.2' )
        assert len(D) == 3
        assert D['key'] == 'value'
        assert D['foo'] == '2'
        assert D['bar'] == '1.2'


class Function_lineprint( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test( cleanout=False )

    def test_empty_print(self):
        ""
        sio = StringIO()
        bat.lineprint( sio )
        assert len( sio.getvalue() ) == 0

    def test_print_empty_string(self):
        ""
        sio = StringIO()
        bat.lineprint( sio, '' )
        assert sio.getvalue() == '\n'

    def test_print_some_lines(self):
        ""
        sio = StringIO()
        bat.lineprint( sio, 'line one', 'line two' )
        assert sio.getvalue() == 'line one\nline two\n'


class Function_compute_num_nodes( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test( cleanout=False )

    def test_platform_ppn_is_one(self):
        ""
        assert bat.compute_num_nodes( 0, None, 1 ) == 1
        assert bat.compute_num_nodes( 1, None, 1 ) == 1
        assert bat.compute_num_nodes( 2, None, 1 ) == 2

    def test_platform_ppn_is_two(self):
        ""
        assert bat.compute_num_nodes( 0, None, 2 ) == 1
        assert bat.compute_num_nodes( 1, None, 2 ) == 1
        assert bat.compute_num_nodes( 2, None, 2 ) == 1
        assert bat.compute_num_nodes( 3, None, 2 ) == 2
        assert bat.compute_num_nodes( 4, None, 2 ) == 2
        assert bat.compute_num_nodes( 5, None, 2 ) == 3

    def test_requested_cores_per_node_equals_one(self):
        ""
        assert bat.compute_num_nodes( 1, 1, 8 ) == 1
        assert bat.compute_num_nodes( 2, 1, 8 ) == 2
        assert bat.compute_num_nodes( 0, 1, 8 ) == 1

    def test_requested_cores_per_node_equals_two(self):
        ""
        assert bat.compute_num_nodes( 0, 2, 8 ) == 1
        assert bat.compute_num_nodes( 1, 2, 8 ) == 1
        assert bat.compute_num_nodes( 2, 2, 8 ) == 1
        assert bat.compute_num_nodes( 3, 2, 8 ) == 2
        assert bat.compute_num_nodes( 4, 2, 8 ) == 2
        assert bat.compute_num_nodes( 5, 2, 8 ) == 3

    def test_platform_ppn_is_None(self):
        ""
        assert bat.compute_num_nodes( 0, 2, None ) == 1
        assert bat.compute_num_nodes( 1, 2, None ) == 1
        assert bat.compute_num_nodes( 2, 2, None ) == 1
        assert bat.compute_num_nodes( 3, 2, None ) == 2

        assert bat.compute_num_nodes( 0, None, None ) == 1
        assert bat.compute_num_nodes( 1, None, None ) == 1
        assert bat.compute_num_nodes( 2, None, None ) == 1
        assert bat.compute_num_nodes( 3, None, None ) == 1


class Function_format_time_to_HMS( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test( cleanout=False )

    def test_string_with_a_colon_is_returned_unchanged(self):
        ""
        hms = bat.format_time_to_HMS( '0:01' )
        assert hms == '0:01'

    def test_string_without_a_colon_is_converted_to_seconds(self):
        ""
        hms = bat.format_time_to_HMS( '66' )
        assert hms == '0:01:06'

    def test_less_than_a_minute(self):
        ""
        hms = bat.format_time_to_HMS( '59' )
        assert hms == '0:00:59'

        hms = bat.format_time_to_HMS( '09' )
        assert hms == '0:00:09'

        hms = bat.format_time_to_HMS( 9 )
        assert hms == '0:00:09'

        hms = bat.format_time_to_HMS( 0 )
        assert hms == '0:00:00'

    def test_less_than_an_hour(self):
        ""
        hms = bat.format_time_to_HMS( 5*60 )
        assert hms == '0:05:00'

        hms = bat.format_time_to_HMS( 5*60+34 )
        assert hms == '0:05:34'

        hms = bat.format_time_to_HMS( 59*60+59 )
        assert hms == '0:59:59'

    def test_less_than_a_day(self):
        ""
        hms = bat.format_time_to_HMS( 60*60+1 )
        assert hms == '1:00:01'

        hms = bat.format_time_to_HMS( 60*60+11*60 )
        assert hms == '1:11:00'

        hms = bat.format_time_to_HMS( 60*60+11*60+11 )
        assert hms == '1:11:11'

    def test_more_than_a_day(self):
        ""
        hms = bat.format_time_to_HMS( 25*60*60+60 )
        assert hms == '25:01:00'

        hms = bat.format_time_to_HMS( 25*60*60+6 )
        assert hms == '25:00:06'

        hms = bat.format_time_to_HMS( 25*60*60+6*60+6 )
        assert hms == '25:06:06'


class Function_parse_date_string( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test( cleanout=False )

    def test_invalid_form(self):
        ""
        tm = bat.parse_date_string( 'foo bar' )
        assert tm == None

    def test_RHEL6_date_format(self):
        ""
        tm = bat.parse_date_string( 'Sun Mar  4 10:29:22 MST 2018' )
        assert abs( tm - 1520184562 ) < 2

        tm = bat.parse_date_string( 'Wed Jul  4 10:29:22 MDT 2018' )
        assert abs( tm - 1530721762 ) < 2


class Class_ThreadSafeMap( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test( cleanout=False )

    def test_set_get_an_item(self):
        ""
        store = bat.ThreadSafeMap()
        store.set( 'foo', 'bar' )
        assert store.get( 'foo' ) == 'bar'
        store.set( 'foo', 5 )
        assert store.get( 'foo' ) == 5

    def test_set_get_pop_an_item(self):
        ""
        store = bat.ThreadSafeMap()
        store.set( 'foo', 'bar' )
        assert store.get( 'foo' ) == 'bar'
        val = store.pop( 'foo' )
        assert val == 'bar'
        self.assertRaises( Exception, store.get, 'foo' )

    def test_get_list_of_items(self):
        ""
        store = bat.ThreadSafeMap()
        store.set( 'foo', 5 )
        store.set( 'bar', 2 )
        L = store.asList()
        L.sort()
        assert L == [ ('bar',2), ('foo',5) ]

    def test_length_of_store(self):
        ""
        store = bat.ThreadSafeMap()
        assert store.length() == 0
        store.set( 'foo', 5 )
        assert store.length() == 1
        store.set( 'bar', 2 )
        assert store.length() == 2
        store.pop( 'foo' )
        assert store.length() == 1


class Class_JobQueueTable( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test( cleanout=False )

    def test_set_job_info_then_get_job_info(self):
        ""
        t0 = time.time()

        tab = bat.JobQueueTable()

        tab.setJobInfo( '123', 'pending', None, None )
        assert tab.numJobs() == 1
        assert tab.hasJob( '123' )
        assert tab.getState( '123' ) == 'pending'
        assert tab.getStartDate( '123' ) == None
        assert tab.getTimeUsed( '123' ) == None

        tab.setJobInfo( '123', 'running', t0, None )
        assert tab.numJobs() == 1
        assert tab.hasJob( '123' )
        assert tab.getState( '123' ) == 'running'
        assert tab.getStartDate( '123' ) == t0
        assert tab.getTimeUsed( '123' ) == None

        tab.setJobInfo( '123', 'complete', t0, t0+5 )
        assert tab.numJobs() == 1
        assert tab.hasJob( '123' )
        assert tab.getState( '123' ) == 'complete'
        assert tab.getStartDate( '123' ) == t0
        assert tab.getTimeUsed( '123' ) == t0+5

        tab.setJobInfo( '123', 'done', t0, t0+5 )
        assert tab.numJobs() == 1
        assert tab.hasJob( '123' )
        assert tab.getState( '123' ) == 'done'
        assert tab.getStartDate( '123' ) == t0
        assert tab.getTimeUsed( '123' ) == t0+5

        tab.setJobInfo( '12', 'running', t0+2, None )
        assert tab.numJobs() == 2
        assert tab.hasJob( '123' ) and tab.hasJob( '12' )
        assert tab.getState( '123' ) == 'done'
        assert tab.getStartDate( '123' ) == t0
        assert tab.getTimeUsed( '123' ) == t0+5
        assert tab.getState( '12' ) == 'running'
        assert tab.getStartDate( '12' ) == t0+2
        assert tab.getTimeUsed( '12' ) == None

    def test_errors(self):
        ""
        tab = bat.JobQueueTable()

        self.assertRaises( Exception, tab.setJobInfo,
                           '123', 'stopped', None, None )

        tab.setJobInfo( '12', 'running', time.time(), None )
        assert tab.getState( '12' ) == 'running'
        self.assertRaises( Exception, tab.getState, '21' )
        self.assertRaises( Exception, tab.getStartDate, '21' )
        self.assertRaises( Exception, tab.getTimeUsed, '21' )


class BatchInterface_parseScriptDates_and_writeScriptFile( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def test_write_hollow_script_and_run_it(self):
        ""
        bi = bat.BatchInterface()
        job = BatchJob()

        fname = job.getBatchFileName()

        write_job_script( fname, bi, job )
        time.sleep(1)

        x,out,err = bat.run_shell_command( '/bin/bash '+fname )
        assert x == 0

    def test_write_script_run_then_parse_dates(self):
        ""
        bi = bat.BatchInterface()
        job = BatchJob()

        fname = job.getBatchFileName()

        write_job_script( fname, bi, job, 'sleep 5' )
        time.sleep(1)

        x,out,err = bat.run_shell_command( '/bin/bash '+fname )
        assert x == 0

        util.writefile( 'log.txt', out )
        time.sleep(1)

        start,stop = bi.parseScriptDates( 'log.txt' )

        assert time.time() - start < 10
        assert stop - start < 8

    def test_parsing_a_file_that_does_not_exist_returns_Nones(self):
        ""
        bi = bat.BatchInterface()

        start,stop = bi.parseScriptDates( 'log.txt' )

        assert start == None and stop == None

    def test_parse_a_file_without_a_stop_date(self):
        ""
        util.writefile( 'log.txt', """
            SCRIPT START DATE: Fri May 25 14:31:50 MDT 2018
            UNAME: Linux ceerws1803 2.6.32-642.1.1.el6.x8...
            cd .
            """ )
        time.sleep(1)

        bi = bat.BatchInterface()
        start,stop = bi.parseScriptDates( 'log.txt' )
        assert start != None and stop == None

    def test_parsing_a_corrupt_file(self):
        ""
        util.writefile( 'log1.txt', """
            SCRIPT START DATE: Fri May 25 14:31:50 MDT 2018
            UNAME: Linux ceerws1803 2.6.32-642.1.1.el6.x8...
            cd .
            SCRIPT STOP DATE: Fri May 25 14:31:55 MDT 2018
            """ )
        util.writefile( 'log2.txt', """
            SCRIPT START DATE: foo bar
            UNAME: Linux ceerws1803 2.6.32-642.1.1.el6.x8...
            cd .
            SCRIPT STOP DATE: Fri May 25 14:31:55 MDT 2018
            """ )
        util.writefile( 'log3.txt', """
            SCRIPT START DATE: Fri May 25 14:31:50 MDT 2018
            UNAME: Linux ceerws1803 2.6.32-642.1.1.el6.x8...
            cd .
            SCRIPT STOP DATE: foo bar
            """ )
        time.sleep(1)

        bi = bat.BatchInterface()
        start,stop = bi.parseScriptDates( 'log1.txt' )
        assert start != None and stop != None
        assert stop - start < 8

        bi = bat.BatchInterface()
        start,stop = bi.parseScriptDates( 'log2.txt' )
        assert start == None and stop != None

        bi = bat.BatchInterface()
        start,stop = bi.parseScriptDates( 'log3.txt' )
        assert start != None and stop == None

    def test_use_write_script_function(self):
        ""
        class SubBatchInterface( bat.BatchInterface ):
            def writeScriptHeader(self, job, fileobj):
                pass

        bi = SubBatchInterface()
        job = BatchJob()

        bi.writeScriptFile( job )
        time.sleep(1)

        fname = job.getBatchFileName()
        x,out,err = bat.run_shell_command( '/bin/bash '+fname )
        assert x == 0

        util.writefile( 'log.txt', out )
        time.sleep(1)

        start,stop = bi.parseScriptDates( 'log.txt' )

        assert time.time() - start < 10
        assert stop - start < 8


def write_job_script( fname, bitf, job, *command_lines ):
    """
    """
    fp = open( fname, 'w' )

    try:
        bitf.writeScriptShebang( job, fp )
        bitf.writeScriptBegin( job, fp )
        fp.write( '\n' + '\n'.join( command_lines ) +'\n' )
        bitf.writeScriptFinish( job, fp )

    finally:
        fp.close()


class Functions_update_jobs( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def test_set_script_dates_multiple_times(self):
        ""
        bi = bat.BatchInterface()
        bi.setTimeout( 'logcheck', 1 )
        job = BatchJob()
        job.setLogFileName( 'log.txt' )

        t0 = time.time()

        bi.updateJobScriptDates( job, t0 )
        start,stop,done = job.getScriptDates()

        assert start == None and stop == None

        util.writefile( 'log.txt', """
            SCRIPT START DATE: Fri May 25 14:31:50 MDT 2018
            UNAME: Linux ceerws1803 2.6.32-642.1.1.el6.x8...
            cd .
            """ )
        time.sleep(1)

        bi.updateJobScriptDates( job, t0+10 )
        start,stop,done = job.getScriptDates()

        tm_start = bat.parse_date_string( 'Fri May 25 14:31:50 MDT 2018' )
        assert start != None and start == tm_start and stop == None

        util.writefile( 'log.txt', """
            SCRIPT START DATE: Fri May 25 14:31:50 MDT 2018
            UNAME: Linux ceerws1803 2.6.32-642.1.1.el6.x8...
            cd .
            SCRIPT STOP DATE: Fri May 25 14:31:55 MDT 2018
            """ )
        time.sleep(1)

        bi.updateJobScriptDates( job, t0+20 )
        start,stop,done = job.getScriptDates()

        tm_stop = bat.parse_date_string( 'Fri May 25 14:31:55 MDT 2018' )
        assert start != None and start == tm_start
        assert stop != None and stop == tm_stop

    def test_queue_dates_on_nominal_queue_sequence(self):
        ""
        bi = bat.BatchInterface()
        job = BatchJob()
        tab = bat.JobQueueTable()

        t0 = time.time()
        job.setQueueDates( submit=t0 )

        bi.updateJobQueueDates( job, tab, t0 )
        check_queue_dates( job, submit=t0 )

        tab.setJobInfo( job.getJobId(), 'pending', None, None )
        bi.updateJobQueueDates( job, tab, t0+1 )
        check_queue_dates( job, submit=t0, pending=t0+1 )

        tab.setJobInfo( job.getJobId(), 'running', t0+5, None )
        bi.updateJobQueueDates( job, tab, t0+10 )
        check_queue_dates( job, submit=t0, pending=t0+1, running=t0+5 )

        tab.setJobInfo( job.getJobId(), 'complete', t0+5, 20 )
        bi.updateJobQueueDates( job, tab, t0+30 )
        check_queue_dates( job, submit=t0, pending=t0+1, running=t0+5,
                                complete=t0+25, done=t0+30 )

    def test_queue_dates_when_job_goes_from_pending_to_absent(self):
        ""
        bi = bat.BatchInterface()
        job = BatchJob()

        t0 = time.time()
        job.setQueueDates( submit=t0 )

        tab = bat.JobQueueTable()
        tab.setJobInfo( job.getJobId(), 'pending', None, None )
        bi.updateJobQueueDates( job, tab, t0+1 )
        check_queue_dates( job, submit=t0, pending=t0+1 )

        tab = bat.JobQueueTable()
        bi.updateJobQueueDates( job, tab, t0+2 )
        check_queue_dates( job, submit=t0, pending=t0+1, done=t0+2 )

    def test_queue_dates_when_job_goes_from_running_to_absent(self):
        ""
        bi = bat.BatchInterface()
        job = BatchJob()

        t0 = time.time()
        job.setQueueDates( submit=t0 )

        tab = bat.JobQueueTable()
        tab.setJobInfo( job.getJobId(), 'running', t0+1, None )
        bi.updateJobQueueDates( job, tab, t0+2 )
        check_queue_dates( job, submit=t0, running=t0+1 )

        tab = bat.JobQueueTable()
        bi.updateJobQueueDates( job, tab, t0+4 )
        check_queue_dates( job, submit=t0, running=t0+1, done=t0+4 )

    def test_queue_dates_for_completed_job_with_elapsed_time_given(self):
        ""
        bi = bat.BatchInterface()
        job = BatchJob()

        t0 = time.time()
        job.setQueueDates( submit=t0 )

        tab = bat.JobQueueTable()
        tab.setJobInfo( job.getJobId(), 'complete', t0+1, 5 )
        bi.updateJobQueueDates( job, tab, t0+10 )
        check_queue_dates( job, submit=t0, complete=t0+6, done=t0+10 )

    def test_queue_dates_for_completed_job_without_elapsed_time_given(self):
        ""
        bi = bat.BatchInterface()
        job = BatchJob()

        t0 = time.time()
        job.setQueueDates( submit=t0 )

        tab = bat.JobQueueTable()
        tab.setJobInfo( job.getJobId(), 'complete', t0+1, None )
        bi.updateJobQueueDates( job, tab, t0+10 )
        check_queue_dates( job, submit=t0, complete=t0+10, done=t0+10 )

    def test_queue_dates_for_completed_job_with_zero_elapsed_time(self):
        ""
        bi = bat.BatchInterface()
        job = BatchJob()

        t0 = time.time()
        job.setQueueDates( submit=t0 )

        tab = bat.JobQueueTable()
        tab.setJobInfo( job.getJobId(), 'complete', t0+1, 0 )
        bi.updateJobQueueDates( job, tab, t0+10 )
        check_queue_dates( job, submit=t0, complete=t0+10, done=t0+10 )

    def test_running_date_when_no_start_date_given_by_query_queue(self):
        ""
        bi = bat.BatchInterface()
        job = BatchJob()

        t0 = time.time()
        job.setQueueDates( submit=t0 )

        tab = bat.JobQueueTable()
        tab.setJobInfo( job.getJobId(), 'running', None, 2 )
        bi.updateJobQueueDates( job, tab, t0+10 )
        check_queue_dates( job, submit=t0, running=t0+10 )

    def test_script_will_finish_when_stop_date_is_set(self):
        ""
        bi = bat.BatchInterface()
        job = BatchJob()

        t0 = time.time()
        job.setQueueDates( submit=t0 )
        job.setScriptDates( start=t0, stop=t0+5 )

        bi.updateJobFinished( job, t0+8 )
        check_script_dates( job, start=t0, stop=t0+5, done=t0+8 )

    def test_script_timeout_after_queue_is_marked_done(self):
        ""
        bi = bat.BatchInterface()
        bi.setTimeout( 'script', 10 )
        job = BatchJob()

        t0 = time.time()
        job.setQueueDates( submit=t0 )

        bi.updateJobFinished( job, t0+5 )
        check_script_dates( job )

        job.setQueueDates( done=t0+10 )

        # should not timeout yet
        bi.updateJobFinished( job, t0+15 )
        check_script_dates( job )

        # should timeout this time
        bi.updateJobFinished( job, t0+25 )
        check_script_dates( job, done=t0+25 )

    def test_a_missing_job_times_out_and_is_marked_done(self):
        ""
        bi = bat.BatchInterface()
        bi.setTimeout( 'missing', 10 )
        job = BatchJob()

        t0 = time.time()
        job.setQueueDates( submit=t0 )

        bi.updateJobFinished( job, t0+5 )
        check_queue_dates( job, submit=t0 )

        bi.updateJobFinished( job, t0+15 )
        check_queue_dates( job, submit=t0, done=t0+15 )

    def test_a_missing_job_uses_script_done_date_to_time_out(self):
        ""
        bi = bat.BatchInterface()
        bi.setTimeout( 'missing', 60 )
        bi.setTimeout( 'complete', 30 )
        job = BatchJob()

        t0 = time.time()
        job.setQueueDates( submit=t0 )

        bi.updateJobFinished( job, t0+10 )
        check_queue_dates( job, submit=t0 )

        job.setScriptDates( done=t0+15 )
        bi.updateJobFinished( job, t0+20 )
        check_queue_dates( job, submit=t0 )

        bi.updateJobFinished( job, t0+30 )
        check_queue_dates( job, submit=t0 )

        bi.updateJobFinished( job, t0+40 )
        check_queue_dates( job, submit=t0 )

        # should timeout after t0+15+30
        bi.updateJobFinished( job, t0+55 )
        check_queue_dates( job, submit=t0, done=t0+55 )

    def test_dates_of_last_job_log_parse(self):
        ""
        job = BatchJob()

        tm = bat.get_parse_script_date( job )
        assert tm == 0

        t0 = time.time()

        bat.set_parse_script_date( job, t0 )
        tm = bat.get_parse_script_date( job )
        assert tm == t0

        bat.set_parse_script_date( job, t0+10 )
        tm = bat.get_parse_script_date( job )
        assert tm == t0+10

    def test_time_between_script_log_file_parse(self):
        ""
        bi = bat.BatchInterface()
        bi.setTimeout( 'logcheck', 5 )
        job = BatchJob()
        job.setLogFileName( 'log.txt' )

        t0 = time.time()

        bi.updateJobScriptDates( job, t0 )
        start,stop,done = job.getScriptDates()
        assert start == None and stop == None

        util.writefile( 'log.txt', """
            SCRIPT START DATE: Fri May 25 14:31:50 MDT 2018
            UNAME: Linux ceerws1803 2.6.32-642.1.1.el6.x8...
            cd .
            SCRIPT STOP DATE: Fri May 25 14:31:55 MDT 2018
            """ )
        time.sleep(1)

        bi.updateJobScriptDates( job, t0+2 )
        start,stop,done = job.getScriptDates()
        assert start == None and stop == None

        bi.updateJobScriptDates( job, t0+10 )
        start,stop,done = job.getScriptDates()
        assert start != None and stop != None


def check_queue_dates( job, submit=None, pending=None,
                            running=None, complete=None, done=None ):
    """
    """
    jsub,jpend,jrun,jcomp,jdone = job.getQueueDates()

    assert jsub == submit, 'jsub '+str(jsub)+' != submit '+str(submit)
    assert jpend == pending
    assert jrun  == running
    assert jcomp == complete, 'jcomp '+str(jcomp)+' != complete '+str(complete)
    assert jdone == done


def check_script_dates( job, start=None, stop=None, done=None ):
    """
    """
    jstart,jstop,jdone = job.getScriptDates()

    assert jstart == start
    assert jstop == stop
    assert jdone == done


class BatchScripts_methods( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def test_submit_function_in_nominal_case(self):
        ""
        class BatSub( bat.BatchInterface ):
            def submitJobScript(self, job):
                return '123', 'job id 123', ''

        bs = BatSub()
        job = BatchJob()

        bs.submit( job )

        assert job.getJobId() == '123'
        assert time.time() - job.getQueueDates()[0] < 2
        assert job.getSubmitOutput()[0].strip() == 'job id 123'
        assert not job.getSubmitOutput()[1].strip()

    def test_a_controlled_submit_failure(self):
        ""
        class BatSub( bat.BatchInterface ):
            def submitJobScript(self, job):
                return None, '', 'could not submit job'

        bs = BatSub()
        job = BatchJob()

        bs.submit( job )

        assert job.getJobId() == None
        assert time.time() - job.getQueueDates()[0] < 2
        assert not job.getSubmitOutput()[0].strip()
        assert 'could not submit job' in job.getSubmitOutput()[1]

    def test_a_python_traceback_from_submit(self):
        ""
        class BatSub( bat.BatchInterface ):
            def submitJobScript(self, job):
                raise Exception( 'test exception' )

        bs = BatSub()
        job = BatchJob()

        bs.submit( job )

        assert job.getJobId() == None
        assert time.time() - job.getQueueDates()[0] < 2
        assert 'Traceback' in job.getSubmitOutput()[1]
        assert 'test exception' in job.getSubmitOutput()[1]


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
