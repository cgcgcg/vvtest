#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import unittest
import time
import glob
import shlex
from getopt import getopt

try:
    from StringIO import StringIO
except:
    from io import StringIO

import testutils as util
from testutils import print3

from batchitf import JobQueueTable

from batchSLURM import parse_queue_table_output
from batchSLURM import parse_elapsed_time_string
from batchSLURM import parse_date_string
from batchSLURM import parse_submit_output_for_job_id
from batchSLURM import BatchSLURM

from batchjob import BatchJob


class BatchSLURM_free_functions( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test( cleanout=False )

    def test_parse_elapsed_time_string(self):
        ""
        assert parse_elapsed_time_string( '39' ) == 39
        assert parse_elapsed_time_string( '0:00' ) == 0
        assert parse_elapsed_time_string( '2:09' ) == 2*60+9
        assert parse_elapsed_time_string( '02:09' ) == 2*60+9
        assert parse_elapsed_time_string( '59:59' ) == 59*60+59
        assert parse_elapsed_time_string( '21:02:09' ) == 21*60*60+2*60+9
        assert parse_elapsed_time_string( '1-21:02:09' ) == 1*24*60*60+21*60*60+2*60+9

        # errors
        assert parse_elapsed_time_string( '62' ) == None
        assert parse_elapsed_time_string( '62:12' ) == None
        assert parse_elapsed_time_string( '3.12' ) == None
        assert parse_elapsed_time_string( '25:13:12' ) == None

    def test_parse_date_string(self):
        ""
        secs = parse_date_string( '2018-04-20T22:20:30' )
        dt = time.ctime( secs )
        # skip the hour check as simple workaround for time zones
        assert dt.startswith( 'Fri Apr 20 ' ) and dt.endswith( ':20:30 2018' )

    def test_parse_queue_table_output(self):
        ""
        jqtab = JobQueueTable()
        parse_queue_table_output( jqtab, """
SOME HEADER STUFF
7291680 _ R _ 2018-04-21T12:57:38 _ 7:37
7291807 _ PD _ N/A _ 0:00
7254586 _ CG _ 2018-04-20T21:05:58 _ 2:00:25
7254582 _ CA _ N/A _ 0:00
            """ )

        assert jqtab.numJobs() == 4

        jid = '7254586'
        assert jqtab.getState(jid) == 'running'
        assert get_month_day_year( jqtab.getStartDate(jid) ) == (4,20,2018)
        assert jqtab.getTimeUsed(jid) == 2*60*60+0*60+25

        jid = '7291680'
        assert jqtab.getState(jid) == 'running'
        assert get_month_day_year( jqtab.getStartDate(jid) ) == (4,21,2018)
        assert jqtab.getTimeUsed(jid) == 7*60+37

        jid = '7291807'
        assert jqtab.getState(jid) == 'pending'
        assert jqtab.getStartDate(jid) == None
        assert jqtab.getTimeUsed(jid) == 0

        jid = '7254582'
        assert jqtab.getState(jid) == 'done'
        assert jqtab.getStartDate(jid) == None
        assert jqtab.getTimeUsed(jid) == 0

    def test_parse_submit_output_for_job_id(self):
        ""
        jid = parse_submit_output_for_job_id(
                'Submitted batch job 291041' )
        assert jid == '291041'

        jid = parse_submit_output_for_job_id(
                'some junk\nfoo Submitted batch job 291041\nfollow on junk' )
        assert jid == '291041'

        jid = parse_submit_output_for_job_id(
                'Submitted batch job 291041_123\n' )
        assert jid == '291041_123'

        assert parse_submit_output_for_job_id( '' ) == None
        assert parse_submit_output_for_job_id( 'Submitted blah' ) == None


def get_month_day_year( epoch_time ):
    ""
    tup = time.localtime( epoch_time )
    return ( tup[1], tup[2], tup[0] )


############################################################################

class BatchSLURM_methods( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test( cleanout=False )

    def test_write_minimal_header(self):
        ""
        bat = BatchSLURM()
        job = BatchJob()

        sio = StringIO()
        bat.writeScriptHeader( job, sio )

        s = sio.getvalue()
        assert 'SBATCH --nodes=1' in s
        assert 'SBATCH --time=' in s
        assert 'SBATCH --output='+job.getLogFileName() in s
        assert len( util.grep( s, '#SBATCH ' ) ) == 3

    def test_write_full_header(self):
        ""
        bat = BatchSLURM()
        job = BatchJob()
        job.setNumNodes( 5 )
        job.setQueueName( 'bigmem' )
        job.setAccount( 'vip' )

        sio = StringIO()
        bat.writeScriptHeader( job, sio )

        s = sio.getvalue()
        assert 'SBATCH --nodes=5' in s
        assert 'SBATCH --time=' in s
        assert 'SBATCH --output='+job.getLogFileName() in s
        assert 'SBATCH --partition=bigmem' in s
        assert 'SBATCH --account=vip' in s
        assert len( util.grep( s, '#SBATCH ' ) ) == 5

    def test_exercise_the_submit_function(self):
        ""
        def do_sbatch( command ):
            assert command.startswith( 'sbatch ' )
            out = "Submitted batch job 291041"
            return 0,out,''

        bat = BatchSLURM()
        bat.setBatchCommandRunner( do_sbatch )

        job = BatchJob()

        jid,out,err = bat.submitJobScript( job )

        assert jid == '291041'

    def test_exercise_the_queue_query_function(self):
        ""
        def do_squeue( command ):
            assert command.startswith( 'squeue ' )
            out = """
7291680 _ R _ 2018-04-21T12:57:38 _ 7:37
7291807 _ PD _ N/A _ 0:00
7254586 _ CD _ 2018-04-20T21:05:58 _ 2:00:25
            """
            return 0,out,''

        bat = BatchSLURM()
        bat.setBatchCommandRunner( do_squeue )

        jobtable = JobQueueTable()

        bat.queryQueue( jobtable )

        assert jobtable.numJobs() == 3


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
