#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import unittest
import time
import glob

import testutils as util
from testutils import print3

from batchjob import BatchJob

from batchscripts import BatchScripts
from batchscripts import ScriptProcess

from system_tests import Batch_output_file
from system_tests import Batch_work_directory
from system_tests import Batch_submit
from system_tests import Batch_queue_dates
from system_tests import Batch_start_stop_dates
from system_tests import Batch_timeout
from system_tests import Batch_cancel



class Class_ScriptProcess( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_unique_process_ids_are_created(self):
        ""
        ps1 = ScriptProcess( None )
        id1 = ps1.getId()

        ps2 = ScriptProcess( None )
        id2 = ps2.getId()

        assert id1 != id2

    def test_optional_args_checking(self):
        ""
        ps = ScriptProcess( None, redirect=None, timeout=None )
        ps = ScriptProcess( None, redirect=None, timeout=3 )
        ps = ScriptProcess( None, redirect=None, timeout=3.3 )

    def test_run_script(self):
        ""
        util.writefile( 'runme', """
            cd """+os.getcwd()+"""
            touch hello.txt
            """ )
        time.sleep(1)

        ps = ScriptProcess( 'runme' )

        t0,t1 = ps.getDates()
        assert t0 == None and t1 == None

        ps.run()
        time.sleep(1)

        wait_on_script_process( ps, 5 )

        t0,t1 = ps.getDates()

        assert t0 and t1
        assert os.path.exists( 'hello.txt' )
        assert t1-t0 > 0

    def test_failed_script_exit_status(self):
        ""
        util.writefile( 'runme', """
            exit 1
            """ )
        time.sleep(1)

        ps = ScriptProcess( 'runme' )
        ps.run()
        wait_on_script_process( ps, 5 )

        t0,t1 = ps.getDates()

        assert t0 and t1
        assert t1-t0 > 1

    def test_timeout_waiting_on_script(self):
        ""
        util.writefile( 'runme', """
            sleep 5
            """ )
        time.sleep(1)

        ps = ScriptProcess( 'runme' )
        ps.run()
        wait_on_script_process( ps, 2 )

        t0,t1 = ps.getDates()
        assert t0 != None and t1 == None

        wait_on_script_process( ps, 5 )
        t0,t1 = ps.getDates()
        assert t0 != None and t1 != None and t1-t0 > 4

    def test_get_runtime_before_and_after_completion(self):
        ""
        util.writefile( 'runme', """
            sleep 3
            """ )
        time.sleep(1)

        ps = ScriptProcess( 'runme' )
        ps.run()

        time.sleep(1)
        ps.poll()
        t0,t1 = ps.getDates()

        time.sleep(4)
        ps.poll()
        t2,t3 = ps.getDates()

        assert t0 != None and t1 == None
        assert t2 != None and t3 != None
        assert t3-t2 > 0 and t3-t2 < 8

    def test_script_that_times_out(self):
        ""
        util.writefile( 'runme', """
            sleep 10
            """ )
        time.sleep(1)

        ps = ScriptProcess( 'runme', timeout=3 )
        ps.run()

        script_process_sleep_and_poll( ps, 5 )
        t0,t1 = ps.getDates()

        assert t0 and t1 and t1-t0 > 2 and t1-t0 < 9

    def test_a_script_that_times_out_but_doesnt_die(self):
        ""
        util.writefile( 'runme', """
            trap "sleep 5" SIGTERM
            sleep 5
            """ )
        time.sleep(1)

        ps = ScriptProcess( 'runme', timeout=3 )
        ps.run()

        script_process_sleep_and_poll( ps, 6 )

        # if the trap worked, the process should still be alive
        t0,t1 = ps.getDates()

        script_process_sleep_and_poll( ps, 6 )

        # by now both sleeps should be finished
        t2,t3 = ps.getDates()

        assert t0 and not t1
        assert t2 and t3
        assert t3-t2 > 5 and t3-t2 < 12

    def test_kill_a_script_while_its_running(self):
        ""
        util.writefile( 'runme', """
            sleep 10
            """ )
        time.sleep(1)

        ps = ScriptProcess( 'runme' )
        ps.run()

        script_process_sleep_and_poll( ps, 2 )

        ps.kill()

        script_process_sleep_and_poll( ps, 2 )

        t0,t1 = ps.getDates()
        assert t0 and t1
        assert t1-t0 >= 2 and t1-t0 < 9

    def test_killing_a_script_but_it_doesnt_die(self):
        ""
        util.writefile( 'runme', """
            trap "sleep 5" SIGTERM
            sleep 5
            """ )
        time.sleep(1)

        ps = ScriptProcess( 'runme' )
        ps.run()

        script_process_sleep_and_poll( ps, 2 )

        ps.kill()
        time.sleep(1)
        ps.poll()

        # if the trap worked, the process should still be alive
        t0,t1 = ps.getDates()
        assert t1 == None

        for i in range(10):
            ps.poll()
            t0,t1 = ps.getDates()
            if t1:
                break
            time.sleep(1)

        t0,t1 = ps.getDates()

        assert t0 and t1
        assert t1-t0 > 5 and t1-t0 < 12

    def test_redirect_script_output(self):
        ""
        util.writefile( 'runme', """
            echo hello
            echo world 1>&2
            sleep 1
            """ )
        time.sleep(1)
        outfile = os.path.abspath( 'out.txt' )

        ps = ScriptProcess( 'runme', redirect=outfile )
        ps.run()

        wait_on_script_process( ps, 5 )
        time.sleep(1)

        t0,t1 = ps.getDates()
        assert t0 and t1 and t1-t0 > 0
        assert len( util.filegrep( outfile, 'hello' ) ) == 1
        assert len( util.filegrep( outfile, 'world' ) ) == 1


############################################################################

def script_process_sleep_and_poll( script_ps, loop_length ):
    ""
    for i in range( loop_length ):
        time.sleep(1)
        script_ps.poll()


def wait_on_script_process( sproc, wait_limit=None ):
    ""
    tenter = time.time()

    while True:

        start,stop = sproc.getDates()

        if start and stop:
            break

        sproc.poll()

        if wait_limit != None and time.time()-tenter > wait_limit:
            break

        time.sleep(1)


############################################################################

class BatchScripts_output_file( Batch_output_file, unittest.TestCase ):

    def makeBatchInterface(self):
        return BatchScripts()


class BatchScripts_work_directory( Batch_work_directory, unittest.TestCase ):

    def makeBatchInterface(self):
        return BatchScripts()


class BatchScripts_submit( Batch_submit, unittest.TestCase ):

    def makeBatchInterface(self):
        return BatchScripts()


class BatchScripts_queue_dates( Batch_queue_dates, unittest.TestCase ):

    def makeBatchInterface(self):
        return BatchScripts()


class BatchScripts_start_stop_dates( Batch_start_stop_dates, unittest.TestCase ):

    def makeBatchInterface(self):
        return BatchScripts()


class BatchScripts_timeout( Batch_timeout, unittest.TestCase ):

    def makeBatchInterface(self):
        return BatchScripts()


class BatchScripts_cancel( Batch_cancel, unittest.TestCase ):

    def makeBatchInterface(self):
        return BatchScripts()


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
