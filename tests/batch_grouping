#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import dirname
import time

import vvtestutils as vtu
import testutils as util

from libvvtest.batchutils import compute_queue_time
from libvvtest.grouper import BatchTestGrouper


class unit_tests( vtu.vvtestTestCase ):

    def test_batch_grouping_is_by_np_and_timeout(self):
        ""
        tlist = vtu.make_fake_TestList( timespec='timeout' )
        gpr = BatchTestGrouper( tlist, None )
        gpr.createGroups()

        batches = deterministic_order( gpr.getGroups() )
        assert len( batches ) == 2
        assert_batch_group( batches[0], ['sdir/atest1.np=2', (2,0), 22],
                                        ['sdir/atest0.np=2', (2,0), 12] )
        assert_batch_group( batches[1], ['sdir/atest1.np=1', (1,0), 21],
                                        ['sdir/atest0.np=1', (1,0), 11] )
        self.assertEqual( batches[0].getTime(), 34 )
        self.assertEqual( batches[1].getTime(), 32 )

    def test_limit_batch_size_by_time(self):
        ""
        tlist = vtu.make_fake_TestList( timespec='timeout' )
        gpr = BatchTestGrouper( tlist, 5 )
        gpr.createGroups()

        batches = deterministic_order( gpr.getGroups() )
        assert len( batches ) == 4
        assert_batch_group( batches[0], ['sdir/atest1.np=2', (2,0), 22] )
        assert_batch_group( batches[1], ['sdir/atest1.np=1', (1,0), 21] )
        assert_batch_group( batches[2], ['sdir/atest0.np=2', (2,0), 12] )
        assert_batch_group( batches[3], ['sdir/atest0.np=1', (1,0), 11] )

    def test_grouping_tests_with_dependencies(self):
        ""
        cwd = os.getcwd()

        util.writefile( 'testA.vvt', """
            #VVT: parameterize : np = 2
            #VVT: parameterize : foo = bar baz
            """ )
        util.writefile( 'testB.vvt', """
            #VVT: depends on = testA.*
            """ )
        util.writefile( 'testC.vvt', """
            #VVT: parameterize : np = 2 4
            #VVT: analyze = --analyze
            """ )
        time.sleep(1)

        tlist = vtu.scan_to_make_TestList( '.', timeout_attr=5 )

        gpr = BatchTestGrouper( tlist, 60 )
        gpr.createGroups()

        batches = deterministic_order( gpr.getGroups() )
        self.assertEqual( len( batches ), 4 )
        assert_batch_group( batches[0], ['testC.np=2', (2,0), 5],
                                        ['testA.foo=baz.np=2', (2,0), 5],
                                        ['testA.foo=bar.np=2', (2,0), 5] )
        assert_batch_group( batches[1], ['testC.np=4', (4,0), 5] )
        assert_batch_group( batches[2], ['testC', (1,0), 5] )
        assert_batch_group( batches[3], ['testB', (1,0), 5] )

    def test_that_tests_with_no_timeout_go_in_their_own_group(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np = 3
            #VVT: parameterize : foo = bar baz
            """ )
        time.sleep(1)

        tlist = vtu.scan_to_make_TestList( '.', timeout_attr=0 )

        gpr = BatchTestGrouper( tlist, 60 )
        gpr.createGroups()

        batches = deterministic_order( gpr.getGroups() )
        assert len( batches ) == 2
        assert_batch_group( batches[0], ['atest.foo=baz.np=3', (3,0), 0] )
        assert_batch_group( batches[1], ['atest.foo=bar.np=3', (3,0), 0] )
        self.assertEqual( batches[0].getTime(), 0 )
        self.assertEqual( batches[1].getTime(), 0 )
        self.assertEqual( compute_queue_time( batches[0], None, 321 ), 321 )

    def test_tests_with_different_num_devices_go_into_different_groups(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np = 2
            #VVT: parameterize : ndevice = 0 2 4
            """ )
        time.sleep(1)

        tlist = vtu.scan_to_make_TestList( '.', timeout_attr=5 )

        gpr = BatchTestGrouper( tlist, 60 )
        gpr.createGroups()

        batches = deterministic_order( gpr.getGroups() )
        assert len(batches) == 3
        assert_batch_group( batches[0], ['atest.ndevice=4.np=2', (2, 4), 5] )
        assert_batch_group( batches[1], ['atest.ndevice=2.np=2', (2, 2), 5] )
        assert_batch_group( batches[2], ['atest.ndevice=0.np=2', (2, 0), 5] )

    def test_same_num_procs_and_same_devices_can_go_into_same_group(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np,ndevice = 2,4
            """ )
        util.writefile( 'btest.vvt', """
            #VVT: parameterize : np,ndevice = 2,4 4,4
            """ )
        time.sleep(1)

        tlist = vtu.scan_to_make_TestList( '.', timeout_attr=5 )

        gpr = BatchTestGrouper( tlist, 60 )
        gpr.createGroups()

        batches = deterministic_order( gpr.getGroups() )
        assert len(batches) == 2
        assert_batch_group( batches[0], ['btest.ndevice=4.np=2', (2, 4), 5],
                                        ['atest.ndevice=4.np=2', (2, 4), 5] )
        assert_batch_group( batches[1], ['btest.ndevice=4.np=4', (4, 4), 5] )


def deterministic_order( batches ):
    """
    for testing, break ties in the group sort by using the test names in the groups
    """
    newlist = []
    i = 0
    while i < len(batches):
        j = i
        while j < len(batches) and tsum_and_size_tie( batches[i], batches[j] ):
            j += 1
        newlist.extend( sort_sub_batch( batches[i:j] ) )
        i = j

    return newlist


def tsum_and_size_tie( grp1, grp2 ):
    ""
    k1 = grp1.makeSortableKey()
    k2 = grp2.makeSortableKey()
    return k1[0] == k2[0] and k1[1] == k2[1]


def sort_sub_batch( grplist ):
    ""
    subL = []
    for i,grp in enumerate(grplist):
        tL = [ tc.getSpec().getDisplayString() for tc in grp.getTests() ]
        tL.sort( reverse=True )
        subL.append( [ tL, i, grp ] )

    subL.sort( reverse=True )  # reverse order for consistency

    return [ grp for _,_,grp in subL ]


def assert_batch_group( batchgroup, *name_size_time ):
    ""
    grpL = batch_group_to_list( batchgroup )
    assert len(grpL) == len(name_size_time)
    for i,grp in enumerate(grpL):
        assert grp == name_size_time[i]


def batch_group_to_list( batchgroup ):
    """
    sorts and returns the tests in a batch group; sorts first on timeout, then
    size, then test display string
    """
    gL = []

    for tcase in batchgroup.getTests():
        gL.append( [ tcase.getStat().getAttr( 'timeout' ),
                     tcase.getSize(),
                     tcase.getSpec().getDisplayString() ] )

    gL.sort( reverse=True )

    return [ [tup[2],tup[1],tup[0]] for tup in gL ]


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
