#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import dirname
import time

import vvtestutils as vtu
import testutils as util

from libvvtest.batchutils import BatchTestGrouper


class unit_tests( vtu.vvtestTestCase ):

    def test_batch_grouping_is_by_np_and_timeout(self):
        ""
        tlist, xlist = vtu.make_fake_TestExecList( timespec='timeout' )
        gpr = BatchTestGrouper( xlist, None, None )
        gpr.construct()

        batches = gpr.getGroups()
        assert len( batches ) == 2
        grpL = batch_group_to_list( batches[0] )
        assert grpL == [['sdir/atest1.np=2', (2,0), 22],
                        ['sdir/atest0.np=2', (2,0), 12]]
        grpL = batch_group_to_list( batches[1] )
        assert grpL == [['sdir/atest1.np=1', (1,0), 21],
                        ['sdir/atest0.np=1', (1,0), 11]]

    def test_limit_batch_size_by_time(self):
        ""
        tlist, xlist = vtu.make_fake_TestExecList( timespec='timeout' )
        gpr = BatchTestGrouper( xlist, 5, None )
        gpr.construct()

        batches = gpr.getGroups()
        assert len( batches ) == 4
        assert batch_group_to_list( batches[0] ) == [['sdir/atest1.np=2', (2,0), 22]]
        assert batch_group_to_list( batches[1] ) == [['sdir/atest1.np=1', (1,0), 21]]
        assert batch_group_to_list( batches[2] ) == [['sdir/atest0.np=2', (2,0), 12]]
        assert batch_group_to_list( batches[3] ) == [['sdir/atest0.np=1', (1,0), 11]]

    def test_grouping_tests_with_dependencies(self):
        ""
        cwd = os.getcwd()

        util.writefile( 'testA.vvt', """
            #VVT: parameterize : np = 2
            #VVT: parameterize : foo = bar baz
            """ )
        util.writefile( 'testB.vvt', """
            #VVT: depends on = testA.*
            """ )
        util.writefile( 'testC.vvt', """
            #VVT: parameterize : np = 2 4
            #VVT: analyze = --analyze
            """ )
        time.sleep(1)

        tlist,xlist = vtu.scan_to_make_TestExecList( '.', timeout_attr=5 )

        gpr = BatchTestGrouper( xlist, 60, None )
        gpr.construct()

        batches = gpr.getGroups()
        assert len( batches ) == 4
        for bat in batches:
            print ( batch_group_to_list(bat) )
        gL = batch_group_to_list( batches[0] )
        gL.sort()  # order within the group is not guaranteed with equal times
        assert gL == [ ['testA.foo=bar.np=2', (2,0), 5],
                       ['testA.foo=baz.np=2', (2,0), 5],
                       ['testC.np=2', (2,0), 5] ]
        assert batch_group_to_list( batches[1] ) == [['testC.np=4', (4,0), 5]]
        g2 = batch_group_to_list( batches[2] )
        g3 = batch_group_to_list( batches[3] )
        if g2 == [['testB', (1,0), 5]]:
            assert g3 == [['testC', (1,0), 5]]
        else:
            assert g2 == [['testC', (1,0), 5]]
            assert g3 == [['testB', (1,0), 5]]

    def test_grouping_tests_with_no_timeout(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np = 3
            #VVT: parameterize : foo = bar baz
            """ )
        time.sleep(1)

        tlist,xlist = vtu.scan_to_make_TestExecList( '.', timeout_attr=0 )

        gpr = BatchTestGrouper( xlist, 60, None )
        gpr.construct()

        batches = gpr.getGroups()
        for bat in batches:
            print ( batch_group_to_list(bat) )
        assert len( batches ) == 2
        g1 = batch_group_to_list( batches[0] )
        g2 = batch_group_to_list( batches[1] )
        if g1 == [['atest.foo=bar.np=3', (3,0), 0]]:
            assert g2 == [['atest.foo=baz.np=3', (3,0), 0]]
        else:
            assert g1 == [['atest.foo=baz.np=3', (3,0), 0]]
            assert g2 == [['atest.foo=bar.np=3', (3,0), 0]]

    def test_tests_with_different_num_devices_go_into_different_groups(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np = 2
            #VVT: parameterize : ndevice = 0 2 4
            """ )
        time.sleep(1)

        tlist,xlist = vtu.scan_to_make_TestExecList( '.', timeout_attr=5 )

        gpr = BatchTestGrouper( xlist, 60, None )
        gpr.construct()

        batches = gpr.getGroups()
        bL = []
        for bat in batches:
            bL.append( batch_group_to_list(bat) )
            print ( bL[-1] )

        assert len( bL ) == 3
        bL.sort()
        assert bL == [ [['atest.ndevice=0.np=2', (2, 0), 5]],
                       [['atest.ndevice=2.np=2', (2, 2), 5]],
                       [['atest.ndevice=4.np=2', (2, 4), 5]] ]

    def test_same_num_procs_and_same_devices_can_go_into_same_group(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np,ndevice = 2,4
            """ )
        util.writefile( 'btest.vvt', """
            #VVT: parameterize : np,ndevice = 2,4 4,4
            """ )
        time.sleep(1)

        tlist,xlist = vtu.scan_to_make_TestExecList( '.', timeout_attr=5 )

        gpr = BatchTestGrouper( xlist, 60, None )
        gpr.construct()

        batches = gpr.getGroups()
        bL = []
        for bat in batches:
            bL.append( batch_group_to_list(bat) )
            print ( bL[-1] )

        assert len( bL ) == 2
        assert len( bL[0] ) == 2
        bL[0].sort()
        assert bL[0] == [ ['atest.ndevice=4.np=2', (2, 4), 5],
                          ['btest.ndevice=4.np=2', (2, 4), 5] ]
        assert bL[1] == [['btest.ndevice=4.np=4', (4, 4), 5]]


def batch_group_to_list( batchgroup ):
    ""
    gL = []

    for tcase in batchgroup:
        tspec = tcase.getSpec()
        tstat = tcase.getStat()
        gL.append( [ tspec.getDisplayString(),
                     tcase.getSize(),
                     tstat.getAttr( 'timeout' ) ] )

    return gL


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
