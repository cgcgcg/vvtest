#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util

import libvvtest.testcreator as testcreator
import libvvtest.timehandler as timehandler
from libvvtest.fmtresults import LookupCache


class plugin_tests( vtu.vvtestTestCase ):

    def test_runtime_plugin_function(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: keywords = foo bar
            """ )

        util.writefile( 'btest.vvt', """
            #VVT: keywords = bar baz
            """ )

        plug = vtu.make_user_plugin( """
            def test_runtime( specs ):
                ""
                if 'foo' in specs['keywords']:
                    return 30
            """ )

        tcase = vtu.create_tests_from_file( 'atest.vvt' )[0]
        tm = plug.testRuntime( tcase )
        self.assertEqual( tm, 30 )

        tcase = vtu.create_tests_from_file( 'btest.vvt' )[0]
        tm = plug.testRuntime( tcase )
        self.assertEqual( tm, None )


class handler_tests( vtu.vvtestTestCase ):

    def test_load_runtimes_from_test_case_list(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: keywords = foo bar
            """ )

        util.writefile( 'btest.vvt', """
            #VVT: keywords = bar baz
            """ )

        plug = vtu.make_user_plugin( """
            def test_runtime( specs ):
                ""
                if 'foo' in specs['keywords']:
                    return 30
            """ )

        tclist = vtu.create_tests_from_file( 'atest.vvt' )
        tclist.extend( vtu.create_tests_from_file( 'btest.vvt' ) )

        handler = make_time_handler( plug )

        handler.loadExternalRuntimes( tclist )

        for tc in tclist:
            if tc.getSpec().getName() == 'atest':
                self.assertEqual( tc.getStat().getRuntime(), 30 )
            else:
                assert tc.getSpec().getName() == 'btest'
                self.assertEqual( tc.getStat().getRuntime(), 67 )


#####################################################################

class MockLookupCache:

    def load(self):
        ""
        pass

    def getRunTime(self, tspec):
        ""
        return 67,"pass"


def make_time_handler( plug ):
    ""
    cache = MockLookupCache()

    th = timehandler.TimeHandler( plug, None, None, None, cache )

    return th


############################################################################

util.run_test_cases(sys.argv, sys.modules[__name__])
