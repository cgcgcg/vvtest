#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import signal
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3


class running_after_vvtest_is_killed( vtu.vvtestTestCase ):

    def test_vvtest_closes_files_ok_under_KeyboardInterrupt(self):
        ""
        util.writefile( "sleeper.vvt", """
            import time
            time.sleep(10)
            """ )

        for batch in [False,True]:

            vtu.remove_results()

            out = vtu.launch_vvtest_then_terminate_it( batch=batch,
                                                       signum=signal.SIGINT,
                                                       addverbose=False )
            print3( out )

            counts = vtu.parse_vvtest_counts( out )
            assert counts['total'] == 0

            vrun = vtu.runvvtest()
            vrun.assertCounts( total=1, npass=1 )
            assert vrun.countLines( 'rror*another process' ) == 0

    def test_vvtest_fails_to_run_if_a_previous_run_was_killed(self):
        ""
        util.writefile( "sleeper.vvt", """
            import time
            time.sleep(10)
            """ )

        for batch in [False,True]:

            vtu.remove_results()

            out = vtu.launch_vvtest_then_terminate_it( batch=batch,
                                                       addverbose=False )
            print3( out )

            counts = vtu.parse_vvtest_counts( out )
            assert counts['total'] == 0

            vrun = vtu.runvvtest( raise_on_error=False )
            assert vrun.x > 0
            assert vrun.countLines( 'rror*another process' ) == 1

    def test_running_vvtest_after_killed_but_in_TestResults_directory(self):
        ""
        util.writefile( "sleeper.vvt", """
            import time
            time.sleep(10)
            """ )

        out = vtu.launch_vvtest_then_terminate_it( addverbose=False )
        print3( out )

        tdir = util.globfile( 'TestResults*' )

        counts = vtu.parse_vvtest_counts( out )
        assert counts['total'] == 0

        vrun = vtu.runvvtest( raise_on_error=False, chdir=tdir )
        assert vrun.x > 0
        assert vrun.countLines( 'rror*another process' ) == 1

    def test_forcing_vvtest_to_run_after_previous_was_killed(self):
        ""
        util.writefile( "sleeper1.vvt", """
            #VVT: timeout : 20
            import time
            time.sleep(5)
            """ )
        util.writefile( "sleeper2.vvt", """
            #VVT: timeout : 20
            import time
            time.sleep(5)
            """ )

        for batch in [False,True]:

            vtu.remove_results()

            # using SIGTERM prevents the "finished" mark from getting placed
            spec = vtu.interrupt_test_hook( batch=batch, count=1,
                                            signum='SIGTERM' )
            vtu.run_vvtest_with_hook( '--batch-limit 1 -n 1', spec, batch=batch )

            # this one should fail
            vrun = vtu.runvvtest( raise_on_error=False, batch=batch )
            assert vrun.x > 0
            assert vrun.countLines( 'rror*another process' ) == 1

            # this one should be forced to run
            vrun = vtu.runvvtest( '--force', batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            assert vrun.countLines( 'rror*another process' ) == 0

            vtu.runvvtest( '-i -v' ).assertCounts( total=2, npass=2 )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
