#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util


class runtimes_and_tsum( vtu.vvtestTestCase ):

    def test_tsum_option_will_use_timings_file(self):
        ""
        util.write_py_script( "tests/AA.vvt", """
            import os, sys, time
            time.sleep(1)
            """ )
        util.write_py_script( "tests/BB.vvt", """
            #VVT: parameterize : planet=mercury mars venus
            #VVT: analyze : --analyze
            import os, sys, time
            import vvtest_util as vvt
            if '--analyze' not in sys.argv:
                if vvt.planet == 'mercury':
                    time.sleep(3)
                elif vvt.planet == 'mars':
                    time.sleep(4)
                elif vvt.planet == 'venus':
                    time.sleep(5)
            else:
                time.sleep(3)  # the analyze test
            """ )
        util.write_py_script( "tests/CC.vvt", """
            import os, sys, time
            time.sleep(2)
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            if os.path.exists( 'timings' ):
                os.remove( 'timings' )

            vrun = vtu.runvvtest( 'tests', batch=batch )
            vrun.assertCounts( total=6, npass=6 )
            tdir = vrun.resultsDir()

            # create a timings file
            util.runcmd( vtu.resultspy + ' save', chdir='tests' )
            vtu.runvvtest( '-i --save-results', chdir=tdir )
            resultsfname = util.globfile('results.*')
            util.runcmd( vtu.resultspy + ' merge -x '+resultsfname )

            vtu.remove_results()

            vrun = vtu.runvvtest( '--tsum 6 tests', batch=batch )
            vrun.assertCounts( total=2, npass=2 )
            assert vrun.getTestIds() == [ 'AA', 'CC' ]

            vrun = vtu.runvvtest( '-R', chdir=tdir, batch=batch )
            vrun.assertCounts( total=2, npass=2 )
            assert vrun.getTestIds() == [ 'AA', 'CC' ]


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
