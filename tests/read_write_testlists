#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath, basename
import time
import glob
import stat
import struct
import unittest

import vvtestutils as vtu
import testutils as util

import libvvtest.testlistio as tio
import libvvtest.testlist as testlist
import libvvtest.testspec as testspec
from libvvtest.testcase import TestCase
import libvvtest.paramset as ParameterSet
from libvvtest.tcfactory import TestCaseFactory


class TestSpec_to_and_from_string( vtu.vvtestTestCase ):

    def setUp(self):
        vtu.vvtestTestCase.setUp( self, cleanout=False )

    def test_converting_a_test_to_a_string_and_back(self):
        ""
        tcase = create_TestCase()

        sid = tio.test_to_string( tcase )
        assert '\n' not in sid
        tcase2 = tio.string_to_test( sid, TestCaseFactory() )

        assert_TestCase_same_as_fake( tcase2 )

    def test_converting_an_analyze_test_to_string_and_back(self):
        ""
        tcase = create_fake_analyze_TestCase()

        sid = tio.test_to_string( tcase )
        tcase2 = tio.string_to_test( sid, TestCaseFactory() )

        assert tcase2.getSpec().isAnalyze()


class test_list_file_read_write( vtu.vvtestTestCase ):

    def test_the_start_and_end_dates_are_written_into_the_file(self):
        ""
        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start()
        time.sleep(2)
        tlw.finish()

        tlr = tio.TestListReader( TestCaseFactory(), 'tests.out' )
        tlr.read()
        d1 = tlr.getStartDate()
        d2 = tlr.getFinishDate()
        assert d2-d1 > 1 and d2-d1 < 5
        assert time.time() - d1 < 10

    def test_write_then_read_test_list_attributes(self):
        ""
        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start( strname='some value', intname=101, floatname=1.01 )
        tlw.finish()

        tlr = tio.TestListReader( TestCaseFactory(), 'tests.out' )
        tlr.read()

        assert tlr.getAttr( 'foobar', 'default value' ) == 'default value'
        self.assertRaises( Exception, tlr.getAttr, 'foobar' )
        assert tlr.getAttr( 'strname' ) == 'some value'
        assert tlr.getAttr( 'intname' ) == 101
        assert tlr.getAttr( 'floatname' ) == 1.01

    def test_write_and_read_a_test(self):
        ""
        tcase = vtu.make_fake_TestCase( result='pass', name='atest' )

        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start()
        tlw.append( tcase )
        tlw.finish()

        tlr = tio.TestListReader( TestCaseFactory(), 'tests.out' )
        tlr.read()

        tcase = get_single_test_from_test_list( tlr )
        tspec = tcase.getSpec()
        assert tspec.getDisplayString() == 'sdir/atest.np=4'
        kwds = tspec.getKeywords( include_implicit=False )
        assert 'key1' in kwds and 'key2' in kwds
        assert tcase.getStat().isDone()

    def test_read_an_unfinished_test_results_file(self):
        ""
        tcase = vtu.make_fake_TestCase( result='pass', name='atest' )

        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start()
        tlw.append( tcase )
        # an "unfinished" file does not have tlw.finish() called

        tlr = tio.TestListReader( TestCaseFactory(), 'tests.out' )
        tlr.read()

        tm = time.time()
        assert tm - tlr.getStartDate() < 5
        assert tlr.getFinishDate() is None
        tcase = get_single_test_from_test_list( tlr )
        assert tcase.getSpec().getDisplayString() == 'sdir/atest.np=4'

    def write_with_include_file(self, tcase, skip_completed_mark=False):
        ""
        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start()

        tlw.addIncludeFile( 'tests.0' )
        tlw.append( tcase )

        tstart = time.time()

        write_test_sequence_to_file( 'tests.0', tcase )

        if not skip_completed_mark:
            tlw.append( tcase )
            tlw.includeFileCompleted( 'tests.0' )

        time.sleep(1)

        tlw.finish()

        tdone = time.time()

        return tstart, tdone

    def test_write_and_read_using_an_include_file(self):
        ""
        tcase = vtu.make_fake_TestCase( result='notrun', name='atest' )

        tstart,tdone = self.write_with_include_file( tcase )

        tlr = tio.TestListReader( TestCaseFactory(), 'tests.out' )
        tlr.read()

        tcase = get_single_test_from_test_list( tlr )
        assert tcase.getSpec().getDisplayString() == 'sdir/atest.np=4'
        assert tcase.getStat().passed()

        tm = tlr.getStartDate()
        assert tstart >= tm and tstart-tm < 2
        tm = tlr.getFinishDate()
        assert tdone >= tm and tdone-tm < 2

    def test_include_files_are_not_read_if_marked_completed(self):
        ""
        tcase = vtu.make_fake_TestCase( result='notrun', name='atest' )

        self.write_with_include_file( tcase )

        os.remove( 'tests.0' )

        tlr = tio.TestListReader( TestCaseFactory(), 'tests.out' )
        tlr.read()

        tcase = get_single_test_from_test_list( tlr )
        assert tcase.getSpec().getDisplayString() == 'sdir/atest.np=4'
        assert tcase.getStat().passed()

    def test_include_files_are_read_if_not_marked_completed(self):
        ""
        tcase = vtu.make_fake_TestCase( result='notrun', name='atest' )

        self.write_with_include_file( tcase, skip_completed_mark=True )

        tlr = tio.TestListReader( TestCaseFactory(), 'tests.out' )
        tlr.read()

        tcase = get_single_test_from_test_list( tlr )
        assert tcase.getSpec().getDisplayString() == 'sdir/atest.np=4'
        assert tcase.getStat().passed()

        # without the include file, the final test status is lost
        os.remove( 'tests.0' )

        tlr = tio.TestListReader( TestCaseFactory(), 'tests.out' )
        tlr.read()

        tcase = get_single_test_from_test_list( tlr )
        assert tcase.getSpec().getDisplayString() == 'sdir/atest.np=4'
        assert tcase.getStat().isNotrun()

    def test_include_files_are_relative_to_parent_file_directory(self):
        ""
        os.mkdir( 'rundir' )
        write_test_list_with_include( 'tests.out', 'subdir/tests.0' )

        rootdir = os.getcwd()
        tfile = abspath( 'tests.out' )

        os.chdir( 'rundir' )
        tlr = tio.TestListReader( TestCaseFactory(), tfile )
        tlr.read()

        tcase = get_single_test_from_test_list( tlr )
        assert_TestCase_same_as_fake( tcase, rootdir )

    def test_write_a_test_file_then_scan_it_for_the_finish_date(self):
        ""
        write_test_list_with_fake_test( 'tests.out' )

        tlr = tio.TestListReader( TestCaseFactory(), 'tests.out' )
        tm = tlr.scanForFinishDate()
        assert tm and (time.time() - tm) < 10

        tlr = tio.TestListReader( TestCaseFactory(), 'tests.out' )
        tlr.read()
        assert abs( tlr.getFinishDate() - tm ) < 2

    def test_scan_an_unfinished_test_results_file(self):
        ""
        tlw = tio.TestListWriter( 'tests.out' )
        tlw.start()
        tcase = create_TestCase_with_results()
        tlw.append( tcase )

        tlr = tio.TestListReader( TestCaseFactory(), 'tests.out' )
        tm = tlr.scanForFinishDate()
        assert tm is None

    def test_read_unfinished_results_file_with_include(self):
        ""
        write_test_list_with_include( 'tests.out', 'tests.0', finish=False )

        tlr = tio.TestListReader( TestCaseFactory(), 'tests.out' )
        tlr.read()

        tcase = get_single_test_from_test_list( tlr )
        assert_TestCase_same_as_fake( tcase )

        tm = tlr.getStartDate()
        assert tm != None and time.time() - tm < 10
        assert tlr.getFinishDate() is None


class TestList_results_file( vtu.vvtestTestCase ):

    def test_write_a_test_list_file_then_read_it(self):
        ""
        write_TestList_with_fake_test()
        read_TestList_and_check_fake_test()

    def test_handling_of_relative_root_paths(self):
        ""
        os.mkdir( 'sub1' )
        os.mkdir( 'sub2' )

        with util.change_directory( 'sub1' ):
            tl = testlist.TestList( TestCaseFactory(), 'test.list' )
            tl.addTest( vtu.make_test_case( 'tsrc/at.vvt', '' ) )
            tl.stringFileWrite()

        with util.change_directory( 'sub2' ):
            tl = testlist.TestList( TestCaseFactory(), '../sub1/test.list' )
            tl.readTestList( root_path_prefix='../sub1' )

            tL = list( tl.getTests() )
            self.assertEqual( len(tL), 1 )
            ts = tL[0].getSpec()
            assert not os.path.isabs( ts.getFilename() )
            assert os.path.samefile( ts.getFilename(), '../sub1/tsrc/at.vvt' )

    def test_set_filename_separately(self):
        ""
        tl = testlist.TestList( TestCaseFactory() )
        tl.setResultsDate()
        f1 = basename( tl.getResultsFilename() )

        tl.setFilename( 'foobar' )
        f2 = basename( tl.getResultsFilename() )

        bn1,xt1 = f1.split('.',1)
        bn2,xt2 = f2.split('.',1)
        assert bn1 != bn2
        self.assertEqual( xt1, xt2 )

    def test_arbitrary_attributes_can_be_written(self):
        ""
        tl = testlist.TestList( TestCaseFactory() )
        tcase = create_TestCase()
        tl.addTest( tcase )
        tl.stringFileWrite( anything=['A',1] )

        tr = tio.TestListReader( TestCaseFactory(), tl.getFilename() )
        tr.read()
        assert tr.getAttr( 'anything' ) == ['A',1]

        tl.setResultsDate()
        tl.initializeResultsFile( checkme={'A':1} )
        tl.writeFinished()

        tr = tio.TestListReader( TestCaseFactory(), tl.getResultsFilename() )
        tr.read()
        D = tr.getAttr( 'checkme' )
        assert len(D) == 1 and D['A'] == 1

    def test_write_a_test_list_and_results_then_read_it(self):
        ""
        tl = write_TestList_with_fake_test()
        tl.setResultsDate()
        rfile = write_TestList_fake_results( tl )

        bname = basename( rfile )
        assert bname.startswith( 'testlist' ) and bname != 'testlist'

        fn = util.globfile( 'testlist.*' )
        assert fn == bname

        read_TestList_and_check_fake_test()

    def test_a_workflow_using_a_rundate(self):
        ""
        tl = write_TestList_with_fake_test( addrundate=True )
        sfx = tl.getResultsDate()
        time.sleep(1.2)

        tl = testlist.TestList( TestCaseFactory() )
        tl.readTestList()
        assert tl.getResultsDate() == sfx
        rfile = write_TestList_fake_results( tl )

        read_TestList_and_check_fake_test()

    def test_results_workflow_with_include_file(self):
        ""
        os.mkdir( 'subdir' )

        # the origin test list
        tl = write_TestList_with_fake_test()

        # create suffix for the include files
        sfx = tl.setResultsDate()

        # write include test list file containing suffix attribute
        tcase = list( tl.getTests() )[0]
        fn = os.path.join( 'subdir/'+testlist.default_filename )
        tlincl = testlist.TestList( TestCaseFactory(), filename=fn )
        tlincl.setResultsDate( sfx )
        tlincl.addTest( tcase )
        tlincl.stringFileWrite( extended=True )

        # start the comprehensive results file (with the include in it)
        tl.initializeResultsFile()
        tl.addIncludeFile( tlincl.getResultsFilename() )

        # create the sublist test results
        tlsub = testlist.TestList( TestCaseFactory(), filename=fn )
        tlsub.readTestList()
        write_TestList_fake_results( tlsub )

        tl.writeFinished()

        # should be able to read comprehensive results file
        read_TestList_and_check_fake_test()

    def test_read_an_unfinished_test_list_file(self):
        ""
        tcase = create_TestCase()

        tl = testlist.TestList( TestCaseFactory() )
        tl.addTest( tcase )
        tl.stringFileWrite()
        tl.setResultsDate()
        rfile = tl.initializeResultsFile()
        tl.appendTestResult( tcase )

        time.sleep(1)

        tl = testlist.TestList( TestCaseFactory() )
        tl.readTestResults()

        tm = tl.getDateStamp()
        assert tm is not None and time.time() - tm < 10
        assert not tl.getFinishDate()
        assert not tl.resultsFileIsMarkedFinished()

        read_TestList_and_check_fake_test()


class scan_finish_mark( vtu.vvtestTestCase ):

    def test_scan_an_unfinished_test_list_file(self):
        ""
        tl = testlist.TestList( TestCaseFactory() )
        tl.setResultsDate()
        rfile = tl.initializeResultsFile()
        tcase = create_TestCase()
        tl.appendTestResult( tcase )

        tlr = tio.TestListReader( TestCaseFactory(), rfile )
        tm = tlr.scanForFinishDate()
        assert tm is None

    def test_function_to_test_for_finished_date(self):
        ""
        tl = testlist.TestList( TestCaseFactory() )
        tl.setResultsDate()
        rfile = tl.initializeResultsFile()
        tcase = create_TestCase()
        tl.appendTestResult( tcase )

        assert tio.file_is_marked_finished( rfile ) == False

        tl.writeFinished()

        assert tio.file_is_marked_finished( rfile ) == True

    def test_for_finished_date_is_robust(self):
        ""
        # create file with binary data
        with open( 'afile.dat', 'wb' ) as fp:
            buf = struct.pack( 'b', -128 ) * 10
            for i in range( -127, 128 ):
                buf += struct.pack( 'b', i ) * 10
            fp.write( buf )

        assert tio.file_is_marked_finished( abspath('foobar') ) == False
        assert os.path.exists( 'afile.dat' )
        assert tio.file_is_marked_finished( 'afile.dat' ) == False


class format_versions( vtu.vvtestTestCase ):

    def test_the_current_testlist_file_format_version(self):
        ""
        write_TestList_with_fake_test( 'testlist' )
        time.sleep(1)

        tlr = tio.TestListReader( TestCaseFactory(), 'testlist' )
        tlr.read()
        assert tlr.getFileVersion() == 35

    @unittest.skip("unnecessary test, but keep as an example")
    def test_read_version_33_testlist_with_includes(self):
        ""
        util.writefile( 'testlist', example_testlist_with_include_33 )
        util.writefile( 'testlist.0', example_include_0_version_33 )
        util.writefile( 'testlist.1', example_include_1_version_33 )
        util.writefile( 'testlist.2', example_include_2_version_33 )

        tlr = tio.TestListReader( TestCaseFactory(), 'testlist.1' )
        tlr.read()
        assert tlr.getFileVersion() == 33
        assert len( tlr.getTests() ) == 1
        tcase = list( tlr.getTests().values() )[0]
        assert tcase.getStat().getResultStatus() == 'pass'

        tlr = tio.TestListReader( TestCaseFactory(), 'testlist' )
        tlr.read()
        assert tlr.getFileVersion() == 33
        assert len( tlr.getTests() ) == 3
        for tcase in tlr.getTests().values():
            assert tcase.getStat().getResultStatus() == 'pass'


# a batch test list before the includes were inlined (like a crash occurred)
example_testlist_with_include_33 = """\
#VVT: Version = 33
#VVT: Start = ['Mon Feb  3 19:25:27 2020', 1580783127.5386069]
#VVT: Attrs = {}

#VVT: Include = testlist.0
#VVT: Include = testlist.1
#VVT: Include = testlist.2
"""

example_include_0_version_33 = """\
#VVT: Version = 33
#VVT: Start = ['Mon Feb  3 19:25:34 2020', 1580783134.7756951]
#VVT: Attrs = {}

{'name': 'at', 'attrs': {'xdate': 1580783134.77, 'state': 'notdone', 'timeout': 3600, 'xtime': -1}, 'keywords': ['foo', 'bar'], 'path': 'at.vvt', 'root': '/scratch/rrdrake/temp/prob/analyze', 'paramset': {('np',): [['1'], ['2']]}}
{'name': 'at', 'attrs': {'xdate': 1580783134.77, 'state': 'done', 'timeout': 3600, 'xtime': 1, 'result': 'pass'}, 'keywords': ['foo', 'bar'], 'path': 'at.vvt', 'root': '/scratch/rrdrake/temp/prob/analyze', 'paramset': {('np',): [['1'], ['2']]}}

#VVT: Finish = ['Mon Feb  3 19:25:35 2020', 1580783135.7790179]
"""

example_include_1_version_33 = """\
#VVT: Version = 33
#VVT: Start = ['Mon Feb  3 19:25:27 2020', 1580783127.7365699]
#VVT: Attrs = {}

{'name': 'at', 'params': {'np': '2'}, 'attrs': {'xdate': 1580783127.73, 'state': 'notdone', 'timeout': 3600, 'xtime': -1}, 'keywords': ['foo', 'bar'], 'path': 'at.vvt', 'root': '/scratch/rrdrake/temp/prob/analyze'}
{'name': 'at', 'params': {'np': '2'}, 'attrs': {'xdate': 1580783127.73, 'state': 'done', 'timeout': 3600, 'xtime': 1, 'result': 'pass'}, 'keywords': ['foo', 'bar'], 'path': 'at.vvt', 'root': '/scratch/rrdrake/temp/prob/analyze'}

#VVT: Finish = ['Mon Feb  3 19:25:28 2020', 1580783128.73911]
"""

example_include_2_version_33 = """\
#VVT: Version = 33
#VVT: Start = ['Mon Feb  3 19:25:27 2020', 1580783127.7323301]
#VVT: Attrs = {}

{'name': 'at', 'params': {'np': '1'}, 'attrs': {'xdate': 1580783127.73, 'state': 'notdone', 'timeout': 3600, 'xtime': -1}, 'keywords': ['foo', 'bar'], 'path': 'at.vvt', 'root': '/scratch/rrdrake/temp/prob/analyze'}
{'name': 'at', 'params': {'np': '1'}, 'attrs': {'xdate': 1580783127.73, 'state': 'done', 'timeout': 3600, 'xtime': 1, 'result': 'pass'}, 'keywords': ['foo', 'bar'], 'path': 'at.vvt', 'root': '/scratch/rrdrake/temp/prob/analyze'}

#VVT: Finish = ['Mon Feb  3 19:25:28 2020', 1580783128.7356429]
"""


############################################################################

def create_TestCase():
    ""
    tspec = testspec.TestSpec( 'atest', os.getcwd(), 'atest.vvt' )

    tspec.setKeywordList( ['key1','key2'] )

    tspec.setParameters( { 'P1':'V1', 'P2':'V2' } )

    tcase = TestCase( testspec=tspec )
    tstat = tcase.getStat()

    tstat.setAttr("aname1", "a value")
    tstat.setAttr("aname2", "a\nvalue")
    tstat.setAttr("aname3", 'a"value"')
    tstat.setAttr("aname4", "a'value'")
    tstat.setAttr('aname5', 23)
    tstat.setAttr('aname6', 23.23)
    tstat.setAttr('aname7', None)

    return tcase


def assert_TestCase_same_as_fake( tcase, rootdir=None ):
    ""
    if not rootdir:
        rootdir = os.getcwd()

    tspec = tcase.getSpec()
    tstat = tcase.getStat()

    assert tspec.getName() == 'atest'
    assert tspec.getRootpath() == rootdir
    assert tspec.getFilename() == os.path.join( rootdir, 'atest.vvt' )

    kL = tspec.getKeywords( include_implicit=False )
    kL.sort()
    assert kL == [ 'key1', 'key2' ]

    kL = tspec.getKeywords()
    kL.sort()
    assert kL == [ 'P1', 'P2', 'atest', 'key1', 'key2' ]

    pD = {}
    for n,v in tspec.getParameters().items():
        pD[n] = v
    assert pD == { 'P1':'V1', 'P2':'V2' }

    assert tstat.getAttr('aname1') == "a value"
    assert tstat.getAttr('aname2') == 'a\nvalue'
    assert tstat.getAttr('aname3') == 'a"value"'
    assert tstat.getAttr('aname4') == "a'value'"
    assert tstat.getAttr('aname5') == 23
    assert tstat.getAttr('aname6') == 23.23
    assert tstat.getAttr('aname7') == None


def create_TestCase_with_results():
    ""
    tcase = create_TestCase()

    tcase.getStat().markStarted( time.time() )

    return tcase


def create_fake_analyze_TestCase():
    ""
    tspec = testspec.TestSpec( 'atest', os.getcwd(), 'atest.vvt' )

    tspec.setIsAnalyze()
    pset = ParameterSet.ParameterSet()
    pset.addParameter( 'A', ['a1','a2'] )
    tspec.setParameterSet( pset )

    tcase = TestCase( tspec )

    assert tcase.getSpec().isAnalyze()

    return tcase


def write_test_list_with_include( testfile, inclpath, finish=True ):
    ""
    d = os.path.dirname( inclpath )
    if d and not os.path.exists(d):
        os.mkdir( d )
        time.sleep(1)

    tlw = tio.TestListWriter( testfile )
    tlw.start()
    tlw.addIncludeFile( inclpath )

    write_test_list_with_fake_test( inclpath )

    if finish:
        tlw.finish()


def get_single_test_from_test_list( testlist ):
    ""
    tD = testlist.getTests()
    assert len(tD) == 1
    tcase = list( tD.values() )[0]
    return tcase


def write_test_list_with_fake_test( filename, **kwargs ):
    ""
    tlw = tio.TestListWriter( filename )
    tlw.start()
    tcase = create_TestCase()
    for k,v in kwargs.items():
        tcase.getSpec().setAttr( k, v )
    tlw.append( tcase )
    tlw.finish()


def write_test_sequence_to_file( filename, tcase ):
    ""
    tlw = tio.TestListWriter( filename )
    tlw.start()

    tcase.getStat().markStarted( time.time() )
    tlw.append( tcase )

    tcase.getStat().markDone( 0 )
    tlw.append( tcase )

    tlw.finish()


def write_TestList_with_fake_test( addrundate=False, **kwargs ):
    ""
    tl = testlist.TestList( TestCaseFactory() )

    if addrundate:
        tl.setResultsDate()

    tcase = create_TestCase()
    for k,v in kwargs.items():
        tcase.getSpec().setAttr( k, v )
    tl.addTest( tcase )

    if addrundate:
        tl.stringFileWrite( extended=True )
    else:
        tl.stringFileWrite()

    return tl


def write_TestList_fake_results( testlistobj ):
    ""
    rfile = testlistobj.initializeResultsFile()
    tcase = create_TestCase_with_results()
    testlistobj.appendTestResult( tcase )
    testlistobj.writeFinished()

    return rfile


def read_TestList_and_check_fake_test():
    ""
    tl = testlist.TestList( TestCaseFactory() )
    tl.readTestList()
    tl.readTestResults()
    tL = list( tl.getTests() )
    assert len(tL) == 1
    assert_TestCase_same_as_fake( tL[0] )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
