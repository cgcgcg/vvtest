#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util

# Get access to script_utils so we can interrogate simple_aprepro's main().
sys.path.insert(0, vtu.cfgdir)
import script_util as su

class Simple_Aprepro( vtu.vvtestTestCase ):

    def test_division(self):
        ""
        util.writefile( 'values.aprepro', """
            # {secret = 1 / 9}
            """ )
        util.writefile( 'test_division.py.vvt', """
            #VVT: copy : values.aprepro
            import script_util as util

            apr = util.simple_aprepro("values.aprepro", None)
            print("this is apr", apr)

            assert apr['secret'] != 0  # this would be true for integer division
            assert apr['secret'] == float(1.0 / 9.0)  # this is a float
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vtu.runvvtest( batch=batch ).assertCounts( total=1, npass=1 )

    def test_simple1(self):
        ""
        util.writefile( 'values.aprepro', """
            # {secret = 3 * 6}
            """ )
        util.writefile( 'testA.py.vvt', """
            #VVT: copy : values.aprepro
            import script_util as util

            apr = util.simple_aprepro("values.aprepro", None)

            assert apr['secret'] == 18
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vtu.runvvtest( batch=batch ).assertCounts( total=1, npass=1 )

    def test_simple2(self):
        ""
        util.writefile( 'values.aprepro', """
            # {first_secret = 2 * 5 - 3}
            """ )
        util.writefile( 'input.yaml.apr', """
            # 'first_secret' should be overridden
            # {first_secret = 1}
            # {second_secret = first_secret + 1}
            """ )
        util.writefile( 'testA.py.vvt', """
            #VVT: copy : values.aprepro input.yaml.apr
            import script_util as util

            apr = util.simple_aprepro("values.aprepro", None)
            apr = util.simple_aprepro("input.yaml.apr", "input.yaml", override=apr)

            assert apr['first_secret'] == 7
            assert apr['second_secret'] == 8
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vtu.runvvtest( batch=batch ).assertCounts( total=1, npass=1 )

    def test_simple3(self):
        """
        The only difference between txt_out1 and txt_out2 is one extra digit
        of precision for problems between python2 and python3.
        """
        txt_in = """# abc = { abc = PI }
            # abc = { abc }
            # xyz = { xyz = 123.456 }
            # xyz = { xyz }"""
        txt_out1 = """# abc = 3.141592653589793
            # abc = 3.141592653589793
            # xyz = 123.456
            # xyz = 123.456"""
        txt_out2 = """# abc = 3.1415926535897931
            # abc = 3.1415926535897931
            # xyz = 123.456
            # xyz = 123.456"""
        util.writefile( 'values.aprepro', txt_in )
        util.writefile( 'values.gold1', txt_out1 )
        util.writefile( 'values.gold2', txt_out2 )
        util.writefile( 'testA.py.vvt', """
            #VVT: copy : values.aprepro values.gold1 values.gold2
            import math
            import script_util as util

            apr = util.simple_aprepro("values.aprepro", "values.comp")

            assert apr == {'abc': math.pi, 'xyz': 123.456}

            with open("values.gold1", 'r') as F:
                gold1 = F.read()
            print("gold1", gold1)

            with open("values.gold2", 'r') as F:
                gold2 = F.read()
            print("gold2", gold2)

            with open("values.comp", 'r') as F:
                comp = F.read()
            print("comp", comp)

            assert (gold1 == comp) or (gold2 == comp)
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vtu.runvvtest( batch=batch ).assertCounts( total=1, npass=1 )

    def test_escaped_curly_braces(self):
        """
        This test makes sure that it correctly fixes escaped curly
        braces. The test includes
          * escaped start and end braces
          * escaped start brace
          * escaped end brace
          * escaped braces before and after
        """
        util.writefile( 'values.aprepro', """
            # {baz = 3 * 6}
            if (foo == 1) \{bar = {baz}\}
            if (foo == 2) \{bar = {baz}
            \}
            if (foo == 3) \{
              bar = {baz}\}
            if (foo == 4) \{
              bar = {baz}
            \}
            """ )
        util.writefile( 'values.aprepro.gold', """
            # 18
            if (foo == 1) {bar = 18}
            if (foo == 2) {bar = 18
            }
            if (foo == 3) {
              bar = 18}
            if (foo == 4) {
              bar = 18
            }
            """ )
        util.writefile( 'testCurlyBrace.py.vvt', """
            #VVT: copy : values.aprepro values.aprepro.gold
            import script_util as util

            apr = util.simple_aprepro("values.aprepro", "values.aprepro.comp")

            with open("values.aprepro.comp", "r") as F:
                comp = F.readlines()

            with open("values.aprepro.gold", "r") as F:
                gold = F.readlines()

            print(comp)
            print(gold)
            assert comp == gold
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vtu.runvvtest( batch=batch ).assertCounts( total=1, npass=1 )

    def test_include(self):
        """
        This test makes sure that we can include files
        """
        util.writefile( 'foo.aprepro', """pre-foo\n{include("baz.txt")}\npost-foo\n""" )
        util.writefile( 'baz.txt', """This is baz.\n""" )
        util.writefile( 'foo.gold', """pre-foo\nThis is baz.\n\npost-foo\n""" )

        util.writefile( 'testinclude.py.vvt', """
            #VVT: copy : foo.aprepro baz.txt foo.gold
            import script_util as util

            apr = util.simple_aprepro("foo.aprepro", "foo.comp")

            with open("foo.comp", "r") as F:
                comp = F.read()

            with open("foo.gold", "r") as F:
                gold = F.read()

            print(repr(comp))
            print(repr(gold))
            assert comp == gold
            """ )
        time.sleep(1)

        for batch in [False,True]:
            vtu.remove_results()
            vtu.runvvtest( batch=batch ).assertCounts( total=1, npass=1 )

    def test_nested_include(self):
        """
        This test makes sure that we can include files and that those files
        include other files relative to those files' locations. This test
        includes like this:

        level0.aprepro
        -> level1.txt
          -> tmpdir/level2.txt
            -> tmpdir/level3.txt
              -> level4.txt
                -> level5.txt
        (remainder of level0.aprepro)
        """

        util.writefile( 'nested_include.py.vvt', """
            import os
            import script_util as util

            os.mkdir('tmpdir')
            with open('level0.aprepro', 'w') as f:
                f.write('level0 a=2={a=2}\\n{include("level1.txt")}\\nlevel0 a={a}')
            with open('level1.txt', 'w') as f:
                f.write('level1 a={fac}*a={a=fac*a}\\n{include("tmpdir/level2.txt")}')
            with open('tmpdir/level2.txt', 'w') as f:
                f.write('level2 a={fac}*a={a=fac*a}\\n{include("level3.txt")}')
            with open('tmpdir/level3.txt', 'w') as f:
                f.write('level3 a={fac}*a={a=fac*a}\\n{include("../level4.txt")}')
            with open('level4.txt', 'w') as f:
                f.write('level4 a={fac}*a={a=fac*a}\\n{include("level5.txt")}')
            with open('level5.txt', 'w') as f:
                f.write('level5 a={fac}*a={a=fac*a}')

            apr = util.simple_aprepro("level0.aprepro", "foo.comp", override={'fac': 2})

            with open("foo.comp", "r") as F:
                comp = F.read()

            gold = 'level0 a=2=2\\nlevel1 a=2*a=4\\nlevel2 a=2*a=8\\nlevel3 a=2*a=16\\nlevel4 a=2*a=32\\nlevel5 a=2*a=64\\nlevel0 a=64'

            print(repr(comp))
            print(repr(gold))
            assert comp == gold
            """ )
        time.sleep(1)

        for batch in [False,True]:
            vtu.remove_results()
            vtu.runvvtest( batch=batch ).assertCounts( total=1, npass=1 )





class Simple_Aprepro_Main( vtu.vvtestTestCase ):

    def test_parameterize(self):
        ""

        util.writefile('params.jsonl',
         """{"foo": "abc", "bar": 2}
            {"foo": "xyz", "bar": 5}\n"""
            )

        util.writefile('template.txt', "this is foo {foo}\nthis is 2*bar {2 * bar}\n")

        su.simple_aprepro_main(["--chatty", "--params", "params.jsonl", "template.txt", "output.dat"])

        f1 = "output.bar=2.foo=abc.dat"
        f2 = "output.bar=5.foo=xyz.dat"
        assert os.path.isfile(f1)
        assert os.path.isfile(f2)

        with open(f1, 'r') as F:
            txt1 = F.read()

        with open(f2, 'r') as F:
            txt2 = F.read()

        print(repr(txt1))
        print(repr(txt2))
        assert txt1 == "this is foo abc\nthis is 2*bar 4\n"
        assert txt2 == "this is foo xyz\nthis is 2*bar 10\n"

############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
