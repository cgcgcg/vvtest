#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

from libvvtest.errors import TestSpecError


class filter_and_keywords( vtu.vvtestTestCase ):

    def write_ab_test_pair(self):
        ""
        util.writefile( 'atest.xml', """
            <rtest name="atest">
              <parameterize nx="1 4"/>
              <execute>
                set echo
                if ( "$nx" == 4 ) then
                  exit 1
                endif
                unset echo
              </execute>
            </rtest>""" )

        util.writefile( 'btest.xml', """
            <rtest name="btest">
              <parameterize nx="1 4"/>
              <execute>
                set echo
                if ( "$nx" == 4 ) then
                  exit 1
                endif
                unset echo
              </execute>
            </rtest>""" )

    def test_use_results_keyword_expression(self):
        ""
        self.write_ab_test_pair()

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=4, npass=2, fail=2 )
            assert vrun.countTestLines( 'pass *atest.nx=1') == 1
            assert vrun.countTestLines( 'pass *btest.nx=1') == 1
            assert vrun.countTestLines( 'fail *atest.nx=4') == 1
            assert vrun.countTestLines( 'fail *btest.nx=4') == 1

            vtu.remove_results()

            vrun = vtu.runvvtest( '-k pass/fail', batch=batch )
            vrun.assertCounts( total=0 )

    def test_filter_by_testname_and_keyword_simultaneously(self):
        ""
        self.write_ab_test_pair()

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-k atest/notrun', batch=batch )
            vrun.assertCounts( total=2, npass=1, fail=1 )
            assert vrun.countTestLines( 'pass *atest.nx=1') == 1
            assert vrun.countTestLines( 'fail *atest.nx=4') == 1

            vrun = vtu.runvvtest( '-k atest/fail', batch=batch )
            vrun.assertCounts( total=2, npass=1, fail=1 )
            assert vrun.countTestLines( 'pass *atest.nx=1') == 1
            assert vrun.countTestLines( 'fail *atest.nx=4') == 1

            vrun = vtu.runvvtest( '-k btest -K fail', batch=batch )
            vrun.assertCounts( total=2, npass=1, fail=1 )
            assert vrun.countTestLines( 'pass *atest.nx=1') == 0
            assert vrun.countTestLines( 'fail *atest.nx=4') == 0
            assert vrun.countTestLines( 'pass *btest.nx=1') == 1
            assert vrun.countTestLines( 'fail *btest.nx=4') == 1

    def test_results_keyword_expression_inside_test_results_area(self):
        ""
        self.write_ab_test_pair()

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=4, npass=2, fail=2 )
            tdir = vrun.resultsDir()

            vrun = vtu.runvvtest( '-k atest/fail', batch=batch, chdir=tdir )
            vrun.assertCounts( total=3, npass=1, fail=2 )
            assert vrun.countTestLines( 'pass *atest.nx=1') == 1
            assert vrun.countTestLines( 'fail *atest.nx=4') == 1
            assert vrun.countTestLines( 'pass *btest.nx=1') == 0
            assert vrun.countTestLines( 'fail *btest.nx=4') == 1

            vrun = vtu.runvvtest( '-k atest', batch=batch )
            vrun.assertCounts( total=0 )

            vrun = vtu.runvvtest( '-R', batch=batch, chdir=tdir )
            vrun.assertCounts( total=4, npass=2, fail=2 )
            assert vrun.countTestLines( 'pass *atest.nx=1') == 1
            assert vrun.countTestLines( 'fail *atest.nx=4') == 1
            assert vrun.countTestLines( 'pass *btest.nx=1') == 1
            assert vrun.countTestLines( 'fail *btest.nx=4') == 1

    def test_xml_test_filter_by_keyword_expression(self):
        """
        filter tests out by command line keyword expression
        """
        util.writefile( 'solar.xml', """
            <rtest name="solar">
              <keywords> earth mars </keywords>
              <execute> echo "solar ran" </execute>
            </rtest>""" )

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-k earth', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            vrun = vtu.runvvtest( '-w -K earth', batch=batch )
            vrun.assertCounts( total=0 )

            vrun = vtu.runvvtest( '-w -k earth -K mars', batch=batch )
            vrun.assertCounts( total=0 )

            vrun = vtu.runvvtest( '-w -k earth/mars', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            vrun = vtu.runvvtest( '-w -k venus/mars', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

    def test_specifying_keywords_in_xml_files(self):
        ""
        util.writefile( 'bad3.xml', """
            <rtest name="atest">
              <keywords> junk1 ju/nk2 </keywords>
            </rtest>""" )

        self.assertRaises( TestSpecError, vtu.parse_single_test_file, 'bad3.xml' )

        util.writefile( 'ok1.xml', """
            <rtest name="atest">
              <keywords> junk1 junk2 </keywords>
            </rtest>""" )

        tspec = vtu.parse_single_test_file( 'ok1.xml' )
        kL = tspec.getKeywords()
        kL.sort()
        assert kL == [ 'atest', 'junk1', 'junk2', 'ok1' ]

        util.writefile( 'ok2.xml', """
            <rtest name="atest">
              <keywords> junk1 </keywords>
              <execute name="exename"> # none </execute>
              <keywords> junk2 </keywords>
            </rtest>""" )

        tspec = vtu.parse_single_test_file( 'ok2.xml' )
        kL = tspec.getKeywords()
        kL.sort()
        assert kL == [ 'atest', 'exename', 'junk1', 'junk2', 'ok2' ]
        assert tspec.hasKeyword('atest')
        assert not tspec.hasKeyword('junk')

    def test_specifying_keywords_in_vvt_files(self):
        ""
        util.writefile( 'bad.vvt', """
            #VVT: keywords : blah foo/bar
            """ )
        self.assertRaises( TestSpecError, vtu.parse_single_test_file, 'bad.vvt' )

        util.writefile( 'ok.vvt', """
            #VVT: keywords : blah^8 _foo_ bar=3 101
            """ )
        tspec = vtu.parse_single_test_file( 'ok.vvt' )
        kL = tspec.getKeywords()
        kL.sort()
        assert kL == ['101', '_foo_', 'bar=3', 'blah^8', 'ok']
        kL = tspec.getKeywords( include_implicit=False )
        kL.sort()
        assert kL == ['101', '_foo_', 'bar=3', 'blah^8']

    def test_special_characters_in_keyword_handling(self):
        ""
        util.writefile( 'atest.xml', """
            <rtest name="atest">
              <keywords> blah-1 foo.2 bar+3 baz=4 mars#5 sun%6
                         pluto^7 venus:8 jupiter~9 jupiter@0 </keywords>
              <execute> echo "hello" </execute>
            </rtest>""" )
        util.writefile( 'btest.vvt', """
            #VVT: keywords : blah-1 foo.2 bar+3 baz=4 mars#5 sun%6
            #VVT::           pluto^7 venus:8 jupiter~9 jupiter@0
            """ )

        vrun = vtu.runvvtest( '-k pluto^7' )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == ['atest','btest']

        vrun = vtu.runvvtest( '-w -k "foo or b\\$ar"', raise_on_error=False )
        assert vrun.x != 0
        assert len( vrun.grepLines( 'invalid wildcard expression word' ) ) == 1

    def test_script_test_filter_by_keyword_expression(self):
        ""
        util.writescript( 'solar.vvt', """
            #!"""+sys.executable+"""
            #VVT: keywords : earth mars
            print ( 'solar ran' )
            """ )
        util.writescript( 'galaxy.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : foo = bar baz
            #VVT: keywords (parameter="foo=bar"): earth
            #VVT: keywords (parameter="foo=baz"): mars
            print ( 'galaxy ran' )
            """ )

        vrun = vtu.runvvtest( '-k earth' )
        vrun.assertCounts( total=2, npass=2 )
        self.assertEqual( vrun.getTestIds(), ['galaxy.foo=bar','solar'] )

        vrun = vtu.runvvtest( '-w -K earth' )
        vrun.assertCounts( total=1, npass=1 )
        self.assertEqual( vrun.getTestIds(), ['galaxy.foo=baz'] )

        vrun = vtu.runvvtest( '-w -k earth -K mars' )
        vrun.assertCounts( total=1, npass=1 )
        self.assertEqual( vrun.getTestIds(), ['galaxy.foo=bar'] )

        vrun = vtu.runvvtest( '-w -k earth/mars' )
        vrun.assertCounts( total=3, npass=3 )
        self.assertEqual( vrun.getTestIds(),
                          ['galaxy.foo=bar','galaxy.foo=baz','solar'] )

        vrun = vtu.runvvtest( '-w -k venus/mars' )
        vrun.assertCounts( total=2, npass=2 )
        self.assertEqual( vrun.getTestIds(), ['galaxy.foo=baz','solar'] )

    def test_script_test_filter_by_testname_and_keyword_simultaneously(self):
        ""
        util.writescript( 'atest.vvt', """
            #!"""+sys.executable+"""
            print ( 'executing test' )
            """ )
        util.writescript( 'btest.vvt', """
            #!"""+sys.executable+"""
            raise Exception( 'fake failure' )
            """ )
        util.writescript( 'ctest.vvt', """
            #!"""+sys.executable+"""
            print ( 'executing test' )
            """ )

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=2, fail=1 )

            assert vrun.countTestLines( 'pass *atest') == 1
            assert vrun.countTestLines( 'fail *btest') == 1
            assert vrun.countTestLines( 'pass *ctest') == 1

            vrun = vtu.runvvtest( '-k atest/fail/btest', batch=batch )
            vrun.assertCounts( total=2, npass=1, fail=1 )

            assert vrun.countTestLines( 'pass *atest') == 1
            assert vrun.countTestLines( 'fail *btest') == 1
            assert vrun.countTestLines( 'pass *ctest') == 0

    def test_command_line_keyword_expression_globbing(self):
        ""
        util.writefile( 'atest.xml', """
            <rtest name="atest">
              <keywords> foo-bar earth+moon </keywords>
              <execute> echo "hello" </execute>
            </rtest>""" )
        util.writefile( 'btest.vvt', """
            #VVT: keywords : foo-bar earth+moon
            """ )

        vrun = vtu.runvvtest( '-k "*-bar or earth+*"' )
        vrun.assertCounts( total=2, npass=2 )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
