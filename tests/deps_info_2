#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util


class dependency_information( vtu.vvtestTestCase ):

    def test_multiple_dep_matches(self):
        ""
        util.write_py_script( 'testX.vvt', """
            #VVT: depends on : testY
            import os, glob
            import vvtest_util as vvt
            assert len( vvt.DEPDIRS ) == 2

            assert len( vvt.DEPDIRMAP ) == 1
            assert len( vvt.DEPDIRMAP['testY'] ) == 2
            assert vvt.DEPDIRMAP['testY'][0].endswith( '/sub1/testY' )
            assert vvt.DEPDIRMAP['testY'][1].endswith( '/sub2/testY' )

            pat = os.path.join( vvt.DEPDIRMAP['testY'][0], 'Y1.out' )
            assert len( glob.glob( pat ) ) == 1

            pat = os.path.join( vvt.DEPDIRMAP['testY'][1], 'Y2.out' )
            assert len( glob.glob( pat ) ) == 1
            """ )
        util.write_py_script( 'sub1/testY.vvt', """
            fp = open( 'Y1.out', 'w' )
            fp.close()
            """ )
        util.write_py_script( 'sub2/testY.vvt', """
            fp = open( 'Y2.out', 'w' )
            fp.close()
            """ )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=3, npass=3 )

        vtu.remove_results()

        vtu.runvvtest( batch=True ).assertCounts( total=3, npass=3 )

    def test_depdirs_in_subdirs(self):
        ""
        util.write_py_script( 'tsrc/testX.vvt', """
            #VVT: depends on : sub1/testY
            #VVT: depends on : sub2/testZ
            import os, glob
            import vvtest_util as vvt
            assert len( vvt.DEPDIRS ) == 2

            fL = glob.glob( os.path.join( vvt.DEPDIRS[0], '*.out' ) )
            assert len(fL) == 1

            fL = glob.glob( os.path.join( vvt.DEPDIRS[1], '*.out' ) )
            assert len(fL) == 1
            """ )
        util.write_py_script( 'tsrc/sub1/testY.vvt', """
            fp = open( 'Y.out', 'w' )
            fp.close()
            """ )
        util.write_py_script( 'tsrc/sub2/testZ.vvt', """
            fp = open( 'Z.out', 'w' )
            fp.close()
            """ )
        os.mkdir( 'rdir1' )
        os.mkdir( 'rdir2' )
        time.sleep(1)

        vrun = vtu.runvvtest( '../tsrc', chdir='rdir1' )
        vrun.assertCounts( total=3, npass=3 )

        tdir = os.path.basename( vrun.resultsDir() )

        vrun = vtu.runvvtest( '../tsrc', chdir='rdir2', batch=True )
        vrun.assertCounts( total=3, npass=3 )

        vrun = vtu.runvvtest( '-R', chdir='rdir2/'+tdir )
        vrun.assertCounts( total=3, npass=3 )

        vrun = vtu.runvvtest( '-R', chdir='rdir1/'+tdir, batch=True )
        vrun.assertCounts( total=3, npass=3 )

    def test_depdirs_in_subdirs_of_a_subdir(self):
        ""
        util.write_py_script( 'tsrc/topdir/testX.vvt', """
            #VVT: depends on : sub1/testY
            #VVT: depends on : sub2/testZ
            import os, glob
            import vvtest_util as vvt
            assert len( vvt.DEPDIRS ) == 2

            fL = glob.glob( os.path.join( vvt.DEPDIRS[0], '*.out' ) )
            assert len(fL) == 1

            fL = glob.glob( os.path.join( vvt.DEPDIRS[1], '*.out' ) )
            assert len(fL) == 1
            """ )
        util.write_py_script( 'tsrc/topdir/sub1/testY.vvt', """
            fp = open( 'Y.out', 'w' )
            fp.close()
            """ )
        util.write_py_script( 'tsrc/topdir/sub2/testZ.vvt', """
            fp = open( 'Z.out', 'w' )
            fp.close()
            """ )
        time.sleep(1)

        vtu.runvvtest( 'tsrc' ).assertCounts( total=3, npass=3 )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
