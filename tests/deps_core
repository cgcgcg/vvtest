#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

from libvvtest.testcreator import TestCreator
from libvvtest.testcase import TestCase
from libvvtest.TestSpec import TestSpec
from libvvtest.TestExec import TestExec
from libvvtest.FilterExpressions import WordExpression

from libvvtest import depend
find_tests_by_pattern = depend.find_tests_by_pattern


class Parse_Dependencies( vtu.vvtestTestCase ):

    def test_simple_dependencies(self):
        ""
        util.writefile( 'testX.py.vvt', """
            #VVT: depends on : testY
            """ )
        util.writefile( 'testA.py.vvt', """
            #VVT: depends on : testC testB
            """ )
        time.sleep(1)

        tL = create_tests( 'testX.py.vvt' )
        assert len(tL) == 1
        assert_dependencies( tL[0], 'testY' )
        assert get_depencency_expr( tL[0], 'testY' ) == None

        tL = create_tests( 'testA.py.vvt' )
        assert len(tL) == 1

        assert_dependencies( tL[0], 'testC', 'testB' )
        assert get_depencency_expr( tL[0], 'testC' ) == None
        assert get_depencency_expr( tL[0], 'testB' ) == None

    def test_result_attribute_with_dependency(self):
        ""
        util.writefile( 'testX.py.vvt', """
            #VVT: depends on (result=fail): testY testZ
            """ )
        util.writefile( 'testA.py.vvt', """
            #VVT: depends on (result="fail or diff") : testB
            """ )
        time.sleep(1)

        tL = create_tests( 'testX.py.vvt' )
        assert len(tL) == 1

        assert_dependencies( tL[0], 'testY', 'testZ' )

        for wx in [ get_depencency_expr( tL[0], 'testY' ),
                    get_depencency_expr( tL[0], 'testZ' ) ]:
            assert not wx.evaluate( lambda word: word == "pass" )
            assert not wx.evaluate( lambda word: word == "diff" )
            assert wx.evaluate( lambda word: word == "fail" )

        tL = create_tests( 'testA.py.vvt' )
        assert len(tL) == 1

        assert_dependencies( tL[0], 'testB' )

        wx = get_depencency_expr( tL[0], 'testB' )
        assert not wx.evaluate( lambda word: word == "pass" )
        assert wx.evaluate( lambda word: word == "diff" )
        assert wx.evaluate( lambda word: word == "fail" )

    def test_an_astrisk_result_attribute_means_match_anything(self):
        ""
        util.writefile( 'testX.py.vvt', """
            #VVT: depends on (result="*"): testY testZ
            """ )
        time.sleep(1)

        tL = create_tests( 'testX.py.vvt' )
        assert len(tL) == 1

        assert_dependencies( tL[0], 'testY', 'testZ' )
        for wx in [ get_depencency_expr( tL[0], 'testY' ),
                    get_depencency_expr( tL[0], 'testZ' ) ]:
            assert wx.evaluate( lambda word: word == "pass" )
            assert wx.evaluate( lambda word: word == "diff" )
            assert wx.evaluate( lambda word: word == "fail" )

    def test_multiple_dependency_specifications(self):
        ""
        util.writefile( 'testX.py.vvt', """
            #VVT: depends on (result=fail): testY testZ
            #VVT: depends on (result="fail or diff") : testB
            #VVT: depends on : testW
            """ )
        time.sleep(1)

        tL = create_tests( 'testX.py.vvt' )
        assert len(tL) == 1

        assert_dependencies( tL[0], 'testB', 'testW', 'testY', 'testZ' )

        wx = get_depencency_expr( tL[0], 'testB' )
        assert not wx.evaluate( lambda word: word == "pass" )
        assert wx.evaluate( lambda word: word == "diff" )
        assert wx.evaluate( lambda word: word == "fail" )

        for wx in [ get_depencency_expr( tL[0], 'testY' ),
                    get_depencency_expr( tL[0], 'testZ' ) ]:
            assert not wx.evaluate( lambda word: word == "pass" )
            assert not wx.evaluate( lambda word: word == "diff" )
            assert wx.evaluate( lambda word: word == "fail" )

        assert get_depencency_expr( tL[0], 'testW' ) == None

    def test_using_filter_attributes(self):
        ""
        util.writefile( 'testX.py.vvt', """
            #VVT: depends on (platforms="XBox", result="fail") : testY
            #VVT: depends on (platforms="not XBox") : testZ
            """ )
        time.sleep(1)

        tL = create_tests( 'testX.py.vvt', 'XBox' )
        assert len(tL) == 1

        assert_dependencies( tL[0], 'testY' )

        wx = get_depencency_expr( tL[0], 'testY' )
        assert not wx.evaluate( lambda word: word == "pass" )
        assert not wx.evaluate( lambda word: word == "diff" )
        assert wx.evaluate( lambda word: word == "fail" )

        tL = create_tests( 'testX.py.vvt', 'PlayStation' )
        assert len(tL) == 1

        assert_dependencies( tL[0], 'testZ' )

        assert get_depencency_expr( tL[0], 'testZ' ) == None


def assert_dependencies( tspec, *check_names ):
    ""
    depL = tspec.getDependencies()

    nameL = []
    for name,expr in depL:
        nameL.append( name )
    nameL.sort()

    checkL = list( check_names )
    checkL.sort()

    assert nameL == checkL


def get_depencency_expr( tspec, dep_name ):
    ""
    for name,expr in tspec.getDependencies():
        if name == dep_name:
            return expr

    raise Exception( 'could not find dependency name: ' + dep_name )


#######################################

class tests_for_TestDependency_class( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp( self, cleanout=False )

    def test_satisfiesResult(self):
        ""
        def maketestdep( result, expr=None ):
            tcase = vtu.make_fake_TestCase( result )
            return depend.TestDependency( tcase, None, expr )

        dep = maketestdep( 'pass' )
        assert dep.satisfiesResult()

        dep = maketestdep( 'diff' )
        assert dep.satisfiesResult()

        dep = maketestdep( 'fail' )
        assert not dep.satisfiesResult()

        dep = maketestdep( 'notrun' )
        assert not dep.satisfiesResult()

        dep = maketestdep( 'notdone' )
        assert not dep.satisfiesResult()

        dep = maketestdep( 'timeout' )
        assert not dep.satisfiesResult()

        wx = WordExpression()  # no expr is always True
        dep = maketestdep( 'pass', wx )
        assert dep.satisfiesResult()
        dep = maketestdep( 'fail', wx )
        assert dep.satisfiesResult()

        wx = WordExpression( '' )  # an empty expr is always False
        dep = maketestdep( 'pass', wx )
        assert not dep.satisfiesResult()
        dep = maketestdep( 'fail', wx )
        assert not dep.satisfiesResult()

        wx = WordExpression( 'pass or fail' )
        dep = maketestdep( 'pass', wx )
        assert dep.satisfiesResult()
        dep = maketestdep( 'fail', wx )
        assert dep.satisfiesResult()
        dep = maketestdep( 'diff', wx )
        assert not dep.satisfiesResult()

    def test_a_dependency_that_fails_to_satisfy_glob_criteria(self):
        ""
        reason = "failed 'depends on' matching criteria"

        dep = depend.FailedTestDependency( reason )

        assert dep.isBlocking()
        assert dep.willNeverRun()

        tcase = vtu.make_fake_TestCase( 'notrun' )
        tcase.addDependency( dep )

        assert tcase.isBlocked()
        assert tcase.willNeverRun()
        assert tcase.getBlockedReason() == reason

        tcase1 = vtu.make_fake_TestCase( 'notrun', name='atest' )
        tcase2 = vtu.make_fake_TestCase( 'pass', name='btest' )
        tcase1.addDependency( dep )
        tcase1.addDependency( depend.TestDependency( tcase2, None, None ) )

        assert tcase1.isBlocked()
        assert tcase1.willNeverRun()
        assert tcase1.getBlockedReason() == reason

    def test_will_never_run_logic(self):
        ""
        tcase = vtu.make_TestCase_with_a_dependency( 'pass' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'fail' )
        assert tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'fail', '*' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'skip' )
        assert tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'skip', '*' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'skippass' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'skipfail' )
        assert tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'notdone' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'notdone', '*' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'notrun' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'notrun', '*' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency(
                            'notrun',
                            second_level_result='fail' )
        assert tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency(
                            'notrun', '*',
                            second_level_result='fail' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency(
                            'notrun',
                            second_level_result='pass' )
        assert not tcase.willNeverRun()


class Function_find_tests_by_execute_directory_match( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp( self, cleanout=False )

    def test_base_match(self):
        ""
        xD = make_tspec_map( 'subdir/testB', 'subdir/testC' )
        S = find_tests_by_pattern( 'subdir/testA', 'testB', xD )
        assert_test_id_set( xD, S, 'subdir/testB' )

        xD = make_tspec_map( 'subdir/testC', 'subdir1/testB', 'subdir2/testB' )
        S = find_tests_by_pattern( 'subdir2/testA', 'testB', xD )
        assert_test_id_set( xD, S, 'subdir2/testB' )

        xD = make_tspec_map( 'subdir/testC', 'subdir1/testB', 'subdir2/testB' )
        S = find_tests_by_pattern( 'subdir1/testA', 'testB', xD )
        assert_test_id_set( xD, S, 'subdir1/testB' )

        xD = make_tspec_map( 'subdir/testB', 'subdir/testC', 'subdir/down/testB' )
        S = find_tests_by_pattern( 'subdir/testA', 'testB', xD )
        assert_test_id_set( xD, S, 'subdir/testB' )

        xD = make_tspec_map( 'testB', 'testC' )
        S = find_tests_by_pattern( 'testA', 'testB', xD )
        assert_test_id_set( xD, S, 'testB' )

        xD = make_tspec_map( 'testB', 'testC', 'down/testB' )
        S = find_tests_by_pattern( 'subdir/testA', 'testB', xD )
        assert_test_id_set( xD, S, 'testB' )

    def test_subdir_match(self):
        ""
        xD = make_tspec_map( 'subdir/testB' )
        S = find_tests_by_pattern( 'testA', 'testB', xD )
        assert_test_id_set( xD, S, 'subdir/testB' )

        xD = make_tspec_map( 'top/subdir/testB' )
        S = find_tests_by_pattern( 'top/testA', 'testB', xD )
        assert_test_id_set( xD, S, 'top/subdir/testB' )

        xD = make_tspec_map( 'subdir/testB', 'subdir/deep/testB' )
        S = find_tests_by_pattern( 'testA', 'testB', xD )
        assert_test_id_set( xD, S, 'subdir/deep/testB','subdir/testB' )

        xD = make_tspec_map( 'top/subdir/testB', 'top/subdir/deep/testB' )
        S = find_tests_by_pattern( 'top/testA', 'testB', xD )
        assert_test_id_set( xD, S, 'top/subdir/deep/testB','top/subdir/testB' )

        xD = make_tspec_map( 'subdir/testB', 'subdir/deep/testB' )
        S = find_tests_by_pattern( 'testA', 't*B', xD )
        assert_test_id_set( xD, S, 'subdir/deep/testB','subdir/testB' )

        xD = make_tspec_map( 'subdir1/deep2/testB', 'subdir1/deep1/testB', 'subdir2/testB' )
        S = find_tests_by_pattern( 'subdir1/testA', 'testB', xD )
        assert_test_id_set( xD, S, 'subdir1/deep1/testB','subdir1/deep2/testB' )

        xD = make_tspec_map( 'subdir1/deep2/testB', 'subdir1/deep1/testB', 'subdir2/testB' )
        S = find_tests_by_pattern( 'subdir1/testA', 't*B', xD )
        assert_test_id_set( xD, S, 'subdir1/deep1/testB','subdir1/deep2/testB' )

    def test_absolute_path_pattern(self):
        ""
        xD = make_tspec_map( 'subdir1/testB', 'subdir2/testB' )
        S = find_tests_by_pattern(
                            'subdir1/testA', 'subdir2/testB', xD )
        assert_test_id_set( xD, S, 'subdir2/testB' )

        xD = make_tspec_map( 'subdir1/testB', 'subdir2/subdir1/testB' )
        S = find_tests_by_pattern(
                            'subdir1/testA', 'subdir1/testB', xD )
        assert_test_id_set( xD, S, 'subdir1/testB' )

    def test_general_pattern(self):
        ""
        xD = make_tspec_map( 'subdir1/testB', 'subdir2/testB', 'subdir3/testA' )
        S = find_tests_by_pattern(
                            'subdir3/testA', 't*B', xD )
        assert_test_id_set( xD, S, 'subdir1/testB', 'subdir2/testB' )

    def test_relative_directory_test_location(self):
        ""
        xD = make_tspec_map( 'subdir1/testB', 'subdir2/testB', 'subdir3/testA' )
        S = find_tests_by_pattern(
                            'subdir3/testA', '../subdir1/*B', xD )
        assert_test_id_set( xD, S, 'subdir1/testB' )

        xD = make_tspec_map( 'subdir1/testB', 'subdir2/testB', 'subdir3/testA' )
        S = find_tests_by_pattern(
                            'subdir3/testA', '../sub*/*B', xD )
        assert_test_id_set( xD, S, 'subdir1/testB','subdir2/testB' )


class dependency_related_functions( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp( self, cleanout=False )

    def test_add_dependency_uniquifies_multiple_TestSpec(self):
        ""
        tcase = make_TestSpec_test_case( 'testA' )

        dep1 = make_TestSpec_test_case( 'atest' )
        depend.connect_dependency( tcase, dep1 )

        dep2 = make_TestSpec_test_case( 'atest' )
        depend.connect_dependency( tcase, dep2 )

        assert tcase.numDependencies() == 1

    def test_add_dependency_uniquifies_multiple_TestExec(self):
        ""
        tcase = make_TestExec_test_case( 'testA' )

        dep1 = make_TestExec_test_case( 'atest' )
        depend.connect_dependency( tcase, dep1 )

        dep2 = make_TestExec_test_case( 'atest' )
        depend.connect_dependency( tcase, dep2 )

        assert tcase.numDependencies() == 1

    def test_add_dependency_uniquifies_TestSpec_then_TestExec(self):
        ""
        tcase = make_TestExec_test_case( 'testA' )

        dep1 = make_TestSpec_test_case( 'atest' )
        depend.connect_dependency( tcase, dep1 )

        dep2 = make_TestExec_test_case( 'atest' )
        depend.connect_dependency( tcase, dep2 )

        assert len( tcase.deps ) == 1
        assert id( tcase.deps[0].tcase ) == id(dep2)

    def test_add_dependency_uniquifies_TestExec_then_TestSpec(self):
        ""
        tcase = make_TestExec_test_case( 'testA' )

        dep1 = make_TestExec_test_case( 'atest' )
        depend.connect_dependency( tcase, dep1 )

        dep2 = make_TestSpec_test_case( 'atest' )
        depend.connect_dependency( tcase, dep2 )

        assert tcase.numDependencies() == 1
        assert len( tcase.deps ) == 1
        assert id( tcase.deps[0].tcase ) == id(dep1)

    def test_add_dep_with_match_pattern(self):
        ""
        tcase1 = make_TestSpec_test_case( 'atest' )
        tcase2 = make_TestSpec_test_case( 'btest' )

        depend.connect_dependency( tcase1, tcase2, 'btest*' )

        matchL = tcase1.getDepDirectories()
        assert len( matchL ) == 1
        pat,xdir = matchL[0]
        assert pat == 'btest*' and xdir == 'btest'

    def test_add_dep_directory(self):
        ""
        tcase = make_TestSpec_test_case( 'atest' )

        tcase.addDepDirectory( 'btest*', 'blah/btest' )

        matchL = tcase.getDepDirectories()
        assert len( matchL ) == 1
        pat,xdir = matchL[0]
        assert pat == 'btest*' and xdir == 'blah/btest'

    def test_that_TestCase_deps_take_precedence_over_addDepDirectory(self):
        ""
        tA = vtu.make_fake_TestCase( name='Atest' )
        tA.addDepDirectory( 'B*', 'sdir/Btest.np=4' )

        tB = vtu.make_fake_TestCase( name='Btest' )
        depend.connect_dependency( tA, tB, 'Bt*' )

        matchL = tA.getDepDirectories()
        assert len( matchL ) == 1
        pat,xdir = matchL[0]
        assert pat == 'Bt*' and xdir == 'sdir/Btest.np=4'


#######################################

def make_tspec_map( *dirlist ):
    ""
    D = {}
    for sd in dirlist:
        d,b = os.path.split( sd )
        tcase = make_TestSpec_test_case( b, d )
        D[ tcase.getSpec().getID() ] = tcase

    return D


def assert_test_id_set( id2tcase, idset, *testdirs ):
    ""
    assert len(idset) == len(testdirs)
    dirset = set()
    for tid in idset:
        xdir = id2tcase[tid].getSpec().getExecuteDirectory()
        dirset.add( xdir )
    assert len( idset ) == len( dirset )
    assert dirset == set( testdirs )


def make_TestSpec_test_case( name, subdir=None ):
    ""
    if subdir: subdir = os.path.normpath( subdir ) + '/'
    else:      subdir = ''

    ts = TestSpec( name, os.getcwd(), subdir+name+'.vvt' )

    return TestCase( ts, None )


def make_TestExec_test_case( name ):
    ""
    ts = TestSpec( name, os.getcwd(), name+'.vvt' )
    tx = TestExec()
    return TestCase( ts, tx )


def create_tests( relpath, platname=None ):
    ""
    creator = TestCreator( platname, [] )
    tL = creator.fromFile( '.', relpath, None )

    return tL


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
