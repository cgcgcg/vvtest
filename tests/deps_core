#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.testcreator as testcreator
from libvvtest.ScriptReader import ScriptReader
import libvvtest.parsevvt as parsevvt
from libvvtest.errors import TestSpecError

from libvvtest.testcase import TestCase
from libvvtest.testspec import TestSpec
from libvvtest.testexec import TestExec
from libvvtest.wordexpr import WordExpression

from libvvtest import depend
find_tests_by_pattern = depend.find_tests_by_pattern

failed_match_reason = "failed 'depends on' matching criteria"


class Parse_Dependencies( vtu.vvtestTestCase ):

    def test_simple_dependencies(self):
        ""
        util.writefile( 'testX.py.vvt', """
            #VVT: depends on : testY
            """ )
        util.writefile( 'testA.py.vvt', """
            #VVT: depends on : testC testB
            """ )
        time.sleep(1)

        tL = create_tests( 'testX.py.vvt' )
        assert len(tL) == 1
        assert_dependencies( tL[0], 'testY' )
        assert get_depencency_expr( tL[0], 'testY' ) == None

        tL = create_tests( 'testA.py.vvt' )
        assert len(tL) == 1

        assert_dependencies( tL[0], 'testC', 'testB' )
        assert get_depencency_expr( tL[0], 'testC' ) == None
        assert get_depencency_expr( tL[0], 'testB' ) == None

    def test_result_attribute_with_dependency(self):
        ""
        util.writefile( 'testX.py.vvt', """
            #VVT: depends on (result=fail): testY testZ
            """ )
        util.writefile( 'testA.py.vvt', """
            #VVT: depends on (result="fail or diff") : testB
            """ )
        time.sleep(1)

        tL = create_tests( 'testX.py.vvt' )
        assert len(tL) == 1

        assert_dependencies( tL[0], 'testY', 'testZ' )

        for wx in [ get_depencency_expr( tL[0], 'testY' ),
                    get_depencency_expr( tL[0], 'testZ' ) ]:
            assert not wx.evaluate( "pass" )
            assert not wx.evaluate( "diff" )
            assert wx.evaluate( "fail" )

        tL = create_tests( 'testA.py.vvt' )
        assert len(tL) == 1

        assert_dependencies( tL[0], 'testB' )

        wx = get_depencency_expr( tL[0], 'testB' )
        assert not wx.evaluate( "pass" )
        assert wx.evaluate( "diff" )
        assert wx.evaluate( "fail" )

    def test_an_astrisk_result_attribute_means_match_anything(self):
        ""
        util.writefile( 'testX.py.vvt', """
            #VVT: depends on (result="*"): testY testZ
            """ )
        time.sleep(1)

        tL = create_tests( 'testX.py.vvt' )
        assert len(tL) == 1

        assert_dependencies( tL[0], 'testY', 'testZ' )
        for wx in [ get_depencency_expr( tL[0], 'testY' ),
                    get_depencency_expr( tL[0], 'testZ' ) ]:
            assert wx.evaluate( "pass" )
            assert wx.evaluate( "diff" )
            assert wx.evaluate( "fail" )

    def test_multiple_dependency_specifications(self):
        ""
        util.writefile( 'testX.py.vvt', """
            #VVT: depends on (result=fail): testY testZ
            #VVT: depends on (result="fail or diff") : testB
            #VVT: depends on : testW
            """ )
        time.sleep(1)

        tL = create_tests( 'testX.py.vvt' )
        assert len(tL) == 1

        assert_dependencies( tL[0], 'testB', 'testW', 'testY', 'testZ' )

        wx = get_depencency_expr( tL[0], 'testB' )
        assert not wx.evaluate( "pass" )
        assert wx.evaluate( "diff" )
        assert wx.evaluate( "fail" )

        for wx in [ get_depencency_expr( tL[0], 'testY' ),
                    get_depencency_expr( tL[0], 'testZ' ) ]:
            assert not wx.evaluate( "pass" )
            assert not wx.evaluate( "diff" )
            assert wx.evaluate( "fail" )

        assert get_depencency_expr( tL[0], 'testW' ) == None

    def test_using_filter_attributes(self):
        ""
        util.writefile( 'testX.py.vvt', """
            #VVT: depends on (platforms="XBox", result="fail") : testY
            #VVT: depends on (platforms="not XBox") : testZ
            """ )
        time.sleep(1)

        tL = create_tests( 'testX.py.vvt', 'XBox' )
        assert len(tL) == 1

        assert_dependencies( tL[0], 'testY' )

        wx = get_depencency_expr( tL[0], 'testY' )
        assert not wx.evaluate( "pass" )
        assert not wx.evaluate( "diff" )
        assert wx.evaluate( "fail" )

        tL = create_tests( 'testX.py.vvt', 'PlayStation' )
        assert len(tL) == 1

        assert_dependencies( tL[0], 'testZ' )

        assert get_depencency_expr( tL[0], 'testZ' ) == None

    def test_result_expression_corner_cases(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: testname = venus (depends on=pluto.*, result="pass or fail")
            """ )
        util.writefile( 'btest.vvt', """
            #VVT: testname = venus (depends on=pluto.*, result="pass or not*")
            """ )
        util.writefile( 'ctest.vvt', """
            #VVT: testname = venus (depends on=pluto.*, result="pass or fa^l")
            """ )
        util.writefile( 'dtest.vvt', """
            #VVT: depends on (result="pass or fail") : foobar
            """ )
        util.writefile( 'etest.vvt', """
            #VVT: depends on (result="pass or not*") : foobar
            """ )
        util.writefile( 'ftest.vvt', """
            #VVT: depends on (result="pass or fa^l") : foobar
            """ )
        util.writefile( 'gtest.vvt', """
            #VVT: depends on (result="pass or lazy") : foobar
            """ )
        time.sleep(1)

        vtu.parse_single_test_file( 'atest.vvt' )

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'btest.vvt' )

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'ctest.vvt' )

        vtu.parse_single_test_file( 'dtest.vvt' )

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'etest.vvt' )

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'ftest.vvt' )

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'gtest.vvt' )


def assert_dependencies( tspec, *check_names ):
    ""
    depL = tspec.getDependencies()

    nameL = []
    for name,expr,expect in depL:
        nameL.append( name )
    nameL.sort()

    checkL = list( check_names )
    checkL.sort()

    assert nameL == checkL


def get_depencency_expr( tspec, dep_name ):
    ""
    for name,expr,expect in tspec.getDependencies():
        if name == dep_name:
            return expr

    raise Exception( 'could not find dependency name: ' + dep_name )


#######################################

class tests_for_TestDependency_class( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp( self, cleanout=False )

    def test_satisfiesResult(self):
        ""
        def maketestdep( result, expr=None ):
            tcase = vtu.make_fake_TestCase( result )
            return depend.TestDependency( tcase, None, expr )

        dep = maketestdep( 'pass' )
        assert dep.satisfiesResult()

        dep = maketestdep( 'diff' )
        assert dep.satisfiesResult()

        dep = maketestdep( 'fail' )
        assert not dep.satisfiesResult()

        dep = maketestdep( 'notrun' )
        assert not dep.satisfiesResult()

        dep = maketestdep( 'notdone' )
        assert not dep.satisfiesResult()

        dep = maketestdep( 'timeout' )
        assert not dep.satisfiesResult()

        wx = WordExpression()  # no expr is always True
        dep = maketestdep( 'pass', wx )
        assert dep.satisfiesResult()
        dep = maketestdep( 'fail', wx )
        assert dep.satisfiesResult()

        wx = WordExpression( '' )  # an empty expr is always False
        dep = maketestdep( 'pass', wx )
        assert not dep.satisfiesResult()
        dep = maketestdep( 'fail', wx )
        assert not dep.satisfiesResult()

        wx = WordExpression( 'pass or fail' )
        dep = maketestdep( 'pass', wx )
        assert dep.satisfiesResult()
        dep = maketestdep( 'fail', wx )
        assert dep.satisfiesResult()
        dep = maketestdep( 'diff', wx )
        assert not dep.satisfiesResult()

    def test_a_dependency_that_fails_to_satisfy_glob_criteria(self):
        ""
        dep = depend.FailedTestDependency( failed_match_reason )

        assert dep.isBlocking()
        assert dep.willNeverRun()

        tcase = vtu.make_fake_TestCase( 'notrun' )
        tcase.addDependency( dep )

        assert tcase.isBlocked()
        assert tcase.willNeverRun()
        assert tcase.getBlockedReason() == failed_match_reason

        tcase1 = vtu.make_fake_TestCase( 'notrun', name='atest' )
        tcase2 = vtu.make_fake_TestCase( 'pass', name='btest' )
        tcase1.addDependency( dep )
        tcase1.addDependency( depend.TestDependency( tcase2, None, None ) )

        assert tcase1.isBlocked()
        assert tcase1.willNeverRun()
        assert tcase1.getBlockedReason() == failed_match_reason

    def test_will_never_run_logic(self):
        ""
        tcase = vtu.make_TestCase_with_a_dependency( 'pass' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'fail' )
        assert tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'fail', '*' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'skip' )
        assert tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'skip', '*' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'skippass' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'skipfail' )
        assert tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'runskip' )
        assert tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'runskip', '*' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'notdone' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'notdone', '*' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'notrun' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency( 'notrun', '*' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency(
                            'notrun',
                            second_level_result='fail' )
        assert tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency(
                            'notrun', '*',
                            second_level_result='fail' )
        assert not tcase.willNeverRun()

        tcase = vtu.make_TestCase_with_a_dependency(
                            'notrun',
                            second_level_result='pass' )
        assert not tcase.willNeverRun()


class Function_find_tests_by_execute_directory_match( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp( self, cleanout=False )

    def test_base_match(self):
        ""
        xD = make_tspec_map( 'subdir/testB', 'subdir/testC' )
        S = find_tests_by_pattern( 'subdir', 'testB', xD )
        assert_test_id_set( xD, S, 'subdir/testB' )

        xD = make_tspec_map( 'subdir/testC', 'subdir1/testB', 'subdir2/testB' )
        S = find_tests_by_pattern( 'subdir2', 'testB', xD )
        assert_test_id_set( xD, S, 'subdir2/testB' )

        xD = make_tspec_map( 'subdir/testC', 'subdir1/testB', 'subdir2/testB' )
        S = find_tests_by_pattern( 'subdir1', 'testB', xD )
        assert_test_id_set( xD, S, 'subdir1/testB' )

        xD = make_tspec_map( 'subdir/testB', 'subdir/testC', 'subdir/down/testB' )
        S = find_tests_by_pattern( 'subdir', 'testB', xD )
        assert_test_id_set( xD, S, 'subdir/testB' )

        xD = make_tspec_map( 'testB', 'testC' )
        S = find_tests_by_pattern( '', 'testB', xD )
        assert_test_id_set( xD, S, 'testB' )

        xD = make_tspec_map( 'testB', 'testC' )
        S = find_tests_by_pattern( '.', 'testB', xD )
        assert_test_id_set( xD, S, 'testB' )

        xD = make_tspec_map( 'testB', 'testC', 'down/testB' )
        S = find_tests_by_pattern( 'subdir', 'testB', xD )
        assert_test_id_set( xD, S, 'testB' )

    def test_subdir_match(self):
        ""
        xD = make_tspec_map( 'subdir/testB' )
        S = find_tests_by_pattern( '', 'testB', xD )
        assert_test_id_set( xD, S, 'subdir/testB' )

        xD = make_tspec_map( 'top/subdir/testB' )
        S = find_tests_by_pattern( 'top', 'testB', xD )
        assert_test_id_set( xD, S, 'top/subdir/testB' )

        xD = make_tspec_map( 'subdir/testB', 'subdir/deep/testB' )
        S = find_tests_by_pattern( '', 'testB', xD )
        assert_test_id_set( xD, S, 'subdir/deep/testB','subdir/testB' )

        xD = make_tspec_map( 'top/subdir/testB', 'top/subdir/deep/testB' )
        S = find_tests_by_pattern( 'top', 'testB', xD )
        assert_test_id_set( xD, S, 'top/subdir/deep/testB','top/subdir/testB' )

        xD = make_tspec_map( 'subdir/testB', 'subdir/deep/testB' )
        S = find_tests_by_pattern( '', 't*B', xD )
        assert_test_id_set( xD, S, 'subdir/deep/testB','subdir/testB' )

        xD = make_tspec_map( 'subdir1/deep2/testB', 'subdir1/deep1/testB', 'subdir2/testB' )
        S = find_tests_by_pattern( 'subdir1', 'testB', xD )
        assert_test_id_set( xD, S, 'subdir1/deep1/testB','subdir1/deep2/testB' )

        xD = make_tspec_map( 'subdir1/deep2/testB', 'subdir1/deep1/testB', 'subdir2/testB' )
        S = find_tests_by_pattern( 'subdir1', 't*B', xD )
        assert_test_id_set( xD, S, 'subdir1/deep1/testB','subdir1/deep2/testB' )

    def test_absolute_path_pattern(self):
        ""
        xD = make_tspec_map( 'subdir1/testB', 'subdir2/testB' )
        S = find_tests_by_pattern( 'subdir1', 'subdir2/testB', xD )
        assert_test_id_set( xD, S, 'subdir2/testB' )

        xD = make_tspec_map( 'subdir1/testB', 'subdir2/subdir1/testB' )
        S = find_tests_by_pattern( 'subdir1', 'subdir1/testB', xD )
        assert_test_id_set( xD, S, 'subdir1/testB' )

    def test_general_pattern(self):
        ""
        xD = make_tspec_map( 'subdir1/testB', 'subdir2/testB', 'subdir3/testA' )
        S = find_tests_by_pattern( 'subdir3', 't*B', xD )
        assert_test_id_set( xD, S, 'subdir1/testB', 'subdir2/testB' )

    def test_relative_directory_test_location(self):
        ""
        xD = make_tspec_map( 'subdir1/testB', 'subdir2/testB', 'subdir3/testA' )
        S = find_tests_by_pattern( 'subdir3', '../subdir1/*B', xD )
        assert_test_id_set( xD, S, 'subdir1/testB' )

        xD = make_tspec_map( 'subdir1/testB', 'subdir2/testB', 'subdir3/testA' )
        S = find_tests_by_pattern( 'subdir3', '../sub*/*B', xD )
        assert_test_id_set( xD, S, 'subdir1/testB','subdir2/testB' )


class dependency_related_functions( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp( self, cleanout=False )

    def test_add_dependency_uniquifies_by_test_id_TestSpec(self):
        ""
        tcase = make_TestSpec_test_case( 'testA' )

        dep1 = make_TestSpec_test_case( 'atest' )
        depend.connect_dependency( tcase, dep1 )

        dep2 = make_TestSpec_test_case( 'atest' )
        depend.connect_dependency( tcase, dep2 )

        assert tcase.numDependencies() == 1

    def test_add_dependency_uniquifies_by_test_id(self):
        ""
        tcase = make_TestSpec_test_case( 'testA' )

        dep1 = make_TestSpec_test_case( 'atest' )
        depend.connect_dependency( tcase, dep1 )

        dep2 = make_TestSpec_test_case( 'atest' )
        depend.connect_dependency( tcase, dep2 )

        assert tcase.numDependencies() == 1
        assert len( tcase.deps ) == 1
        assert id( tcase.deps[0].tcase ) == id(dep2)

    def test_add_dep_with_match_pattern(self):
        ""
        tcase1 = make_TestSpec_test_case( 'atest' )
        tcase2 = make_TestSpec_test_case( 'btest' )

        depend.connect_dependency( tcase1, tcase2, 'btest*' )

        matchL = tcase1.getDepDirectories()
        assert len( matchL ) == 1
        pat,xdir = matchL[0]
        assert pat == 'btest*' and xdir == 'btest'

    def test_add_dep_directory(self):
        ""
        tcase = make_TestSpec_test_case( 'atest' )

        tcase.addDepDirectory( 'btest*', 'blah/btest' )

        matchL = tcase.getDepDirectories()
        assert len( matchL ) == 1
        pat,xdir = matchL[0]
        assert pat == 'btest*' and xdir == 'blah/btest'

    def test_that_TestCase_deps_take_precedence_over_addDepDirectory(self):
        ""
        tA = vtu.make_fake_TestCase( name='Atest' )
        tA.addDepDirectory( 'B*', 'sdir/Btest.np=4' )

        tB = vtu.make_fake_TestCase( name='Btest' )
        depend.connect_dependency( tA, tB, 'Bt*' )

        matchL = tA.getDepDirectories()
        assert len( matchL ) == 1
        pat,xdir = matchL[0]
        assert pat == 'Bt*' and xdir == 'sdir/Btest.np=4'

    def test_find_and_connect_dependencies(self):
        ""
        xD = make_tspec_map( 'testA', 'testB', 'testD' )

        tA = find_test( xD, 'testA' )
        tA.getSpec().addDependency( 'testB' )

        assert tA.numDependencies() == 0
        depend.check_connect_dependencies( tA, xD )
        assert tA.numDependencies() == 1

        tB = find_test( xD, 'testB' )
        tB.getSpec().addDependency( 'testC' )

        assert tB.numDependencies() == 0
        depend.check_connect_dependencies( tB, xD )
        assert tB.numDependencies() == 1
        assert tB.isBlocked()
        assert tB.getBlockedReason() == failed_match_reason

    def test_parsing_the_expect_attribute_of_a_depends_on_directive(self):
        ""
        util.writefile( 'blue.vvt', """
            #VVT: depends on : green
            """ )
        util.writefile( 'green.vvt', """
            #VVT: depends on (expect=+): red
            """ )
        util.writefile( 'red.vvt', """
            #VVT: depends on (expect=*): pink
            """ )
        util.writefile( 'pink.vvt', """
            #VVT: depends on (expect=?): silver
            """ )
        util.writefile( 'silver.vvt', """
            #VVT: depends on (expect=2): oran*
            """ )
        util.writefile( 'bad1.vvt', """
            #VVT: depends on (expect=2.0): oran*
            """ )
        util.writefile( 'bad2.vvt', """
            #VVT: depends on (expect=-1): oran*
            """ )
        util.writefile( 'multi.vvt', """
            # the expect criterion applies to each glob pattern separately
            #VVT: depends on (expect=2): red pink
            """ )
        time.sleep(1)

        tspec = vtu.parse_single_test_file( 'blue.vvt' )
        deps = tspec.getDependencies()
        assert len(deps) == 1 and deps[0][0] == 'green' and deps[0][2] == '+'

        tspec = vtu.parse_single_test_file( 'green.vvt' )
        deps = tspec.getDependencies()
        assert len(deps) == 1 and deps[0][0] == 'red' and deps[0][2] == '+'

        tspec = vtu.parse_single_test_file( 'red.vvt' )
        deps = tspec.getDependencies()
        assert len(deps) == 1 and deps[0][0] == 'pink' and deps[0][2] == '*'

        tspec = vtu.parse_single_test_file( 'pink.vvt' )
        deps = tspec.getDependencies()
        assert len(deps) == 1 and deps[0][0] == 'silver' and deps[0][2] == '?'

        tspec = vtu.parse_single_test_file( 'silver.vvt' )
        deps = tspec.getDependencies()
        assert len(deps) == 1 and deps[0][0] == 'oran*' and deps[0][2] == '2'

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'bad1.vvt' )

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'bad2.vvt' )

        tspec = vtu.parse_single_test_file( 'multi.vvt' )
        deps = tspec.getDependencies()
        assert len(deps) == 2
        assert deps[0][0] == 'red' and deps[0][2] == '2'
        assert deps[1][0] == 'pink' and deps[0][2] == '2'

    def test_using_testname_with_trailing_depends_on_attributes(self):
        ""
        util.writefile( 'mars.vvt', """
            #VVT: testname = venus (depends on=pluto.*, result=*, expect=3)
            """ )
        time.sleep(1)

        tL = vtu.create_tests_from_file( 'mars.vvt' )

        assert len(tL) == 1
        tspec = tL[0].getSpec()
        assert tspec.getName() == 'venus'
        deps = tspec.getDependencies()
        assert len(deps) == 1
        pat,res,exp = deps[0]
        assert pat == 'pluto.*'
        assert res != None
        assert exp == '3'

    def test_depends_on_match_criterion(self):
        ""
        depL = []
        assert not depend.match_criteria_satisfied( True, depL, None, '+'  )
        assert     depend.match_criteria_satisfied( True, depL, None, '*'  )
        assert     depend.match_criteria_satisfied( True, depL, None, '?'  )
        assert     depend.match_criteria_satisfied( True, depL, None, '0'  )
        assert not depend.match_criteria_satisfied( True, depL, None, '1'  )
        assert not depend.match_criteria_satisfied( True, depL, None, '2'  )

        tA = vtu.make_fake_TestCase( name='Atest' )
        depL = [ tA.getSpec().getID() ]
        assert     depend.match_criteria_satisfied( True, depL, None, '+'  )
        assert     depend.match_criteria_satisfied( True, depL, None, '*'  )
        assert     depend.match_criteria_satisfied( True, depL, None, '?'  )
        assert not depend.match_criteria_satisfied( True, depL, None, '0'  )
        assert     depend.match_criteria_satisfied( True, depL, None, '1'  )
        assert not depend.match_criteria_satisfied( True, depL, None, '2'  )

        tA = vtu.make_fake_TestCase( name='Atest' )
        tB = vtu.make_fake_TestCase( name='Btest' )
        depL = [ tA.getSpec().getID(), tB.getSpec().getID() ]
        assert     depend.match_criteria_satisfied( True, depL, None, '+'  )
        assert     depend.match_criteria_satisfied( True, depL, None, '*'  )
        assert not depend.match_criteria_satisfied( True, depL, None, '?'  )
        assert not depend.match_criteria_satisfied( True, depL, None, '0'  )
        assert not depend.match_criteria_satisfied( True, depL, None, '1'  )
        assert     depend.match_criteria_satisfied( True, depL, None, '2'  )


#######################################

def make_tspec_map( *dirlist ):
    ""
    D = {}
    for sd in dirlist:
        d,b = os.path.split( sd )
        tcase = make_TestSpec_test_case( b, d )
        D[ tcase.getSpec().getID() ] = tcase

    return D


def find_test( tcasemap, testname ):
    ""
    for tid,tcase in tcasemap.items():
        if tcase.getSpec().getName() == testname:
            return tcase
    return None


def assert_test_id_set( id2tcase, idset, *testdirs ):
    ""
    assert len(idset) == len(testdirs)
    dirset = set()
    for tid in idset:
        displ = id2tcase[tid].getSpec().getDisplayString()
        dirset.add( displ )
    assert len( idset ) == len( dirset )
    assert dirset == set( testdirs )


def make_TestSpec_test_case( name, subdir=None ):
    ""
    if subdir: subdir = os.path.normpath( subdir ) + '/'
    else:      subdir = ''

    ts = TestSpec( name, os.getcwd(), subdir+name+'.vvt' )

    return TestCase( ts )


def create_tests( relpath, platname=None ):
    ""
    creator = testcreator.TestCreator( {}, platname )
    tL = creator.fromFile( relpath )

    return tL


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
