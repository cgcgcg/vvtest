#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3

from libvvtest.RuntimeConfig import RuntimeConfig
from libvvtest.filtering import TestFilter


class filter_and_num_processors( vtu.vvtestTestCase ):

    def test_evaluating_maxprocs_in_RuntimeConfig(self):
        ""
        rtconfig = RuntimeConfig()
        assert rtconfig.evaluate_maxprocs( (1000000,0) )

        rtconfig = RuntimeConfig()
        rtconfig.setMaxSize( (5,7) )
        assert     rtconfig.evaluate_maxprocs( (5,0) )
        assert not rtconfig.evaluate_maxprocs( (6,0) )

        rtconfig = RuntimeConfig()
        rtconfig.setMaxSize( (None,0) )
        assert rtconfig.evaluate_maxprocs( (1,0) )
        assert rtconfig.evaluate_maxprocs( (1000000,0) )

    def test_filtering_tests_by_maxprocs(self):
        ""
        tcase1 = vtu.make_fake_TestCase()
        tcase1.getSpec().setParameters( { 'np':'1' } )

        tcase2 = vtu.make_fake_TestCase()
        tcase2.getSpec().setParameters( { 'np':'4' } )

        rtc = vtu.make_RuntimeConfig()
        rtc.setMaxSize( (1,0) )
        tf = TestFilter( rtc, None )
        assert tf.checkMaxSize( tcase1 )
        assert not tf.checkMaxSize( tcase2 )

        rtc.setMaxSize( (1,4) )
        assert tf.checkMaxSize( tcase1 )
        assert not tf.checkMaxSize( tcase2 )

        rtc.applyMaxProcsExpression( False )
        assert tf.checkMaxSize( tcase1 )
        assert tf.checkMaxSize( tcase2 )

    def test_maxprocs_filtering(self):
        ""
        # TODO: platform_plugin.py was deprecated on Feb 2022
        util.writefile( 'cfg1/platform_plugin.py', """
            def initialize( plat ):
                plat.setattr( 'maxprocs', 3 )
            """ )
        util.writefile( 'cfg2/idplatform.py', """
            def load_specifications( specs, platname, cplrname, opts ):
                specs['maxprocs'] = 3
            """ )

        util.writescript( 'atest.vvt', """
            #!"""+sys.executable+"""
            #VVT: parameterize : np = 1 2 4
            #VVT: analyze : --analyze
            """ )

        for cfgd in ['cfg1','cfg2']:

            for batch in [False,True]:
                vtu.remove_results()

                vrun = vtu.runvvtest( '-vv --config '+cfgd, batch=batch )
                vrun.assertCounts( total=4, npass=2, skip=2 )
                tdir = vrun.resultsDir()

                vtu.remove_results()
                vrun = vtu.runvvtest( '-vv -N 4 --config '+cfgd, batch=batch )
                vrun.assertCounts( total=4, npass=4 )

                # in restart, no max procs filter unless -N is on command line
                vrun = vtu.runvvtest( '-R --config '+cfgd, batch=batch, chdir=tdir )
                vrun.assertCounts( total=4, npass=4 )

                vrun = vtu.runvvtest( '-R -N 2 --config '+cfgd, batch=batch, chdir=tdir )
                vrun.assertCounts( total=2, npass=2 )

    def test_max_procs_filter_is_not_applied_in_batch_mode_by_default(self):
        ""
        # avoid possible builtin setting of maxprocs
        util.writefile( 'cfg/idplatform.py', """
            def load_specifications( specs, platname, cplrname, opts ):
                return 'break'
            """ )
        cfg = abspath( 'cfg' )

        util.writefile( 'procs.vvt', """
            #VVT: parameterize : np = 1 1000000
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '--config', cfg, batch=True )
        vrun.assertCounts( total=2, npass=2 )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
