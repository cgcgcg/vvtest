#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: trig
#OPTION: realssh

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import unittest
import filecmp
import stat

import trigtestutils as trigutil
import testutils as util
from testutils import print3

# this is the module we are testing
import filecopy


# By default, a "fake" ssh script is used that acts like ssh.  To use
# an actual ssh, add the -s option to the unit test command line.  In this
# case, make sure you can ssh to the current machine without a password.


fcpycmd = sys.executable+' '+trigutil.trigdir+'/filecopy.py'


#######################################################################

class locally_testable_functions( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def test_check_dir(self):
        ""
        L = filecopy.check_dir( '/a/path/noexist' )
        assert L[0] == False
        L = filecopy.check_dir( 'pathnoexist' )
        assert L[0] == False

        util.writefile( 'subdir/file.txt', 'content' )
        fn = os.path.abspath( 'file.txt' )
        time.sleep(1)

        L = filecopy.check_dir( 'subdir/blah' )
        assert L[0] == False
        L = filecopy.check_dir( 'subdir/file.txt' )
        assert L[0] == True
        assert L[1] == False

        # the new directory has to be read,write,exe to owner
        assert os.access( 'subdir', os.X_OK )
        assert os.access( 'subdir', os.R_OK )
        assert os.access( 'subdir', os.W_OK )

        L = filecopy.check_dir( 'subdir' )
        assert L[0] == True
        assert L[1] == True
        assert L[2] == True

        fm = filemode( 'subdir' )
        mask = ~( stat.S_IWUSR | stat.S_IWGRP | stat.S_IWOTH )
        os.chmod( 'subdir', fm & mask )
        time.sleep(1)
        try:
            assert not os.access( 'subdir', os.W_OK )

            L = filecopy.check_dir( 'subdir' )
            assert L[0] == True
            assert L[1] == True
            assert L[2] == False
        finally:
            # so it can be deleted later
            os.chmod( 'subdir', fm | stat.S_IWUSR )

    def test_follow_link(self):
        ""
        p = filecopy.follow_link( os.getcwd() )
        assert p == os.getcwd()

        p = filecopy.follow_link( 'junk' )
        assert p == os.path.abspath( 'junk' )

        util.writefile( 'path2', 'content' )
        os.symlink( 'path2', 'path1' )
        time.sleep(1)
        p = filecopy.follow_link( 'path1' )
        assert p == os.path.abspath( 'path2' )

        util.writefile( 'path2', 'content' )
        os.symlink( os.path.abspath('path2'), 'path3' )
        time.sleep(1)
        p = filecopy.follow_link( 'path3' )
        assert p == os.path.abspath( 'path2' )

        os.mkdir( 'subdir' )
        os.symlink( '../path2', 'subdir/lnk' )
        time.sleep(1)
        p = filecopy.follow_link( 'subdir/lnk' )
        assert p == os.path.abspath( 'path2' )

        os.mkdir( 'subdir2' )
        os.symlink( '../subdir2/path2', 'subdir/lnk2' )
        time.sleep(1)
        p = filecopy.follow_link( 'subdir/lnk2' )
        assert p == os.path.abspath( 'subdir2/path2' )

    def test_core_glob_paths_functionality(self):
        ""
        fL,xL = filecopy.glob_paths( ['/foo/bar/noexist'] )
        assert len(xL) == 1 and xL[0] == '/foo/bar/noexist'
        fL,xL = filecopy.glob_paths( ['/foo/bar/*'] )
        assert len(xL) == 1 and xL[0] == '/foo/bar/*'
        fL,xL = filecopy.glob_paths( ['noexist'] )
        assert len(xL) == 1 and xL[0] == 'noexist'
        fL,xL = filecopy.glob_paths( ['foo*'] )
        assert len(xL) == 1 and xL[0] == 'foo*'
        fL,xL = filecopy.glob_paths( ['foo*','bar*'] )
        assert len(xL) == 2 and xL[0] == 'foo*' and xL[1] == 'bar*'

        util.writefile( 'subdir/foo.txt', 'content' )
        util.writefile( 'subdir/bar.txt', 'content' )
        util.writefile( 'subdir/foobar.txt', 'content' )
        sd = os.path.abspath( 'subdir' )
        time.sleep(1)

        fL,xL = filecopy.glob_paths( ['subdir/foo.txt'] )
        assert len(fL) == 1 and len(xL) == 0
        assert fL[0] == [ os.path.abspath( 'subdir' ), 'foo.txt', 'foo.txt' ]

        fL,xL = filecopy.glob_paths( ['subdir/foo.txt','subdir/bar.txt'] )
        assert len(fL) == 2 and len(xL) == 0
        fL.sort()
        assert fL[0] == [ sd, 'bar.txt', 'bar.txt' ]
        assert fL[1] == [ sd, 'foo.txt', 'foo.txt' ]

        L = [ 'subdir/foo*' ]
        fL,xL = filecopy.glob_paths( L )
        assert len(fL) == 2 and len(xL) == 0
        fL.sort()
        assert fL[0] == [ sd, 'foo.txt', 'foo.txt' ]
        assert fL[1] == [ sd, 'foobar.txt', 'foobar.txt' ]

        L = [ os.path.join( sd, 'foo*' ) ]
        fL,xL = filecopy.glob_paths( L )
        assert len(fL) == 2 and len(xL) == 0
        fL.sort()
        assert fL[0] == [ sd, 'foo.txt', 'foo.txt' ]
        assert fL[1] == [ sd, 'foobar.txt', 'foobar.txt' ]

        L = [ 'subdir/foo*', 'subdir/nope*' ]
        fL,xL = filecopy.glob_paths( L )
        assert len(fL) == 2 and len(xL) == 1
        assert xL[0] == 'subdir/nope*'
        fL.sort()
        assert fL[0] == [ sd, 'foo.txt', 'foo.txt' ]
        assert fL[1] == [ sd, 'foobar.txt', 'foobar.txt' ]

        util.writefile( 'subdir2/bar2.txt', 'content' )
        sd2 = os.path.abspath( 'subdir2' )
        time.sleep(1)

        L = [ 'sub*/bar*' ]
        fL,xL = filecopy.glob_paths( L )
        assert len(fL) == 2 and len(xL) == 0
        fL.sort()
        assert fL[0] == [ sd, 'bar.txt', 'bar.txt' ]
        assert fL[1] == [ sd2, 'bar2.txt', 'bar2.txt' ]

        L = [ 'subdir/*bar*', 'subdir2/*' ]
        fL,xL = filecopy.glob_paths( L )
        assert len(fL) == 3 and len(xL) == 0
        fL.sort()
        assert fL[0] == [ sd, 'bar.txt', 'bar.txt' ]
        assert fL[1] == [ sd, 'foobar.txt', 'foobar.txt' ]
        assert fL[2] == [ sd2, 'bar2.txt', 'bar2.txt' ]

    def test_glob_paths_with_wild_cards(self):
        ""
        util.writefile( 'subdir/foo*', 'content' )
        util.writefile( 'subdir/foobar.txt', 'content' )
        sd = os.path.abspath( 'subdir' )
        time.sleep(1)

        L = [ 'subdir/foo*' ]
        fL,xL = filecopy.glob_paths( L )
        assert len(fL) == 1 and len(xL) == 0
        fL.sort()
        assert fL[0] == [ sd, 'foo*', 'foo*' ]

        L = [ 'subdir/foo*.txt' ]
        fL,xL = filecopy.glob_paths( L )
        assert len(fL) == 1 and len(xL) == 0
        fL.sort()
        assert fL[0] == [ sd, 'foobar.txt', 'foobar.txt' ]

    def test_glob_paths_on_soft_links(self):
        ""
        util.writefile( 'subdir1/foo.txt', 'content' )
        util.writefile( 'subdir2/bar.txt', 'content' )
        os.symlink( '../subdir2/bar.txt', 'subdir1/bar.lnk' )
        sd1 = os.path.abspath( 'subdir1' )
        sd2 = os.path.abspath( 'subdir2' )
        time.sleep(1)

        L = [ 'subdir1/*' ]
        fL,xL = filecopy.glob_paths( L )
        assert len(fL) == 2 and len(xL) == 0
        fL.sort()
        assert fL[0] == [ sd1, 'foo.txt', 'foo.txt' ]
        assert fL[1] == [ sd2, 'bar.txt', 'bar.lnk' ]

    def test_make_temp_dir(self):
        ""
        os.mkdir( 'subdir' )
        time.sleep(1)

        t1 = time.time()
        td1 = filecopy.make_temp_dir( 'subdir', t1 )
        assert os.path.isdir( td1 )
        assert os.path.dirname( td1 ) == 'subdir'

        time.sleep(1)
        t2 = time.time()
        td2 = filecopy.make_temp_dir( 'subdir', t2 )
        assert os.path.isdir( td2 )
        assert os.path.dirname( td2 ) == 'subdir'
        assert td1 != td2

        # should be writable
        tf = os.path.join( td2, 'file.txt' )
        fp = open( tf, 'w' )
        fp.write( 'content\n' )
        fp.close()

        # by default, group and other have no permissions to the temp dir
        m = filemode( td1 )
        um = stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR
        assert ( m & um ) != 0
        gm = stat.S_IRGRP | stat.S_IWGRP | stat.S_IXGRP
        assert ( m & gm ) == 0
        om = stat.S_IROTH | stat.S_IWOTH | stat.S_IXOTH
        assert ( m & om ) == 0

    def test_swap_paths(self):
        ""
        util.writefile( 'dir/file1.txt', 'old file 1 content\n' )
        util.writefile( 'dir/sub/file2.txt', 'old file 2 content\n' )
        util.writefile( 'tmp/file1.txt', 'new file 1 content\n' )
        util.writefile( 'tmp/sub/file2.txt', 'new file 2 content\n' )
        # add a soft link with different values
        os.symlink( 'sub/file2.txt', 'dir/bar.lnk' )
        os.symlink( 'file1.txt', 'tmp/foo.lnk' )
        time.sleep(1)

        rL = [ ['junk','file1.txt','file1.txt'],
               ['junk','sub','sub'],
               ['junk','foo.lnk','bar.lnk'] ]
        filecopy.swap_paths( rL, 'tmp', 'dir' )
        time.sleep(1)

        s = util.readfile( 'dir/file1.txt' )
        assert s.strip() == 'new file 1 content'
        s = util.readfile( 'dir/sub/file2.txt' )
        assert s.strip() == 'new file 2 content'


class local_and_remote_functions( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def test_local_copy_with_files_and_directories(self):
        ""
        util.writefile( 'dir/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir/sub/file2.txt', 'file 2 content\n' )
        os.symlink( 'file2.txt', 'dir/sub/bar.lnk' )
        os.mkdir( 'cpy' )
        time.sleep(1)

        rL,xL = filecopy.glob_paths( ['dir/*'] )

        filecopy.local_copy( rL, 'cpy' )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

        # change the link value
        os.remove( 'dir/sub/bar.lnk' )
        os.symlink( '../file1.txt', 'dir/sub/bar.lnk' )
        time.sleep(1)

        # check validity of the compare_dirs() function
        try:
            compare_dirs( 'dir', 'cpy' )
        except:
            print3( sys.exc_info()[1] )

        # copy again with the changed soft link
        filecopy.local_copy( rL, 'cpy' )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

    def test_local_copy_with_soft_link(self):
        ""
        util.writefile( 'dir1/file1.txt', 'file 1 content\n' )
        os.mkdir( 'dir2' )
        os.symlink( '../dir1/file1.txt', 'dir2/link.txt' )
        os.mkdir( 'cpy' )
        d1 = os.path.abspath( 'dir1' )
        time.sleep(1)

        rL,xL = filecopy.glob_paths( ['dir2/*'] )
        filecopy.local_copy( rL, 'cpy' )
        time.sleep(1)

        assert filecmp.cmp( d1+'/file1.txt', 'cpy/link.txt' )

        # make a double soft link chain
        util.writefile( 'dir1/file2.txt', 'file 2 content\n' )
        os.remove( 'dir1/file1.txt' )
        os.symlink( 'file2.txt', 'dir1/file1.txt' )
        time.sleep(1)

        rL,xL = filecopy.glob_paths( ['dir2/*'] )
        filecopy.local_copy( rL, 'cpy' )
        time.sleep(1)

        assert os.path.islink( 'cpy/link.txt' )
        assert os.readlink( 'cpy/link.txt' ) == 'file2.txt'

    def test_local_copy_with_soft_linked_directory(self):
        ""
        util.writefile( 'dir1/file1.txt', 'file 1 content\n' )
        os.mkdir( 'dir2' )
        os.symlink( '../dir1', 'dir2/dirlink' )
        os.mkdir( 'cpy' )
        d1 = os.path.abspath( 'dir1' )
        time.sleep(1)

        rL,xL = filecopy.glob_paths( ['dir2/*'] )
        filecopy.local_copy( rL, 'cpy' )
        time.sleep(1)

        # a top level directory soft link is followed
        assert os.path.exists( 'cpy/dirlink' )
        assert not os.path.islink( 'cpy/dirlink' )
        compare_dirs( 'dir1', 'cpy/dirlink' )

        # but a second soft link is not
        os.symlink( 'dir1', 'dir3' )
        os.remove( 'dir2/dirlink' )
        os.symlink( '../dir3', 'dir2/dirlink' )
        os.mkdir( 'cpy2' )
        time.sleep(1)

        rL,xL = filecopy.glob_paths( ['dir2/*'] )
        filecopy.local_copy( rL, 'cpy2' )
        time.sleep(1)

        assert os.path.islink( 'cpy2/dirlink' )
        assert os.readlink( 'cpy2/dirlink' ) == 'dir1'

    def test_local_to_local_using_copy_files(self):
        ""
        util.writefile( 'dir/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir/sub/file2.txt', 'file 2 content\n' )
        os.symlink( 'file2.txt', 'dir/sub/bar.lnk' )
        os.mkdir( 'cpy' )
        time.sleep(1)

        filecopy.copy_files( ['dir/*'], 'cpy' )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

        m = filemode( 'cpy/sub/file2.txt' )
        oth = stat.S_IROTH | stat.S_IWOTH | stat.S_IXOTH
        # set original and copy to have rwx for world
        os.chmod( 'dir/sub/file2.txt', m | oth )
        os.chmod( 'cpy/sub/file2.txt', m | oth )
        time.sleep(1)

        filecopy.copy_files( ['dir/*'], 'cpy', fperms=['o-rwx'] )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

        # original should still have rwx, but the copy should not
        m1 = filemode( 'dir/sub/file2.txt' ) & oth
        assert m1 != 0
        m2 = filemode( 'cpy/sub/file2.txt' ) & oth
        assert m2 == 0

    def test_local_to_local_copy_files_with_more_than_one_source(self):
        ""
        util.writefile( 'dir1/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir2/sub/file2.txt', 'file 2 content\n' )
        os.mkdir( 'cpy' )
        time.sleep(1)

        filecopy.copy_files( ['dir1/*', 'dir2/sub'], 'cpy' )
        time.sleep(1)

        L = os.listdir( 'cpy' )
        L.sort()
        assert L == ['file1.txt', 'sub']

        filecmp.cmp( 'dir1/file1.txt', 'cpy/file1.txt' )
        compare_dirs( 'dir2/sub', 'cpy/sub' )

    def test_local_to_local_copy_files_with_source_file_errors(self):
        ""
        util.writefile( 'dir1/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir2/sub/file2.txt', 'file 2 content\n' )
        os.mkdir( 'cpy' )
        util.writefile( 'afile', 'afile content' )
        os.mkdir( 'badperm' )
        time.sleep(1)

        # set a directory with no write permissions
        m = filemode( 'badperm' )
        wm = stat.S_IWUSR | stat.S_IWGRP | stat.S_IWOTH
        os.chmod( 'badperm', m & (~wm) )
        time.sleep(1)

        try:
            filecopy.copy_files( ['dir2/sub', 'dir1/junk.txt'], 'cpy' )
        except:
            print3( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

        try:
            filecopy.copy_files( ['dir2/sub'], 'wrong' )
        except:
            print3( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

        try:
            filecopy.copy_files( ['dir2/sub'], 'afile' )
        except:
            print3( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

        try:
            filecopy.copy_files( ['dir2/sub'], 'badperm' )
        except:
            print3( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

    def test_local_to_local_file_copy_with_command_line(self):
        ""
        util.writefile( 'dir/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir/sub/file2.txt', 'file 2 content\n' )
        os.symlink( 'file2.txt', 'dir/sub/bar.lnk' )
        os.mkdir( 'cpy' )
        time.sleep(1)

        util.runcmd( fcpycmd+' "dir/*" cpy' )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

        m = filemode( 'cpy/sub/file2.txt' )
        oth = stat.S_IROTH | stat.S_IWOTH | stat.S_IXOTH
        # set original and copy to have rwx for world
        os.chmod( 'dir/sub/file2.txt', m | oth )
        os.chmod( 'cpy/sub/file2.txt', m | oth )
        time.sleep(1)

        cmd = fcpycmd+' --fperms o-rwx'
        cmd += ' "dir/*" cpy'
        util.runcmd( cmd )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

        # original should still have rwx, but the copy should not
        m1 = filemode( 'dir/sub/file2.txt' ) & oth
        assert m1 != 0
        m2 = filemode( 'cpy/sub/file2.txt' ) & oth
        assert m2 == 0

    def test_local_to_local_time_stamp_preservation(self):
        ""
        util.writefile( 'dir/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir/sub1/file2.txt', 'file 2 content\n' )
        util.writefile( 'dir/sub2/file3.txt', 'file 3 content\n' )
        os.mkdir( 'cpy' )
        time.sleep(1)
        t1 = time.time() - 600
        os.utime( 'dir/file1.txt', (t1,t1) )
        t2 = t1 - 600
        os.utime( 'dir/sub1/file2.txt', (t2,t2) )
        t3 = t2 - 600
        os.utime( 'dir/sub2', (t3,t3) )
        time.sleep(1)

        filecopy.copy_files( ['dir/*'], 'cpy' )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )
        t = os.path.getmtime( 'dir/file1.txt' )
        assert t < time.time() - 300
        assert abs( t - os.path.getmtime( 'cpy/file1.txt' ) ) < 3
        t = os.path.getmtime( 'dir/sub1/file2.txt' )
        assert t < time.time() - 300
        assert abs( t - os.path.getmtime( 'cpy/sub1/file2.txt' ) ) < 3
        t = os.path.getmtime( 'dir/sub2' )
        assert t < time.time() - 300
        assert abs( t - os.path.getmtime( 'cpy/sub2' ) ) < 3

    def test_check_dir_with_user_name_expansion(self):
        ""
        # skip this test if user expansion fails
        home = os.path.expanduser( '~' )
        if home != '~' and os.path.exists(home):
            L = filecopy.check_dir( '~' )
            assert len(L) == 4
            assert L[0] and L[1] and L[2]
            assert L[3] == home

    def test_glob_paths_with_user_name_expansion(self):
        ""
        # skip this test if user expansion fails
        home = os.path.expanduser( '~' )
        if home != '~' and os.path.exists(home):
            L1,L2 = filecopy.glob_paths( ['~'] )
            assert len(L1) == 1
            absdir,lnkbase,destbase = L1[0]
            assert os.path.join( absdir, lnkbase ) == home

    def test_remote_to_local_copy(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        util.writefile( 'dir/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir/sub/file2.txt', 'file 2 content\n' )
        os.symlink( 'file2.txt', 'dir/sub/bar.lnk' )
        os.mkdir( 'cpy' )
        cpd = os.path.abspath( 'cpy' )
        time.sleep(1)

        rL,xL = filecopy.glob_paths( ['dir/*'] )

        filecopy.remote_to_local_copy( sshmach, rL, cpd, sshexe=sshprog )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

        # change the link value
        os.remove( 'dir/sub/bar.lnk' )
        os.symlink( '../file1.txt', 'dir/sub/bar.lnk' )
        time.sleep(1)

        # check validity of the compare_dirs() function
        try:
            compare_dirs( 'dir', 'cpy' )
        except:
            print3( sys.exc_info()[1] )

        # copy again with the changed soft link
        filecopy.remote_to_local_copy( sshmach, rL, cpd, sshexe=sshprog )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

    def test_remote_to_local_copy_with_soft_link(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        util.writefile( 'dir1/file1.txt', 'file 1 content\n' )
        os.mkdir( 'dir2' )
        os.symlink( '../dir1/file1.txt', 'dir2/link.txt' )
        os.mkdir( 'cpy' )
        cpd = os.path.abspath( 'cpy' )
        d1 = os.path.abspath( 'dir1' )
        time.sleep(1)

        rL,xL = filecopy.glob_paths( ['dir2/*'] )
        filecopy.remote_to_local_copy( sshmach, rL, cpd, sshexe=sshprog )
        time.sleep(1)

        assert not os.path.islink( 'cpy/link.txt' )
        assert filecmp.cmp( d1+'/file1.txt', 'cpy/link.txt' )

        # make a double soft link chain
        util.writefile( 'dir1/file2.txt', 'file 2 content\n' )
        os.remove( 'dir1/file1.txt' )
        os.symlink( 'file2.txt', 'dir1/file1.txt' )
        time.sleep(1)

        rL,xL = filecopy.glob_paths( ['dir2/*'] )
        filecopy.remote_to_local_copy( sshmach, rL, cpd, sshexe=sshprog )
        time.sleep(1)

        assert os.path.islink( 'cpy/link.txt' )
        assert os.readlink( 'cpy/link.txt' ) == 'file2.txt'

    def test_remote_to_local_copy_using_copy_files_function(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        util.writefile( 'dir/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir/sub/file2.txt', 'file 2 content\n' )
        os.symlink( 'file2.txt', 'dir/sub/bar.lnk' )
        srcd = os.path.abspath( 'dir' )
        os.mkdir( 'cpy' )
        time.sleep(1)

        filecopy.copy_files( [sshmach+':'+srcd+'/*'], 'cpy', sshexe=sshprog )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

        m = filemode( 'cpy/sub/file2.txt' )
        oth = stat.S_IROTH | stat.S_IWOTH | stat.S_IXOTH
        # set original and copy to have rwx for world
        os.chmod( 'dir/sub/file2.txt', m | oth )
        os.chmod( 'cpy/sub/file2.txt', m | oth )
        time.sleep(1)

        filecopy.copy_files( [sshmach+':'+srcd+'/*'], 'cpy', fperms=['o-rwx'],
                             sshexe=sshprog )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

        # original should still have rwx, but the copy should not
        m1 = filemode( 'dir/sub/file2.txt' ) & oth
        assert m1 != 0
        m2 = filemode( 'cpy/sub/file2.txt' ) & oth
        assert m2 == 0

    def test_remote_to_local_copy_files_with_more_than_one_source(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        util.writefile( 'dir1/file1.txt', 'file 1 content\n' )
        srcd1 = os.path.abspath( 'dir1' )
        util.writefile( 'dir2/sub/file2.txt', 'file 2 content\n' )
        srcd2 = os.path.abspath( 'dir2' )
        os.mkdir( 'cpy' )
        time.sleep(1)

        filecopy.copy_files( [sshmach+':'+srcd1+'/*',
                              sshmach+':'+srcd2+'/sub'], 'cpy',
                             sshexe=sshprog )
        time.sleep(1)

        L = os.listdir( 'cpy' )
        L.sort()
        assert L == ['file1.txt', 'sub']

        filecmp.cmp( 'dir1/file1.txt', 'cpy/file1.txt' )
        compare_dirs( 'dir2/sub', 'cpy/sub' )

    def test_remote_to_local_copy_files_with_source_file_errors(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        util.writefile( 'dir1/file1.txt', 'file 1 content\n' )
        srcd1 = os.path.abspath( 'dir1' )
        util.writefile( 'dir2/sub/file2.txt', 'file 2 content\n' )
        srcd2 = os.path.abspath( 'dir2' )
        os.mkdir( 'cpy' )
        util.writefile( 'afile', 'afile content' )
        os.mkdir( 'badperm' )
        time.sleep(1)

        # set a directory with no write permissions
        m = filemode( 'badperm' )
        wm = stat.S_IWUSR | stat.S_IWGRP | stat.S_IWOTH
        os.chmod( 'badperm', m & (~wm) )
        badd = os.path.abspath( 'badperm' )
        time.sleep(1)

        try:
            filecopy.copy_files( [sshmach+':'+srcd2+'/sub',
                                  sshmach+':'+srcd1+'/junk.txt'], 'cpy',
                                 sshexe=sshprog )
        except:
            print3( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

        try:
            filecopy.copy_files( [sshmach+':'+srcd2+'/sub'], 'wrong',
                                 sshexe=sshprog )
        except:
            print3( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

        try:
            filecopy.copy_files( [sshmach+':'+srcd2+'/sub'], 'afile',
                                 sshexe=sshprog )
        except:
            print3( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

        try:
            filecopy.copy_files( [sshmach+':'+srcd2+'/sub'], 'badperm',
                                 sshexe=sshprog )
        except:
            print3( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

    def test_remote_to_local_file_copy_using_command_line(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        util.writefile( 'dir/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir/sub/file2.txt', 'file 2 content\n' )
        os.symlink( 'file2.txt', 'dir/sub/bar.lnk' )
        srcd = os.path.abspath( 'dir' )
        os.mkdir( 'cpy' )
        time.sleep(1)

        util.runcmd( fcpycmd+' --sshexe '+sshprog+ \
                             ' "'+sshmach+':'+srcd+'/*" cpy' )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

        m = filemode( 'cpy/sub/file2.txt' )
        oth = stat.S_IROTH | stat.S_IWOTH | stat.S_IXOTH
        # set original and copy to have rwx for world
        os.chmod( 'dir/sub/file2.txt', m | oth )
        os.chmod( 'cpy/sub/file2.txt', m | oth )
        time.sleep(1)

        cmd = fcpycmd+' --sshexe '+sshprog
        cmd += ' --fperms o-rwx'
        cmd += ' "'+sshmach+':'+srcd+'/*" cpy'
        util.runcmd( cmd )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

        # original should still have rwx, but the copy should not
        m1 = filemode( 'dir/sub/file2.txt' ) & oth
        assert m1 != 0
        m2 = filemode( 'cpy/sub/file2.txt' ) & oth
        assert m2 == 0

    def test_remote_to_local_copy_files_time_stamp_preservation(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        util.writefile( 'dir/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir/sub1/file2.txt', 'file 2 content\n' )
        util.writefile( 'dir/sub2/file3.txt', 'file 3 content\n' )
        srcd = os.path.abspath( 'dir' )
        os.mkdir( 'cpy' )
        time.sleep(1)
        t1 = time.time() - 600
        os.utime( 'dir/file1.txt', (t1,t1) )
        t2 = t1 - 600
        os.utime( 'dir/sub1/file2.txt', (t2,t2) )
        t3 = t2 - 600
        os.utime( 'dir/sub2', (t3,t3) )
        time.sleep(1)

        filecopy.copy_files( [sshmach+':'+srcd+'/*'], 'cpy',
                             sshexe=sshprog )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )
        t = os.path.getmtime( 'dir/file1.txt' )
        assert t < time.time() - 300
        assert abs( t - os.path.getmtime( 'cpy/file1.txt' ) ) < 3
        t = os.path.getmtime( 'dir/sub1/file2.txt' )
        assert t < time.time() - 300
        assert abs( t - os.path.getmtime( 'cpy/sub1/file2.txt' ) ) < 3
        t = os.path.getmtime( 'dir/sub2' )
        assert t < time.time() - 300
        assert abs( t - os.path.getmtime( 'cpy/sub2' ) ) < 3

    def test_local_to_remote_copy_files(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        util.writefile( 'dir/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir/sub/file2.txt', 'file 2 content\n' )
        os.symlink( 'file2.txt', 'dir/sub/bar.lnk' )
        os.mkdir( 'cpy' )
        cpd = os.path.abspath( 'cpy' )
        time.sleep(1)

        filecopy.copy_files( ['dir/*'], sshmach+':'+cpd,
                             sshexe=sshprog )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

        # change the link value
        os.remove( 'dir/sub/bar.lnk' )
        os.symlink( '../file1.txt', 'dir/sub/bar.lnk' )
        time.sleep(1)

        # check validity of the compare_dirs() function
        try:
            compare_dirs( 'dir', 'cpy' )
        except:
            print3( sys.exc_info()[1] )

        # copy again with the changed soft link
        filecopy.copy_files( ['dir/*'], sshmach+':'+cpd,
                             sshexe=sshprog )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

    def test_local_to_remote_copy_files_with_soft_link(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        util.writefile( 'dir1/file1.txt', 'file 1 content\n' )
        os.mkdir( 'dir2' )
        os.symlink( '../dir1/file1.txt', 'dir2/link.txt' )
        os.mkdir( 'cpy' )
        cpd = os.path.abspath( 'cpy' )
        time.sleep(1)

        filecopy.copy_files( ['dir2/*'], sshmach+':'+cpd,
                             sshexe=sshprog )
        time.sleep(1)

        assert not os.path.islink( 'cpy/link.txt' )
        assert filecmp.cmp( 'dir1/file1.txt', 'cpy/link.txt' )

        # make a double soft link chain
        util.writefile( 'dir1/file2.txt', 'file 2 content\n' )
        os.remove( 'dir1/file1.txt' )
        os.symlink( 'file2.txt', 'dir1/file1.txt' )
        time.sleep(1)

        filecopy.copy_files( ['dir2/*'], sshmach+':'+cpd,
                             sshexe=sshprog )
        time.sleep(1)

        assert os.path.islink( 'cpy/link.txt' )
        assert os.readlink( 'cpy/link.txt' ) == 'file2.txt'

    def test_local_to_remote_copy_files_specifying_permissions(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        util.writefile( 'dir/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir/sub/file2.txt', 'file 2 content\n' )
        os.symlink( 'file2.txt', 'dir/sub/bar.lnk' )
        cpd = os.path.abspath( 'cpy' )
        os.mkdir( 'cpy' )
        time.sleep(1)

        filecopy.copy_files( ['dir/*'], sshmach+':'+cpd,
                             sshexe=sshprog )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

        m = filemode( 'cpy/sub/file2.txt' )
        oth = stat.S_IROTH | stat.S_IWOTH | stat.S_IXOTH
        # set original and copy to have rwx for world
        os.chmod( 'dir/sub/file2.txt', m | oth )
        os.chmod( 'cpy/sub/file2.txt', m | oth )
        time.sleep(1)

        filecopy.copy_files( ['dir/*'], sshmach+':'+cpd, fperms=['o-rwx'],
                             sshexe=sshprog )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

        # original should still have rwx, but the copy should not
        m1 = filemode( 'dir/sub/file2.txt' ) & oth
        assert m1 != 0
        m2 = filemode( 'cpy/sub/file2.txt' ) & oth
        assert m2 == 0

    def test_local_to_remote_copy_files_with_more_than_one_source(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        util.writefile( 'dir1/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir2/sub/file2.txt', 'file 2 content\n' )
        os.mkdir( 'cpy' )
        cpd = os.path.abspath( 'cpy' )
        time.sleep(1)

        filecopy.copy_files( ['dir1/*','dir2/sub'], sshmach+':'+cpd,
                             sshexe=sshprog )
        time.sleep(1)

        L = os.listdir( 'cpy' )
        L.sort()
        assert L == ['file1.txt', 'sub']

        filecmp.cmp( 'dir1/file1.txt', 'cpy/file1.txt' )
        compare_dirs( 'dir2/sub', 'cpy/sub' )

    def test_local_to_remote_copy_files_with_source_file_errors(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        util.writefile( 'dir1/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir2/sub/file2.txt', 'file 2 content\n' )
        os.mkdir( 'cpy' )
        cpd = os.path.abspath( 'cpy' )
        util.writefile( 'afile', 'afile content' )
        os.mkdir( 'badperm' )
        badp = os.path.abspath( 'badperm' )
        time.sleep(1)

        # set a directory with no write permissions
        m = filemode( 'badperm' )
        wm = stat.S_IWUSR | stat.S_IWGRP | stat.S_IWOTH
        os.chmod( 'badperm', m & (~wm) )
        badd = os.path.abspath( 'badperm' )
        time.sleep(1)

        try:
            filecopy.copy_files( ['dir2/sub','dir1/junk.txt'], sshmach+':'+cpd,
                                 sshexe=sshprog )
        except:
            print3( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

        try:
            filecopy.copy_files( ['dir2/sub'], sshmach+':wrong',
                                 sshexe=sshprog )
        except:
            print3( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

        try:
            filecopy.copy_files( ['dir2/sub'],
                                 sshmach+':'+os.path.abspath('afile'),
                                 sshexe=sshprog )
        except:
            print3( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

        try:
            filecopy.copy_files( ['dir2/sub'],
                                 sshmach+':'+os.path.abspath('badperm'),
                                 sshexe=sshprog )
        except:
            print3( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

    def test_local_to_remote_file_copy_using_command_line(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        util.writefile( 'dir/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir/sub/file2.txt', 'file 2 content\n' )
        os.symlink( 'file2.txt', 'dir/sub/bar.lnk' )
        os.mkdir( 'cpy' )
        cpd = os.path.abspath( 'cpy' )
        time.sleep(1)

        util.runcmd( fcpycmd+' --sshexe '+sshprog+ \
                             ' dir/* '+sshmach+':'+cpd )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

        m = filemode( 'cpy/sub/file2.txt' )
        oth = stat.S_IROTH | stat.S_IWOTH | stat.S_IXOTH
        # set original and copy to have rwx for world
        os.chmod( 'dir/sub/file2.txt', m | oth )
        os.chmod( 'cpy/sub/file2.txt', m | oth )
        time.sleep(1)

        cmd = fcpycmd+' --sshexe '+sshprog
        cmd += ' --fperms o-rwx'
        cmd += ' dir/* '+sshmach+':'+cpd
        util.runcmd( cmd )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )

        # original should still have rwx, but the copy should not
        m1 = filemode( 'dir/sub/file2.txt' ) & oth
        assert m1 != 0
        m2 = filemode( 'cpy/sub/file2.txt' ) & oth
        assert m2 == 0

    def test_local_to_remote_file_copy_time_stamp_preservation(self):
        ""
        sshprog,sshmach = util.get_ssh_pair()

        util.writefile( 'dir/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir/sub1/file2.txt', 'file 2 content\n' )
        util.writefile( 'dir/sub2/file3.txt', 'file 3 content\n' )
        os.mkdir( 'cpy' )
        cpyd = os.path.abspath( 'cpy' )
        time.sleep(1)
        t1 = time.time() - 600
        os.utime( 'dir/file1.txt', (t1,t1) )
        t2 = t1 - 600
        os.utime( 'dir/sub1/file2.txt', (t2,t2) )
        t3 = t2 - 600
        os.utime( 'dir/sub2', (t3,t3) )
        time.sleep(1)

        filecopy.copy_files( ['dir/*'], sshmach+':'+cpyd,
                             sshexe=sshprog )
        time.sleep(1)

        compare_dirs( 'dir', 'cpy' )
        t = os.path.getmtime( 'dir/file1.txt' )
        assert t < time.time() - 300
        assert abs( t - os.path.getmtime( 'cpy/file1.txt' ) ) < 3
        t = os.path.getmtime( 'dir/sub1/file2.txt' )
        assert t < time.time() - 300
        assert abs( t - os.path.getmtime( 'cpy/sub1/file2.txt' ) ) < 3
        t = os.path.getmtime( 'dir/sub2' )
        assert t < time.time() - 300
        assert abs( t - os.path.getmtime( 'cpy/sub2' ) ) < 3

    def test_local_copy_files_with_duplicate_basename_or_destination_names(self):
        ""
        util.writefile( 'dir1/file1.txt', 'file 1 content\n' )
        util.writefile( 'dir1/sub/file2.txt', 'file 2 content\n' )
        util.writefile( 'dir2/file3.txt', 'file 3 content\n' )
        util.writefile( 'dir2/sub/file2.txt', 'file 2b content\n' )
        os.mkdir( 'dir3' )
        os.mkdir( 'cpy' )
        time.sleep(1)

        # the 'sub' directory appears in two source locations
        try:
            filecopy.copy_files( ['dir1/*','dir2/*'], 'cpy' )
        except:
            print3( sys.exc_info()[1] )

        os.symlink( '../dir2/file3.txt', 'dir3/file1.txt' )
        time.sleep(1)

        # the destination file 'file1.txt' appears in two source locations
        try:
            filecopy.copy_files( ['dir1/*', 'dir3/*'], 'cpy' )
        except:
            print3( sys.exc_info()[1] )


#######################################################################

def filemode( path ):
    """
    Returns the permissions file mode for the given path (an integer).
    """
    return stat.S_IMODE( os.stat(path)[stat.ST_MODE] )


def has_fmode( path, fmode ):
    """
    Returns True if the given file path has the given file mode (an integer
    composed with stat.S_IRGRP and stat.S_IWUSR etc).
    """
    m = filemode( path )
    if (m & fmode) == fmode:
        return True
    return False


def recurse_listdir( directory ):
    """
    Returns a list of all files in 'directory', recursively.  The 'directory'
    is not included in the paths of each file in the final list.
    """
    def gather( arg, dirname, fnames ):
        topdir,pathL = arg
        n = len(topdir)+1
        for p in fnames:
            dp = os.path.join( dirname, p )
            assert dp.startswith( topdir+os.sep )
            pathL.append( dp[n:] )
    pL = []
    if sys.version_info[0] == 2:
        os.path.walk( directory, gather, (directory,pL) )
    else:
        for dirpath, dirnames, filenames in os.walk( directory ):
            gather( (directory,pL), dirpath, filenames )
    return pL

def compare_dirs( dir1, dir2 ):
    """
    """
    fL1 = recurse_listdir( dir1 )
    fL2 = recurse_listdir( dir2 )
    fL1.sort()
    fL2.sort()
    assert fL1 == fL2
    for i in range(len(fL1)):
        p1 = os.path.join( dir1, fL1[i] )
        p2 = os.path.join( dir2, fL2[i] )
        if os.path.islink( p1 ) or os.path.islink( p2 ):
            assert os.path.islink( p1 ) and os.path.islink( p2 )
            rl1 = os.readlink( p1 )
            rl2 = os.readlink( p2 )
            assert rl1 == rl2, 'link files are not the same: ' + \
                               p1+' -> '+rl1+' not equal to ' + rl2
        elif os.path.isdir(p1) or os.path.isdir(p2):
            assert os.path.isdir(p1) and os.path.isdir(p2)
        else:
            assert filecmp.cmp( p1, p2, shallow=0 )


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
