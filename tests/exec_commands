#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath, basename
import time
import shutil

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.makecmd as makecmd

from libvvtest.paramset import ParameterSet
from libvvtest.testspec import TestSpec
import libvvtest.testexec as testexec


def mkobj( tspec, **kwargs ):
    ""
    return makecmd.MakeScriptCommand( tspec, **kwargs )


class function_make_file_execute_command( vtu.vvtestTestCase ):

    def test_an_executable_script_is_executed_directly(self):
        ""
        os.mkdir( 'rundir' )
        util.writescript( 'ascript', """
            #!/bin/csh
            echo hello
            """ )
        util.writescript( 'subdir/ascript', """
            #!/bin/csh
            echo hello
            """ )
        time.sleep(1)

        cwd = os.getcwd()

        cmdL = makecmd.make_file_execute_command( cwd, 'ascript' )
        assert len(cmdL) == 1 and cmdL[0] == './ascript'

        os.chdir( 'rundir' )

        cmdL = makecmd.make_file_execute_command( cwd, 'subdir/ascript' )
        assert len(cmdL) == 1 and cmdL[0] == './subdir/ascript'

    def test_python_execution_used_if_shbang_not_supported(self):
        ""
        os.mkdir( 'rundir' )
        util.writescript( 'ascript', """
            #!/bin/bash
            import os, sys
            sys.stdout.write( 'hello'+os.linesep )
            """ )
        cwd = os.getcwd()

        cmdL = makecmd.make_file_execute_command( cwd, 'ascript', shbang=True )
        assert cmdL[0] == './ascript'

        cmdL = makecmd.make_file_execute_command( cwd, 'ascript', shbang=False )
        assert cmdL[0] == sys.executable

    def test_a_non_executable_file_is_run_using_python(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'ascript', """
            print ( 'hello' )
            """ )
        util.writefile( 'subdir/ascript', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        cwd = os.getcwd()

        cmdL = makecmd.make_file_execute_command( cwd, 'ascript' )
        assert len(cmdL) == 2
        assert cmdL[0] == sys.executable
        assert cmdL[1] == 'ascript'

        os.chdir( 'rundir' )

        cmdL = makecmd.make_file_execute_command( cwd, 'subdir/ascript' )
        assert len(cmdL) == 2
        assert cmdL[0] == sys.executable
        assert cmdL[1] == 'subdir/ascript'

    def test_the_python_to_use_can_be_specified(self):
        ""
        util.writefile( 'ascript', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        cwd = os.getcwd()

        pyexe = '/fake/python'
        cmdL = makecmd.make_file_execute_command( cwd, 'ascript', pyexe )
        assert cmdL[0] == pyexe
        assert cmdL[1] == 'ascript'

    def test_an_executable_abs_file_ignores_srcdir(self):
        ""
        os.mkdir( 'rundir' )
        util.writescript( 'subdir/ascript', """
            #!/bin/csh
            echo hello
            """ )
        abscript = os.path.abspath( 'subdir/ascript' )
        time.sleep(1)

        os.chdir( 'rundir' )

        cmdL = makecmd.make_file_execute_command( '/foo/bar', abscript )
        assert len(cmdL) == 1 and cmdL[0] == abscript

    def test_a_file_ignores_srcdir(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/ascript', """
            print ( 'hello' )
            """ )
        absfile = os.path.abspath( 'subdir/ascript' )
        time.sleep(1)

        os.chdir( 'rundir' )

        cmdL = makecmd.make_file_execute_command( '/foo/bar', absfile )
        assert len(cmdL) == 2
        assert cmdL[0] == sys.executable
        assert cmdL[1] == absfile


def make_TestSpec( filename ):
    ""
    tspec = TestSpec( 'atest', os.getcwd(), filename )

    if os.path.splitext( filename )[1] == '.xml':
        tspec.setSpecificationForm( 'xml' )
    else:
        tspec.setSpecificationForm( 'script' )

    return tspec


class function_make_test_script_command( vtu.vvtestTestCase ):

    def test_an_xml_test_specification_is_hard_coded_to_runscript(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.xml', """
            <rtest name="atest">
            </rtest>""" )

        tspec = make_TestSpec( 'subdir/atest.xml' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_test_script_command()
        assert len(cmdL) > 1
        cmdstr = ' '.join( cmdL )
        assert 'csh' in cmdstr and 'runscript' in cmdstr

    def test_a_script_test_runs_the_script_file(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_test_script_command()
        assert len(cmdL) > 1
        cmdstr = ' '.join( cmdL )
        assert 'python' in cmdstr and 'atest.vvt' in cmdstr

    def test_an_executable_script_runs_under_python_if_shbang_not_supported(self):
        ""
        os.mkdir( 'rundir' )
        util.writescript( 'subdir/atest.vvt', """
            #!/bin/bash
            print ( 'hello' )
            """ )

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec, shbang_supported=False).make_test_script_command()
        assert len(cmdL) > 1
        assert cmdL[0] == sys.executable and basename(cmdL[1]) == 'atest.vvt'


class function_command_from_filename_or_option( vtu.vvtestTestCase ):

    def test_command_from_a_filename_specification(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        util.writescript( 'subdir/auxscript', """
            #!/bin/bash
            echo hello
            """ )
        time.sleep(1)

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).command_from_filename_or_option( 'auxscript' )
        cmdstr = ' '.join( cmdL )
        assert './auxscript' in cmdstr

    def test_command_from_an_option_specification(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).command_from_filename_or_option( '--foobar' )
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr and '--foobar' in cmdstr


class make_baseline_commands( vtu.vvtestTestCase ):

    def test_make_nominal_baseline_command(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = make_TestSpec( 'subdir/atest.vvt' )
        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).check_make_script_baseline_command()
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr and '--run-baseline' in cmdstr

    def test_baseline_analyze_command_with_baseline_option(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        pset = ParameterSet()
        pset.addParameter( 'myparam', ['myvalue'] )
        tspec.setParameterSet( pset )

        tspec.setAnalyzeScript( '--do-analyze' )
        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_baseline_analyze_command()
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr
        assert '--do-analyze' in cmdstr
        assert '--run-baseline' in cmdstr

    def test_baseline_analyze_command_with_baseline_filename(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        util.writefile( 'subdir/atest_bline.py', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        pset = ParameterSet()
        pset.addParameter( 'myparam', ['myvalue'] )
        tspec.setParameterSet( pset )

        tspec.setAnalyzeScript( '--do-analyze' )
        tspec.setBaselineScript( 'atest_bline.py' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_baseline_analyze_command()
        cmdstr = ' '.join( cmdL )
        assert 'atest_bline.py ' in cmdstr
        assert '--do-analyze' in cmdstr

    def test_baseline_analyze_command_with_baseline_and_analyze_filename(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        util.writefile( 'subdir/atest_analyze.py', """
            print ( 'hello' )
            """ )
        util.writefile( 'subdir/atest_bline.py', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        pset = ParameterSet()
        pset.addParameter( 'myparam', ['myvalue'] )
        tspec.setParameterSet( pset )

        tspec.setAnalyzeScript( 'atest_analyze.py' )
        tspec.setBaselineScript( 'atest_bline.py' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_baseline_analyze_command()
        cmdstr = ' '.join( cmdL )
        assert 'atest_bline.py' in cmdstr
        assert 'atest_analyze' not in cmdstr

    def test_make_baseline_command_with_analyze_test(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        tspec.setIsAnalyze()
        pset = ParameterSet()
        pset.addParameter( 'myparam', ['myvalue'] )
        tspec.setParameterSet( pset )

        tspec.setAnalyzeScript( '--do-analyze' )
        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).check_make_script_baseline_command()
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr
        assert '--do-analyze' in cmdstr and '--run-baseline' in cmdstr

    def test_baseline_xml_test_without_script_fragment(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.xml', """
            <rtest name="atest">
            </rtest>""" )
        time.sleep(1)

        tspec = make_TestSpec( 'subdir/atest.xml' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).check_make_script_baseline_command()
        assert cmdL == None


class the_core_make_execute_command_function( vtu.vvtestTestCase ):

    def test_xml_test_not_baseline(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.xml', """
            <rtest name="atest">
            </rtest>""" )
        time.sleep(1)

        tspec = make_TestSpec( 'subdir/atest.xml' )
        tspec.setBaselineScript( 'echo hello\n' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_base_execute_command( 0 )
        cmdstr = ' '.join( cmdL )
        assert 'runscript' in cmdstr
        assert '--baseline' not in cmdstr

    def test_xml_test_with_baseline(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.xml', """
            <rtest name="atest">
            </rtest>""" )
        time.sleep(1)

        tspec = make_TestSpec( 'subdir/atest.xml' )
        tspec.setBaselineScript( 'echo hello\n' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_base_execute_command( 1 )
        cmdstr = ' '.join( cmdL )
        assert 'runscript' in cmdstr
        assert '--baseline' in cmdstr

    def test_script_test_with_baseline(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_base_execute_command( 1 )
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr
        assert '--run-baseline' in cmdstr

    def test_analyze_script_test_no_baseline(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        tspec.setIsAnalyze()
        pset = ParameterSet()
        pset.addParameter( 'myparam', ['myvalue'] )
        tspec.setParameterSet( pset )

        tspec.setAnalyzeScript( '--do-analyze' )
        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_base_execute_command( 0 )
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr
        assert '--do-analyze' in cmdstr
        assert '--run-baseline' not in cmdstr

    def test_plain_script_test_no_baseline(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        time.sleep(1)

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_base_execute_command( 0 )
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt' in cmdstr
        assert '--run-baseline' not in cmdstr

    def test_baseline_an_xml_test_without_a_baseline_script_fragment(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.xml', """
            <rtest name="atest">
            </rtest>""" )
        time.sleep(1)

        tspec = make_TestSpec( 'subdir/atest.xml' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_base_execute_command( 1 )
        assert cmdL == None

    def test_running_in_a_directory_containing_a_colon(self):
        ""
        util.writefile( 'sub:dir/atest.vvt', """
            import vvtest_util as vvt
            print ( 'coolname='+vvt.NAME )
            print ( 'src dir='+vvt.SRCDIR )
            import script_util as util
            util.exit_diff()
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( chdir='sub:dir' )
        vrun.assertCounts( total=1, diff=1 )

        assert vrun.countGrepLogs( 'coolname=atest' ) == 1
        lineL = vrun.greplogs( 'src dir=' )
        assert len( lineL ) == 1
        assert lineL[0].split( '=', 1 )[1].strip() == abspath( 'sub:dir' )

    def test_running_vvtest_out_of_a_directory_containing_a_colon(self):
        ""
        os.mkdir( 'install:dir' )

        vtu.copy_vvtest_into_directory( 'install:dir' )
        vvtest = abspath( 'install:dir/vvtest' )

        util.writefile( 'rundir/atest.vvt', """
            import vvtest_util as vvt
            print ( 'coolname='+vvt.NAME )
            import script_util as util
            util.exit_diff()
            """ )

        time.sleep(1)

        os.chdir( 'rundir' )
        x,out = util.runcmd( vvtest )

        assert len( util.grepfiles( 'coolname=atest', '*/atest/execute.log' ) ) == 1
        assert len( util.greplines( 'diff *atest', out ) ) > 0

    def test_the_set_environ_utility_context_manager(self):
        ""
        os.environ['A_NAME_NOBODY_WOULD_USE_606'] = 'value1'
        os.environ['A_NAME_NOBODY_WOULD_USE_505'] = 'value2'
        os.environ['A_NAME_NOBODY_WOULD_USE_404'] = 'value3'
        os.environ['A_NAME_NOBODY_WOULD_USE_202'] = 'value4'

        with util.set_environ( A_NAME_NOBODY_WOULD_USE_707='addvalue',
                               A_NAME_NOBODY_WOULD_USE_606='changevalue',
                               A_NAME_NOBODY_WOULD_USE_101=None,
                               A_NAME_NOBODY_WOULD_USE_404=None ):
            assert os.environ['A_NAME_NOBODY_WOULD_USE_707'] == 'addvalue'
            assert os.environ['A_NAME_NOBODY_WOULD_USE_606'] == 'changevalue'
            assert 'A_NAME_NOBODY_WOULD_USE_101' not in os.environ
            assert 'A_NAME_NOBODY_WOULD_USE_404' not in os.environ

            del os.environ['A_NAME_NOBODY_WOULD_USE_505']
            os.environ['A_NAME_NOBODY_WOULD_USE_202'] = 'newvalue'
            os.environ['A_NAME_NOBODY_WOULD_USE_303'] = 'newvariable'

        assert os.environ['A_NAME_NOBODY_WOULD_USE_606'] == 'value1'
        assert os.environ['A_NAME_NOBODY_WOULD_USE_505'] == 'value2'
        assert os.environ['A_NAME_NOBODY_WOULD_USE_404'] == 'value3'
        assert os.environ['A_NAME_NOBODY_WOULD_USE_202'] == 'value4'

        del os.environ['A_NAME_NOBODY_WOULD_USE_606']
        del os.environ['A_NAME_NOBODY_WOULD_USE_505']
        del os.environ['A_NAME_NOBODY_WOULD_USE_404']
        del os.environ['A_NAME_NOBODY_WOULD_USE_202']

        assert 'A_NAME_NOBODY_WOULD_USE_707' not in os.environ
        assert 'A_NAME_NOBODY_WOULD_USE_303' not in os.environ

    def test_running_vvtest_with_PYTHONPATH_set(self):
        ""
        pth = '/some/fake/dir1:/some/fake/dir2:/some/fake/dir3'

        util.writefile( 'atest.vvt', """
            import os
            import vvtest_util as vvt
            print ( 'coolname='+vvt.NAME )
            assert '"""+pth+"""' in os.environ['PYTHONPATH']
            import script_util as util
            util.exit_diff()
            """ )
        time.sleep(1)

        with util.set_environ( PYTHONPATH=pth ):
            x,out = util.runcmd( vtu.vvtest_file )

        assert len( util.grepfiles( 'coolname=atest', '*/atest/execute.log' ) ) == 1
        assert len( util.greplines( 'diff *atest', out ) ) > 0

    def test_running_vvtest_without_PYTHONPATH_set(self):
        ""
        util.writefile( 'atest.vvt', """
            import os
            import vvtest_util as vvt
            print ( 'coolname='+vvt.NAME )
            print ( 'pypath='+str( os.environ.get('PYTHONPATH',None) ) )
            import script_util as util
            util.exit_diff()
            """ )
        time.sleep(1)

        with util.set_environ( PYTHONPATH=None ):
            x,out = util.runcmd( vtu.vvtest_file )

        assert len( util.grepfiles( 'coolname=atest', '*/atest/execute.log' ) ) == 1
        assert len( util.greplines( 'diff *atest', out ) ) > 0


class TestExec_class_functions( vtu.vvtestTestCase ):

    def test_start_and_poll_without_fork(self):
        ""
        os.mkdir( 'rdir' )

        util.writefile( 'atest.vvt', """
            import os, sys
            sys.stdout.write( 'hello'+os.linesep )
            """ )
        tf = abspath('atest.vvt')

        def mock_execute_func( texec, is_baseline ):
            ""
            print ( 'fake setup' )
            return [ sys.executable, tf ]

        tL = vtu.create_tests_from_file( 'atest.vvt' )
        tcase = tL[0]
        texec = testexec.TestExec( tcase )
        texec.setRunDirectory( 'rdir' )

        rtcfg = vtu.make_RuntimeConfig()
        perms = vtu.make_fake_PermissionSetter()

        # poor way to test; will need to change with testexec implementation
        save_fork = testexec.os_fork_with_retry
        try:
            testexec.os_fork_with_retry = None

            assert not texec.isStarted()
            texec.start( mock_execute_func, rtcfg, False, perms,
                         fork_supported=False )
            assert texec.isStarted()
            assert not texec.isDone()

            for i in range(10):
                changed = texec.poll()
                if changed:
                    break
                time.sleep(0.5)

            assert changed
            assert texec.isStarted()
            assert texec.isDone()
            x,tm = texec.getExitInfo()
            assert x == 0 and tm is None

            assert len( util.grepfiles( 'fake setup', 'rdir/execute.log' ) ) == 1
            assert len( util.grepfiles( 'hello', 'rdir/execute.log' ) ) == 1

        finally:
            testexec.os_fork_with_retry = save_fork


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
