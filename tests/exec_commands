#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath, basename
import time

import vvtestutils as vtu
import testutils as util

import libvvtest.makecmd as makecmd

from libvvtest.paramset import ParameterSet
from libvvtest.testspec import TestSpec
import libvvtest.testexec as testexec
from libvvtest.location import Locator


def mkobj( tspec, **kwargs ):
    ""
    return makecmd.MakeScriptCommand( Locator(os.getcwd()), tspec, **kwargs )


class function_make_file_execute_command( vtu.vvtestTestCase ):

    def test_an_executable_script_is_executed_directly(self):
        ""
        os.mkdir( 'rundir' )
        util.writescript( 'ascript', """
            #!/bin/bash
            echo hello
            """ )
        util.writescript( 'subdir/bscript', """
            #!/bin/bash
            echo hello
            """ )

        cwd = os.getcwd()

        cmdL = makecmd.make_file_execute_command( cwd, 'ascript' )
        assert len(cmdL) == 1 and cmdL[0] == './ascript'

        cmdL = makecmd.make_file_execute_command( '.', 'ascript' )
        assert len(cmdL) == 1 and cmdL[0] == './ascript'

        os.chdir( 'rundir' )

        cmdL = makecmd.make_file_execute_command( cwd, 'subdir/bscript' )
        assert len(cmdL) == 1 and cmdL[0] == './subdir/bscript'

        cmdL = makecmd.make_file_execute_command( '../subdir', 'bscript' )
        assert len(cmdL) == 1 and cmdL[0] == './bscript'

    def test_python_execution_used_if_shbang_not_supported(self):
        ""
        os.mkdir( 'rundir' )
        util.writescript( 'ascript', """
            #!/bin/bash
            echo hello
            """ )
        cwd = os.getcwd()

        cmdL = makecmd.make_file_execute_command( cwd, 'ascript', shbang=True )
        assert cmdL[0] == './ascript'

        cmdL = makecmd.make_file_execute_command( cwd, 'ascript', shbang=False )
        assert cmdL[0] == sys.executable

    def test_a_non_executable_file_is_run_using_python(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'ascript', """
            print ( 'hello' )
            """ )
        util.writefile( 'subdir/ascript', """
            print ( 'hello' )
            """ )

        cwd = os.getcwd()

        cmdL = makecmd.make_file_execute_command( cwd, 'ascript' )
        assert len(cmdL) == 2
        assert cmdL[0] == sys.executable
        assert cmdL[1] == 'ascript'

        os.chdir( 'rundir' )

        cmdL = makecmd.make_file_execute_command( cwd, 'subdir/ascript' )
        assert len(cmdL) == 2
        assert cmdL[0] == sys.executable
        assert cmdL[1] == 'subdir/ascript'

    def test_the_python_to_use_can_be_specified(self):
        ""
        util.writefile( 'ascript', """
            print ( 'hello' )
            """ )

        cwd = os.getcwd()

        # actually, any program path can be specified - not just python
        pyexe = '/fake/python'
        cmdL = makecmd.make_file_execute_command( cwd, 'ascript', pyexe )
        assert cmdL[0] == pyexe
        assert cmdL[1] == 'ascript'

    def test_specifying_the_program_will_override_the_execute_bit(self):
        ""
        util.writescript( 'ascript', """
            #!/usr/bin/python3
            print ( 'hello' )
            """ )
        abscript = abspath('ascript')

        cwd = os.getcwd()
        prog = '/fake/program'

        cmdL = makecmd.make_file_execute_command( cwd, 'ascript', prog )
        assert cmdL[0] == prog and cmdL[1] == 'ascript'

        cmdL = makecmd.make_file_execute_command( cwd, abscript, prog )
        assert cmdL[0] == prog and cmdL[1] == abscript

    def test_an_absolute_file_path_ignores_srcdir(self):
        ""
        os.mkdir( 'rundir' )
        util.writescript( 'subdir/ascript', """
            #!/bin/csh
            echo hello
            """ )
        abscript = os.path.abspath( 'subdir/ascript' )
        util.writefile( 'subdir/afile', """
            print ( 'hello' )
            """ )
        absfile = os.path.abspath( 'subdir/afile' )

        os.chdir( 'rundir' )

        cmdL = makecmd.make_file_execute_command( '/foo/bar', abscript )
        assert len(cmdL) == 1 and cmdL[0] == abscript

        cmdL = makecmd.make_file_execute_command( '/foo/bar', absfile )
        assert len(cmdL) == 2 and cmdL[0] == sys.executable and cmdL[1] == absfile


def make_TestSpec( filename ):
    ""
    tspec = TestSpec( 'atest', os.getcwd(), filename )

    return tspec


class function_make_test_script_command( vtu.vvtestTestCase ):

    def test_a_script_test_runs_the_script_file(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_test_script_command()
        assert len(cmdL) > 1
        cmdstr = ' '.join( cmdL )
        assert 'python' in cmdstr or 'Python' in cmdstr
        assert 'atest.vvt' in cmdstr

    def test_an_executable_script_runs_under_python_if_shbang_not_supported(self):
        ""
        os.mkdir( 'rundir' )
        util.writescript( 'subdir/atest.vvt', """
            #!/bin/bash
            print ( 'hello' )
            """ )

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec, shbang_supported=False).make_test_script_command()
        assert len(cmdL) > 1
        assert cmdL[0] == sys.executable and basename(cmdL[1]) == 'atest.vvt'


class function_command_from_filename_or_option( vtu.vvtestTestCase ):

    def test_command_from_a_filename_specification(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        util.writescript( 'subdir/auxscript', """
            #!/bin/bash
            echo hello
            """ )

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).command_from_filename_or_option( 'auxscript' )
        cmdstr = ' '.join( cmdL )
        assert './auxscript' in cmdstr

    def test_command_from_an_option_specification(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).command_from_filename_or_option( '--foobar' )
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr and '--foobar' in cmdstr


class make_baseline_commands( vtu.vvtestTestCase ):

    def test_make_nominal_baseline_command(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )

        tspec = make_TestSpec( 'subdir/atest.vvt' )
        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).check_make_script_baseline_command()
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr and '--run-baseline' in cmdstr

    def test_baseline_analyze_command_with_baseline_option(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        pset = ParameterSet()
        pset.addParameter( 'myparam', ['myvalue'] )
        tspec.setParameterSet( pset )

        tspec.setAnalyzeScript( '--do-analyze' )
        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_baseline_analyze_command()
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr
        assert '--do-analyze' in cmdstr
        assert '--run-baseline' in cmdstr

    def test_baseline_analyze_command_with_baseline_filename(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        util.writefile( 'subdir/atest_bline.py', """
            print ( 'hello' )
            """ )

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        pset = ParameterSet()
        pset.addParameter( 'myparam', ['myvalue'] )
        tspec.setParameterSet( pset )

        tspec.setAnalyzeScript( '--do-analyze' )
        tspec.setBaselineScript( 'atest_bline.py' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_baseline_analyze_command()
        cmdstr = ' '.join( cmdL )
        assert 'atest_bline.py ' in cmdstr
        assert '--do-analyze' in cmdstr

    def test_baseline_analyze_command_with_baseline_and_analyze_filename(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )
        util.writefile( 'subdir/atest_analyze.py', """
            print ( 'hello' )
            """ )
        util.writefile( 'subdir/atest_bline.py', """
            print ( 'hello' )
            """ )

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        pset = ParameterSet()
        pset.addParameter( 'myparam', ['myvalue'] )
        tspec.setParameterSet( pset )

        tspec.setAnalyzeScript( 'atest_analyze.py' )
        tspec.setBaselineScript( 'atest_bline.py' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_baseline_analyze_command()
        cmdstr = ' '.join( cmdL )
        assert 'atest_bline.py' in cmdstr
        assert 'atest_analyze' not in cmdstr

    def test_make_baseline_command_with_analyze_test(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        tspec.setIsAnalyze()
        pset = ParameterSet()
        pset.addParameter( 'myparam', ['myvalue'] )
        tspec.setParameterSet( pset )

        tspec.setAnalyzeScript( '--do-analyze' )
        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).check_make_script_baseline_command()
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr
        assert '--do-analyze' in cmdstr and '--run-baseline' in cmdstr


class the_core_make_execute_command_function( vtu.vvtestTestCase ):

    def test_script_test_with_baseline(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_base_execute_command( 1 )
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr
        assert '--run-baseline' in cmdstr

    def test_analyze_script_test_no_baseline(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        tspec.setIsAnalyze()
        pset = ParameterSet()
        pset.addParameter( 'myparam', ['myvalue'] )
        tspec.setParameterSet( pset )

        tspec.setAnalyzeScript( '--do-analyze' )
        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_base_execute_command( 0 )
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt ' in cmdstr
        assert '--do-analyze' in cmdstr
        assert '--run-baseline' not in cmdstr

    def test_plain_script_test_no_baseline(self):
        ""
        os.mkdir( 'rundir' )
        util.writefile( 'subdir/atest.vvt', """
            print ( 'hello' )
            """ )

        tspec = make_TestSpec( 'subdir/atest.vvt' )

        tspec.setBaselineScript( '--run-baseline' )

        os.chdir( 'rundir' )

        cmdL = mkobj(tspec).make_base_execute_command( 0 )
        cmdstr = ' '.join( cmdL )
        assert 'atest.vvt' in cmdstr
        assert '--run-baseline' not in cmdstr

    def test_running_in_a_directory_containing_a_colon(self):
        ""
        util.writefile( 'sub:dir/atest.vvt', """
            import os
            # this import will have to be added when PYTHONPATH is deprecated
            # import vvtest_util
            os.mkdir('subd')
            os.chdir('subd')
            import script_util as util
            if util.platform_expr("not fakeplatform"):
                print ( 'check atest' )
            util.exit_diff()
            """ )
        util.writescript( 'sub:dir/btest.vvt', """
            #!/bin/bash
            mkdir subd
            cd subd
            source ../vvtest_util.sh
            platform_expr "not fakeplatform" && echo "check btest"
            exit_diff
            """ )

        vrun = vtu.runvvtest( chdir='sub:dir' )
        vrun.assertCounts( total=2, diff=2 )

        self.assertEqual( vrun.countGrepLogs( 'check atest', 'atest' ), 1 )
        self.assertEqual( vrun.countGrepLogs( 'check btest', 'btest' ), 1 )

    def test_running_vvtest_out_of_a_directory_containing_a_colon(self):
        ""
        os.mkdir( 'install:dir' )

        vtu.copy_vvtest_into_directory( 'install:dir' )
        localvvtest = abspath( 'install:dir/vvtest' )

        util.writefile( 'rundir/atest.vvt', """
            import os
            # have to import this to get config dirs added to sys.path (and
            # will be needed for all situations when PYTHONPATH is deprecated)
            import vvtest_util
            os.mkdir('subd')
            os.chdir('subd')
            import script_util as util
            if util.platform_expr("not fakeplatform"):
                print ( 'check atest' )
            util.exit_diff()
            """ )
        util.writescript( 'rundir/btest.vvt', """
            #!/bin/bash
            mkdir subd
            cd subd
            source ../vvtest_util.sh
            platform_expr "not fakeplatform" && echo "check btest"
            exit_diff
            """ )

        os.chdir( 'rundir' )
        x,out = util.runcmd( localvvtest )
        # print ( out )

        assert len( util.greplines( 'diff *atest', out ) ) > 0
        assert len( util.greplines( 'diff *btest', out ) ) > 0
        assert len( util.grepfiles( 'check atest', '*/atest/execute.log' ) ) == 1
        assert len( util.grepfiles( 'check btest', '*/btest/execute.log' ) ) == 1

    def test_the_set_environ_utility_context_manager(self):
        ""
        os.environ['A_NAME_NOBODY_WOULD_USE_606'] = 'value1'
        os.environ['A_NAME_NOBODY_WOULD_USE_505'] = 'value2'
        os.environ['A_NAME_NOBODY_WOULD_USE_404'] = 'value3'
        os.environ['A_NAME_NOBODY_WOULD_USE_202'] = 'value4'

        with util.set_environ( A_NAME_NOBODY_WOULD_USE_707='addvalue',
                               A_NAME_NOBODY_WOULD_USE_606='changevalue',
                               A_NAME_NOBODY_WOULD_USE_101=None,
                               A_NAME_NOBODY_WOULD_USE_404=None ):
            assert os.environ['A_NAME_NOBODY_WOULD_USE_707'] == 'addvalue'
            assert os.environ['A_NAME_NOBODY_WOULD_USE_606'] == 'changevalue'
            assert 'A_NAME_NOBODY_WOULD_USE_101' not in os.environ
            assert 'A_NAME_NOBODY_WOULD_USE_404' not in os.environ

            del os.environ['A_NAME_NOBODY_WOULD_USE_505']
            os.environ['A_NAME_NOBODY_WOULD_USE_202'] = 'newvalue'
            os.environ['A_NAME_NOBODY_WOULD_USE_303'] = 'newvariable'

        assert os.environ['A_NAME_NOBODY_WOULD_USE_606'] == 'value1'
        assert os.environ['A_NAME_NOBODY_WOULD_USE_505'] == 'value2'
        assert os.environ['A_NAME_NOBODY_WOULD_USE_404'] == 'value3'
        assert os.environ['A_NAME_NOBODY_WOULD_USE_202'] == 'value4'

        del os.environ['A_NAME_NOBODY_WOULD_USE_606']
        del os.environ['A_NAME_NOBODY_WOULD_USE_505']
        del os.environ['A_NAME_NOBODY_WOULD_USE_404']
        del os.environ['A_NAME_NOBODY_WOULD_USE_202']

        assert 'A_NAME_NOBODY_WOULD_USE_707' not in os.environ
        assert 'A_NAME_NOBODY_WOULD_USE_303' not in os.environ

    def test_running_vvtest_with_PYTHONPATH_set(self):
        ""
        pth = '/some/fake/dir1:/some/fake/dir2:/some/fake/dir3'

        util.writefile( 'atest.vvt', """
            import os
            import vvtest_util as vvt
            print ( 'coolname='+vvt.NAME )
            assert '"""+pth+"""' in os.environ['PYTHONPATH']
            import script_util as util
            util.exit_diff()
            """ )

        with util.set_environ( PYTHONPATH=pth ):
            x,out = util.runcmd( vtu.vvtest_file )

        assert len( util.grepfiles( 'coolname=atest', '*/atest/execute.log' ) ) == 1
        assert len( util.greplines( 'diff *atest', out ) ) > 0

    def test_running_vvtest_without_PYTHONPATH_set(self):
        ""
        util.writefile( 'atest.vvt', """
            import os
            import vvtest_util as vvt
            print ( 'coolname='+vvt.NAME )
            print ( 'pypath='+str( os.environ.get('PYTHONPATH',None) ) )
            import script_util as util
            util.exit_diff()
            """ )

        with util.set_environ( PYTHONPATH=None ):
            x,out = util.runcmd( vtu.vvtest_file )

        assert len( util.grepfiles( 'coolname=atest', '*/atest/execute.log' ) ) == 1
        assert len( util.greplines( 'diff *atest', out ) ) > 0


class TestExec_class_functions( vtu.vvtestTestCase ):

    def test_start_and_poll_without_fork(self):
        ""
        os.mkdir( 'rdir' )

        util.writefile( 'atest.vvt', """
            import os, sys
            sys.stdout.write( 'hello'+os.linesep )
            """ )
        tf = abspath('atest.vvt')

        def mock_execute_func( texec, is_baseline ):
            ""
            print ( 'fake setup' )
            return [ sys.executable, tf ]

        tL = vtu.create_tests_from_file( 'atest.vvt' )
        tcase = tL[0]
        texec = testexec.TestExec( tcase )
        texec.setRunDirectory( 'rdir' )

        logfile = tcase.getSpec().getLogFilename( False )
        perms = vtu.make_fake_PermissionSetter()

        # poor way to test; will need to change with testexec implementation
        save_fork = testexec.os_fork_with_retry
        try:
            testexec.os_fork_with_retry = None

            assert not texec.isStarted()
            texec.start( mock_execute_func, logfile, False, perms,
                         fork_supported=False )
            assert texec.isStarted()
            assert not texec.isDone()

            for i in range(10):
                changed = texec.poll()
                if changed:
                    break
                time.sleep(0.5)

            assert changed
            assert texec.isStarted()
            assert texec.isDone()
            x,tm = texec.getExitInfo()
            assert x == 0 and tm is None

            assert len( util.grepfiles( 'fake setup', 'rdir/execute.log' ) ) == 1
            assert len( util.grepfiles( 'hello', 'rdir/execute.log' ) ) == 1

        finally:
            testexec.os_fork_with_retry = save_fork


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
