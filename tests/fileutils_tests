#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: trig
#OPTION: realssh

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time
import stat
import unittest

import trigtestutils as trigutil
import testutils as util
from testutils import print3

# this is the module we are testing
import fileutils

from pythonproxy import python_proxy


class is_subpath_tests( unittest.TestCase ):

    def setUp(self):
        ""
        print3()
        os.chdir( util.working_directory )
        util.rmallfiles()

    def write_paths(self):
        ""
        util.writefile( 'sub1/sub2/file.txt', 'file value\n' )
        os.symlink( 'sub2', 'sub1/sub3' )
        os.symlink( 'sub1/sub2', 'sub4' )
        os.mkdir( 'sub5' )

    def test_nominal_is_subpath_use_cases(self):
        ""
        self.write_paths()
        time.sleep(1)

        assert fileutils.is_subpath( 'sub1', 'sub1/sub2/file.txt' )
        assert fileutils.is_subpath( 'sub1', 'sub1/sub3/file.txt' )
        assert fileutils.is_subpath( '.', 'sub1/sub2/file.txt' )
        assert fileutils.is_subpath( '.', 'sub1/sub3/file.txt' )
        assert fileutils.is_subpath( '.', 'sub1/sub2' )
        assert fileutils.is_subpath( '.', 'sub1/sub3' )

        assert not fileutils.is_subpath( 'sub1/sub2', 'sub1' )
        assert not fileutils.is_subpath( 'sub1/sub3', 'sub1' )
        assert not fileutils.is_subpath( 'sub1/sub2', 'sub5' )
        assert not fileutils.is_subpath( 'sub5', 'sub1/sub2' )
        assert not fileutils.is_subpath( 'sub5', 'sub1/sub3' )

        assert fileutils.is_subpath( 'sub1/sub2', 'sub1/sub3' )
        assert fileutils.is_subpath( 'sub1/sub3', 'sub1/sub2' )
        assert fileutils.is_subpath( 'sub1/sub2', 'sub4' )
        assert fileutils.is_subpath( 'sub4', 'sub1/sub2' )

        assert fileutils.is_subpath( 'sub1/sub2', 'sub1/sub3/file.txt' )
        assert fileutils.is_subpath( 'sub1/sub3', 'sub1/sub2/file.txt' )
        assert fileutils.is_subpath( 'sub1/sub2', 'sub4/file.txt' )
        assert fileutils.is_subpath( 'sub4', 'sub1/sub2/file.txt' )

        assert fileutils.is_subpath( '.', os.getcwd() )
        assert fileutils.is_subpath( os.getcwd(), '.' )
        assert fileutils.is_subpath( os.getcwd(), 'sub1/sub2' )
        assert fileutils.is_subpath( os.getcwd(), 'sub1/sub3' )

    def test_when_parent_segment_is_a_substring_of_child(self):
        ""
        util.writefile( 'subdir/file1.txt', 'file1 value\n' )
        util.writefile( 'subdirectory/file2.txt', 'file2 value\n' )
        time.sleep(1)

        assert fileutils.is_subpath( 'subdir', 'subdir/file1.txt' )
        assert not fileutils.is_subpath( 'subdir', 'subdirectory/file2.txt' )

    def test_functionality_on_paths_that_do_not_exist(self):
        ""
        self.write_paths()
        time.sleep(1)

        assert fileutils.is_subpath( 'sub1', 'sub1/foo' )
        assert fileutils.is_subpath( 'sub1', 'sub1/foo/bar' )
        assert fileutils.is_subpath( 'sub1', 'sub4/foo' )
        assert fileutils.is_subpath( 'sub1', 'sub4/foo/bar' )
        assert fileutils.is_subpath( 'sub1/sub2/foo', 'sub4/foo' )
        assert fileutils.is_subpath( 'sub4/foo', 'sub1/sub2/foo' )
        assert not fileutils.is_subpath( 'sub1/foo', 'sub1/bar' )
        assert not fileutils.is_subpath( 'sub1/foo', 'sub4/bar' )

    def test_that_dot_dot_is_handled_as_expected(self):
        ""
        self.write_paths()
        time.sleep(1)

        assert fileutils.is_subpath( 'sub1/sub2', 'sub1/../sub1/sub2' )
        assert fileutils.is_subpath( 'sub4/..', 'sub1/sub3' )
        assert not fileutils.is_subpath( 'sub4/..', 'sub5' )
        assert fileutils.is_subpath( 'sub4/../sub2', 'sub1/sub2/file.txt' )

    def test_checking_for_subdirectory_with_local_copy_tree(self):
        ""
        util.writefile( 'sub1/file.txt', 'file value\n' )
        util.writefile( 'sub1/sub2/file2.txt', 'file2 value\n' )
        os.symlink( 'sub1/sub2', 'sub3' )
        time.sleep(1)

        self.assertRaises( fileutils.FileUtilsError,
                           fileutils.check_copy_tree_subpath, 'sub1', 'sub1/dest' )
        self.assertRaises( fileutils.FileUtilsError,
                           fileutils.check_copy_tree_subpath, 'sub1', 'sub1/sub2' )
        self.assertRaises( fileutils.FileUtilsError,
                           fileutils.check_copy_tree_subpath, 'sub1/sub2', 'sub1' )
        self.assertRaises( fileutils.FileUtilsError,
                           fileutils.check_copy_tree_subpath, 'sub3', 'sub1' )

        # ok because 'sub3' is a soft link
        fileutils.check_copy_tree_subpath( 'sub1', 'sub3' )


class using_tar_to_copy_files( unittest.TestCase ):

    def setUp(self):
        ""
        print3()
        os.chdir( util.working_directory )
        util.rmallfiles()

        self.ssh, self.mach = util.get_ssh_pair()

        util.writefile( 'file.txt', "content\n" )
        util.writefile( 'src/sub/file.txt', "content\n" )
        os.mkdir( 'dest1' )
        os.mkdir( 'dest2' )

        time.sleep(1)

    def test_copy_a_single_file(self):
        ""
        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:

            fileutils.send_path_to_remote(
                proxy, os.getcwd(), 'file.txt', abspath('dest1') )

            fileutils.recv_path_from_remote(
                proxy, os.getcwd(), 'file.txt', abspath('dest2') )

        assert not os.path.islink( 'dest1/file.txt' )
        fileval = util.readfile( 'file.txt' )
        assert fileval == util.readfile( 'dest1/file.txt' )

        assert not os.path.islink( 'dest2/file.txt' )
        assert fileval == util.readfile( 'dest2/file.txt' )

    def test_copy_a_directory_tree(self):
        ""
        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:

            fileutils.send_path_to_remote(
                proxy, os.getcwd(), 'src', abspath('dest1') )

            fileutils.recv_path_from_remote(
                proxy, os.getcwd(), 'src', abspath('dest2') )

        assert not os.path.islink( 'dest1/src' )
        fileval = util.readfile( 'src/sub/file.txt' )
        assert fileval == util.readfile( 'dest1/src/sub/file.txt' )

        assert not os.path.islink( 'dest2/src' )
        assert fileval == util.readfile( 'dest2/src/sub/file.txt' )

    def test_copy_errors(self):
        ""
        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:

            self.assertRaises( fileutils.FileUtilsError,
                fileutils.send_path_to_remote,
                    proxy, 'noexistdir', 'file.txt', abspath('destt1') )

            self.assertRaises( fileutils.FileUtilsError,
                fileutils.send_path_to_remote,
                    proxy, os.getcwd(), 'file.txt', abspath('noexistdir') )


class copy_path_tests( unittest.TestCase ):

    def setUp(self):
        ""
        print3()
        os.chdir( util.working_directory )
        util.rmallfiles()

        self.ssh, self.mach = util.get_ssh_pair()

    def run_copy_file_test(self, copyfunc1, copyfunc2):
        ""
        util.writefile( 'file.txt', 'file value\n' )
        util.writefile( 'file2.txt', 'file2 value\n' )
        time.sleep(1)

        copyfunc1()

        assert util.readfile('file.txt') == util.readfile('dest.txt')

        copyfunc2()

        assert util.readfile('file.txt') == util.readfile('file2.txt')

        fL = os.listdir( '.' )
        fL.sort()
        assert fL == ['dest.txt','file.txt','file2.txt'] or \
               fL == ['dest.txt','fakessh','file.txt','file2.txt']

    def test_send_file_test(self):
        ""
        func1 = lambda: fileutils.send_path( 'file.txt', 'dest.txt' )
        func2 = lambda: fileutils.send_path( 'file.txt', 'file2.txt' )
        self.run_copy_file_test( func1, func2 )

    def test_recv_file_test(self):
        ""
        func1 = lambda: fileutils.recv_path( 'dest.txt', 'file.txt' )
        func2 = lambda: fileutils.recv_path( 'file2.txt', 'file.txt' )
        self.run_copy_file_test( func1, func2 )

    def test_send_file_with_proxy(self):
        ""
        with python_proxy(None) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.send_path( 'file.txt', abspath('dest.txt'), proxy )
            func2 = lambda: fileutils.send_path( 'file.txt', abspath('file2.txt'), proxy )
            self.run_copy_file_test( func1, func2 )

    def test_recv_file_with_proxy(self):
        ""
        with python_proxy(None) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.recv_path( 'dest.txt', abspath('file.txt'), proxy )
            func2 = lambda: fileutils.recv_path( 'file2.txt', abspath('file.txt'), proxy )
            self.run_copy_file_test( func1, func2 )

    def test_send_file_with_ssh_proxy(self):
        ""
        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.send_path( 'file.txt', abspath('dest.txt'), proxy )
            func2 = lambda: fileutils.send_path( 'file.txt', abspath('file2.txt'), proxy )
            self.run_copy_file_test( func1, func2 )

    def test_recv_file_with_ssh_proxy(self):
        ""
        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.recv_path( 'dest.txt', abspath('file.txt'), proxy )
            func2 = lambda: fileutils.recv_path( 'file2.txt', abspath('file.txt'), proxy )
            self.run_copy_file_test( func1, func2 )




    def run_copy_tree_test(self, copyfunc1, copyfunc2):
        ""
        util.writefile( 'src/file.txt', 'file value\n' )
        util.writefile( 'xdir/file2.txt', 'file2 value\n' )
        time.sleep(1)

        copyfunc1()

        assert util.readfile('src/file.txt') == util.readfile('dest/file.txt')

        copyfunc2()

        assert util.readfile('src/file.txt') == util.readfile('xdir/file.txt')
        assert not os.path.exists( 'xdir/file2.txt' )

        fL = os.listdir( '.' )
        fL.sort()
        assert fL == ['dest','src','xdir'] or \
               fL == ['dest','fakessh','src','xdir']

    def test_send_directory_tree(self):
        ""
        func1 = lambda: fileutils.send_path( 'src', 'dest' )
        func2 = lambda: fileutils.send_path( 'src', 'xdir' )
        self.run_copy_tree_test( func1, func2 )

    def test_recv_directory_tree(self):
        ""
        func1 = lambda: fileutils.recv_path( 'dest', 'src' )
        func2 = lambda: fileutils.recv_path( 'xdir', 'src' )
        self.run_copy_tree_test( func1, func2 )

    def test_send_tree_with_proxy(self):
        ""
        with python_proxy(None) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.send_path( 'src', abspath('dest'), proxy )
            func2 = lambda: fileutils.send_path( 'src', abspath('xdir'), proxy )
            self.run_copy_tree_test( func1, func2 )

    def test_recv_tree_with_proxy(self):
        ""
        with python_proxy(None) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.recv_path( 'dest', abspath('src'), proxy )
            func2 = lambda: fileutils.recv_path( 'xdir', abspath('src'), proxy )
            self.run_copy_tree_test( func1, func2 )

    def test_send_tree_with_ssh_proxy(self):
        ""
        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.send_path( 'src', abspath('dest'), proxy )
            func2 = lambda: fileutils.send_path( 'src', abspath('xdir'), proxy )
            self.run_copy_tree_test( func1, func2 )

    def test_recv_tree_with_ssh_proxy(self):
        ""
        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.recv_path( 'dest', abspath('src'), proxy )
            func2 = lambda: fileutils.recv_path( 'xdir', abspath('src'), proxy )
            self.run_copy_tree_test( func1, func2 )

    def run_copy_tree_when_dest_is_soft_link(self, copyfunc1, copyfunc2):
        ""
        util.writefile( 'src/file.txt', 'file value\n' )
        os.mkdir( 'linkdir' )
        os.symlink( 'linkdir', 'goodlink' )
        os.symlink( 'junk', 'badlink' )
        time.sleep(1)

        copyfunc1()

        assert not os.path.islink( 'goodlink' )
        assert util.readfile('src/file.txt') == util.readfile('goodlink/file.txt')
        assert len( os.listdir('linkdir') ) == 0

        copyfunc2()

        assert not os.path.islink( 'badlink' )
        assert util.readfile('src/file.txt') == util.readfile('badlink/file.txt')
        assert len( os.listdir('linkdir') ) == 0

    def test_send_to_soft_link_destination(self):
        ""
        func1 = lambda: fileutils.send_path( 'src', 'goodlink' )
        func2 = lambda: fileutils.send_path( 'src', 'badlink' )
        self.run_copy_tree_when_dest_is_soft_link( func1, func2 )

    def test_recv_to_soft_link_destination(self):
        ""
        func1 = lambda: fileutils.recv_path( 'goodlink', 'src' )
        func2 = lambda: fileutils.recv_path( 'badlink', 'src' )
        self.run_copy_tree_when_dest_is_soft_link( func1, func2 )

    def test_proxy_send_to_soft_link_destination(self):
        ""
        with python_proxy(None) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.send_path( 'src', abspath('goodlink'), proxy )
            func2 = lambda: fileutils.send_path( 'src', abspath('badlink'), proxy )
            self.run_copy_tree_when_dest_is_soft_link( func1, func2 )

    def test_proxy_recv_to_soft_link_destination(self):
        ""
        with python_proxy(None) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.recv_path( 'goodlink', abspath('src'), proxy )
            func2 = lambda: fileutils.recv_path( 'badlink', abspath('src'), proxy )
            self.run_copy_tree_when_dest_is_soft_link( func1, func2 )

    def test_ssh_proxy_send_to_soft_link_destination(self):
        ""
        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.send_path( 'src', abspath('goodlink'), proxy )
            func2 = lambda: fileutils.send_path( 'src', abspath('badlink'), proxy )
            self.run_copy_tree_when_dest_is_soft_link( func1, func2 )

    def test_ssh_proxy_recv_to_soft_link_destination(self):
        ""
        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.recv_path( 'goodlink', abspath('src'), proxy )
            func2 = lambda: fileutils.recv_path( 'badlink', abspath('src'), proxy )
            self.run_copy_tree_when_dest_is_soft_link( func1, func2 )

    def run_copy_soft_link_values(self, copyfunc):
        ""
        util.writefile( 'src/file.txt', 'file value\n' )
        os.symlink( 'file.txt', 'src/lnk' )
        time.sleep(1)

        copyfunc()

        assert not os.path.islink( 'dest' )
        assert not os.path.islink( 'dest/file.txt' )
        assert     os.path.islink( 'dest/lnk' )
        assert util.readfile('src/file.txt') == util.readfile('dest/file.txt')
        assert os.readlink('src/lnk') == os.readlink('dest/lnk')

    def test_send_copies_soft_link_values(self):
        ""
        func = lambda: fileutils.send_path( 'src', 'dest' )
        self.run_copy_soft_link_values( func )

    def test_recv_copies_soft_link_values(self):
        ""
        func = lambda: fileutils.recv_path( 'dest', 'src' )
        self.run_copy_soft_link_values( func )

    def test_proxy_send_copies_soft_link_values(self):
        ""
        with python_proxy(None) as proxy:
            proxy.os.chdir( '/' )
            func = lambda: fileutils.send_path( 'src', abspath('dest'), proxy )
            self.run_copy_soft_link_values( func )

    def test_proxy_recv_copies_soft_link_values(self):
        ""
        with python_proxy(None) as proxy:
            proxy.os.chdir( '/' )
            func = lambda: fileutils.recv_path( 'dest', abspath('src'), proxy )
            self.run_copy_soft_link_values( func )

    def test_ssh_proxy_send_copies_soft_link_values(self):
        ""
        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:
            proxy.os.chdir( '/' )
            func = lambda: fileutils.send_path( 'src', abspath('dest'), proxy )
            self.run_copy_soft_link_values( func )

    def test_ssh_proxy_recv_copies_soft_link_values(self):
        ""
        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:
            proxy.os.chdir( '/' )
            func = lambda: fileutils.recv_path( 'dest', abspath('src'), proxy )
            self.run_copy_soft_link_values( func )

    def run_copy_preserves_permissions(self, copyfunc1, copyfunc2):
        ""
        util.writefile( 'src/file.txt', 'file value\n' )
        remove_perms( 'src/file.txt' )
        fmode = util.get_filemode( 'src/file.txt' )
        time.sleep(1)

        copyfunc1()

        assert util.readfile('src/file.txt') == util.readfile('dest1/file.txt')
        fmode1 = util.get_filemode( 'dest1/file.txt' )
        assert fmode1 == fmode

        add_perms( 'src/file.txt' )
        fmode = util.get_filemode( 'src/file.txt' )

        copyfunc2()

        assert util.readfile('src/file.txt') == util.readfile('dest2/file.txt')
        fmode2 = util.get_filemode( 'dest2/file.txt' )
        assert fmode2 == fmode

        assert fmode1 != fmode2

    def test_send_tree_preserves_permissions(self):
        ""
        func1 = lambda: fileutils.send_path( 'src', 'dest1' )
        func2 = lambda: fileutils.send_path( 'src', 'dest2' )
        self.run_copy_preserves_permissions( func1, func2 )

    def test_recv_tree_preserves_permissions(self):
        ""
        func1 = lambda: fileutils.recv_path( 'dest1', 'src' )
        func2 = lambda: fileutils.recv_path( 'dest2', 'src' )
        self.run_copy_preserves_permissions( func1, func2 )

    def test_proxy_send_tree_preserves_permissions(self):
        ""
        with python_proxy(None) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.send_path( 'src', abspath('dest1'), proxy )
            func2 = lambda: fileutils.send_path( 'src', abspath('dest2'), proxy )
            self.run_copy_preserves_permissions( func1, func2 )

    def test_proxy_recv_tree_preserves_permissions(self):
        ""
        with python_proxy(None) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.recv_path( 'dest1', abspath('src'), proxy )
            func2 = lambda: fileutils.recv_path( 'dest2', abspath('src'), proxy )
            self.run_copy_preserves_permissions( func1, func2 )

    def test_ssh_proxy_send_tree_preserves_permissions(self):
        ""
        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.send_path( 'src', abspath('dest1'), proxy )
            func2 = lambda: fileutils.send_path( 'src', abspath('dest2'), proxy )
            self.run_copy_preserves_permissions( func1, func2 )

    def test_ssh_proxy_recv_tree_preserves_permissions(self):
        ""
        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.recv_path( 'dest1', abspath('src'), proxy )
            func2 = lambda: fileutils.recv_path( 'dest2', abspath('src'), proxy )
            self.run_copy_preserves_permissions( func1, func2 )

    def run_copy_on_soft_linked_source(self, func1, func2, func3):
        ""
        util.writefile( 'src/file.txt', 'file value\n' )
        os.symlink( 'src', 'lnk' )
        os.symlink( 'lnk', 'lnk2' )
        time.sleep(1)

        func1()
        assert not os.path.islink( 'dest1' )
        assert util.readfile('src/file.txt') == util.readfile('dest1/file.txt')

        func2()
        assert not os.path.islink( 'dest2' )
        assert util.readfile('src/file.txt') == util.readfile('dest2/file.txt')

        func3()
        assert not os.path.islink( 'lnk2' )
        assert util.readfile('src/file.txt') == util.readfile('lnk2/file.txt')

    def test_send_copy_when_source_is_a_soft_link(self):
        ""
        func1 = lambda: fileutils.send_path( 'lnk', 'dest1' )
        func2 = lambda: fileutils.send_path( 'lnk2', 'dest2' )
        func3 = lambda: fileutils.send_path( 'lnk', 'lnk2' )
        self.run_copy_on_soft_linked_source( func1, func2, func3 )

    def test_recv_copy_when_source_is_a_soft_link(self):
        ""
        func1 = lambda: fileutils.recv_path( 'dest1', 'lnk' )
        func2 = lambda: fileutils.recv_path( 'dest2', 'lnk2' )
        func3 = lambda: fileutils.recv_path( 'lnk2', 'lnk' )
        self.run_copy_on_soft_linked_source( func1, func2, func3 )

    def test_proxy_send_copy_when_source_is_a_soft_link(self):
        ""
        with python_proxy(None) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.send_path( 'lnk', abspath('dest1'), proxy )
            func2 = lambda: fileutils.send_path( 'lnk2', abspath('dest2'), proxy )
            func3 = lambda: fileutils.send_path( 'lnk', abspath('lnk2'), proxy )
            self.run_copy_on_soft_linked_source( func1, func2, func3 )

    def test_proxy_recv_copy_when_source_is_a_soft_link(self):
        ""
        with python_proxy(None) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.recv_path( 'dest1', abspath('lnk'), proxy )
            func2 = lambda: fileutils.recv_path( 'dest2', abspath('lnk2'), proxy )
            func3 = lambda: fileutils.recv_path( 'lnk2', abspath('lnk'), proxy )
            self.run_copy_on_soft_linked_source( func1, func2, func3 )

    def test_ssh_proxy_send_copy_when_source_is_a_soft_link(self):
        ""
        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.send_path( 'lnk', abspath('dest1'), proxy )
            func2 = lambda: fileutils.send_path( 'lnk2', abspath('dest2'), proxy )
            func3 = lambda: fileutils.send_path( 'lnk', abspath('lnk2'), proxy )
            self.run_copy_on_soft_linked_source( func1, func2, func3 )

    def test_ssh_proxy_recv_copy_when_source_is_a_soft_link(self):
        ""
        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:
            proxy.os.chdir( '/' )
            func1 = lambda: fileutils.recv_path( 'dest1', abspath('lnk'), proxy )
            func2 = lambda: fileutils.recv_path( 'dest2', abspath('lnk2'), proxy )
            func3 = lambda: fileutils.recv_path( 'lnk2', abspath('lnk'), proxy )
            self.run_copy_on_soft_linked_source( func1, func2, func3 )


class permissions_tests( unittest.TestCase ):

    def setUp(self):
        ""
        print3()
        os.chdir( util.working_directory )
        util.rmallfiles()

        self.ssh, self.mach = util.get_ssh_pair()

    def test_permissions_application(self):
        ""
        util.writefile( 'src1/file.txt', "content\n" )
        remove_perms( 'src1/file.txt' )
        util.writefile( 'src2/file.txt', "content\n" )
        remove_perms( 'src2/file.txt' )
        os.mkdir( 'tmp' )
        os.mkdir( 'dest1' )
        os.mkdir( 'dest2' )
        time.sleep(1)

        fileutils.swap_replace_path( 'src1/file.txt', 'dest1/file.txt', 'tmp',
                                     'g+rw,o=r' )

        assert     util.has_group_read( 'dest1/file.txt' )
        assert     util.has_group_write( 'dest1/file.txt' )
        assert     util.has_world_read( 'dest1/file.txt' )
        assert not util.has_world_write( 'dest1/file.txt' )

        fileutils.swap_replace_path( 'src2', 'dest2/src2', 'tmp', 'g+rwX,o=rX' )

        assert     util.has_group_read( 'dest2/src2' )
        assert     util.has_group_write( 'dest2/src2' )
        assert     util.has_group_execute( 'dest2/src2' )
        assert     util.has_group_read( 'dest2/src2/file.txt' )
        assert     util.has_group_write( 'dest2/src2/file.txt' )
        assert not util.has_group_execute( 'dest2/src2/file.txt' )

        assert     util.has_world_read( 'dest2/src2' )
        assert not util.has_world_write( 'dest2/src2' )
        assert     util.has_world_execute( 'dest2/src2' )
        assert     util.has_world_read( 'dest2/src2/file.txt' )
        assert not util.has_world_write( 'dest2/src2/file.txt' )
        assert not util.has_world_execute( 'dest2/src2/file.txt' )

    def test_permissions_integration(self):
        ""
        util.writefile( 'file.txt', "content\n" )
        remove_perms( 'file.txt' )
        os.mkdir( 'dest1' )
        os.mkdir( 'dest2' )
        os.mkdir( 'dest3' )
        time.sleep(1)

        fileutils.send_path( 'file.txt', 'dest1/file.txt', permissions='go=r' )

        with python_proxy(self.mach,sshcmd=self.ssh) as proxy:

            fileutils.send_path( 'file.txt', abspath('dest2/file.txt'),
                                 proxy=proxy, permissions='g=r,o=r' )

            fileutils.recv_path( 'dest3/file.txt', abspath('file.txt'),
                                 proxy=proxy, permissions='g=r,o=r' )

        assert not util.has_group_read( 'file.txt' )
        assert not util.has_world_read( 'file.txt' )

        for dn in ['dest1','dest2','dest3']:
            assert     util.has_group_read( dn+'/file.txt' )
            assert not util.has_group_write( dn+'/file.txt' )
            assert not util.has_group_execute( dn+'/file.txt' )
            assert     util.has_world_read( dn+'/file.txt' )
            assert not util.has_world_write( dn+'/file.txt' )
            assert not util.has_world_execute( dn+'/file.txt' )


def remove_perms( path ):
    ""
    fm = util.get_filemode( path )
    fm &= ( ~( stat.S_IRGRP|stat.S_IWGRP | stat.S_IROTH|stat.S_IWOTH ) )
    os.chmod( path, fm )


def add_perms( path ):
    ""
    fm = util.get_filemode( path )
    fm |= ( stat.S_IRGRP|stat.S_IWGRP | stat.S_IROTH|stat.S_IWOTH )
    os.chmod( path, fm )


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
