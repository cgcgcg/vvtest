#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

# RUNTEST: vvtest

import sys

sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import base64
import zlib
import os
import time

import vvtestutils as vtu
import testutils as util

nonetype = type(None)


class json_output_format_tests(vtu.vvtestTestCase):
    def test_producing_a_json_results_file(self):
        """"""
        write_three_test_files()
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts(total=5, npass=2, diff=2, fail=1)

        vrun = vtu.runvvtest("-i --json=../results.json", chdir=vrun.resultsDir())
        time.sleep(1)

        data = util.read_json_file("results.json")
        self.assert_json_test_names(data)
        self.assert_output_for_diff_and_fail_tests(data)

    def test_producing_a_json_results_file_as_part_of_the_execution(self):
        """"""
        write_three_test_files()
        time.sleep(1)

        for batch in [False, True]:

            vtu.remove_results()

            vrun = vtu.runvvtest("--json results.json", batch=batch)
            vrun.assertCounts(total=5, npass=2, diff=2, fail=1)

            data = util.read_json_file("results.json")
            self.assert_json_test_names(data)

    def assert_json_test_names(self, data):
        """"""
        info = []
        for case in data["vvtest"]["tests"]["cases"]:
            info.append((case.get("case"), case["endtime"] - case["starttime"]))
        info.sort()
        expected_names = [
            "DiffTest.np=1",
            "DiffTest.np=2",
            "FailTest",
            "param.hello=mars",
            "param.hello=world",
        ]
        for i, item in enumerate(info):
            assert item[0] == expected_names[i]

        fac = [4, 4, 3, 2, 2]
        for i, item in enumerate(info):
            assert abs(int(item[1]) - fac[i]) <= 2, "{0} - {1} > 2".format(
                item[1], fac[i]
            )

    def assert_output_for_diff_and_fail_tests(self, data):
        """"""
        for case in data["vvtest"]["tests"]["cases"]:
            if case["name"].startswith("DiffTest"):
                assert "fake difference of 29" in expand64(case["log"])
            elif case["name"].startswith("FailTest"):
                assert "pitch a fake exception" in expand64(case["log"])

    def test_no_tests_to_run_still_produces_a_json_file(self):
        """"""
        util.writefile(
            "subdir/param.vvt",
            """
            # error on purpose so vvtest skips this test
            #VVT: parameterize : hello
            pass
            """,
        )
        time.sleep(1)

        for batch in [False, True]:

            vtu.remove_results()

            vrun = vtu.runvvtest("--json results.json")
            vrun.assertCounts(total=0)

            assert os.path.exists("results.json")
            data = util.read_json_file("results.json")
            assert len(data["vvtest"]["tests"]["cases"]) == 0

    def test_execute_log_output_for_staged_tests(self):
        """"""
        util.writefile(
            "subdir/foo.vvt",
            """
            #VVT: parameterize (staged): bar = A B

            import vvtest_util as vvt
            from script_util import exit_diff
            print ( 'bar='+vvt.bar+' stage='+vvt.stage )
            exit_diff()
            """,
        )

        vrun = vtu.runvvtest("--json results.json subdir")
        vrun.assertCounts(total=2, diff=2)

        data = util.read_json_file("results.json")
        flg = 0
        for case in data["vvtest"]["tests"]["cases"]:
            if "stage=1" in case["case"]:
                txt = expand64(case["log"])
                assert "bar=A stage=1" in txt
                flg += 1
            elif "stage=2" in case["case"]:
                txt = expand64(case["log"])
                assert "bar=B stage=2" in txt
                flg += 100
        assert flg == 101

    def test_output_schema(self):
        """Test that guarantees the contracted output schema does not change"""
        write_three_test_files()
        time.sleep(1)
        for batch in [False, True]:
            vtu.remove_results()
            vrun = vtu.runvvtest("-N 4 --json results.json", batch=batch)
            vrun.assertCounts(total=5, npass=2, diff=2, fail=1)
            data = util.read_json_file("results.json")
            validate_output(data)


def validate_type(name, value, expected_type):
    if expected_type in primitive_types:
        if not isinstance(value, expected_type):
            raise AssertionError(
                "Expected {0}={1} to be of type {2}".format(name, value, expected_type)
            )
    else:
        # will throw if not valid
        try:
            expected_type(value)
        except AssertionError:
            raise AssertionError(
                "Cannot cast {0}={1} to {2}".format(name, value, expected_type)
            )


def validate_output(arg):
    first_level_keys = list(arg.keys())
    assert first_level_keys == ["vvtest"]
    for parent_key in json_output_schema["vvtest"]:
        assert parent_key in arg["vvtest"], 'parent_key '+repr(parent_key)+' not in vvtest schema'
        if parent_key in ("machine", "tests", "python"):
            for child, value2 in arg["vvtest"][parent_key].items():
                expected_type = json_output_schema["vvtest"][parent_key][child]
                validate_type(
                    "{0}:{1}".format(parent_key, child), value2, expected_type
                )
        else:
            value = arg["vvtest"][parent_key]
            expected_type = json_output_schema["vvtest"][parent_key]
            validate_type(parent_key, value, expected_type)


class list_of_testcases:
    def __init__(self, arg):
        assert isinstance(arg, list)
        for item in arg:
            assert isinstance(item, dict)
            assert isinstance(item.pop("name"), str)
            assert isinstance(item.pop("case"), str)
            assert isinstance(item.pop("id"), str)
            assert isinstance(item.pop("root"), str)
            assert isinstance(item.pop("path"), str)
            keywords = item.pop("keywords")
            assert isinstance(keywords, list)
            for keyword in keywords:
                assert isinstance(keyword, str)
            assert isinstance(item.pop("parameters"), dict)
            assert isinstance(item.pop("starttime"), float)
            assert isinstance(item.pop("endtime"), float)
            assert isinstance(item.pop("returncode"), int)
            assert isinstance(item.pop("result"), str)
            assert isinstance(item.pop("timeout"), int)
            resources = item.pop("resources", None)
            assert isinstance(resources, dict)
            assert isinstance(resources.pop("processors"), (int, nonetype))
            processor_ids = resources.pop("processor ids")
            assert isinstance(processor_ids, (nonetype, list))
            for processor_id in processor_ids or []:
                assert isinstance(processor_id, int)
            assert isinstance(resources.pop("total processors"), (int, nonetype))
            assert isinstance(resources.pop("devices"), (int, nonetype))
            device_ids = resources.pop("device ids")
            assert isinstance(device_ids, (nonetype, list))
            for device_id in device_ids or []:
                assert isinstance(device_id, int)
            assert isinstance(resources.pop("total devices"), (int, nonetype))
            assert isinstance(item.pop("command"), str)
            assert isinstance(item.pop("log"), str)
            assert not item


primitive_types = (str, float, list, dict, bool, int, (str, nonetype))


json_output_schema = {
    "vvtest": {
        "curdir": str,
        "startdate": str,
        "command": str,
        "vvtestdir": str,
        "compiler": (str, nonetype),
        "rundir": str,
        "starttime": float,
        "endtime": float,
        "enddate": str,
        "duration": float,
        "returncode": int,
        "onopts": str,
        "offopts": str,
        "testargs": str,
        "machine": {
            "platform": str,
            "system": str,
            "nodename": str,
            "release": str,
            "version": str,
            "arch": str,
        },
        "python": {
            "executable": str,
            "version": str,
            "version info": list,
        },
        "environment": dict,
        "tests": {
            "tests": int,
            "pass": int,
            "notdone": int,
            "notrun": int,
            "diff": int,
            "fail": int,
            "timeout": int,
            "cases": list_of_testcases,
        },
    }
}


def write_three_test_files():
    """"""
    util.writefile(
        "subdir/param.vvt",
        """
        #VVT: parameterize : hello = world mars
        import time
        time.sleep(1)
        """,
    )
    util.writefile(
        "FailTest.vvt",
        """
        import os, sys, time
        import vvtest_util as vvt
        time.sleep(2)
        raise Exception( 'pitch a fake exception' )
        """,
    )
    util.writefile(
        "DiffTest.xml",
        """
        <rtest name="DiffTest">
            <parameterize np="1 2"/>
            <execute>
                sleep 3
                echo "fake difference of 29"
                set have_diff = yes
            </execute>
        </rtest>""",
    )


if sys.version_info[0] < 3:
    def expand64(raw):
        return zlib.decompress( base64.b64decode(raw) )
else:
    def expand64(raw):
        bytes_str = base64.b64decode(raw.encode("utf-8"))
        hex_str = bytes_str.hex()
        s = zlib.decompress(bytes.fromhex(hex_str))
        return s.decode("utf-8")


############################################################################

util.run_test_cases(sys.argv, sys.modules[__name__])
