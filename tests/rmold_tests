#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
from os.path import join as pjoin
import time
import unittest


import trigtestutils as trigutil
import testutils as util
from testutils import print3

rmold_dir = os.path.dirname( trigutil.testsrcdir )
rmold_file = os.path.join( rmold_dir, 'rmold' )


class help_message( trigutil.trigTestCase ):

    def test_exercise_printing_of_help_message(self):
        ""
        x,out = util.runcmd( rmold_file+' -h' )
        assert 'SYNOPSIS' in out

        x,out = util.runcmd( rmold_file+' --help' )
        assert 'SYNOPSIS' in out


class functional_tests( trigutil.trigTestCase ):

    def test_remove_files_directories_symlinks(self):
        ""
        tm = time.time()
        tm0 = tm-45*24*60*60
        tm1 = tm-40*24*60*60
        tm2 = tm-30*24*60*60

        util.writefile( 'file.txt', 'a file' )
        os.utime( 'file.txt', (tm0,tm0) )

        util.writefile( 'donttouchme.txt', 'off limits' )
        os.symlink( 'donttouchme.txt', 'findlink.txt' )
        os.utime( 'donttouchme.txt', (tm1,tm1) )
        os.utime( 'findlink.txt', (tm1,tm1) )

        util.writefile( 'findme/blah.txt', 'blah' )
        os.utime( 'findme', (tm2,tm2) )

        time.sleep(1)

        util.runcmd( rmold_file+" -d 1 -- 'fi*'" )

        assert not os.path.exists( 'file.txt' )
        assert     os.path.exists( 'donttouchme.txt' )
        assert not os.path.exists( 'findlink.txt' )
        assert not os.path.exists( 'findme' )

    def test_remove_older_files_but_keep_newer(self):
        ""
        tm = time.time()
        tm1 = tm-30*24*60*60
        tm2 = tm-10*24*60*60
        tm3 = tm-    6*60*60

        util.writefile( 'file1.txt', 'a file' )
        os.utime( 'file1.txt', (tm1,tm1) )
        util.writefile( 'file2.txt', 'a file' )
        os.utime( 'file2.txt', (tm2,tm2) )
        util.writefile( 'file3.txt', 'a file' )
        os.utime( 'file3.txt', (tm3,tm3) )

        time.sleep(1)

        util.runcmd( rmold_file+" -d 5 'fi*'" )

        assert not os.path.exists( 'file1.txt' )
        assert not os.path.exists( 'file2.txt' )
        assert     os.path.isfile( 'file3.txt' )

    def test_specifying_a_fractional_day(self):
        ""
        tm = time.time()
        tm1 = tm-24*60*60
        tm2 = tm-12*60*60
        tm3 = tm- 6*60*60

        util.writefile( 'file1.txt', 'a file' )
        os.utime( 'file1.txt', (tm1,tm1) )
        util.writefile( 'file2.txt', 'a file' )
        os.utime( 'file2.txt', (tm2,tm2) )
        util.writefile( 'file3.txt', 'a file' )
        os.utime( 'file3.txt', (tm3,tm3) )

        time.sleep(1)

        util.runcmd( rmold_file+" -d 0.75 'fi*'" )

        assert not os.path.exists( 'file1.txt' )
        assert     os.path.exists( 'file2.txt' )
        assert     os.path.isfile( 'file3.txt' )

    def test_using_verbose(self):
        ""
        tm = time.time() - 5*24*60*60
        util.writefile( 'file.txt', 'a file' )
        os.utime( 'file.txt', (tm,tm) )

        time.sleep(1)

        x,out = util.runcmd( rmold_file+" -v -d 2 '"+abspath('*')+"'" )

        assert not os.path.exists( 'file.txt' )
        assert 'rm ' in out and '/file.txt' in out
        assert 'removing files older than ' in out

    def test_that_nothing_is_removed_if_d_option_not_given(self):
        ""
        tm = time.time() - 2*365*24*60*60
        util.writefile( 'file.txt', 'a file' )
        os.utime( 'file.txt', (tm,tm) )

        time.sleep(1)

        x,out = util.runcmd( rmold_file+" -v '"+abspath('*')+"'" )

        assert os.path.exists( 'file.txt' )


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
