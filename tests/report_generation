#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import time
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.reports as reports

import results_util as ru

import libvvtest.fmtresults as fmtresults
import libvvtest.testcase as testcase

timesfname = fmtresults.runtimes_filename
multifname = fmtresults.multiruntimes_filename


class unit_tests( vtu.vvtestTestCase ):

    def test_selection_logic_based_on_test_attributes(self):
        ""
        i = reports.select_test_based_on_attributes( None, {}, None )
        assert i > 0

        i = reports.select_test_based_on_attributes( {}, None, None )
        assert i < 0

        now = time.time()
        tm1 = now - 10*60
        tm2 = now - 5*60

        attrs1 = { 'xdate':tm1 } ; attrs2 = {}
        i = reports.select_test_based_on_attributes( attrs1, attrs2, None )
        assert i < 0

        attrs1 = {} ; attrs2 = { 'xdate':tm2 }
        i = reports.select_test_based_on_attributes( attrs1, attrs2, None )
        assert i > 0

        attrs1 = { 'xdate':tm1 }; attrs2 = { 'xdate':tm2 }
        i = reports.select_test_based_on_attributes( attrs1, attrs2, None )
        assert i > 0

        attrs1 = { 'xdate':tm2 }; attrs2 = { 'xdate':tm1 }
        i = reports.select_test_based_on_attributes( attrs1, attrs2, None )
        assert i < 1

        attrs1 = { 'state':'notdone' }; attrs2 = { 'state':'done' }
        i = reports.select_test_based_on_attributes( attrs1, attrs2, 'state=done' )
        assert i > 0

        attrs1 = { 'state':'done' }; attrs2 = { 'state':'notdone' }
        i = reports.select_test_based_on_attributes( attrs1, attrs2, 'state=done' )
        assert i < 1

        attrs1 = {}; attrs2 = { 'state':'notdone' }
        i = reports.select_test_based_on_attributes( attrs1, attrs2, 'state=done' )
        assert i < 1

        attrs1 = {}; attrs2 = { 'state':'done' }
        i = reports.select_test_based_on_attributes( attrs1, attrs2, 'state=done' )
        assert i > 0

        attrs1 = { 'state':'done' }; attrs2 = { 'state':'done' }
        i = reports.select_test_based_on_attributes( attrs1, attrs2, 'state=done' )
        assert i < 1

        attrs1 = { 'state':'done' }; attrs2 = {}
        i = reports.select_test_based_on_attributes( attrs1, attrs2, 'state=done' )
        assert i < 0

    def test_date_map_object(self):
        ""
        tm3 = 1562630042.488 # == Mon Jul  8 17:54:02 2019
        tm2 = tm3 - 24*60*60
        tm1 = tm2 - 24*60*60

        class FakeResultsMatrix:
            def minFileDate(self): return tm1
            def maxFileDate(self): return tm2

        dmap = reports.create_date_map( tm3, None, FakeResultsMatrix() )
        assert len( dmap.getDateList() ) == 2

        dmap = reports.create_date_map( tm3, 5, FakeResultsMatrix() )
        assert len( dmap.getDateList() ) == 5


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
