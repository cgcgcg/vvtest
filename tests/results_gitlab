#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import basename
import time
import glob
from os.path import getsize as getfsize
from os.path import abspath

try:
    from StringIO import StringIO
except Exception:
    from io import StringIO

import vvtestutils as vtu
import testutils as util

import libvvtest.logger as logger
import libvvtest.gitlabwriter as gitlabwriter
from libvvtest.gitlabwriter import make_submit_info

from libvvtest.teststatus import TestStatus, DIFF_EXIT_STATUS
from libvvtest.testcase import TestCase
from libvvtest.gitinterface import clone_repo, get_remote_branches


class gitlab_output_format_tests( vtu.vvtestTestCase ):

    def test_logic_between_a_directory_or_gitlab_url(self):
        ""
        os.mkdir( 'subdir' )
        time.sleep(1)

        assert not gitlabwriter.is_gitlab_url( 'subdir' )
        assert not gitlabwriter.is_gitlab_url( abspath('subdir') )
        assert not gitlabwriter.is_gitlab_url( 'foobarbaz' )
        assert not gitlabwriter.is_gitlab_url( abspath('foobarbaz') )

        assert gitlabwriter.is_gitlab_url( 'file:///dir/to/repo' )
        assert gitlabwriter.is_gitlab_url( 'mach:/dir/to/repo' )

    def makeTest(self, result=None, runtime=None, name='atest'):
        ""
        return vtu.make_fake_TestCase( result, runtime, name )

    def test_turning_a_path_to_a_markdown_link(self):
        ""
        s = gitlabwriter.format_test_path_for_gitlab( 'sub/name.np=1', False )
        assert s == 'sub/name.np=1'

        s = gitlabwriter.format_test_path_for_gitlab( 'sub/name.np=1', True )
        assert s == '[sub/name.np=1](sub_name.np=1.md)'

    def test_write_table_line_for_a_test(self):
        ""
        tcase = self.makeTest( 'pass', 5 )
        line = gitlabwriter.format_gitlab_table_line( tcase, True )
        print( line )
        sL = [ s.strip() for s in line.split( '|' )[1:-1] ]
        assert len(sL) == 4
        assert sL[0] == 'pass' and sL[2] == '0:05'
        assert sL[3] == 'sdir/atest.np=4'

        tcase = self.makeTest( 'fail', 7 )
        line = gitlabwriter.format_gitlab_table_line( tcase, True )
        print( line )
        sL = [ s.strip() for s in line.split( '|' )[1:-1] ]
        assert len(sL) == 4
        assert sL[0] == 'fail' and sL[2] == '0:07'
        assert sL[3] == '[sdir/atest.np=4](sdir_atest.np=4.md)'

        tcase = self.makeTest( 'fail', 7 )
        line = gitlabwriter.format_gitlab_table_line( tcase, False )
        print( line )
        sL = [ s.strip() for s in line.split( '|' )[1:-1] ]
        assert len(sL) == 4
        assert sL[0] == 'fail' and sL[2] == '0:07'
        assert sL[3] == 'sdir/atest.np=4'

    def test_write_gitlab_results_table(self):
        ""
        tL = [ self.makeTest( 'pass', 5, 'good' ),
               self.makeTest( 'diff', 5, 'bad' ) ]

        sio = StringIO()
        gitlabwriter.write_gitlab_results_table( sio, 'mixed', tL, 100 )

        val = sio.getvalue()
        print( val )
        assert len( util.greplines( 'Result*Date*Time*Path', val ) ) == 1
        assert len( util.greplines( '| sdir/good.np=4 |', val ) ) == 1
        line = grepforline( 'sdir/bad.np=4', val ).rstrip()
        assert line.endswith( '[sdir/bad.np=4](sdir_bad.np=4.md) |' )

    def test_write_results_table_with_max_path_links(self):
        ""
        tL = [ self.makeTest( 'diff', 5, 'testA' ),
               self.makeTest( 'diff', 5, 'testB' ),
               self.makeTest( 'diff', 5, 'testC' ),
               self.makeTest( 'diff', 5, 'testD' ) ]

        sio = StringIO()
        gitlabwriter.write_gitlab_results_table( sio, 'diff', tL, 2 )

        val = sio.getvalue()
        print( val )

        line = grepforline( 'sdir/testA.np=4', val ).rstrip()
        assert line.endswith( '[sdir/testA.np=4](sdir_testA.np=4.md) |' )

        line = grepforline( 'sdir/testB.np=4', val ).rstrip()
        assert line.endswith( '[sdir/testB.np=4](sdir_testB.np=4.md) |' )

        line = grepforline( 'sdir/testC.np=4', val ).rstrip()
        assert line.endswith( 'sdir/testC.np=4 |' )

        line = grepforline( 'sdir/testD.np=4', val ).rstrip()
        assert line.endswith( 'sdir/testD.np=4 |' )

    def test_that_large_results_tables_go_to_separate_file(self):
        ""
        tL = [ self.makeTest( 'fail', 5, 'testA' ),
               self.makeTest( 'fail', 5, 'testB' ),
               self.makeTest( 'fail', 5, 'testC' ),
               self.makeTest( 'fail', 5, 'testD' ) ]

        sio = StringIO()
        gitlabwriter.write_gitlab_results( sio, 'fail', tL, 'large.md', 2, 3 )
        time.sleep(1)

        val = sio.getvalue()
        assert len( util.greplines( 'Tests that fail = 4', val ) ) == 1
        assert 'large.md' in val
        assert 'sdir/test' not in val
        assert len( util.grepfiles( 'Tests that fail = 4', 'large.md' ) ) == 1
        assert len( util.grepfiles( 'sdir/test', 'large.md' ) ) == 4

        fval = util.readfile( 'large.md' )

        line = grepforline( 'sdir/testC.np=4', fval ).rstrip()
        assert line.endswith( '[sdir/testC.np=4](sdir_testC.np=4.md) |' )

        line = grepforline( 'sdir/testD.np=4', fval ).rstrip()
        assert line.endswith( 'sdir/testD.np=4 |' )

    def test_an_empty_test_list_will_not_write_a_table(self):
        ""
        tL = []

        sio = StringIO()
        gitlabwriter.write_gitlab_results( sio, 'fail', tL, 'nope.md', 2, 3 )
        time.sleep(1)

        val = sio.getvalue()
        print( val )
        assert len( util.greplines( 'Tests that fail', val ) ) == 1
        assert len( util.greplines( 'Result*Date*Time*Path', val ) ) == 0

    def test_file_meta_data_collection(self):
        ""
        util.writefile( 'subdir/zeebra.txt', "I am a zeebra.\n" * 20 )
        time.sleep(1)
        util.writefile( 'subdir/ardvaark.txt', "I am an ardvaark.\n" * 21 )
        time.sleep(1)

        fL,width = gitlabwriter.get_directory_file_list( 'subdir' )
        assert fL == [ 'zeebra.txt', 'ardvaark.txt' ]
        assert width == 12

        meta = gitlabwriter.get_file_meta_data_string( 'subdir/zeebra.txt', 10 )
        print( meta )

        meta = gitlabwriter.get_file_meta_data_string( 'subdir/foobar.txt', 10 )
        print( meta )
        assert 'error: ' in meta

        os.symlink( 'ardvaark.txt', 'subdir/ardvark.txt' )
        time.sleep(1)

        meta = gitlabwriter.get_file_meta_data_string( 'subdir/ardvark.txt', 10 )
        print( meta )
        assert 'error:' not in meta

    def test_write_gitlab_collapsable_file_contents(self):
        ""
        util.writefile( 'file.txt', """
            Text with a < and a > and a & and some "quotes" too.
            ```
            This is line two.
            """ )
        time.sleep(1)

        sio = StringIO()
        fn = os.path.abspath('file.txt')
        gitlabwriter.write_gitlab_formatted_file( sio, fn, True, 'label', 10 )

        val = sio.getvalue()
        #print( val )
        assert len( util.greplines( '<code>label', val ) ) == 1
        assert fn not in val
        assert 'Text with a' in val
        assert '< and a > and a & and some "quotes"' in val
        assert val.count( '```' ) == 2 and "'''" in val

        sio = StringIO()
        fn = os.path.abspath('file.exo')
        gitlabwriter.write_gitlab_formatted_file( sio, fn, False, 'label', 10 )

        val = sio.getvalue()
        #print( val )
        assert len( util.greplines( '<code>label', val ) ) == 1
        assert fn not in val
        assert 'Text with a' not in val
        assert 'file not archived' in val

    def test_write_gitlab_collapsable_file_with_read_error(self):
        ""
        sio = StringIO()
        fn = os.path.abspath('file.txt')
        gitlabwriter.write_gitlab_formatted_file( sio, fn, True, 'label', 10 )

        val = sio.getvalue()
        #print( val )
        assert fn in val
        assert 'error reading file:' in val
        assert 'Traceback' in val

    def test_write_gitlab_collapsable_file_with_leading_backticks(self):
        ""
        util.writefile( 'file.txt', """```
            Another line.
            """ )
        time.sleep(1)

        sio = StringIO()
        fn = os.path.abspath('file.txt')
        gitlabwriter.write_gitlab_formatted_file( sio, fn, True, 'label', 10 )

        val = sio.getvalue()
        #print( val )
        assert 'Another line' in val
        assert val.count( '```' ) == 2 and val.count( "'''" ) == 1

    def test_stream_file_contents_to_gitlab_collapsable_format(self):
        ""
        class MockSelector:
            def include(self, filename):
                return True

        self.write_file_pair()
        time.sleep(1)

        sio = StringIO()
        gitlabwriter.stream_gitlab_files( sio, '.', MockSelector(), 10 )

        val = sio.getvalue()
        #print( val )
        assert 'This is line two' in val
        assert 'file.txt' in val
        assert 'execute.log' in val
        assert 'This is the stdout and stderr' in val

    def write_file_pair(self, subdir='.'):
        ""
        util.writefile( os.path.join( subdir,'file.txt' ), """
            Text with a < and a > and a & and some "quotes" too.
            This is line two.
            """ )
        util.writefile( os.path.join( subdir,'execute.log' ), """
            This is the stdout and stderr
            from running the test.
            """ )

    def test_stream_file_contents_but_exclude_certain_files(self):
        ""
        class MockSelector:
            def include(self, filename):
                return os.path.splitext(filename)[1] == '.log'

        self.write_file_pair()
        time.sleep(1)

        sio = StringIO()
        gitlabwriter.stream_gitlab_files( sio, '.', MockSelector(), 10 )

        val = sio.getvalue()
        #print( val )
        assert 'This is line two' not in val
        assert 'execute.log' in val

    def test_create_file_with_directory_contents(self):
        ""
        self.write_file_pair( 'subdir' )
        util.writefile( 'subdir/junk.exo', """
            this should not be included
            """ )
        time.sleep(1)

        preamble = 'Houston, we have a problem.'
        converter = gitlabwriter.GitLabMarkDownConverter( None, None )
        converter.createGitlabDirectoryContents(
                                    'results.md', preamble, 'subdir' )
        time.sleep(1)

        assert len( util.grepfiles( preamble, 'results.md' ) ) == 1
        assert len( util.grepfiles( 'file.txt', 'results.md' ) ) == 1
        assert len( util.grepfiles( 'execute.log', 'results.md' ) ) == 1
        assert len( util.grepfiles( 'should not be included', 'results.md' ) ) == 0

    def test_create_file_directory_contents_but_directory_does_not_exist(self):
        ""
        preamble = 'Houston, we have a problem.'
        converter = gitlabwriter.GitLabMarkDownConverter( None, None )
        converter.createGitlabDirectoryContents(
                                    'results.md', preamble, 'subdir' )
        time.sleep(1)

        assert len( util.grepfiles( preamble, 'results.md' ) ) == 1
        assert len( util.grepfiles( 'error collecting files', 'results.md' ) ) == 1
        assert len( util.grepfiles( 'Traceback', 'results.md' ) ) == 1

    def test_test_run_attributes(self):
        ""
        conv = gitlabwriter.GitLabMarkDownConverter( '.', '.' )
        conv.saveResults( [], {} )
        time.sleep(1)

        fval = util.readfile( 'README.md' ).strip()
        val = fval.split( '## Tests that', 1 )[0]
        assert 'currentepoch' in val.strip()

        conv = gitlabwriter.GitLabMarkDownConverter( '.', '.' )
        tm = time.time()
        rtinfo = { 'startdate':str(tm)+' / '+time.ctime(tm),
                   'finishdate':str(tm+10)+' / '+time.ctime(tm+10) }
        conv.saveResults( [], rtinfo )
        time.sleep(1)

        fval = util.readfile( 'README.md' ).strip()
        val = fval.split( '## Tests that', 1 )[0]
        assert len( util.greplines( 'startdate', val ) ) == 1
        assert len( util.greplines( 'finishdate', val ) ) == 1

    def make_recording_GitLabWriter(self, location, output_period=None):
        ""
        recorder = []

        class RecordingGitLabWriter( gitlabwriter.GitLabWriter ):
            def _write_files(self, atestlist, logfunc):
                recorder.append( 'files' )
            def _dispatch_submission(self, atestlist, logfunc):
                recorder.append( 'submit' )

        wr = RecordingGitLabWriter( None )
        if output_period is None:
            wr.initialize( {}, location )
        else:
            wr.initialize( {}, location, output_period=output_period )

        return wr,recorder

    def test_trigger_file_write_only_on_postrun_and_info(self):
        ""
        wr,recorder = self.make_recording_GitLabWriter( 'destdir' )

        wr.prerun( None, 0 )
        assert recorder == []

        wr.midrun( None )
        assert recorder == []

        wr.postrun( None )
        assert recorder == [ 'files' ]

        wr.info( None )
        assert recorder == [ 'files', 'files' ]

    def test_trigger_url_submission_on_prerun_and_postrun_and_info(self):
        ""
        wr,recorder = self.make_recording_GitLabWriter( 'file:///some/dir' )

        wr.prerun( None, 0 )
        assert recorder == [ 'submit' ]

        wr.midrun( None )
        assert recorder == [ 'submit' ]

        wr.postrun( None )
        assert recorder == [ 'submit', 'submit' ]

        wr.info( None )
        assert recorder == [ 'submit', 'submit', 'submit' ]

    def test_trigger_url_submission_on_midrun(self):
        ""
        wr,recorder = self.make_recording_GitLabWriter(
                                            'file:///some/dir',
                                            output_period=2 )

        wr.prerun( None, 0 )
        assert recorder == [ 'submit' ]
        wr.midrun( None )
        assert recorder == ['submit']
        time.sleep(3)
        wr.midrun( None )
        assert recorder == [ 'submit', 'submit' ]
        wr.midrun( None )
        assert recorder == [ 'submit', 'submit' ]
        wr.postrun( None )
        assert recorder == [ 'submit', 'submit', 'submit' ]

    def test_making_submit_info(self):
        ""
        tm = time.time()

        rtinfo = { 'startepoch':tm, 'platform':'xbox' }
        start,sfx,msg = make_submit_info( rtinfo, ['dbg'], None )
        assert abs( tm - start ) < 2
        print( 'sfx '+str(sfx) )
        assert 'xbox' in sfx and 'dbg' in sfx
        assert 'vvtest' in msg

        rtinfo = { 'startepoch':tm, 'platform':'xbox' }
        start,sfx,msg = make_submit_info( rtinfo, ['dbg'], 'blue' )
        assert 'xbox' in sfx and 'dbg' in sfx and 'blue' in sfx

        rtinfo = { 'startepoch':tm }
        start,sfx,msg = make_submit_info( rtinfo, [], None )
        assert abs( tm - start ) < 2
        assert not sfx

    def make_git_repo(self):
        ""
        url = util.create_bare_repo( 'arepo' )
        util.push_file_to_repo( url, 'file.txt', 'file contents' )

        return url

    def make_git_repo_and_overridden_GitLabWriter(self, rtinfo):
        ""
        url = self.make_git_repo()

        util.writefile( 'faketestresults/mark.txt', 'nothing' )

        class OverrideGitLabWriter( gitlabwriter.GitLabWriter ):
            def _convert_files(self, destdir, atestlist, logfunc):
                ""
                fp = open( destdir+'/info.txt', 'wt' )
                gitlabwriter.write_run_attributes( fp, self.rtinfo )
                fp.close()

        wr = OverrideGitLabWriter( None )
        wr.initialize( rtinfo, url )

        return wr,url

    def test_submit_to_git_repository(self):
        ""
        rtinfo = { 'rundir':'faketestresults',
                   'startepoch':1559822821.99,  # Thu Jun  6 06:07:01 2019
                   'curdir':'my value' }
        wr,url = self.make_git_repo_and_overridden_GitLabWriter( rtinfo )

        wr._dispatch_submission( None, logger.info )

        git = clone_repo( url, 'checkrepo' )
        branch = get_results_branch( git )
        assert branch == 'results_2019_06'
        git.checkout_branch( branch )
        rdir = util.globfile( 'checkrepo/*' )
        assert basename( rdir ) == '2019_06_06_06'

        val = util.readfile( rdir+'/info.txt' )
        assert 'curdir' in val and 'my value' in val

    def test_submit_to_a_faulty_gitlab_url(self):
        ""
        class OverrideGitLabWriter( gitlabwriter.GitLabWriter ):
            def _convert_files(self, destdir, atestlist, logfunc):
                util.writefile( destdir+'/ok.txt', "file contents" )

        wr = OverrideGitLabWriter( None )
        rtinfo = { 'rundir':'faketestresults',
                   'startepoch':1559822821.99 }
        badurl = 'file:///some/path/ladofgidskjslasdf'
        wr.initialize( rtinfo, badurl )

        rtn,out,err = util.call_capture_output(
            wr._dispatch_submission, None, logger.info )

        assert 'WARNING' in err and 'error submitting' in err

    def test_submit_a_second_time_when_no_files_are_different(self):
        ""
        rtinfo = { 'rundir':'faketestresults',
                   'startepoch':1559822821.99 }  # Thu Jun  6 06:07:01 2019
        wr,url = self.make_git_repo_and_overridden_GitLabWriter( rtinfo )

        # wr.setInfoObjects( rtinfo )
        wr._dispatch_submission( None, logger.info )

        time.sleep(1)

        rtn,out,err = util.call_capture_output(
            wr._dispatch_submission, None, logger.info )

        assert 'WARNING' not in out

    def test_create_markdown_file_for_a_test(self):
        ""
        write_three_test_files()
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )

        creator = vtu.creator( {}, vrun.platformName() )
        tL = creator.fromFile( 'DiffTest.vvt' )
        tst = tL[0]

        tcase = TestCase( tst )
        tstat = tcase.getStat()
        tstat.markStarted( time.time() )
        tstat.markDone( DIFF_EXIT_STATUS )
        tstat.setRuntime( 3 )

        conv = gitlabwriter.GitLabMarkDownConverter( vrun.resultsDir(), '.' )
        conv.createTestFile( tcase )
        time.sleep(1)

        mdfile = util.globfile( 'DiffTest.*.md' )
        xdir = os.path.join( vrun.resultsDir(), tst.getExecuteDirectory() )
        assert len( util.grepfiles( 'Run directory:*'+xdir, mdfile ) ) == 1
        assert len( util.grepfiles( 'Result:*diff *DiffTest', mdfile ) ) == 1

    def test_producing_gitlab_markdown_results_files(self):
        ""
        write_three_test_files()
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )

        vrun = vtu.runvvtest( '-i --gitlab=../gfm', chdir=vrun.resultsDir() )
        time.sleep(1)

        assert getfsize( 'gfm/README.md' ) > 800
        assert getfsize( 'gfm/FailTest.md' ) > 1500
        assert getfsize( 'gfm/DiffTest.np_stage=1(np=1).md' ) > 1000
        assert getfsize( 'gfm/DiffTest.np_stage=2(np=2).md' ) > 1000
        assert len( glob.glob( 'gfm/*param*' ) ) == 0

    def test_producing_gitlab_markdown_as_part_of_execution(self):
        ""
        write_three_test_files()
        time.sleep(1)

        vrun = vtu.runvvtest( '--gitlab gfm' )
        vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )
        time.sleep(1)

        assert getfsize( 'gfm/README.md' ) > 800
        assert getfsize( 'gfm/FailTest.md' ) > 1500
        assert getfsize( 'gfm/DiffTest.np_stage=1(np=1).md' ) > 1000
        assert getfsize( 'gfm/DiffTest.np_stage=2(np=2).md' ) > 1000
        assert len( glob.glob( 'gfm/*param*' ) ) == 0

        fval = util.readfile( 'gfm/README.md' ).strip()
        val = fval.split( '## Tests that', 1 )[0]
        assert len( util.greplines( 'startdate', val ) ) == 1
        assert len( util.greplines( 'finishdate', val ) ) == 1
        assert len( util.greplines( ' vvtestdir =', val ) ) == 1
        assert len( util.greplines( ' python =', val ) ) == 1
        elap = util.greplines( 'elapsed', val )[0].split('=')[1].strip()
        assert int( elap[:-1] ) > 1

    def test_submitting_gitlab_markdown_during_execution(self):
        ""
        write_three_test_files()
        url = self.make_git_repo()
        time.sleep(1)

        epoch = str(1559822821.99)  # Thu Jun  6 06:07:01 2019

        vrun = vtu.runvvtest( '-o dbg',
                              '--results-tag digit',
                              '--gitlab', url,
                              '--results-date', epoch )
        vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )
        time.sleep(1)

        git = clone_repo( url, 'checkrepo' )
        branch = get_results_branch( git )
        assert branch == 'results_2019_06'
        git.checkout_branch( branch )
        rdir = util.globfile( 'checkrepo/*' )
        assert 'dbg' in rdir and 'digit' in rdir
        assert basename(rdir).startswith( '2019_06_06' )

        readme = rdir+'/README.md'
        assert 'finishepoch' in util.readfile( readme )
        x,out = util.runcmd( 'git log README.md', chdir=rdir )
        lines = util.greplines( 'vvtest results auto commit', out )
        assert len( lines ) == 2


def write_three_test_files():
    ""
    util.writefile( "subdir/param.vvt", """
        #VVT: parameterize : hello = world mars
        import time
        time.sleep(1)
        """ )
    util.writefile( 'FailTest.vvt', """
        import sys, time
        time.sleep(2)
        for i in range(1,10):
            print ( "exit with fake failure" )
        sys.exit(1)
        """ )
    util.writefile( 'DiffTest.vvt', """
        #VVT: parameterize (staged): np = 1 2
        import time, sys
        import vvtest_util as vvt
        time.sleep(3)
        print ( 'fake difference of 29' )
        sys.exit( vvt.diff_exit_status )
        """ )


def grepforline( pattern, multi_line_string ):
    ""
    lineL = util.greplines( pattern, multi_line_string )
    assert len( lineL ) == 1
    return lineL[0]


def get_results_branch( git ):
    ""
    brL = []

    for br in get_remote_branches( git.get_remote_URL() ):
        if br.startswith( 'results_' ):
            brL.append( br )

    assert len( brL ) == 1

    return brL[0]


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
