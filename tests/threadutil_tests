#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: trig

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath, dirname
import time
import unittest
import subprocess
import signal
import threading

import trigtestutils as trigutil
import testutils as util
from testutils import print3

import threadutil


class threaded_function_call( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def sleep_touch(self, arg, **kwargs):
        ""
        with open( 'start.txt', 'wt' ) as fp:
            fp.write( str(time.time()) +'\n' )
            fp.write( str(arg) + ' ' + repr(kwargs) + '\n' )
        time.sleep(1.2)
        with open( 'stop.txt', 'wt' ) as fp:
            fp.write( str(time.time()) + '\n' )

    def test_asynchronous_execution(self):
        ""
        thr = threadutil.ThreadedFunctionCall( self.sleep_touch, 'first', key=5 )

        tL = []
        for i in range(3):
            tL.append( time.time() )
            time.sleep(1)

        assert thr.isDone()
        tL.append( time.time() )

        for i in range(len(tL)-1):
            assert tL[i+1] > tL[i] and tL[i+1]-tL[i] < 1.2

        lineL = util.readfile('start.txt').strip().splitlines()
        t0 = float( lineL[0].strip() )
        sL = lineL[1].strip().split( 'first ', 1 )
        assert len(sL) == 2 and sL[0] == ''
        assert eval( sL[1] ) == { 'key':5 }
        t1 = float( util.readfile( 'stop.txt' ).strip() )
        assert t1 > t0 and t1-t0 < 2
        assert abs( t0-tL[0] ) < 2
        assert tL[-1]-tL[0] > 2 and tL[-1]-tL[0] < 5

    def increment(self, val):
        ""
        time.sleep(1.1)
        return val+1

    def test_getting_the_function_return_value(self):
        ""
        t0 = time.time()

        thr = threadutil.ThreadedFunctionCall( self.increment, 3 )
        while not thr.isDone():
            pass

        t1 = time.time()

        assert t1-t0 > 1 and t1-t0 < 2
        assert thr.getResult() == ( None, 4 )

    def raise_exception(self):
        ""
        def mycoolfunction():
            raise Exception( 'fake exception' )
        mycoolfunction()
        return 'fail'

    def test_an_exception_in_the_function_call(self):
        ""
        t0 = time.time()

        thr = threadutil.ThreadedFunctionCall( self.raise_exception )
        while not thr.isDone():
            pass

        exc,val = thr.getResult()
        assert 'Traceback' in exc
        assert 'mycoolfunction' in exc
        assert 'fake exception' in exc
        assert val == None

    def test_getting_the_result_is_an_error_before_the_thread_is_done(self):
        ""
        thr = threadutil.ThreadedFunctionCall( self.increment, 2 )
        self.assertRaises( Exception, thr.getResult )

    def test_that_Control_C_stops_the_thread(self):
        ""
        util.writefile( 'runme', """
            import sys, time
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            import threadutil
            def sleeper():
                time.sleep(10)
            def main():
                thr = threadutil.ThreadedFunctionCall( sleeper )
                while not thr.isDone():
                    pass
            main()
            """ )
        time.sleep(1)

        with open( 'log', 'wt' ) as fp:
            pop = subprocess.Popen( sys.executable+' '+abspath('runme'),
                                    shell=True,
                                    stdout=fp.fileno(),
                                    stderr=subprocess.STDOUT )

        t0 = time.time()
        time.sleep(1.5)

        pop.send_signal( signal.SIGINT )
        pop.wait()

        t1 = time.time()

        assert t1-t0 < 4
        fileval = util.readfile( 'log' )
        assert 'Traceback' in fileval and 'KeyboardInterrupt' in fileval


class background_runner_tests( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def test_run_a_function_in_a_thread(self):
        ""
        class RunFunc:
            def dispatch(self):
                self.dispatch_call = threading.current_thread().name
                return 'covid'
            def complete(self, exc, val):
                self.complete_call = ( exc, val )

        tname = threading.current_thread().name

        bg = threadutil.BackgroundRunner()
        rf = RunFunc()
        bg.runall( [ rf ] )

        assert rf.dispatch_call != tname
        assert rf.complete_call[0] == None
        assert rf.complete_call[1] == 'covid'

    def test_run_two_functions_concurrently(self):
        ""
        class RunFunc:
            def dispatch(self):
                time.sleep(3)
                return threading.current_thread().name
            def complete(self, exc, val):
                self.data = ( val, time.time() )

        bg = threadutil.BackgroundRunner()
        rf1 = RunFunc()
        rf2 = RunFunc()

        t0 = time.time()
        bg.runall( [ rf1, rf2 ] )
        t1 = time.time()

        assert rf1.data[0] != rf2.data[0]
        assert t1-t0 < 4.5
        assert abs( rf1.data[1] - t1 ) < 2
        assert abs( rf2.data[1] - t1 ) < 2


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
