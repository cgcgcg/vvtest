#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util


class dependency_information( vtu.vvtestTestCase ):

    def test_the_dependency_dirs_are_available(self):
        ""
        util.write_py_script( 'testX.vvt', """
            #VVT: depends on : testY
            import os
            import vvtest_util as vvt
            assert os.path.isdir( vvt.TESTROOT )
            assert len( vvt.DEPDIRS ) == 1
            yfile = os.path.join( vvt.DEPDIRS[0], 'Y.out' )
            assert os.path.exists( yfile )
            """ )
        util.write_py_script( 'testY.vvt', """
            fp = open( 'Y.out', 'w' )
            fp.close()
            """ )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=2, npass=2 )

        vtu.remove_results()

        vtu.runvvtest( batch=True ).assertCounts( total=2, npass=2 )

    def test_deps_work_with_bash(self):
        ""
        util.writescript( 'testX.vvt', """
            #!/bin/sh
            #VVT: depends on : testY
            source ./vvtest_util.sh
            [ -e $TESTROOT ] || exit 1
            yfile="$DEPDIRS/Y.out"
            cat $yfile || exit 1
            """ )
        util.writescript( 'testY.vvt', """
            #!/bin/sh
            touch Y.out
            """ )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=2, npass=2 )

        vtu.remove_results()

        vtu.runvvtest( batch=True ).assertCounts( total=2, npass=2 )

    def test_multiple_depdirs(self):
        ""
        util.write_py_script( 'testX.vvt', """
            #VVT: depends on : te*Y t*tZ
            import os, glob
            import vvtest_util as vvt

            assert len( vvt.DEPDIRS ) == 2
            assert vvt.DEPDIRS[0].endswith( 'testY' )
            assert vvt.DEPDIRS[1].endswith( 'testZ' )

            pat = os.path.join( vvt.DEPDIRS[0], 'Y.out' )
            assert len( glob.glob( pat ) ) == 1

            pat = os.path.join( vvt.DEPDIRS[1], 'Z.out' )
            assert len( glob.glob( pat ) ) == 1

            assert len( vvt.DEPDIRMAP ) == 2
            assert len( vvt.DEPDIRMAP['te*Y'] ) == 1
            assert len( vvt.DEPDIRMAP['t*tZ'] ) == 1

            assert vvt.DEPDIRMAP['te*Y'][0] == vvt.DEPDIRS[0]
            assert vvt.DEPDIRMAP['t*tZ'][0] == vvt.DEPDIRS[1]
            """ )
        util.write_py_script( 'testY.vvt', """
            fp = open( 'Y.out', 'w' )
            fp.close()
            """ )
        util.write_py_script( 'testZ.vvt', """
            fp = open( 'Z.out', 'w' )
            fp.close()
            """ )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=3, npass=3 )

        vtu.remove_results()

        vtu.runvvtest( batch=True ).assertCounts( total=3, npass=3 )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
