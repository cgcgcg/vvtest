#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time
import stat
import pipes

import vvtestutils as vtu
import testutils as util
from testutils import print3

from libvvtest.permsetter import PermissionSetter, make_permission_specs
from libvvtest.errors import FatalError


########################################################################

class unit_tests( vtu.vvtestTestCase ):

    def test_parsing_permission_specifications(self):
        ""
        make_permission_specs( [ 'g=rx' ] )
        make_permission_specs( [ 'o=rx' ] )
        make_permission_specs( [ 'g=rwx,o=rx' ] )
        make_permission_specs( [ 'g=rwx','o=rx' ] )

        self.assertRaises( FatalError,
                           make_permission_specs, 'bad-group-name-98372373' )

    def test_specification_error_on_construction(self):
        ""
        self.assertRaises( FatalError, PermissionSetter, os.getcwd(), 'g=rq' )

    def test_setting_permissions_on_a_nonexistent_path_is_an_error(self):
        ""
        perms = PermissionSetter( os.getcwd(), ['g=rx'] )
        self.assertRaises( Exception, perms.apply, 'junk' )
        self.assertRaises( Exception, perms.recurse, 'junk' )
        self.assertRaises( Exception, perms.apply, abspath('junk') )
        self.assertRaises( Exception, perms.recurse, abspath('junk') )

    def test_an_empty_specification_is_a_noop(self):
        ""
        perms = PermissionSetter( os.getcwd(), None )
        perms.apply( abspath('junk') )
        perms.recurse( abspath('junk') )

        perms = PermissionSetter( os.getcwd(), [] )
        perms.apply( abspath('junk') )
        perms.recurse( abspath('junk') )

    def test_setting_perms_on_a_subdirectory_path(self):
        ""
        util.writefile( 'subdir1/file1.txt', 'content' )
        util.remove_group_write_perm( 'subdir1/file1.txt' )
        util.remove_group_write_perm( 'subdir1' )

        util.writefile( 'subdir2/file2.txt', 'content' )
        util.remove_group_write_perm( 'subdir2/file2.txt' )
        util.remove_group_write_perm( 'subdir2' )

        time.sleep(1)

        assert not util.has_group_write( 'subdir1/file1.txt' )
        assert not util.has_group_write( 'subdir1' )
        assert not util.has_group_write( 'subdir2/file2.txt' )
        assert not util.has_group_write( 'subdir2' )

        perms = PermissionSetter( os.getcwd(), ['g+w'] )
        perms.apply( 'subdir1/file1.txt' )
        perms.apply( abspath('subdir2/file2.txt' ) )

        assert util.has_group_write( 'subdir1/file1.txt' )
        assert util.has_group_write( 'subdir1' )
        assert util.has_group_write( 'subdir2/file2.txt' )
        assert util.has_group_write( 'subdir2' )

    def test_setting_perms_on_a_non_subdirectory_path(self):
        ""
        util.writefile( 'subdir1/file1.txt', 'content' )
        util.remove_group_write_perm( 'subdir1/file1.txt' )
        util.remove_group_write_perm( 'subdir1' )

        util.writefile( 'subdir2/file2.txt', 'content' )
        util.remove_group_write_perm( 'subdir2/file2.txt' )
        util.remove_group_write_perm( 'subdir2' )

        time.sleep(1)

        assert not util.has_group_write( 'subdir1/file1.txt' )
        assert not util.has_group_write( 'subdir1' )
        assert not util.has_group_write( 'subdir2/file2.txt' )
        assert not util.has_group_write( 'subdir2' )

        perms = PermissionSetter( abspath('subdir1'), ['g+w'] )
        perms.apply( abspath('subdir2/file2.txt' ) )

        assert not util.has_group_write( 'subdir1/file1.txt' )
        assert not util.has_group_write( 'subdir1' )
        assert     util.has_group_write( 'subdir2/file2.txt' )
        assert not util.has_group_write( 'subdir2' )

    def test_setting_perms_on_the_top_level(self):
        ""
        util.writefile( 'subdir1/file1.txt', 'content' )
        util.remove_group_write_perm( 'subdir1/file1.txt' )
        util.remove_group_write_perm( 'subdir1' )

        util.writefile( 'subdir2/file2.txt', 'content' )
        util.remove_group_write_perm( 'subdir2/file2.txt' )
        util.remove_group_write_perm( 'subdir2' )

        util.writefile( 'subdir3/file3.txt', 'content' )
        util.remove_group_write_perm( 'subdir3/file3.txt' )
        util.remove_group_write_perm( 'subdir3' )

        time.sleep(1)

        perms = PermissionSetter( abspath('subdir1'), ['g+w'] )
        perms.apply( abspath('subdir1') )

        perms = PermissionSetter( abspath('subdir2'), ['g+w'] )
        perms.apply( '.' )

        perms = PermissionSetter( abspath('subdir3'), ['g+w'] )
        perms.apply( 'file3.txt' )

        assert not util.has_group_write( 'subdir1/file1.txt' )
        assert     util.has_group_write( 'subdir1' )
        assert not util.has_group_write( 'subdir2/file2.txt' )
        assert     util.has_group_write( 'subdir2' )
        assert     util.has_group_write( 'subdir3/file3.txt' )
        assert     util.has_group_write( 'subdir3' )

    def test_caching_prevents_multiple_perm_changes_to_the_same_path(self):
        ""
        util.writefile( 'subdir1/file1.txt', 'content' )
        util.remove_group_write_perm( 'subdir1/file1.txt' )
        util.remove_group_write_perm( 'subdir1' )

        util.writefile( 'subdir2/file2.txt', 'content' )
        util.remove_group_write_perm( 'subdir2/file2.txt' )
        util.remove_group_write_perm( 'subdir2' )

        time.sleep(1)

        perms = PermissionSetter( abspath('subdir1'), ['g+w'] )
        perms.apply( 'file1.txt' )
        assert util.has_group_write( 'subdir1/file1.txt' )
        assert util.has_group_write( 'subdir1' )

        util.remove_group_write_perm( 'subdir1/file1.txt' )
        util.remove_group_write_perm( 'subdir1' )
        perms.apply( 'file1.txt' )
        assert not util.has_group_write( 'subdir1/file1.txt' )
        assert not util.has_group_write( 'subdir1' )

        perms.apply( abspath('subdir2/file2.txt') )
        assert util.has_group_write( 'subdir2/file2.txt' )

        # non-subdirectory paths do not use the caching
        util.remove_group_write_perm( 'subdir2/file2.txt' )
        perms.apply( abspath('subdir2/file2.txt') )
        assert util.has_group_write( 'subdir2/file2.txt' )


class integration_tests( vtu.vvtestTestCase ):

    def test_turn_off_group_and_world_permissions(self):
        ""
        util.writefile( "one/cat.xml", """
            <rtest name="cat">
              <execute> sleep 1 </execute>
            </rtest>""" )
        util.writefile( "one/dog.xml", """
            <rtest name="dog">
              <execute> sleep 2 </execute>
            </rtest>""" )
        util.writefile( "two/circle.xml", """
            <rtest name="circle">
              <execute> sleep 3 </execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--perms g=,o=', batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            pL = util.list_all_paths( os.path.abspath( vrun.resultsDir() ) )
            for p in pL:
                assert util.has_no_group_permissions(p)
                assert util.has_no_world_permissions(p)

    def test_turn_on_group_and_world_permissions(self):
        ""
        util.writefile( "one/cat.xml", """
            <rtest name="cat">
              <execute> sleep 1 </execute>
            </rtest>""" )
        util.writefile( "one/dog.xml", """
            <rtest name="dog">
              <execute> sleep 2 </execute>
            </rtest>""" )
        util.writefile( "two/circle.xml", """
            <rtest name="circle">
              <execute> sleep 3 </execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--perms g=rwXS,o=rwX', batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            tdir = os.path.abspath( vrun.resultsDir() )

            dL = util.list_all_directories( tdir )
            for d in dL:
                assert util.has_group_sticky(d)
                assert util.has_group_execute(d)
                assert util.has_world_execute(d)

            # spot check a file that should have execute set
            f = os.path.join( tdir, 'one', 'dog', 'runscript' )
            assert util.has_group_execute(f) and util.has_world_execute(f)

            for p in util.list_all_paths( tdir ):
                assert util.has_group_read(p) and util.has_group_write(p)
                if util.has_owner_execute(p):
                    assert util.has_group_execute(p) and util.has_world_execute(p)

    def test_change_file_group(self):
        ""
        grp1,grp2 = util.probe_for_two_different_groups()

        util.writefile( 'atest.vvt', """
            pass
            """ )
        time.sleep(1)

        for grp in [ grp1,grp2 ]:
            for batch in [False,True]:

                vtu.remove_results()

                vrun = vtu.runvvtest( '--perms '+pipes.quote(grp), batch=batch )
                vrun.assertCounts( total=1, npass=1 )

                adir = vrun.resultsDir()+'/atest'
                assert util.get_file_group( adir ) == grp
                assert util.get_file_group( adir+'/execute.log' ) == grp


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
