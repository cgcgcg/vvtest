#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3


class generate_tests( vtu.vvtestTestCase ):

    def test_simple_generate(self):
        ""
        util.writefile( "null.vvt", """
            """ )

        vtu.runvvtest( '-g' ).assertCounts( total=1, notrun=1 )
        self.grep_testlist( 'null', 1 )

    def grep_testlist(self, pattern, expected_count, subdir=None):
        ""
        if subdir:
            fpat = subdir+'/TestResults*/testlist'
        else:
            fpat = 'TestResults*/testlist'

        lines = util.grepfiles( pattern, fpat )
        assert len( lines ) == expected_count

    def grep_test_directories(self, pattern, expected_count, subdir=None):
        ""
        if subdir:
            loc = glob.glob( subdir+'/TestResults*' )[0]
        else:
            loc = glob.glob( 'TestResults*' )[0]

        fL = util.findfiles( pattern, loc )
        assert len( fL ) == expected_count

    def assert_9_testlist(self, subdir=None):
        ""
        self.grep_testlist( 'null', 1, subdir )
        self.grep_testlist( 'boom', 2, subdir )
        self.grep_testlist( 'hello*world', 1, subdir )
        self.grep_testlist( 'hello*mars', 1, subdir )
        self.grep_testlist( 'double', 6, subdir )
        self.grep_testlist( 'one*val1', 3, subdir )
        self.grep_testlist( 'one*val2', 3, subdir )
        self.grep_testlist( 'two*gimp', 2, subdir )
        self.grep_testlist( 'val1*val2', 0, subdir )
        self.grep_testlist( 'val2*val1', 0, subdir )

    def assert_9_test_directories(self, subdir=None):
        ""
        self.grep_test_directories( 'null', 1, subdir )
        self.grep_test_directories( 'boom.*', 2, subdir )
        self.grep_test_directories( 'double.*', 6, subdir )
        self.grep_test_directories( 'double.one*val1*', 3, subdir )
        self.grep_test_directories( 'double.one*val2*', 3, subdir )
        self.grep_test_directories( 'double*two*gimp', 2, subdir )
        self.grep_test_directories( 'double*val1*val2*', 0, subdir )
        self.grep_test_directories( 'double*val2*val1*', 0, subdir )

    def test_generating_a_parameterized_test(self):
        """
        a parameterized test
        """
        util.writefile( "null.vvt", """
            """ )
        util.writefile( "boom.vvt", """
            #VVT: parameterize : hello = world mars
            import time, vvtest_util as vvt
            time.sleep(1)
            print ( 'parm='+vvt.hello )
            """ )

        vtu.runvvtest( '-g' ).assertCounts( total=3, notrun=3 )
        self.grep_testlist( 'null', 1 )
        self.grep_testlist( 'boom', 2 )
        self.grep_testlist( 'hello*world', 1 )
        self.grep_testlist( 'hello*mars', 1 )

        util.writefile( "double.vvt", """
            #VVT: parameterize : one = val1 val2
            #VVT: parameterize : two = spot skip gimp
            """)
        time.sleep(1)

        vtu.runvvtest( '-g' ).assertCounts( total=9, notrun=9 )
        self.assert_9_testlist()

    def test_when_files_are_in_a_subdirectory(self):
        ""
        os.mkdir('temp1')
        os.mkdir('temp2')
        os.mkdir('temp3')
        util.writefile( "subdir/null.vvt", """
            """ )
        util.writefile( "subdir/param.vvt", """
            #VVT: testname = boom
            #VVT: parameterize : hello = world mars
            import time, vvtest_util as vvt
            time.sleep(1)
            print ( 'parm='+vvt.hello )
            """ )
        util.writefile( "subdir/double.vvt", """
            #VVT: parameterize : one = val1 val2
            #VVT: parameterize : two = spot skip gimp
            """)

        vtu.runvvtest( '-g' ).assertCounts( total=9, notrun=9 )
        self.assert_9_testlist()

        vtu.remove_results()

        # put the name of the subdir on the command line

        vrun = vtu.runvvtest( '-g ../subdir', chdir='temp1' )
        vrun.assertCounts( total=9, notrun=9 )
        self.assert_9_testlist( 'temp1' )

        # try an absolute path

        vrun = vtu.runvvtest( '-g '+os.path.abspath( 'subdir' ), chdir='temp2' )
        vrun.assertCounts( total=9, notrun=9 )
        self.assert_9_testlist( 'temp2' )
        assert not os.path.exists('temp2/testlist')

        # check the runscript with -g
        vrun = vtu.runvvtest( '-g ../subdir', chdir='temp3' )
        self.assert_9_test_directories( 'temp3' )

    def test_that_generate_applies_filtering(self):
        ""
        util.writefile( "one.vvt", """
            #VVT: keywords : foo
            """ )
        util.writefile( "two.vvt", """
            #VVT: keywords : bar
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '-g' )
        vrun.assertCounts( total=2, notrun=2 )
        assert util.globfile( 'TestResults*/one' )
        assert util.globfile( 'TestResults*/two' )

        vtu.remove_results()
        vrun = vtu.runvvtest( '-g -k foo' )
        vrun.assertCounts( total=1, notrun=1 )
        assert util.globfile( 'TestResults*/one' )
        assert len( glob.glob( 'TestResults*/two' ) ) == 0

    def test_that_TestResults_and_Build_directories_are_excluded_from_scans(self):
        ""
        util.writefile( "one.vvt", """
            print ( 'one ran' )
            """ )

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=1, npass=1 )

        util.writefile( vrun.resultsDir()+'/two.vvt', """
            print ( 'two ran' )
            """ )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=0 )

        vtu.runvvtest( '-R' ).assertCounts( total=1, npass=1 )

        os.mkdir( 'Build_gnu4_opt' )
        util.writefile( "Build_gnu4_opt/three.vvt", """
            print ( 'three ran' )
            """ )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=0 )

        vtu.runvvtest( '-R' ).assertCounts( total=1, npass=1 )

    def test_that_soft_links_are_followed(self):
        ""
        util.writefile( "one/one.vvt", """
            print ( 'one ran' )
            """ )
        util.writefile( "two/two.vvt", """
            print ( 'two ran' )
            """ )
        util.writefile( "three/three.vvt", """
            print ( 'three ran' )
            """ )

        os.symlink( '../two/two.vvt', 'one/two.vvt' )

        os.mkdir( 'subdir' )
        os.symlink( '../three', 'subdir/symthree' )

        os.symlink( '../subdir', 'one/symdir' )

        time.sleep(1)

        vtu.runvvtest( 'one' ).assertCounts( total=3, npass=3 )

    def test_selection_by_keyword_when_multiple_tests_are_in_one_file(self):
        ""
        util.writefile( "multi.vvt", """
            #VVT: testname = multi
            #VVT: testname = multi_2nd
            #VVT: keywords : common
            #VVT: keywords (testname=multi) : justmulti
            #VVT: keywords (testname=multi_2nd) : just2nd
            import vvtest_util as vvt
            print ( 'test name '+vvt.NAME+'XXX' )
            """ )

        vrun = vtu.runvvtest( '-k justmulti' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.countGrepLogs( 'test name multiXXX' ) == 1
        assert vrun.countGrepLogs( 'test name multi_2ndXXX' ) == 0

        vrun = vtu.runvvtest( '-w -k just2nd' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.countGrepLogs( 'test name multiXXX' ) == 0
        assert vrun.countGrepLogs( 'test name multi_2ndXXX' ) == 1

        vrun = vtu.runvvtest( '-w -k common' )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.countGrepLogs( 'test name multiXXX' ) == 1
        assert vrun.countGrepLogs( 'test name multi_2ndXXX' ) == 1

    def test_parameters_that_depend_on_test_name(self):
        ""
        util.writefile( "multi.vvt", """
            #VVT: testname = multi
            #VVT: testname = multi_2nd
            #VVT: parameterize (testname=multi) : paramA = one two
            #VVT: parameterize (testname=multi_2nd) : paramA = three four five
            import vvtest_util as vvt
            print ( 'test name '+vvt.NAME+'XXX' )
            """ )

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=5, npass=5 )
        assert vrun.countTestLines( 'multi.paramA=one' ) == 1
        assert vrun.countTestLines( 'multi.paramA=two' ) == 1
        assert vrun.countTestLines( 'multi_2nd.paramA=three' ) == 1
        assert vrun.countTestLines( 'multi_2nd.paramA=four' ) == 1
        assert vrun.countTestLines( 'multi_2nd.paramA=five' ) == 1
        assert vrun.countGrepLogs( 'test name multiXXX' ) == 2
        assert vrun.countGrepLogs( 'test name multi_2ndXXX' ) == 3

        util.writefile( "multi.vvt", """
            #VVT: testname = multi
            #VVT: testname = multi_2nd
            #VVT: parameterize (testname=multi) : paramA = one two
            #VVT: parameterize (testname=multi_2nd) : paramB = three four five
            import vvtest_util as vvt
            print ( 'test name '+vvt.NAME+'XXX' )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '-w' )
        vrun.assertCounts( total=5, npass=5 )
        assert vrun.countTestLines( 'multi.paramA=one' ) == 1
        assert vrun.countTestLines( 'multi.paramA=two' ) == 1
        assert vrun.countTestLines( 'multi_2nd.paramB=three' ) == 1
        assert vrun.countTestLines( 'multi_2nd.paramB=four' ) == 1
        assert vrun.countTestLines( 'multi_2nd.paramB=five' ) == 1
        assert vrun.countGrepLogs( 'test name multiXXX' ) == 2
        assert vrun.countGrepLogs( 'test name multi_2ndXXX' ) == 3

        vrun = vtu.runvvtest( '-w -p paramB' )
        vrun.assertCounts( total=3, npass=3 )
        assert vrun.countTestLines( 'multi.paramA=one' ) == 0
        assert vrun.countTestLines( 'multi.paramA=two' ) == 0
        assert vrun.countTestLines( 'multi_2nd.paramB=three' ) == 1
        assert vrun.countTestLines( 'multi_2nd.paramB=four' ) == 1
        assert vrun.countTestLines( 'multi_2nd.paramB=five' ) == 1
        assert vrun.countGrepLogs( 'test name multiXXX' ) == 0
        assert vrun.countGrepLogs( 'test name multi_2ndXXX' ) == 3

    def test_that_restarts_do_not_modify_the_testlist(self):
        ""
        util.writefile( "one.vvt", """
            #VVT: keywords : foo
            """ )
        util.writefile( "two.vvt", """
            #VVT: keywords : bar
            """ )
        util.writefile( "three.vvt", """
            #VVT: keywords : bar baz
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-k bar/baz', batch=batch )
            vrun.assertCounts( total=2, npass=2 )
            assert vrun.getTestIds() == [ 'three', 'two' ]

            tdir = vrun.resultsDir()

            # run inside test results directory with new keyword expression
            vrun = vtu.runvvtest( '-R -k baz', chdir=tdir, batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            assert vrun.getTestIds() == [ 'three' ]

            # this should run the union of all tests that have previously run
            vrun = vtu.runvvtest( '-R', chdir=tdir, batch=batch )
            vrun.assertCounts( total=2, npass=2 )
            assert vrun.getTestIds() == [ 'three', 'two' ]

            # running outside always rescans & recomputes the test list
            vrun = vtu.runvvtest( '-k foo/baz', batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            assert vrun.getTestIds() == [ 'one' ]

            # the union has grown
            vrun = vtu.runvvtest( '-R', chdir=tdir, batch=batch )
            vrun.assertCounts( total=3, npass=3 )
            assert vrun.getTestIds() == [ 'one', 'three', 'two' ]


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
