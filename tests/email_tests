#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: trig

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import unittest

import trigtestutils as trigutil
import testutils as util
from testutils import print3

# this is the module we are testing
import mailmessage as MM


class utility_functions( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_get_user_name(self):
        ""
        usr = MM.get_current_user_name()
        assert usr and usr != 'unknown'

        usr = MM.get_current_user_name( try_getpass=False )
        assert usr and usr != 'unknown'

        usr = MM.get_current_user_name( try_getpass=False, try_homedir=False )
        assert usr and usr == 'unknown'

    def test_create_sender_address(self):
        ""
        assert MM.create_sender_address( 'foo@bar' ) == 'foo@bar'

        addr = MM.create_sender_address( None )
        assert addr and len( addr.split('@') ) == 2

    def test_make_list(self):
        ""
        assert MM._make_list( 'foobar' ) == [ 'foobar' ]

        assert MM._make_list( [ 'foo', 'bar' ] ) == [ 'foo', 'bar' ]

    def test_make_message(self):
        ""
        msg = MM._make_message( 'line1\nline2\n', 'plain' )
        assert 'line2' in msg.as_string()
        assert msg.get_content_subtype() == 'plain'

        msg = MM._make_message( 'line1\nline2\n', 'html' )
        assert 'line2' in msg.as_string()
        assert msg.get_content_subtype() == 'html'


class MockSMTP:

    cache = {}

    def __init__(self, host, **kwargs):
        ""
        MockSMTP.cache[ 'host' ] = host
        MockSMTP.cache[ 'timeout' ] = kwargs.get( 'timeout', None )

    def sendmail(self, sendaddr, recvaddrs, msg_as_string):
        ""
        MockSMTP.cache[ 'sendaddr' ] = sendaddr
        MockSMTP.cache[ 'recvaddrs' ] = recvaddrs
        MockSMTP.cache[ 'msg_as_string' ] = msg_as_string

    def close(self):
        ""
        MockSMTP.cache[ 'close' ] = True


class integration_tests( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_compose_message_but_do_not_send(self):
        ""
        msg = MM.Message( 'foo@bar', 'my subject' )
        msg.setContent( 'my content' )

        frm,to,subj,body = msg.send( smtpclass=None )

        assert 'foo@bar' in to
        assert 'my subject' in subj
        assert 'my content' in str(body)

    def test_send_basic_text_message(self):
        ""
        MockSMTP.cache.clear()

        msg = MM.Message( 'foo@bar', 'my subject' )
        msg.setContent( 'my content' )
        msg.send( smtpclass=MockSMTP )

        assert MockSMTP.cache['host'] == 'localhost'

        assert len( MockSMTP.cache['sendaddr'].split('@') ) == 2

        rcv = MockSMTP.cache['recvaddrs']
        assert len(rcv) == 1 and rcv[0] == 'foo@bar'

        assert 'my content' in MockSMTP.cache['msg_as_string']

        assert MockSMTP.cache['close'] == True

    def test_send_with_more_than_one_receiver(self):
        ""
        MockSMTP.cache.clear()

        msg = MM.Message( 'foo@bar another@one ', 'my subject' )
        msg.setContent( 'my content' )
        msg.send( smtpclass=MockSMTP )

        assert len( MockSMTP.cache['sendaddr'].split('@') ) == 2

        rcv = MockSMTP.cache['recvaddrs']
        assert len(rcv) == 2 and rcv[0] == 'foo@bar' and rcv[1] == 'another@one'

        assert MockSMTP.cache['close'] == True

    def test_send_with_python_list_of_receivers(self):
        ""
        MockSMTP.cache.clear()

        msg = MM.Message( ['foo@bar','another@one'], 'my subject' )
        msg.setContent( 'my content' )
        msg.send( smtpclass=MockSMTP )

        assert len( MockSMTP.cache['sendaddr'].split('@') ) == 2

        rcv = MockSMTP.cache['recvaddrs']
        assert len(rcv) == 2 and rcv[0] == 'foo@bar' and rcv[1] == 'another@one'

        assert MockSMTP.cache['close'] == True

    def test_setting_the_sender_address(self):
        ""
        MockSMTP.cache.clear()

        msg = MM.Message( 'foo@bar', 'my subject' )
        msg.set( sendaddr='me@mymachine' )
        msg.send( smtpclass=MockSMTP )

        assert MockSMTP.cache['sendaddr'] == 'me@mymachine'

    def test_using_html_subtype(self):
        ""
        MockSMTP.cache.clear()

        msg = MM.Message( 'foo@bar', 'my subject' )
        msg.setContent( '<h1>My Heading</h1>', subtype='html' )
        msg.send( smtpclass=MockSMTP )

        sm = MockSMTP.cache['msg_as_string']
        assert '<html>' in sm and '<body>' in sm
        assert '</html>' in sm and '</body>' in sm
        assert '<h1>My Heading</h1>' in sm

    def test_send_a_message_with_timeout_on_smtp_server(self):
        ""
        MockSMTP.cache.clear()

        msg = MM.Message( 'foo@bar', 'my subject' )
        msg.setContent( 'my content' )
        msg.send( timeout=10, smtpclass=MockSMTP )

        assert MockSMTP.cache['host'] == 'localhost'
        assert MockSMTP.cache['timeout'] == 10

        assert len( MockSMTP.cache['sendaddr'].split('@') ) == 2

        rcv = MockSMTP.cache['recvaddrs']
        assert len(rcv) == 1 and rcv[0] == 'foo@bar'

        assert 'my content' in MockSMTP.cache['msg_as_string']

        assert MockSMTP.cache['close'] == True


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
