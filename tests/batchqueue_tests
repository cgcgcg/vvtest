#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time
from textwrap import dedent

import vvtestutils as vtu
import testutils as util

from batch.qinterface import BatchQueueInterface
from batch.qinterface import batch_system_factory

import batch.helpers as helpers
import batch.procbatch as procbatch
import batch.slurm as slurm
import batch.lsf as lsf
import batch.craypbs as craypbs
import batch.pbs as pbs
import batch.moab as moab


class function_tests( vtu.vvtestTestCase ):

    def test_the_runcmd_function(self):
        ""
        os.mkdir('work')

        x,cmd,out = helpers.runcmd( [ 'uname', '-a' ] )

        assert x == 0
        assert os.uname()[1] in out.strip()
        assert 'uname' in cmd

        x,cmd,out = helpers.runcmd( ['diff','fakefile1','fakefile2'] )
        assert x != 0

        x,cmd,out = helpers.runcmd( ['/some/fake/path/asdjkfjkdskdfks'] )
        assert x != 0

        cmdL = [sys.executable,'-c','fp = open("mark","wt"); fp.close()']
        x,cmd,out = helpers.runcmd( cmdL, chdir='work' )
        assert x == 0 and os.path.isfile( 'work/mark' )

        cmdL = [sys.executable,'-c','print ( "grep_this_string" )']
        rtn,cout,cerr = util.call_capture_output( helpers.runcmd, cmdL, echo=True )
        x,cmd,out = rtn
        assert x == 0 and sys.executable in cmd and 'grep_this_string' in out
        assert sys.executable in cout and 'grep_this_string' in cout
        assert not cerr

    def test_queue_type_construction(self):
        ""
        for qtype in ['procbatch','craypbs','pbs','slurm','moab','lsf']:
            bq = BatchQueueInterface( {'batchsys':qtype, 'ppn':12} )
            assert bq.getNodeSize() == (12,None)

    def test_formatting_extra_flags(self):
        ""
        self.assertEqual( helpers.format_extra_flags( None ), [] )
        self.assertEqual( helpers.format_extra_flags( ('-f',) ), ['-f'] )
        self.assertEqual( helpers.format_extra_flags( '-V' ), ['-V'] )
        self.assertEqual( helpers.format_extra_flags( ['-v','var=val'] ), ['-v','var=val'] )
        self.assertEqual( helpers.format_extra_flags( '-v var=val' ), ['-v','var=val'] )
        self.assertRaises( ValueError, helpers.format_extra_flags, 23 )


class procbatch_tests( vtu.vvtestTestCase ):

    def test_nominal_execution(self):
        ""
        util.writefile( 'script', """
            echo "running script"
            touch """+abspath( 'touch.txt' )+"""
            """ )
        script = abspath('script')
        outfile = abspath('out.txt')

        obj = batch_system_factory( {'batchsys':'procbatch', 'ppn':8} )

        hdr = obj.header( (1,8,0), 123, abspath('out.txt') )

        jobid,cmd,out = obj.submit( script, outfile )

        time.sleep(1)
        while True:
            jobD,cmd,out = obj.query( [jobid] )
            if len(jobD) > 0:
                assert len( jobD ) == 1
                assert jobD[jobid] == 'running'
            else:
                break

        assert os.path.exists( 'touch.txt' )
        assert len( util.grepfiles( 'running script', 'out.txt' ) ) == 1


class slurm_tests( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp(self)

        write_mock_script( 'bin/sbatch', """
            Submitted batch job 291041
            """ )

        write_mock_script( 'bin/squeue', """
            15994641 PD
            16004759 PD
            16004368 R
            291041 PD
            16001384 CD
            """ )

        write_mock_script( 'bin/scancel', "" )

        self.save_PATH = os.environ.get( 'PATH', None )
        os.environ['PATH'] = abspath('bin')+':'+os.environ.get( 'PATH', '/bin' )

    def tearDown(self):
        ""
        os.environ['PATH'] = self.save_PATH

    def test_implementation_functions(self):
        ""
        obj = batch_system_factory( { 'batchsys':'slurm',
                                      'ppn':16,
                                      'account':'foo',
                                      'QoS':'bar' } )

        hdrL = obj.header( (3,8,0), 123, abspath('out.txt') )

        assert len( util.greplines( 'SBATCH *--nodes=3', hdrL ) ) == 1
        assert len( util.greplines( 'SBATCH *--account=foo', hdrL ) ) == 1
        assert len( util.greplines( 'SBATCH *--qos=bar', hdrL ) ) == 1

        jobid,cmd,out = obj.submit( 'batchscript', 'out_filename' )
        self.assertEqual( jobid, '291041' )

        jobs,cmd,out = obj.query( [ '16004368', '16014368' ] )
        self.assertEqual( jobs, {'16004368':'running'} )

        obj.cancel( '123456' )
        cmdL = eval( util.readfile( 'bin/scancel.out' ).strip() )
        self.assertEqual( cmdL[1], '123456' )

    def test_submit_error(self):
        ""
        util.writescript( 'bin/sbatch', """
            #!"""+sys.executable+"""
            raise Exception( 'fake exception' )
            """ )

        obj = batch_system_factory( { 'batchsys':'slurm'} )
        jobid,cmd,out = obj.submit( 'foo', 'bar' )
        # print ( out )
        assert jobid is None
        assert 'sbatch' in cmd
        assert 'fake exception' in out

    def test_batch_queue_interface(self):
        ""
        check_batch_queue_interface( 'slurm', '291041',
                                     {'extra_flags':'--fake-flag fakevalue'} )

        cmdL = eval( util.readfile( 'bin/sbatch.out' ) )
        i = cmdL.index( '--fake-flag' )
        self.assertEqual( cmdL[i+1], 'fakevalue' )

        assert 'scancel' in util.readfile( 'bin/scancel.out' )


class lsf_tests( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp(self)

        write_mock_script( 'bin/bsub', """
            Job <68628> is submitted to default queue <normal>.
            """ )

        write_mock_script( 'bin/bjobs', """
            68628   PEND
            68728   RUN
            """ )

        write_mock_script( 'bin/bkill', "" )

        self.save_PATH = os.environ.get( 'PATH', None )
        os.environ['PATH'] = abspath('bin')+':'+os.environ.get( 'PATH', '/bin' )

    def tearDown(self):
        ""
        os.environ['PATH'] = self.save_PATH

    def test_implementation_functions(self):
        ""
        obj = batch_system_factory( {'batchsys':'lsf', 'ppn':44} )

        hdrL = obj.header( (3,8,0), 123, abspath('out.txt') )
        assert len( util.greplines( 'BSUB *-nnodes 3', hdrL ) ) == 1

        jobid,cmd,out = obj.submit( 'batchscript', 'out_filename' )
        self.assertEqual( jobid, '68628' )

        jobs,cmd,out = obj.query( [ '68628', '68728', '38594' ] )
        self.assertEqual( jobs, {'68628': 'pending', '68728': 'running'} )

        obj.cancel( '123456' )
        cmdL = eval( util.readfile( 'bin/bkill.out' ).strip() )
        assert len(cmdL) == 2 and cmdL[1] == '123456'

    def test_batch_queue_interface(self):
        ""
        check_batch_queue_interface( 'lsf', '68628',
                                     {'extra_flags':'--fake-flag fakevalue'} )

        cmdL = eval( util.readfile( 'bin/bsub.out' ) )
        i = cmdL.index( '--fake-flag' )
        self.assertEqual( cmdL[i+1], 'fakevalue' )

        assert 'bkill' in util.readfile( 'bin/bkill.out' )


class craypbs_tests( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp(self)

        write_mock_script( 'bin/msub', """
            123457.sdb
            """ )

        write_mock_script( 'bin/showq', """
            123456.sdb n/a Running field
            12345.sdb n/a Running field
            123457.sdb n/a Idle field
            """ )

        # batch cancel not implemented for craypbs

        self.save_PATH = os.environ.get( 'PATH', None )
        os.environ['PATH'] = abspath('bin')+':'+os.environ.get( 'PATH', '/bin' )

    def tearDown(self):
        ""
        os.environ['PATH'] = self.save_PATH

    def test_implementation_functions(self):
        ""
        obj = batch_system_factory( {'batchsys':'craypbs', 'ppn':16} )

        hdrL = obj.header( (3,8,0), 123, abspath('out.txt') )
        assert len( util.greplines( 'MSUB*nodes*3', hdrL ) ) == 1

        jobid,cmd,out = obj.submit( 'batchscript', 'out_filename' )
        self.assertEqual( jobid, '123457.sdb' )

        jobs,cmd,out = obj.query( [ '12345.sdb', '123457.sdb', '7345.sdb' ] )
        self.assertEqual( jobs, {'123457.sdb':'pending', '12345.sdb':'running'} )

    def test_batch_queue_interface(self):
        ""
        check_batch_queue_interface( 'craypbs', '123457.sdb',
                                     {'extra_flags':'--fake-flag fakevalue'} )

        cmdL = eval( util.readfile( 'bin/msub.out' ) )
        i = cmdL.index( '--fake-flag' )
        self.assertEqual( cmdL[i+1], 'fakevalue' )


class pbs_tests( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp(self)

        write_mock_script( 'bin/qsub', """
            123456.ladmin1
            """ )

        write_mock_script( 'bin/qstat', """
            123456.ladmin1 field1 field2 field3 Q field6
            12345.ladmin1 field1 field2 field3 R field6
            123457.ladmin1 field1 field2 field3 C field6
            """ )

        # batch cancel not implemented for pbs

        self.save_PATH = os.environ.get( 'PATH', None )
        os.environ['PATH'] = abspath('bin')+':'+os.environ.get( 'PATH', '/bin' )

    def tearDown(self):
        ""
        os.environ['PATH'] = self.save_PATH

    def test_implementation_functions(self):
        ""
        obj = batch_system_factory( {'batchsys':'pbs', 'ppn':16} )

        hdr = obj.header( (1,8,0), 123, abspath('out.txt') )
        assert 'PBS' in hdr

        jobid,cmd,out = obj.submit( 'batchscript', 'out_filename' )
        self.assertEqual( jobid, '123456.ladmin1' )

        jobs,cmd,out = obj.query(
                    [ '12345.ladmin1', '123456.ladmin1', '7345.ladmin1' ] )
        self.assertEqual( jobs, {'123456.ladmin1':'pending',
                                 '12345.ladmin1':'running'} )

    def test_batch_queue_interface(self):
        ""
        check_batch_queue_interface( 'pbs', '123456.ladmin1',
                                     {'extra_flags':'--fake-flag fakevalue'} )

        cmdL = eval( util.readfile( 'bin/qsub.out' ) )
        i = cmdL.index( '--fake-flag' )
        self.assertEqual( cmdL[i+1], 'fakevalue' )


class moab_tests( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp(self)

        write_mock_script( 'bin/msub', """
            123456.ladmin1
            """ )

        write_mock_script( 'bin/showq', """
            123456.ladmin1 field1 Deferred field3
            12345.ladmin1 field1 Running field3
            123457.ladmin1 field1 Idle field3
            """ )

        # batch cancel not implemented for moab

        self.save_PATH = os.environ.get( 'PATH', None )
        os.environ['PATH'] = abspath('bin')+':'+os.environ.get( 'PATH', '/bin' )

    def tearDown(self):
        ""
        os.environ['PATH'] = self.save_PATH

    def test_implementation_functions(self):
        ""
        obj = batch_system_factory( {'batchsys':'moab', 'ppn':16} )

        hdr = obj.header( (1,8,0), 123, abspath('out.txt') )
        assert 'MSUB' in hdr

        jobid,cmd,out = obj.submit( 'batchscript', 'out_filename' )
        self.assertEqual( jobid, '123456.ladmin1' )

        jobs,cmd,out = obj.query(
                    [ '12345.ladmin1', '123456.ladmin1', '7345.ladmin1' ] )
        self.assertEqual( jobs, {'123456.ladmin1':'pending',
                                 '12345.ladmin1':'running'} )

    def test_batch_queue_interface(self):
        ""
        check_batch_queue_interface( 'moab', '123456.ladmin1',
                                     {'extra_flags':'--fake-flag fakevalue'} )

        cmdL = eval( util.readfile( 'bin/msub.out' ) )
        i = cmdL.index( '--fake-flag' )
        self.assertEqual( cmdL[i+1], 'fakevalue' )


def check_batch_queue_interface( batchsys, jobid, add_attrs={} ):
    ""
    os.mkdir('work')
    wrk,out,scr = abspath('work'), abspath('work/out'), abspath('work/scr')

    attrs = {'batchsys':batchsys, 'ppn':13}
    attrs.update( add_attrs )
    bq = BatchQueueInterface( attrs )

    bq.writeJobScript( (1,1,0), 60, wrk, out, scr, 'fake command' )
    assert 'fake command' in util.readfile( scr )

    jid = bq.submitJob( wrk, out, scr )
    assert jid == jobid

    jobD = bq.queryJobs( [jid] )
    assert jobD == {jobid:'pending'}

    bq.cancelJobs( [123] )


def write_mock_script( filename, print_this ):
    ""
    lines = [ '#!'+sys.executable,
              'import os, sys' ]
    if print_this:
        lines.extend( [
            "print ( '''",
            dedent( print_this ).strip(),
            "''' )" ] )
    # a file is always written that contains the script arguments
    lines.extend( [
            "with open( '"+abspath(filename)+'.out'+"', 'wt' ) as fp:",
            "    fp.write( str(sys.argv) + os.linesep )" ] )
    util.writescript( filename, '\n'.join(lines)+'\n' )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
