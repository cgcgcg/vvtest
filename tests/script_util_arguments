#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import join as pjoin
from os.path import abspath
import time
import shutil
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3

# for unit testing the code in the config dir, such as script_utils
sys.path.insert( 1, vtu.cfgdir )

import script_util.arguments as argmod


class arguments_tests( vtu.vvtestTestCase ):

    def test_parse_specifications_become_attributes_in_the_returned_object(self):
        ""
        argv = [ 'foobar', '--verbose', 'check=no', 'key=value', '/some/path' ]

        args = argmod.parse_key_value_arguments( argv )
        assert not hasattr( args, 'check' )

        args = argmod.parse_key_value_arguments( argv, 'check=yes', 'key=' )
        assert args.check == 'no'
        assert args.key == 'value'

    def test_default_values(self):
        ""
        args = argmod.parse_key_value_arguments( [], 'check=yes', 'key=' )
        assert args.check == 'yes'
        assert args.key == ''

        args = argmod.parse_key_value_arguments( ['check=ok'],
                                                 'check=None',
                                                 'key=None' )
        assert args.check == 'ok'
        assert args.key == None

    def test_using_equal_sign_in_the_argument_is_optional(self):
        ""
        args = argmod.parse_key_value_arguments( ['check', 'ok'], 'check=val' )
        assert args.check == 'ok'

    def test_a_specification_without_equals_means_True_or_False(self):
        ""
        args = argmod.parse_key_value_arguments( ['check'], 'check', 'key' )
        assert args.check == True
        assert args.key == False


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
