#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import re

import vvtestutils as vtu
import testutils as util

from libvvtest.RuntimeConfig import FileSearcher


class filtering_by_file_search( vtu.vvtestTestCase ):

    def test_file_search_function(self):
        ""
        util.writefile( 'regexfile.txt', """
            One line 
            Line Two, then
            line thrEE""" )

        util.writefile( 'ok46.vvt', """
            #VVT: parameterize : np = 1 4
            #VVT: link : regexfile.txt
            """ )

        create_and_search_files( 'ok46.vvt', ['*.txt'], regexlist('One'), 2 )
        create_and_search_files( 'ok46.vvt', ['*.txt'], regexlist('three'), 2 )
        create_and_search_files( 'ok46.vvt', ['*.txt'], regexlist('line two'), 2 )
        create_and_search_files( 'ok46.vvt', ['*.txt'], regexlist('line one'), 0 )
        create_and_search_files( 'ok46.vvt', ['*.txt'], regexlist('LINE *THEN'), 0 )
        create_and_search_files( 'ok46.vvt', ['*.txt'], regexlist('LINE .*THEN'), 2 )
        create_and_search_files( 'ok46.vvt', ['*.txt'], regexlist('line $'), 2 )
        create_and_search_files( 'ok46.vvt', ['*.txt'], regexlist('line$'), 0 )
        create_and_search_files( 'ok46.vvt', ['*.nun','*.txt'], regexlist('LINE .*THEN'), 2 )
        create_and_search_files( 'ok46.vvt', ['*.nun','*.two'], regexlist('LINE .*THEN'), 0 )
        create_and_search_files( 'ok46.vvt', ['*.txt'], regexlist('nomatch','LINE .*THEN'), 2 )

        util.writefile( 'ok47.vvt', """
            #VVT: parameterize : np = 1 4
            #VVT: copy : regexfile.txt
            """ )

        create_and_search_files( 'ok47.vvt', ['*.txt'], regexlist('One'), 2 )
        create_and_search_files( 'ok47.vvt', ['*.txt'], regexlist('three'), 2 )
        create_and_search_files( 'ok47.vvt', ['*.txt'], regexlist('line two'), 2 )
        create_and_search_files( 'ok47.vvt', ['*.txt'], regexlist('line one'), 0 )
        create_and_search_files( 'ok47.vvt', ['*.txt'], regexlist('LINE *THEN'), 0 )
        create_and_search_files( 'ok47.vvt', ['*.txt'], regexlist('LINE .*THEN'), 2 )
        create_and_search_files( 'ok47.vvt', ['*.txt'], regexlist('line $'), 2 )
        create_and_search_files( 'ok47.vvt', ['*.txt'], regexlist('line$'), 0 )
        create_and_search_files( 'ok47.vvt', ['*.nun','*.txt'], regexlist('LINE .*THEN'), 2 )
        create_and_search_files( 'ok47.vvt', ['*.nun','*.two'], regexlist('LINE .*THEN'), 0 )
        create_and_search_files( 'ok47.vvt', ['*.txt'], regexlist('nomatch','LINE .*THEN'), 2 )

        util.writefile( 'ok48.vvt', """
            #VVT: testname = atest
            #VVT: parameterize : np = 1 4
            #VVT: copy : noexist.txt
            """ )

        create_and_search_files( 'ok48.vvt', ['*.txt'], regexlist('One'), 0 )

        util.writefile( 'ok49.vvt', """
            #VVT: testname = regexfile
            #VVT: parameterize : np = 1 4
            #VVT: copy : $NAME.txt
            """ )

        create_and_search_files( 'ok49.vvt', ['*.txt'], regexlist('One'), 2 )

        util.writefile( 'ok50.vvt', """
            #VVT: testname = regex
            #VVT: parameterize : np = 1 4
            #VVT: copy : ${NAME}file.txt
            """ )

        create_and_search_files( 'ok50.vvt', ['*.txt'], regexlist('One'), 2 )

    def test_filter_tests_by_input_file_search(self):
        ""
        util.writefile( 'solar.inp', """
            foo and bar
            this and that
            """ )
        util.writefile( 'solar.vvt', """
            #VVT: link : solar.inp
            print ( 'solar ran' )
            """ )

        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            vtu.remove_results()
            vrun = vtu.runvvtest( '--search foo', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            vtu.remove_results()
            vrun = vtu.runvvtest( '--search aliensrock', batch=batch )
            vrun.assertCounts( total=0 )

            vtu.remove_results()
            vrun = vtu.runvvtest( '--search foo', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            vrun = vtu.runvvtest( '-R --search aliensrock', batch=batch )
            vrun.assertCounts( total=0 )

            vrun = vtu.runvvtest( '-R --search foo', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

    def test_multiple_search_patterns(self):
        ""
        util.writefile( 'atest.vvt', """
            # covid 2019 bloodied 2020
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '-w --search covid' )
        vrun.assertCounts( total=1, npass=1 )

        vrun = vtu.runvvtest( '-w --search covid --search 2020' )
        vrun.assertCounts( total=1, npass=1 )

        vrun = vtu.runvvtest( '-w --search covid --search 2021' )
        vrun.assertCounts( total=1, npass=1 )


def regexlist( *patterns ):
    ""
    rxL = []
    for pat in patterns:
        rxL.append( re.compile( pat, re.IGNORECASE | re.MULTILINE ) )
    return rxL


def create_tests( relpath, platname='dummy', optlist=[] ):
    ""
    creator = vtu.creator( {}, platname, optlist )
    tL = creator.fromFile( relpath )
    sortL = [ (ts.getDisplayString(),ts) for ts in tL ]
    sortL.sort()
    tL = [ T[1] for T in sortL ]
    return tL


def create_and_search_files( filename, globlist, regexes, test_count ):
    ""
    tL = create_tests( filename )

    cnt = 0

    for tspec in tL:
        srch = FileSearcher( regexes, globlist )
        if srch.search( tspec.getFilename(),
                        tspec.getName(), tspec.getParameters(),
                        tspec.getLinkFiles()+tspec.getCopyFiles() ):
            cnt += 1

    assert cnt == test_count


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
