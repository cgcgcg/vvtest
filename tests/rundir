#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
from os.path import join as pjoin
import time
import shutil
from glob import glob
import stat

import vvtestutils as vtu
import testutils as util


class rundir_usage( vtu.vvtestTestCase ):

    def test_using_the_M_option(self):
        ""
        os.mkdir( 'mir' )

        util.writefile( "src/atest.vvt", """
            import os, sys
            dL = []
            for i in range(1000):
                d1 = os.getcwd()
                dL.append( os.path.basename(d1) )
                os.chdir( '..' )
                d2 = os.getcwd()
                if os.path.samefile( d1, d2 ):
                    break
            dL.reverse()
            print ( 'PWD='+repr( os.sep.join( dL ) ) )
            """)
        time.sleep(1)

        vrun = vtu.runvvtest( '-M', abspath('mir'), 'src' )
        vrun.assertCounts( total=1, npass=1 )

        pwd = eval( vrun.greplogs( 'PWD=' )[-1].split( 'PWD=', 1 )[1] )
        trd = util.globfile( pjoin( abspath('mir'), 'TestResults*', 'atest' ) )
        assert os.path.samefile( pwd, trd )
        assert os.path.islink( vrun.resultsDir() )

        vrun = vtu.runvvtest( '-R', chdir=vrun.resultsDir() )
        vrun.assertCounts( total=1, npass=1 )
        pwd2 = eval( vrun.greplogs( 'PWD=' )[-1].split( 'PWD=', 1 )[1] )
        assert pwd == pwd2

    def test_using_M_option_when_PWD_is_not_writable(self):
        ""
        # magic: not done; the desired behavior is to have the mirror
        #        directory created and just cd there and run
        #
        #   the changes needed expose a more general problem, which is that
        #   relative pathing is tangled up in the startup sequence
        #
        #   fixing the relative pathing would allow --run-dir to be an
        #   absolute path as well
        return

        os.mkdir( 'mir' )

        cdir = 'work'
        util.writefile( cdir+'/atest.vvt', """
            import vvtest_util as vvt
            """ )

        savefm = stat.S_IMODE( os.stat(cdir)[stat.ST_MODE] )
        fm = savefm & ( ~( stat.S_IWUSR | stat.S_IWGRP | stat.S_IWOTH ) )
        os.chmod( cdir, fm )

        time.sleep(1)

        try:
            vrun = vtu.runvvtest( '-M', abspath('mir'), chdir=cdir )
        finally:
            os.chmod( cdir, savefm )

        assert len( glob( cdir+'/TestResults*' ) ) == 0
        vrun.assertCounts( total=1, npass=1 )

    def test_rundir_with_single_path_segment(self):
        ""
        write_unit_test_files()

        for batch in [False,True]:

            rdir = 'myrundir.'+str(batch)

            vrun = vtu.runvvtest( '--run-dir '+repr(rdir), batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            assert len( glob( 'TestResults*' ) ) == 0
            assert os.path.isdir( rdir )
            assert len( glob( rdir+'/*/execute.log' ) ) == 2

    def test_rundir_as_an_absolute_path(self):
        ""
        write_unit_test_files()
        rdir = abspath( 'myrundir' )

        vrun = vtu.runvvtest( '--run-dir '+rdir )
        vrun.assertCounts( total=2, npass=2 )
        assert len( glob( rdir+'/*/execute.log' ) ) == 2

    def test_rundir_with_multiple_path_segments(self):
        ""
        write_unit_test_files()

        vrun = vtu.runvvtest( '--run-dir foo/bar' )
        vrun.assertCounts( total=2, npass=2 )
        assert len( glob( 'foo/bar/*/execute.log' ) ) == 2

    def test_rundir_with_multiple_path_segments_as_absolute_path(self):
        ""
        os.mkdir('xdir')
        write_unit_test_files()

        rdir = abspath('foo/bar')
        tsrc = os.getcwd()

        with util.change_directory('xdir'):
            vrun = vtu.runvvtest( '--run-dir '+rdir+' '+tsrc )
            vrun.assertCounts( total=2, npass=2 )
        assert len( glob( 'foo/bar/*/execute.log' ) ) == 2

    def test_using_rundir_option_and_M_option(self):
        ""
        for batch in [False,True]:

            util.rmallfiles()

            write_unit_test_files()
            os.mkdir( 'mymirror' )
            time.sleep(1)

            mymir = os.path.abspath( 'mymirror' )
            vrun = vtu.runvvtest( '--run-dir myrundir -M '+mymir, batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            assert len( glob( 'TestResults*' ) ) == 0

            assert os.path.islink( 'myrundir' )
            lnk = os.readlink( 'myrundir' )
            assert os.path.exists( lnk )
            assert os.path.samefile( lnk, 'mymirror/myrundir' )

            logL = glob( 'mymirror/myrundir/test*/execute.log' )
            assert len(logL) == 2

            logL = glob( 'myrundir/test*/execute.log' )
            assert len(logL) == 2

    def test_multi_segment_rundir_path_and_M_option(self):
        ""
        os.mkdir( 'mirdir' )
        mirdir = abspath('mirdir')
        write_unit_test_files()

        vrun = vtu.runvvtest( '--run-dir my/rundir -M '+mirdir )
        vrun.assertCounts( total=2, npass=2 )
        assert len( glob( 'my/rundir/test*/execute.log' ) ) == 2


def write_unit_test_files():
    ""
    util.write_py_script( 'testX.vvt', """
        #VVT: link = auxfile.txt
        import os, sys
        import vvtest_util as vvt
        fp = open( 'auxfile.txt', 'r' )
        sys.stdout.write( fp.read() )
        sys.stdout.flush()
        fp.close()
        """ )
    util.writefile( 'testY.vvt', """
        #VVT: link : auxfile.txt
        with open( 'auxfile.txt', 'rt' ) as fp:
            print ( fp.read() )
        """ )

    util.writefile( "auxfile.txt", """
        <rtest name="testY">
          <execute>
            cat auxfile.txt
          </execute>
        </rtest>""" )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
