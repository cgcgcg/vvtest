#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import platform
from os.path import abspath
from os.path import join as pjoin
import time

import vvtestutils as vtu
import testutils as util

from libvvtest.vvplatform import Platform
import libvvtest.testspec as testspec
import libvvtest.testcase as testcase
from libvvtest.tcfactory import TestCaseFactory


class unit( vtu.vvtestTestCase ):

    def test_sizing_with_np_and_ndevice(self):
        ""
        tc = make_testcase( { 'np':'6' } )
        self.assertEqual( tc.getSize(), (6,0) )

        tc = make_testcase( {} )
        self.assertEqual( tc.getSize(), (1,0) )

        tc = make_testcase( {'np':'0'} )
        self.assertEqual( tc.getSize(), (1,0) )

        tc = make_testcase( { 'ndevice':'3' } )
        self.assertEqual( tc.getSize(), (1,3) )

        tc = make_testcase( { 'ndevice':'0' } )
        self.assertEqual( tc.getSize(), (1,0) )

    def test_sizing_with_nnode_parameter(self):
        ""
        tc = make_testcase( { 'nnode':'1' }, (8,None) )
        self.assertEqual( tc.getSize(), (8,0) )

        tc = make_testcase( { 'nnode':'2' }, (7,None) )
        self.assertEqual( tc.getSize(), (14,0) )

        tc = make_testcase( { 'np':'8', 'nnode':'2' }, (7,None) )
        self.assertEqual( tc.getSize(), (14,0) )

        tc = make_testcase( { 'np':'8', 'nnode':'1' }, (7,None) )
        self.assertEqual( tc.getSize(), (8,0) )

        tc = make_testcase( { 'nnode':'2' } )
        self.assertEqual( tc.getSize(), (1,0) )

    def test_using_nnode_parameter_in_direct_mode(self):
        ""
        write_nnode_test_file( 'atest.vvt' )

        vrun = vtu.runvvtest( '-N 7' )
        vrun.assertCounts( total=1, npass=1 )
        self.assertEqual( extract_values( vrun, 'NP VALUE=' ),
                          {'atest.nnode=1':7} )
        self.assertEqual( extract_values( vrun, 'NDEVICE VALUE=' ),
                          {'atest.nnode=1':0} )

        vrun = vtu.runvvtest( '-w -N 7 --platopt ppn=3' )
        vrun.assertCounts( total=2, npass=2 )
        self.assertEqual( extract_values( vrun, 'NP VALUE=' ),
                          {'atest.nnode=1':3, 'atest.nnode=2':6} )
        self.assertEqual( extract_values( vrun, 'NDEVICE VALUE=' ),
                          {'atest.nnode=1':0,'atest.nnode=2':0} )

        vrun = vtu.runvvtest( '-w -N 7 --max-devices 5' )
        vrun.assertCounts( total=1, npass=1 )
        self.assertEqual( extract_values( vrun, 'NP VALUE=' ),
                          {'atest.nnode=1':7} )
        self.assertEqual( extract_values( vrun, 'NDEVICE VALUE=' ),
                          {'atest.nnode=1':5} )

        vrun = vtu.runvvtest( '-w -N 7 --platopt dpn=2' )
        vrun.assertCounts( total=1, npass=1 )
        self.assertEqual( extract_values( vrun, 'NP VALUE=' ),
                          {'atest.nnode=1':7} )
        self.assertEqual( extract_values( vrun, 'NDEVICE VALUE=' ),
                          {'atest.nnode=1':2} )

    def test_using_nnode_parameter_in_batch_mode(self):
        ""
        write_nnode_test_file( 'atest.vvt' )

        vrun = vtu.runvvtest( '-w --plat Linux --batch --platopt ppn=3' )
        vrun.assertCounts( total=2, npass=2 )
        self.assertEqual( extract_values( vrun, 'NP VALUE=' ),
                          {'atest.nnode=2': 6, 'atest.nnode=1': 3} )
        self.assertEqual( extract_values( vrun, 'NDEVICE VALUE=' ),
                          {'atest.nnode=1':0, 'atest.nnode=2':0} )

        vrun = vtu.runvvtest( '-w --plat Linux --batch --platopt ppn=5 --platopt dpn=3' )
        vrun.assertCounts( total=2, npass=2 )
        self.assertEqual( extract_values( vrun, 'NP VALUE=' ),
                          {'atest.nnode=2': 10, 'atest.nnode=1': 5} )
        self.assertEqual( extract_values( vrun, 'NDEVICE VALUE=' ),
                          {'atest.nnode=1': 3, 'atest.nnode=2': 6} )


def make_testcase( paramD, nodesize=None ):
    ""
    ts = testspec.TestSpec( 'atest', os.getcwd(), 'atest.vvt' )
    ts.setParameters( paramD )

    if nodesize is None:
        fact = TestCaseFactory()
    else:
        fact = TestCaseFactory( nodesize )

    return fact.new( ts )


def write_nnode_test_file( filename ):
    ""
    util.writefile( filename, """
        #VVT: parameterize : nnode = 1 2
        import vvtest_util as vvt
        print ( 'NP VALUE='+repr(vvt.RESOURCE_np) )
        print ( 'NDEVICE VALUE='+repr(vvt.RESOURCE_ndevice) )
        """ )


def extract_values( vrun, pat ):
    ""
    npvals = {}
    for testid in vrun.getTestIds():
        lines = vrun.greplogs( '^'+pat, testid )
        if len(lines) == 1:
            np = eval( lines[0].split(pat,1)[1].strip() )
            npvals[testid] = np
    return npvals


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
