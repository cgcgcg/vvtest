#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import platform
from os.path import abspath
from os.path import join as pjoin
import time

import vvtestutils as vtu
import testutils as util

from libvvtest.vvplatform import Platform
import libvvtest.testspec as testspec
import libvvtest.testcase as testcase
from libvvtest.tcfactory import TestCaseFactory


class unit( vtu.vvtestTestCase ):

    def test_platform_compute_node_size(self):
        ""
        plat = Platform()
        plat.initialize( 4, 8, 0, 0 )
        assert plat.getNodeSize() == 8

        plat = Platform( attrs={'batchsys':'procbatch'} )
        plat.initialize( 4, 8, 0, 0 )
        assert plat.getNodeSize() == 8

        plat = Platform( attrs={'ppn':23} )
        plat.initialize( 4, 8, 0, 0 )
        assert plat.getNodeSize() == 23

    def test_sizing_with_np_and_ndevice(self):
        ""
        tc = make_testcase( { 'np':'6' } )
        assert tc.getSize() == (6,0)

        tc = make_testcase( {} )
        assert tc.getSize() == (1,0)

        tc = make_testcase( { 'ndevice':'3' } )
        assert tc.getSize() == (1,3)

    def test_sizing_with_nnodes_parameter(self):
        ""
        tc = make_testcase( { 'nnode':'1' }, 8 )
        assert tc.getSize() == (8,0)

        tc = make_testcase( { 'nnode':'2' }, 7 )
        assert tc.getSize() == (14,0)

        tc = make_testcase( { 'np':'8', 'nnode':'2' }, 7 )
        assert tc.getSize() == (14,0)

        tc = make_testcase( { 'np':'8', 'nnode':'1' }, 7 )
        assert tc.getSize() == (8,0)

        tc = make_testcase( { 'nnode':'2' }, None )
        assert tc.getSize() == (1,0)



    def test_magic(self):
        ""
        # magic:
        #   - still need to test the max procs and max devices given to
        #     batch jobs

        util.writefile( 'cfgdir/platform_plugin.py', """
            def initialize( platobj ):
                platobj.setBatchSystem( 'procbatch', 7 )
            """ )

        util.writefile( 'atest.vvt', """
            #VVT: parameterize : nnode = 1 2
            """ )

        cfgdir = abspath( 'cfgdir' )

        vrun = vtu.runvvtest( '-N 3 --config '+cfgdir, batch=True )
        tdir = vrun.resultsDir()
        # vrun.assertCounts( total=2, npass=2 )


def make_testcase( paramD, nodesize=None ):
    ""
    ts = testspec.TestSpec( 'atest', os.getcwd(), 'atest.vvt' )
    ts.setParameters( paramD )

    fact = TestCaseFactory( nodesize )
    return fact.new( ts )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
