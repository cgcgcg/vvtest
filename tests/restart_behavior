#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3


class restart_tests( vtu.vvtestTestCase ):

    def test_run_then_fix_a_test_then_restart(self):
        ""
        for batch in [False,True]:

            util.writefile( 'atest.vvt', """
                #VVT: parameterize : timestep = 1 2
                #VVT: analyze : --analyze
                import os, sys, time, vvtest_util as vvt
                import script_util as util
                if '--analyze' not in sys.argv[1:]:
                    if vvt.timestep == '2':
                        raise Exception( 'fake exception' )
                    else:
                        with open( 'atest.'+vvt.timestep, 'wt' ):
                            pass
                else:
                    assert os.path.exists( '../atest.timestep=1/atest.1' )
                    assert os.path.exists( '../atest.timestep=2/atest.2' )
                """ )

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=1, fail=1, notrun=1 )

            # "fix" the test and restart
            util.writefile( 'atest.vvt', """
                #VVT: parameterize : timestep = 1 2
                #VVT: analyze : --analyze
                import os, sys, time, vvtest_util as vvt
                import script_util as util
                if '--analyze' not in sys.argv[1:]:
                    with open( 'atest.'+vvt.timestep, 'wt' ):
                        pass
                else:
                    assert os.path.exists( '../atest.timestep=1/atest.1' )
                    assert os.path.exists( '../atest.timestep=2/atest.2' )
                """ )
            time.sleep(1)

            vrun = vtu.runvvtest( '-k fail/notrun', batch=batch )
            vrun.assertCounts( total=2, npass=2 )

    def test_running_a_skipped_dependent_test(self):
        ""
        util.writefile( "testA.vvt", """
            raise Exception( 'fake exception' )
            """ )
        util.writefile( "testB.vvt", """
            #VVT: depends on : testA
            pass
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=2, fail=1, notrun=1 )

        util.writefile( 'testA.vvt', """
            pass
            """ )
        time.sleep(1)

        td = util.globfile( 'TestResults*/testA' )
        vrun = vtu.runvvtest( '-R', chdir=td )
        vrun.assertCounts( total=1, npass=1 )

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=1, npass=1 )

    def test_running_a_skipped_dependent_test_within_the_results_dir(self):
        ""
        util.writefile( "testA.vvt", """
            raise Exception( 'fake exception' )
            """ )
        util.writefile( "testB.vvt", """
            #VVT: depends on : testA
            pass
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=2, fail=1, notrun=1 )

        util.writefile( 'testA.vvt', """
            pass
            """ )
        time.sleep(1)

        td = util.globfile( 'TestResults*/testA' )
        vrun = vtu.runvvtest( '-R', chdir=td )
        vrun.assertCounts( total=1, npass=1 )

        td = util.globfile( 'TestResults*/testB' )
        vrun = vtu.runvvtest( chdir=td )
        vrun.assertCounts( total=1, npass=1 )

    def test_previously_skipped_tests_can_be_run(self):
        ""
        util.writefile( 'foo.vvt', """
            pass
            """ )
        util.writefile( 'bar.vvt', """
            pass
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == [ 'bar', 'foo' ]
        rdir = vrun.resultsDir()

        vrun = vtu.runvvtest( '-R -k foo' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == [ 'foo' ]

        vrun = vtu.runvvtest( '-R -k bar' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == [ 'bar' ]

        vrun = vtu.runvvtest( '-R', chdir=rdir )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == [ 'bar', 'foo' ]

        vrun = vtu.runvvtest( '-R -k foo', chdir=rdir )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == [ 'foo' ]

    def test_skipped_tests_are_still_skipped_inside_a_results_dir(self):
        ""
        util.writefile( 'foo.vvt', """
            pass
            """ )
        util.writefile( 'bar.vvt', """
            pass
            """ )
        util.writefile( 'baz.vvt', """
            pass
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '-k foo' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == [ 'foo' ]
        tdir = vrun.resultsDir()

        vrun = vtu.runvvtest( '-R', chdir=tdir )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == [ 'foo' ]

        vrun = vtu.runvvtest( '-R -k bar', chdir=tdir )
        vrun.assertCounts( total=0 )

        vrun = vtu.runvvtest( '-k bar' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == [ 'bar' ]

        vrun = vtu.runvvtest( '-R', chdir=tdir )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == [ 'bar', 'foo' ]

    def test_using_plat_option_in_restart_mode(self):
        ""
        util.writefile( 'config1/idplatform.py', """
            def get_platform():
                return 'XBox'
            """ )
        util.writefile( 'config2/idplatform.py', """
            def get_platform():
                return 'PlayStation'
            """ )
        util.writefile( 'xbox.vvt', """
            #VVT: enable (platforms="XBox")
            import vvtest_util as vvt
            assert vvt.PLATFORM == 'XBox', 'wrong platform: '+vvt.PLATFORM
            """ )
        util.writefile( 'ps.vvt', """
            #VVT: enable (platforms="PlayStation")
            import vvtest_util as vvt
            assert vvt.PLATFORM == 'PlayStation', 'wrong platform: '+vvt.PLATFORM
            """ )
        util.writefile( 'both.vvt', """
            #VVT: enable (platforms="XBox or PlayStation")
            """ )
        time.sleep(1)

        # filters by XBox
        vrun = vtu.runvvtest( "--config config1", addplatform=False )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == ['both','xbox']
        tdir = vrun.resultsDir()

        # restart but switch to PlayStation platform
        vrun = vtu.runvvtest( "-R --config", abspath('config2'),
                              chdir=tdir, addplatform=False )
        vrun.assertCounts( total=2, npass=1, fail=1 )
        assert vrun.getTestIds() == ['both','xbox']
        assert vrun.greplogs( 'wrong platform: PlayStation', 'xbox' )

        # but the --plat option is felt in restart mode
        vrun = vtu.runvvtest( "-R --plat PlayStation --config",
                              abspath('config1'), chdir=tdir, addplatform=False )
        vrun.assertCounts( total=2, npass=1, fail=1 )
        assert vrun.getTestIds() == ['both','xbox']
        assert vrun.greplogs( 'wrong platform: PlayStation', 'xbox' )

        # change default platform but specify --plat again
        vrun = vtu.runvvtest( "-R --plat PlayStation --config",
                              abspath('config2'), chdir=tdir, addplatform=False )
        vrun.assertCounts( total=2, npass=1, fail=1 )
        assert vrun.getTestIds() == ['both','xbox']
        assert vrun.greplogs( 'wrong platform: PlayStation', 'xbox' )

        vtu.remove_results()

        # specify --plat on a fresh vvtest command
        vrun = vtu.runvvtest( "--plat PlayStation --config config1",
                              addplatform=False )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == ['both','ps']
        tdir = vrun.resultsDir()

        # default platform is XBox but --plat PlayStation is remembered
        vrun = vtu.runvvtest( "-R --config", abspath('config1'),
                              chdir=tdir, addplatform=False )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == ['both','ps']

        # specifying --plat in restart mode takes precedence
        vrun = vtu.runvvtest( "-R --plat XBox --config",
                              abspath('config1'), chdir=tdir, addplatform=False )
        vrun.assertCounts( total=2, npass=1, fail=1 )
        assert vrun.getTestIds() == ['both','ps']
        assert vrun.greplogs( 'wrong platform: XBox', 'ps' )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
