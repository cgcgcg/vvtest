#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import time
import filecmp
import shutil
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3

import results

import results_util as ru

import libvvtest.fmtresults as fmtresults

timesfname = fmtresults.runtimes_filename
multifname = fmtresults.multiruntimes_filename


class test_results_tests( vtu.vvtestTestCase ):

    def test_merging_multiplatform_files_by_test_date_and_globbing(self):
        ""
        ru.write_test_cat()
        ru.write_test_dog()
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=2, npass=2 )
        tdir = vrun.resultsDir()

        # create a multiplatform timings file
        resultsfname = ru.create_runtimes_and_results_file( tdir )
        util.runcmd( vtu.resultspy + ' merge -x '+resultsfname )

        platcplr = ru.get_results_platform_compiler_id( resultsfname )

        time.sleep(1)  # force a gap between vvtest invocations

        # make the test diff this time
        util.writefile( "one/cat.xml", """
            <rtest name="cat">
                <execute>
                    sleep 1
                    set have_diff = 1
                </execute>
            </rtest>""" )
        # also remove the dog test
        os.remove( "one/dog.xml" )
        time.sleep(1)

        vrun = vtu.runvvtest( '-w' )
        vrun.assertCounts( total=1, diff=1 )

        # save a second results file
        vtu.runvvtest( '-i --save-results --results-tag diffs' )
        results2fname = ru.get_latest_results_filename()
        assert results2fname and resultsfname != results2fname

        # merge the second results file into the timings file
        util.runcmd( vtu.resultspy + ' merge -x '+results2fname )

        # check that the timings file contains the new test results
        root = os.path.basename( os.getcwd() )
        result = ru.get_multi_results_test_result( multifname, root+'/one/cat' )
        assert result == 'diff'

        # merge the first results file into the timings file
        util.runcmd( vtu.resultspy + ' merge -x '+resultsfname )

        # the timings file should NOT contain the first test results
        res = ru.get_multi_results_test_result( multifname, root+'/one/cat' )
        assert res == 'diff'

        # now force a merge from the first results file
        util.runcmd( vtu.resultspy + ' merge -w '+resultsfname )

        # the timings file should have been overwritten with the first test results
        res = ru.get_multi_results_test_result( multifname, root+'/one/cat' )
        assert res == 'pass'

        # modify the name of the old results file to test the -d option
        newfname = ru.rename_results_filename_to_5_days_ago( resultsfname )
        resultsfname = newfname

        # create the timings file with the newest results
        os.remove( multifname )
        util.runcmd( vtu.resultspy + ' merge -x '+results2fname )

        # the timings file should contain the new results and
        # not contain the dog test
        res = ru.get_multi_results_test_result( multifname, root+'/one/cat' )
        assert res == 'diff'
        res = ru.get_multi_results_test_result( multifname, root+'/one/dog' )
        assert not res

        # merge again with -d but should still just pick up latest results
        util.runcmd( vtu.resultspy + ' merge -d 2 -g results.*' )

        # the timings file should still contain only the latest results
        res = ru.get_multi_results_test_result( multifname, root+'/one/cat' )
        assert res == 'diff'
        res = ru.get_multi_results_test_result( multifname, root+'/one/dog' )
        assert not res

        # now merge from 6 days ago to catch the old results file
        util.runcmd( vtu.resultspy + ' merge -d 7 -g results.*' )

        # should be the latest cat results but the old dog test should appear
        res = ru.get_multi_results_test_result( multifname, root+'/one/cat' )
        assert res == 'diff'
        res = ru.get_multi_results_test_result( multifname, root+'/one/dog' )
        assert res == 'pass'

    def test_merging_a_multiplatform_file_into_another_multiplatform_file(self):
        ""
        ru.write_tests_cat_dog_circle( in_subdir='tsrc' )
        time.sleep(1)

        vrun = vtu.runvvtest( 'tsrc' )
        vrun.assertCounts( total=3, npass=3 )
        tdir = vrun.resultsDir()

        os.mkdir( 'testing' )
        os.environ['TESTING_DIRECTORY'] = os.path.abspath( 'testing' )

        resultsfname = ru.create_runtimes_and_results_file( tdir, 'tsrc' )

        # create initial multiplat file
        util.runcmd( vtu.resultspy + ' merge -x '+ resultsfname, chdir='testing' )
        assert os.path.exists( os.path.join( 'testing', multifname ) )

        resultsfname2 = os.path.abspath( 'testing/results2' )
        ru.copy_results_file_with_new_platid(
                resultsfname,
                resultsfname2,
                'Plat2/Cplr2' )

        # create second multiplat file in the current directory
        util.runcmd( vtu.resultspy + ' merge -x '+resultsfname2 )

        # merge second multiplat into first multiplat
        util.runcmd( vtu.resultspy + ' merge -x '+ os.path.abspath(multifname),
                     chdir='testing' )

        # check the combined multiplat file
        mr = fmtresults.MultiResults()
        mr.readFile( 'testing/'+multifname )
        assert mr.dirList() == ['tsrc/one','tsrc/two']
        assert mr.testList('tsrc/one') == ['cat','dog']
        assert mr.testList('tsrc/two') == ['circle']
        assert len( mr.platformList('tsrc/one','cat') ) == 2
        assert len( mr.platformList('tsrc/one','dog') ) == 2
        assert len( mr.platformList('tsrc/two','circle') ) == 2

    def test_creating_source_tree_runtimes_files(self):
        ""
        ru.write_tests_cat_dog_circle( in_subdir='tsrc' )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=3, npass=3 )
        tdir = vrun.resultsDir()

        os.mkdir( 'testing' )
        os.environ['TESTING_DIRECTORY'] = os.path.join( os.getcwd(), 'testing' )

        resultsfname = ru.create_runtimes_and_results_file( tdir, 'tsrc' )

        # save the results to the runtimes file
        util.runcmd( vtu.resultspy + ' save ' + resultsfname, chdir='tsrc' )

        ru.assert_results_file_has_tests(
                'tsrc/'+timesfname,
                'one/cat',
                'one/dog',
                'two/circle',
                topdir='tsrc' )

        # hold on to the runtime for the cat test
        cat_t1 = ru.get_results_test_time_from_file( resultsfname, 'tsrc/one/cat' )

        # increase the run time of cat test and run vvtest again
        util.writefile( "tsrc/one/cat.xml", """
            <rtest name="cat">
                <execute>
                    sleep 4
                </execute>
            </rtest>""" )
        time.sleep(1)

        vrun = vtu.runvvtest( '-w -k cat' )
        vrun.assertCounts( total=1, npass=1 )
        vtu.runvvtest( '-i --save-results --results-tag 2nd', chdir=tdir )

        rfn2 = os.path.abspath( util.globfile( 'testing/results.*.2nd' ) )

        cat_t2 = ru.get_results_test_time_from_file( rfn2, 'tsrc/one/cat' )
        assert cat_t1 < cat_t2

        # merge two results files into the runtimes file
        util.runcmd( vtu.resultspy + ' save ' + rfn2 + ' ' + resultsfname,
                     chdir='tsrc' )

        ru.assert_results_file_has_tests(
                'tsrc/'+timesfname,
                'one/cat',
                'one/dog',
                'two/circle',
                topdir='tsrc' )
        xt = ru.get_results_test_time_from_file( 'tsrc/'+timesfname, 'tsrc/one/cat' )
        # two instances of the cat test means the timings should be averaged
        assert abs( xt - (cat_t1+cat_t2)/2. ) < 1

        # modify a test then generate a multi platform results file
        util.writefile( "tsrc/two/circle.xml", """
            <rtest name="circle">
                <execute>
                    sleep 1
                </execute>
            </rtest>""" )
        time.sleep(1)

        vrun = vtu.runvvtest( '-w' )
        vrun.assertCounts( total=3, npass=3 )

        vtu.runvvtest( '-i --save-results --results-tag 3rd' )
        rfn3 = os.path.abspath( util.globfile( 'testing/results.*.3rd' ) )

        # force the results to be a different platform/compiler
        tr = fmtresults.TestResults( rfn3 )
        tr.writeResults( rfn3, 'Plat2', 'Cplr2', 'sparky', tdir )
        util.runcmd( vtu.resultspy + ' merge '+rfn3, chdir='testing' )

        # save off the circle runtime from first execution
        circ1 = ru.get_results_test_time_from_file( 'tsrc/'+timesfname, 'tsrc/two/circle' )

        # update the test src runtimes file to include the multiplat contents
        mf = os.path.abspath( 'testing/'+multifname )
        util.runcmd( vtu.resultspy + ' save '+mf, chdir='tsrc' )

        circ2 = ru.get_results_test_time_from_file( 'tsrc/'+timesfname, 'tsrc/two/circle' )
        assert circ1 != circ2
        xt = ru.get_multi_results_test_time(
                    'testing/'+multifname,
                    'tsrc/two/circle',
                    'Plat2/Cplr2' )
        assert xt == circ2

    def test_merging_using_the_default_merge_method(self):
        ""
        ru.write_test_cat( sleep_time=3 )
        ru.write_test_dog( sleep_time=1 )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=2, npass=2 )
        tdir = vrun.resultsDir()

        resultsfname = ru.create_runtimes_and_results_file( tdir )

        # create a multiplatform timings file
        util.runcmd( vtu.resultspy + ' merge '+resultsfname )

        platcplr = ru.get_results_platform_compiler_id( resultsfname )

        time.sleep(1)  # force a gap between vvtest invocations

        # make the test run faster
        ru.write_test_cat( sleep_time=1 )
        time.sleep(1)

        vrun = vtu.runvvtest( '-w' )
        vrun.assertCounts( total=2, npass=2 )

        # save a second results file
        vtu.runvvtest( '-i --save-results --results-tag faster' )
        results2fname = ru.get_latest_results_filename()
        assert results2fname and resultsfname != results2fname

        # get the old runtimes from the multiplat file
        root = os.path.basename( os.getcwd() )
        time_oldcat = ru.get_multi_results_test_time(
                            multifname,
                            root+'/one/cat',
                            platcplr )
        time_olddog = ru.get_multi_results_test_time(
                            multifname,
                            root+'/one/dog',
                            platcplr )

        # merge the second results file into the timings file
        util.runcmd( vtu.resultspy + ' merge '+results2fname )

        # check that the timings file contains the old test results
        time_cat = ru.get_multi_results_test_time(
                            multifname,
                            root+'/one/cat',
                            platcplr )
        assert time_cat == time_oldcat
        time_dog = ru.get_multi_results_test_time(
                            multifname,
                            root+'/one/dog',
                            platcplr )
        assert time_dog == time_olddog

        # make a test run slower
        ru.write_test_dog( sleep_time=3 )
        time.sleep(1)

        vrun = vtu.runvvtest( '-w' )
        vrun.assertCounts( total=2, npass=2 )

        # save a third results file
        vtu.runvvtest( '-i --save-results --results-tag slower' )
        results3fname = ru.get_latest_results_filename()
        assert results3fname and results2fname != results3fname

        # merge the third results file into the timings file
        util.runcmd( vtu.resultspy + ' merge '+results3fname )

        # check that the timings file contains new test results for the slower test
        time_newcat = ru.get_multi_results_test_time(
                            multifname,
                            root+'/one/cat',
                            platcplr )
        time_newdog = ru.get_multi_results_test_time(
                            multifname,
                            root+'/one/dog',
                            platcplr )

        # check that including all the results files does not change anything
        util.runcmd( vtu.resultspy + ' merge -d 6 -g results.*' )

        tcat = ru.get_multi_results_test_time(
                            multifname,
                            root+'/one/cat',
                            platcplr )
        assert tcat == time_newcat
        tdog = ru.get_multi_results_test_time(
                            multifname,
                            root+'/one/dog',
                            platcplr )
        assert tdog == time_newdog

    def test_merging_using_more_than_one_g_option(self):
        ""
        ru.write_test_cat( sleep_time=3 )
        ru.write_test_dog( sleep_time=1 )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=2, npass=2 )
        tdir = vrun.resultsDir()

        # create a multiplatform timings file
        util.runcmd( vtu.resultspy + ' save' )  # bootstrap runtimes
        vtu.runvvtest( '-i --save-results --results-tag first' )
        resultsfname = ru.get_latest_results_filename()

        platcplr = ru.get_results_platform_compiler_id( resultsfname )

        time.sleep(1)  # force a gap between vvtest invocations

        # make the test run faster
        ru.write_test_cat( sleep_time=1 )
        time.sleep(1)

        vrun = vtu.runvvtest( '-w' )
        vrun.assertCounts( total=2, npass=2 )

        # save a second results file
        vtu.runvvtest( '-i --save-results --results-tag second' )
        results2fname = ru.get_latest_results_filename()
        assert results2fname != resultsfname

        time.sleep(1)  # force a gap between vvtest invocations

        # make the test run slower
        ru.write_test_cat( sleep_time=6 )
        time.sleep(1)

        vrun = vtu.runvvtest( '-w' )
        vrun.assertCounts( total=2, npass=2 )

        # save a third results file
        vtu.runvvtest( '-i --save-results --results-tag third' )
        results3fname = ru.get_latest_results_filename()
        assert results3fname != resultsfname and results3fname != results2fname

        # merge the first and second results files
        util.runcmd( vtu.resultspy + ' merge' + \
                     ' -g results.*.first -g results.*.second' )

        # check that the timings file took the max
        root = os.path.basename( os.getcwd() )
        time_cat = ru.get_multi_results_test_time( multifname, root+'/one/cat' )
        assert abs( time_cat - 3 ) < 2

        # again but merge the second two results files
        os.remove( multifname )
        util.runcmd( vtu.resultspy + ' merge' + \
                     ' -g results.*.third -g results.*.second' )
        time_cat = ru.get_multi_results_test_time( multifname, root+'/one/cat' )
        assert abs( time_cat - 6 ) < 2

        # now merge by order on the command line
        os.remove( multifname )
        util.runcmd( vtu.resultspy + ' merge -w' + \
                     ' -g results.*.third -g results.*.first' )
        time_cat = ru.get_multi_results_test_time( multifname, root+'/one/cat' )
        assert time_cat < 6


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
