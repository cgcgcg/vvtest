#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util


class dependency_information( vtu.vvtestTestCase ):

    def test_analyze_only_restart(self):
        ""
        util.write_py_script( 'testX.vvt', """
            #VVT: depends on : testY testZ
            import os, glob
            import vvtest_util as vvt
            assert len( vvt.DEPDIRS ) == 2

            fL = glob.glob( os.path.join( vvt.DEPDIRS[0], '*.out' ) )
            assert len(fL) == 1

            fL = glob.glob( os.path.join( vvt.DEPDIRS[1], '*.out' ) )
            assert len(fL) == 1
            """ )
        util.write_py_script( 'sub1/testY.vvt', """
            fp = open( 'Y.out', 'w' )
            fp.close()
            """ )
        util.write_py_script( 'sub2/testZ.vvt', """
            fp = open( 'Z.out', 'w' )
            fp.close()
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            vrun = vtu.runvvtest( '-R -k testX', chdir=vrun.resultsDir(),
                                                 batch=batch )
            vrun.assertCounts( total=1, npass=1 )

    def test_restart_dependent_and_one_dependency(self):
        ""
        util.write_py_script( 'testX.vvt', """
            #VVT: depends on : testY testZ
            import os, glob
            import vvtest_util as vvt
            assert len( vvt.DEPDIRS ) == 2

            vvt.DEPDIRS.sort()

            fL = glob.glob( os.path.join( vvt.DEPDIRS[0], '*.out' ) )
            assert len(fL) == 1
            fp = open( fL[0], 'r' ) ; Yout = fp.read() ; fp.close()
            assert 'testY says hello' in Yout

            fL = glob.glob( os.path.join( vvt.DEPDIRS[1], '*.out' ) )
            assert len(fL) == 1
            fp = open( fL[0], 'r' ) ; Zout = fp.read() ; fp.close()
            assert 'testZ says goodbye' in Zout
            """ )
        util.write_py_script( 'sub1/testY.vvt', """
            import os, sys, time
            import vvtest_util as vvt
            time.sleep(3)
            fp = open( 'Y.out', 'w' )
            fp.write( 'testY does not say the right thing'+os.linesep )
            fp.close()
            sys.exit( vvt.diff_exit_status )
            """ )
        util.write_py_script( 'sub2/testZ.vvt', """
            import os, time
            time.sleep(3)
            fp = open( 'Z.out', 'w' )
            fp.write( 'testZ says goodbye'+os.linesep )
            fp.close()
            """ )
        time.sleep(1)

        for batch in [False,True]:

            util.write_py_script( 'sub1/testY.vvt', """
                import os, sys, time
                import vvtest_util as vvt
                time.sleep(3)
                fp = open( 'Y.out', 'w' )
                fp.write( 'testY does not say the right thing'+os.linesep )
                fp.close()
                sys.exit( vvt.diff_exit_status )
                """ )
            vtu.remove_results()
            time.sleep(1)

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=1, diff=1, fail=1 )

            # "fix" the test
            util.write_py_script( 'sub1/testY.vvt', """
                import os, time
                fp = open( 'Y.out', 'w' )
                fp.write( 'testY says hello'+os.linesep )
                fp.close()
                """ )
            time.sleep(1)

            vrun = vtu.runvvtest( '-R -k fail/diff', batch=batch,
                                                     chdir=vrun.resultsDir() )
            vrun.assertCounts( total=2, npass=2 )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
