#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util


class dependency_run_order( vtu.vvtestTestCase ):

    def test_the_dependency_should_run_first(self):
        ""
        write_test_script( 'testX.vvt', depends_on='testY' )
        write_test_script( 'testY.vvt', add_time2=True )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            timeY1,timeY2 = extract_times_from_log( 'testY' )
            timeX1,timeX2 = extract_times_from_log( 'testX' )

            assert timeX1 - timeY1 > 4
            assert not timeX1 < timeY2
            assert timeY2 - timeY1 > 4

    def test_run_order_on_a_three_test_dependency_chain(self):
        ""
        write_test_script( 'testX.vvt', depends_on='testY' )
        write_test_script( 'testY.vvt', depends_on='testZ', add_time2=True )
        write_test_script( 'testZ.vvt', add_time2=True )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            timeX1,timeX2 = extract_times_from_log( 'testX' )
            timeY1,timeY2 = extract_times_from_log( 'testY' )
            timeZ1,timeZ2 = extract_times_from_log( 'testZ' )

            assert timeX1-timeY1 > 4
            assert not timeX1 < timeY2
            assert timeY2-timeY1 > 4

            assert timeY2-timeZ1 > 4
            assert not timeY2 < timeZ2
            assert timeZ2-timeZ1 > 4

    def test_run_order_on_multiple_dependencies(self):
        ""
        write_test_script( 'testX.vvt', depends_on='testY testZ' )
        write_test_script( 'testY.vvt', add_time2=True )
        write_test_script( 'testZ.vvt', add_time2=True )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            timeX1,timeX2 = extract_times_from_log( 'testX' )
            timeY1,timeY2 = extract_times_from_log( 'testY' )
            timeZ1,timeZ2 = extract_times_from_log( 'testZ' )

            assert timeX1-timeY1 > 4
            assert not timeX1 < timeY2
            assert timeY2-timeY1 > 4

            assert timeX1-timeZ1 > 4
            assert not timeX1 < timeZ2
            assert timeZ2-timeZ1 > 4

    def test_multiple_tests_depending_on_the_same_test(self):
        ""
        write_test_script( 'testX.vvt', depends_on='testZ' )
        write_test_script( 'testY.vvt', depends_on='testZ' )
        write_test_script( 'testZ.vvt', add_time2=True )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            timeX1,timeX2 = extract_times_from_log( 'testX' )
            timeY1,timeY2 = extract_times_from_log( 'testY' )
            timeZ1,timeZ2 = extract_times_from_log( 'testZ' )

            assert timeX1-timeZ1 > 4
            assert not timeX1 < timeZ2
            assert timeZ2-timeZ1 > 4

            assert timeY1-timeZ1 > 4
            assert not timeY1 < timeZ2


def write_test_script( filename, depends_on=None, add_time2=False ):
    ""
    content = ''
    if depends_on:
        content += '#VVT: depends on : '+depends_on+'\n'
    content += 'import os, sys, time\n' + \
               'sys.stdout.write( "time1="+str(time.time())+os.linesep )\n'
    if add_time2:
        content += 'time.sleep(5)  # make the dependency take awhile\n' + \
                   'sys.stdout.write( "time2="+str(time.time())+os.linesep )\n'

    util.write_py_script( filename, content )


def extract_times_from_log( testname ):
    ""
    logf = util.globfile( 'TestResults*/'+testname+'/execute.log' )

    lineL = util.grepfiles( 'time1=', logf )
    assert len( lineL ) == 1
    time1 = float( lineL[0].split( 'time1=' )[1].strip() )

    lineL = util.grepfiles( 'time2=', logf )
    if len( lineL ) > 0:
        assert len( lineL ) == 1
        time2 = float( lineL[0].split( 'time2=' )[1].strip() )
    else:
        time2 = None

    return time1,time2


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
