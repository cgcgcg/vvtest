#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import re

import vvtestutils as vtu
import testutils as util
from testutils import print3

from libvvtest.FilterExpressions import WordExpression
from libvvtest.FilterExpressions import NonResultsKeywordExpression
from libvvtest.FilterExpressions import KeywordExpression
from libvvtest.FilterExpressions import create_word_expression
from libvvtest.FilterExpressions import ParamFilter
from libvvtest.FilterExpressions import split_but_retain_separator
from libvvtest.FilterExpressions import separate_expression_into_tokens
from libvvtest.FilterExpressions import convert_token_list_into_eval_string
from libvvtest.FilterExpressions import parse_non_results_expression
from libvvtest.FilterExpressions import replace_forward_slashes
from libvvtest.FilterExpressions import join_expressions_with_AND
from libvvtest.FilterExpressions import conditional_paren_wrap
from libvvtest.FilterExpressions import parenthetical_tokenize
from libvvtest.FilterExpressions import create_parameter_filter


class word_expression_tests( vtu.vvtestTestCase ):

    def setUp(self):
        vtu.vvtestTestCase.setUp( self, cleanout=False )

    def test_WordExpression_use_cases(self):
        ""
        ex = WordExpression()
        assert ex.evaluate( [] )

        ex.append(None)
        assert ex.evaluate( [] )

        ex = WordExpression('')
        assert not ex.evaluate( [] )

        ex.append('')
        assert not ex.evaluate( [] )

        ex.append("")
        assert not ex.evaluate( [] )

        ex.append(" ")
        assert not ex.evaluate( [] )

        ex = WordExpression(" ")
        assert not ex.evaluate( [] )

        ex = WordExpression(" hello  ")
        assert not ex.evaluate( [] )
        assert ex.evaluate( 'hello' )
        assert not ex.evaluate( 'world' )

        ex.append(None)
        assert not ex.evaluate( [] )
        assert ex.evaluate( 'hello' )
        assert not ex.evaluate( 'world' )

        ex.append("")
        assert not ex.evaluate( [] )
        assert not ex.evaluate( 'hello' )
        assert not ex.evaluate( 'world' )

        ex.append("  ")
        assert not ex.evaluate( [] )
        assert not ex.evaluate( 'hello' )
        assert not ex.evaluate( 'world' )

        ex.append("world")
        assert not ex.evaluate( [] )
        assert not ex.evaluate( 'hello' )
        assert not ex.evaluate( 'world' )
        assert not ex.evaluate( ['hello','world'] )
        assert not ex.evaluate( ['the','next'] )

    def test_expression_and_or_precedence(self):
        ""
        ex = WordExpression("hello and world or period")
        assert not ex.evaluate( 'hello' )
        assert not ex.evaluate( 'world' )
        assert     ex.evaluate( 'period' )
        assert     ex.evaluate( ['hello','world'] )

        ex = WordExpression("(hello and world) or period")
        assert not ex.evaluate( 'hello' )
        assert not ex.evaluate( 'world' )
        assert     ex.evaluate( 'period' )
        assert     ex.evaluate( ['hello','world'] )

        ex = WordExpression("hello or world and period")
        assert     ex.evaluate( 'hello' )
        assert not ex.evaluate( 'world' )
        assert not ex.evaluate( 'period' )
        assert     ex.evaluate( ['hello','period'] )
        assert     ex.evaluate( ['world','period'] )

        ex = WordExpression("hello or (world and period)")
        assert     ex.evaluate( 'hello' )
        assert not ex.evaluate( 'world' )
        assert not ex.evaluate( 'period' )
        assert     ex.evaluate( ['hello','period'] )
        assert     ex.evaluate( ['world','period'] )

    def test_expression_errors(self):
        ""
        ex = WordExpression()

        self.assertRaises( ValueError, WordExpression, "aword1) word2" )
        self.assertRaises( ValueError, WordExpression, "word1 not word2" )
        self.assertRaises( ValueError, WordExpression, "word1 word2" )
        self.assertRaises( ValueError, WordExpression, "word1 and" )
        self.assertRaises( ValueError, WordExpression, "word1 or" )
        self.assertRaises( ValueError, WordExpression, "(word or)" )
        self.assertRaises( ValueError, WordExpression, "(word and)" )
        self.assertRaises( ValueError, WordExpression, "word and ()" )
        self.assertRaises( ValueError, WordExpression, "()" )
        self.assertRaises( ValueError, WordExpression, "word1 and and word2" )
        self.assertRaises( ValueError, WordExpression, "word1 and or word2" )
        self.assertRaises( ValueError, WordExpression, "word1 or and word2" )
        self.assertRaises( ValueError, WordExpression, "word1 or not or word2" )
        self.assertRaises( ValueError, WordExpression, "word1 and not and word2" )
        self.assertRaises( ValueError, WordExpression, "and word1" )
        self.assertRaises( ValueError, WordExpression, "or word1" )
        self.assertRaises( ValueError, WordExpression, "word1 word2" )
        self.assertRaises( ValueError, WordExpression, "word and" )
        self.assertRaises( ValueError, WordExpression, "word or" )

    def test_using_parens_in_expressions(self):
        ""
        ex = WordExpression("( word1 and word2 ) or (word3 and word4)")
        assert     ex.evaluate( ['word1','word2'] )
        assert     ex.evaluate( ['word3','word4'] )
        assert not ex.evaluate( ['word1','word3'] )
        assert not ex.evaluate( ['word2','word4'] )

        ex = WordExpression("( word1 and not (word2 or word3) ) or word4")
        assert     ex.evaluate( ['word4'] )
        assert     ex.evaluate( ['word1'] )
        assert not ex.evaluate( ['word1','word2'] )
        assert not ex.evaluate( ['word1','word3'] )

        ex = WordExpression("word1 and not (word2 or word3) or word4")
        assert     ex.evaluate( ['word4'] )
        assert     ex.evaluate( ['word1'] )
        assert not ex.evaluate( ['word1','word2'] )
        assert not ex.evaluate( ['word1','word3'] )

        ex = WordExpression("word4 or word1 and not (word2 or word3)")
        assert     ex.evaluate( ['word4'] )
        assert     ex.evaluate( ['word1'] )
        assert not ex.evaluate( ['word1','word2'] )
        assert not ex.evaluate( ['word1','word3'] )

    def test_get_word_list_after_construction(self):
        ""
        ex = WordExpression( "word4 or word1 and not (word2 or word3 )" )
        wL = ex.getWordList()
        wL.sort()
        assert wL == ['word1','word2','word3','word4']

        ex = WordExpression()
        assert ex.getWordList() == []

        ex = WordExpression( '' )
        assert ex.getWordList() == []

    def test_tokenizing_expressions(self):
        ""
        assert split_but_retain_separator( '', '(' ) == ['']
        assert split_but_retain_separator( ' ', '(' ) == [' ']
        assert split_but_retain_separator( 'abc', '(' ) == ['abc']
        assert split_but_retain_separator( '(', '(' ) == ['','(','']
        assert split_but_retain_separator( 'a(', '(' ) == ['a','(','']
        assert split_but_retain_separator( '(b', '(' ) == ['','(','b']
        assert split_but_retain_separator( 'a(b', '(' ) == ['a','(','b']
        assert split_but_retain_separator( 'a(b (c(', '(' ) == \
                                           ['a','(','b ','(','c','(','']
        assert split_but_retain_separator( ')a)b', ')' ) == \
                                           ['',')','a',')','b']

        assert separate_expression_into_tokens( '' ) == ['']
        assert separate_expression_into_tokens( ' ' ) == ['']
        assert separate_expression_into_tokens( 'word' ) == ['word']
        assert separate_expression_into_tokens( ' word ' ) == ['word']
        assert separate_expression_into_tokens( 'word1  or word2 ' ) == \
                                            ['word1','or','word2']
        assert separate_expression_into_tokens( ' not  word' ) == \
                                            ['not','word']
        assert separate_expression_into_tokens( ' not ( word )' ) == \
                                            ['not','(','word',')']
        assert separate_expression_into_tokens( ' not(word) ' ) == \
                                            ['not','(','word',')']
        assert separate_expression_into_tokens(
            'not ( word1 or word2) and word3 or (word4)' ) == \
            ['not','(','word1','or','word2',')','and','word3','or','(','word4',')']

    def test_creating_eval_string(self):
        ""
        def evalfunc(tok):
            assert tok != None and tok.strip()
            return tok == 'word'

        es = convert_token_list_into_eval_string( [''] )
        val = eval( es )
        assert val == False and type(val) == type(True)

        es = convert_token_list_into_eval_string( ['not','word'] )
        val = eval( es )
        assert val == False and type(val) == type(True)

        es = convert_token_list_into_eval_string( ['not','foo'] )
        val = eval( es )
        assert val == True and type(val) == type(True)

        es = convert_token_list_into_eval_string( ['not','(','foo',')'] )
        val = eval( es )
        assert val == True and type(val) == type(True)

        es = convert_token_list_into_eval_string( ['(','word',')'] )
        val = eval( es )
        assert val == True and type(val) == type(True)

        es = convert_token_list_into_eval_string(
                                    ['(','word',')','or','not','word'] )
        val = eval( es )
        assert val == True and type(val) == type(True)

    def test_parsing_expr_for_non_results_evaluation(self):
        ""
        def evalfunc(tok):
            return tok == 'word'

        ex = parse_non_results_expression( '' )
        assert not eval( ex )

        ex = parse_non_results_expression( 'notrun' )
        assert ex == None

        ex = parse_non_results_expression( 'not pass' )
        assert ex == None

        ex = parse_non_results_expression( 'not ( pass or diff )' )
        assert ex == None

        ex = parse_non_results_expression( 'word and fail' )
        assert eval( ex ) == True

        ex = parse_non_results_expression( 'fail and word' )
        assert eval( ex ) == True

        ex = parse_non_results_expression( 'not word and fail' )
        assert eval( ex ) == False

        ex = parse_non_results_expression( 'fail and not word' )
        print3( ex )

        ex = parse_non_results_expression( '( foo or word ) and ( pass or fail )' )
        assert eval( ex ) == True

        ex = parse_non_results_expression(
                            '( foo or word ) and not ( pass or fail )' )
        assert eval( ex ) == True

        ex = parse_non_results_expression(
                            '( pass or fail ) and ( foo or word ) ' )
        assert eval( ex ) == True

        ex = parse_non_results_expression( 'word1 and not word2' )
        assert eval( ex ) == False

        def evalfunc(tok):
            return tok in ['word1','word3']

        ex = parse_non_results_expression(
                    '( word1 and not (word2 or word3) ) or word' )
        assert eval( ex ) == False

    def test_removing_results_keywords_from_expressions(self):
        ""
        ex = KeywordExpression( "foo and bar" )
        nrex = NonResultsKeywordExpression( "foo and bar" )
        assert not nrex.containsResultsKeywords()
        assert not   ex.evaluate( ['foo'] )
        assert not nrex.evaluate( ['foo'] )
        assert       ex.evaluate( ['foo','bar'] )
        assert     nrex.evaluate( ['foo','bar'] )

        ex = KeywordExpression( "notrun or notdone" )
        nrex = NonResultsKeywordExpression( "notrun or notdone" )
        assert     nrex.containsResultsKeywords()
        assert       ex.evaluate( ['aword','notdone'] )
        assert not   ex.evaluate( ['aword','pass'] )
        assert     nrex.evaluate( ['aword','pass'] )

        ex = KeywordExpression( "notrun and word" )
        nrex = NonResultsKeywordExpression( "notrun and word" )
        assert     nrex.containsResultsKeywords()
        assert       ex.evaluate( ['word','notrun'] )
        assert     nrex.evaluate( ['word','notrun'] )
        assert not   ex.evaluate( ['word','pass'] )
        assert     nrex.evaluate( ['word','pass'] )

        ex = KeywordExpression( "not pass and not ( foo or bar )" )
        nrex = NonResultsKeywordExpression( "not pass and not ( foo or bar )" )
        assert     nrex.containsResultsKeywords()
        assert       ex.evaluate( ['foobar','notrun'] )
        assert     nrex.evaluate( ['foobar','notrun'] )
        assert not   ex.evaluate( ['foobar','pass'] )
        assert not   ex.evaluate( ['foobar','pass'] )
        assert     nrex.evaluate( ['foobar','pass'] )

        ex = KeywordExpression( "not pass or not ( foo or bar )" )
        nrex = NonResultsKeywordExpression( "not pass or not ( foo or bar )" )
        assert     nrex.containsResultsKeywords()
        assert       ex.evaluate( ['foo','notrun'] )
        assert not nrex.evaluate( ['foo','notrun'] )

    def test_an_exclamation_point_means_NOT(self):
        ""
        for expr in ['!foo','! foo','not foo']:
            ex = WordExpression( expr )
            assert not ex.evaluate( 'foo' )
            assert     ex.evaluate( 'bar' )

        for expr in ['foo or !bar','foo or ! bar']:
            ex = WordExpression( expr )
            assert     ex.evaluate( 'foo' )
            assert not ex.evaluate( 'bar' )
            assert     ex.evaluate( ['foo','bar'] )
            assert     ex.evaluate( 'baz' )

        for expr in ['!(foo or bar)','! (foo or bar)']:
            ex = WordExpression( expr )
            assert not ex.evaluate( 'foo' )
            assert not ex.evaluate( 'bar' )
            assert not ex.evaluate( ['foo','bar'] )
            assert     ex.evaluate( 'baz' )

        for expr in ['!(foo and bar)','! (foo and bar)']:
            ex = WordExpression( expr )
            assert     ex.evaluate( ['foo'] )
            assert     ex.evaluate( ['bar'] )
            assert not ex.evaluate( ['foo','bar'] )
            assert     ex.evaluate( ['baz'] )

    def test_replace_forward_slashes(self):
        ""
        assert replace_forward_slashes( 'foo' ) == 'foo'
        assert replace_forward_slashes( 'foo', True ) == 'not foo'
        assert replace_forward_slashes( 'foo and bar' ) == 'foo and bar'
        assert replace_forward_slashes( 'foo and bar', True ) == \
                                            'not ( foo and bar )'

        assert replace_forward_slashes( 'foo/bar' ) == 'foo or bar'
        assert replace_forward_slashes( 'foo/ bar' ) == 'foo or bar'
        assert replace_forward_slashes( 'foo / bar' ) == 'foo or bar'
        assert replace_forward_slashes( 'foo /bar' ) == 'foo or bar'
        assert replace_forward_slashes( 'foo/bar/baz' ) == 'foo or bar or baz'
        assert replace_forward_slashes( 'foo/!bar/baz' ) == 'foo or !bar or baz'

        assert replace_forward_slashes( 'foo', True ) == 'not foo'
        assert replace_forward_slashes( 'foo/bar', True ) == 'not foo or not bar'
        assert replace_forward_slashes( 'foo/!bar/baz', True ) == \
                                            'not foo or not !bar or not baz'

        assert replace_forward_slashes( '/foo/bar' ) == 'foo or bar'
        assert replace_forward_slashes( 'foo/bar/' ) == 'foo or bar'
        assert replace_forward_slashes( 'foo/not bar' ) == 'foo or not bar'

        self.assertRaises( ValueError, replace_forward_slashes, 'foo/(not bar)' )
        self.assertRaises( ValueError, replace_forward_slashes, 'foo or bar / baz' )
        self.assertRaises( ValueError, replace_forward_slashes, 'foo / bar and baz' )
        self.assertRaises( ValueError, replace_forward_slashes, 'foo/(bar)' )

    def test_parenthetical_tokenize(self):
        ""
        px = parenthetical_tokenize( 'foo' ) ; assert px.toks == ['foo']
        px = parenthetical_tokenize( 'not foo' ) ; assert px.toks == ['not','foo']
        px = parenthetical_tokenize( '! foo' ) ; assert px.toks == ['not','foo']
        px = parenthetical_tokenize( '!foo' ) ; assert px.toks == ['not','foo']

        px = parenthetical_tokenize( 'foo or bar' )
        assert px.toks == ['foo','or','bar']

        px = parenthetical_tokenize( '(foo)' )
        assert px.numTokens() == 1
        assert px.toks[0].toks == ['foo']

        px = parenthetical_tokenize( '(foo or bar)' )
        assert px.numTokens() == 1
        assert px.toks[0].toks == ['foo','or','bar']

        px = parenthetical_tokenize( '!(foo or bar)' )
        assert px.numTokens() == 2
        assert px.toks[0] == 'not'
        assert px.toks[1].toks == ['foo','or','bar']

        px = parenthetical_tokenize( 'foo or (bar and baz)' )
        assert px.numTokens() == 3
        assert px.toks[:2] == ['foo','or']
        assert px.toks[2].toks == ['bar','and','baz']

        px = parenthetical_tokenize( '(foo) or (bar)' )
        assert px.numTokens() == 3
        assert px.toks[0].toks == ['foo']
        assert px.toks[1] == 'or'
        assert px.toks[2].toks == ['bar']

        px = parenthetical_tokenize( '((foo or bar))' )
        assert px.numTokens() == 1
        assert px.toks[0].numTokens() == 1
        assert px.toks[0].toks[0].toks == ['foo','or','bar']

    def test_conditional_paren_wrap(self):
        ""
        assert conditional_paren_wrap( 'foo' ) == 'foo'
        assert conditional_paren_wrap( 'foo or bar' ) == '( foo or bar )'
        assert conditional_paren_wrap( '(foo)' ) == '(foo)'
        assert conditional_paren_wrap( '( foo )' ) == '( foo )'
        assert conditional_paren_wrap( '(foo or bar)' ) == '(foo or bar)'
        assert conditional_paren_wrap( '( foo or bar )' ) == '( foo or bar )'

    def test_join_expressions_with_AND(self):
        ""
        assert join_expressions_with_AND( [] ) == None
        assert join_expressions_with_AND( [''] ) == ''
        assert join_expressions_with_AND( ['foo',''] ) == ''
        assert join_expressions_with_AND( ['','foo'] ) == ''
        assert join_expressions_with_AND( ['foo','bar'] ) == 'foo and bar'
        assert join_expressions_with_AND( ['foo or bar'] ) == 'foo or bar'
        assert join_expressions_with_AND( ['foo or bar','baz'] ) == \
                                                '( foo or bar ) and baz'
        assert join_expressions_with_AND( ['foo','bar or baz'] ) == \
                                                'foo and ( bar or baz )'
        assert join_expressions_with_AND( ['( foo or bar )'] ) == \
                                                '( foo or bar )'
        assert join_expressions_with_AND( ['( foo or bar ) and baz'] ) == \
                                                '( foo or bar ) and baz'
        assert join_expressions_with_AND( ['( foo or bar ) and baz','yep'] ) == \
                                    '( ( foo or bar ) and baz ) and yep'

    def test_processing_forward_slash_and_negation(self):
        ""
        for expr in ['foo/bar','foo / bar','foo/ bar','foo /bar']:
            ex = create_word_expression( [expr] )
            assert     ex.evaluate( 'foo' )
            assert     ex.evaluate( 'bar' )
            assert     ex.evaluate( ['bar','foo'] )
            assert not ex.evaluate( 'baz' )

        for expr in ['!foo/bar','!foo / bar','!foo/ bar','!foo /bar',
                     'not foo/bar','not foo / bar','not foo/ bar','not foo /bar' ]:
            ex = create_word_expression( [expr] )
            assert not ex.evaluate( 'foo' )
            assert     ex.evaluate( 'bar' )
            assert     ex.evaluate( ['bar','foo'] )
            assert     ex.evaluate( 'baz' )

        for expr in ['foo/!bar','foo / !bar','foo/ !bar','foo /!bar',
                     'foo/not bar','foo / not bar','foo/ not bar','foo /not bar' ]:
            ex = create_word_expression( [expr] )
            assert     ex.evaluate( 'foo' )
            assert not ex.evaluate( 'bar' )
            assert     ex.evaluate( ['bar','foo'] )
            assert     ex.evaluate( 'baz' )

        # cannot have '/' in an expr with parens
        for expr in ['not ( foo/bar and baz )','! (foo/bar and baz)',
                     'not( foo/bar and baz )','!(foo/bar and baz)']:
            self.assertRaises( ValueError, create_word_expression, [expr] )

        # cannot have '/' in an expr with AND or OR
        for expr in ['foo/bar and baz','foo/bar or baz',
                     'baz and foo/bar','baz or foo/bar']:
            self.assertRaises( ValueError, create_word_expression, [expr] )


class param_expression_tests( vtu.vvtestTestCase ):

    def setUp(self):
        vtu.vvtestTestCase.setUp( self, cleanout=False )

    def test_ParamFilters_with_integer_param_types(self):
        ""
        pf = ParamFilter( 'np=4' )
        assert not pf.evaluate( {} )
        assert     pf.evaluate( {'np':4} )
        assert not pf.evaluate( {'np':2} )
        assert not pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {'size':"10", 'np':4} )
        assert not pf.evaluate( {'size':"10"} )

        pf = ParamFilter( replace_forward_slashes('np=1/np=4') )
        assert not pf.evaluate( {} )
        assert     pf.evaluate( {'np':4} )
        assert     pf.evaluate( {'np':1} )
        assert     pf.evaluate( {'size':"10", 'np':4} )
        assert not pf.evaluate( {'np':3} )
        assert not pf.evaluate( {'size':"10", 'np':3} )
        assert not pf.evaluate( {'size':"10"} )

        pf = ParamFilter( replace_forward_slashes('np=1/!np') )
        assert not pf.evaluate( {'np':4} )
        assert     pf.evaluate( {'np':1} )
        assert     pf.evaluate( {'size':"10", 'np':1} )
        assert     pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {} )

        pf = ParamFilter( replace_forward_slashes('np=1/np!=') )
        assert not pf.evaluate( {'np':4} )
        assert     pf.evaluate( {'np':1} )
        assert     pf.evaluate( {'size':"10", 'np':1} )
        assert     pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {} )

        pf = ParamFilter( '!np' )
        assert not pf.evaluate( {'np':4} )
        assert not pf.evaluate( {'size':"10", 'np':1} )
        assert     pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {} )

        pf = ParamFilter( 'np=1', 'size' )
        assert not pf.evaluate( {'np':4} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {'size':"10", 'np':4} )
        assert     pf.evaluate( {'size':"10", 'np':1} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( 'np=1', 'size=' )
        assert not pf.evaluate( {'np':4} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {'size':"10", 'np':4} )
        assert     pf.evaluate( {'size':"10", 'np':1} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( 'np!=1', 'np!=4' )
        assert not pf.evaluate( {'np':1} )
        assert not pf.evaluate( {'np':4} )
        assert     pf.evaluate( {'np':2} )

        pf = ParamFilter( 'np<=13' )
        assert     pf.evaluate( {'np':2} )
        assert not pf.evaluate( {'np':14} )
        assert     pf.evaluate( {'np':13} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( 'np>=13' )
        assert not pf.evaluate( {'np':2} )
        assert     pf.evaluate( {'np':13} )
        assert     pf.evaluate( {'np':14} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( 'np<13' )
        assert     pf.evaluate( {'np':2} )
        assert not pf.evaluate( {'np':14} )
        assert not pf.evaluate( {'np':15} )
        assert not pf.evaluate( {'np':13} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( 'np>13' )
        assert not pf.evaluate( {'np':2} )
        assert not pf.evaluate( {'np':13} )
        assert     pf.evaluate( {'np':14} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

    def test_ParamFilters_with_string_param_types(self):
        ""
        pf = ParamFilter( 'np=4' )
        assert not pf.evaluate( {} )
        assert     pf.evaluate( {'np':'4'} )
        assert not pf.evaluate( {'np':'2'} )
        assert not pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {'size':"10", 'np':'4'} )
        assert not pf.evaluate( {'size':"10"} )

        pf = ParamFilter( replace_forward_slashes('np=1/np=4') )
        assert not pf.evaluate( {} )
        assert     pf.evaluate( {'np':'4'} )
        assert     pf.evaluate( {'np':'1'} )
        assert     pf.evaluate( {'size':"10", 'np':'4'} )
        assert not pf.evaluate( {'np':'3'} )
        assert not pf.evaluate( {'size':"10", 'np':'3'} )
        assert not pf.evaluate( {'size':"10"} )

        pf = ParamFilter( replace_forward_slashes('np=1/!np') )
        assert not pf.evaluate( {'np':'4'} )
        assert     pf.evaluate( {'np':'1'} )
        assert     pf.evaluate( {'size':"10", 'np':'1'} )
        assert     pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {} )

        pf = ParamFilter( replace_forward_slashes('np=1/np!=') )
        assert not pf.evaluate( {'np':'4'} )
        assert     pf.evaluate( {'np':'1'} )
        assert     pf.evaluate( {'size':"10", 'np':'1'} )
        assert     pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {} )

        pf = ParamFilter( '!np' )
        assert not pf.evaluate( {'np':'4'} )
        assert not pf.evaluate( {'size':"10", 'np':'1'} )
        assert     pf.evaluate( {'size':"10"} )
        assert     pf.evaluate( {} )

        pf = ParamFilter( 'np=1', 'size' )
        assert not pf.evaluate( {'np':'4'} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {'size':"10", 'np':'4'} )
        assert     pf.evaluate( {'size':"10", 'np':'1'} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( 'np=1', 'size=' )
        assert not pf.evaluate( {'np':'4'} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {'size':"10", 'np':'4'} )
        assert     pf.evaluate( {'size':"10", 'np':'1'} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( 'np!=1', 'np!=4' )
        assert not pf.evaluate( {'np':'1'} )
        assert not pf.evaluate( {'np':'4'} )
        assert     pf.evaluate( {'np':'2'} )

        pf = ParamFilter( 'np<=13' )
        assert     pf.evaluate( {'np':'2'} )
        assert not pf.evaluate( {'np':'20'} )
        assert     pf.evaluate( {'np':'13'} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( 'np>=13' )
        assert not pf.evaluate( {'np':'2'} )
        assert     pf.evaluate( {'np':'13'} )
        assert     pf.evaluate( {'np':'20'} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( 'np<13' )
        assert     pf.evaluate( {'np':'2'} )
        assert not pf.evaluate( {'np':'20'} )
        assert not pf.evaluate( {'np':'15'} )
        assert not pf.evaluate( {'np':'13'} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

        pf = ParamFilter( 'np>13' )
        assert not pf.evaluate( {'np':'2'} )
        assert not pf.evaluate( {'np':'13'} )
        assert     pf.evaluate( {'np':'14'} )
        assert not pf.evaluate( {'size':"10"} )
        assert not pf.evaluate( {} )

    def test_ParamFilters_with_mixed_types(self):
        ""
        pf = ParamFilter( 'np=13' )
        assert not pf.evaluate( {'np':'a'} )

        pf = ParamFilter( 'np=ab' )
        assert not pf.evaluate( {'np':'13'} )

        pf = ParamFilter( 'np=ab' )
        assert     pf.evaluate( {'np':'ab'} )


        pf = ParamFilter( 'np!=13' )
        assert     pf.evaluate( {'np':'a'} )

        pf = ParamFilter( 'np!=ab' )
        assert     pf.evaluate( {'np':'13'} )

        pf = ParamFilter( 'np!=ab' )
        assert not pf.evaluate( {'np':'ab'} )


        pf = ParamFilter( 'np<=13' )
        assert not pf.evaluate( {'np':'a'} )

        pf = ParamFilter( 'np<=13' )
        assert     pf.evaluate( {'np':'0a'} )

        pf = ParamFilter( 'np<=ab' )
        assert     pf.evaluate( {'np':'13'} )

        pf = ParamFilter( 'np<=ab' )
        assert     pf.evaluate( {'np':'ab'} )


        pf = ParamFilter( 'np>=13' )
        assert     pf.evaluate( {'np':'a'} )

        pf = ParamFilter( 'np>=13' )
        assert not pf.evaluate( {'np':'0a'} )

        pf = ParamFilter( 'np>=ab' )
        assert not pf.evaluate( {'np':'13'} )

        pf = ParamFilter( 'np>=ab' )
        assert     pf.evaluate( {'np':'ab'} )


        pf = ParamFilter( 'np<13' )
        assert not pf.evaluate( {'np':'a'} )

        pf = ParamFilter( 'np<13' )
        assert     pf.evaluate( {'np':'0a'} )

        pf = ParamFilter( 'np<ab' )
        assert     pf.evaluate( {'np':'13'} )

        pf = ParamFilter( 'np<ab' )
        assert not pf.evaluate( {'np':'ab'} )


        pf = ParamFilter( 'np>13' )
        assert     pf.evaluate( {'np':'a'} )

        pf = ParamFilter( 'np>13' )
        assert not pf.evaluate( {'np':'0a'} )

        pf = ParamFilter( 'np>ab' )
        assert not pf.evaluate( {'np':'13'} )

        pf = ParamFilter( 'np>ab' )
        assert not pf.evaluate( {'np':'ab'} )

    def test_behavior_of_the_NOT_operator_on_param_expressions(self):
        ""
        pf = ParamFilter( 'np' )
        assert not pf.evaluate( {} )
        assert not pf.evaluate( { 'foo':5 } )
        assert     pf.evaluate( { 'np':2 } )

        for expr in [ '!np', ' not np' ]:
            pf = ParamFilter( expr )
            assert     pf.evaluate( {} )
            assert     pf.evaluate( { 'foo':5 } )
            assert not pf.evaluate( { 'np':2 } )

        pf = ParamFilter( 'np>2' )
        assert not pf.evaluate( {} )
        assert not pf.evaluate( {'foo':5} )
        assert not pf.evaluate( {'np':2} )
        assert     pf.evaluate( {'np':3} )

        # Note: the expr np<=2 is not the same as !np>2
        #       this is because np<=2 actually means
        #           (np is defined) AND (np<=2)
        #       and therefore !np<=2 actually means
        #           NOT [ (np is defined) AND (np<=2) ]
        #       which equals
        #           (np is not defined) OR (np>2)

        pf = ParamFilter( 'np<=2' )
        assert     pf.evaluate( {'np':2} )
        assert not pf.evaluate( {'np':3} )
        assert not pf.evaluate( {} )
        assert not pf.evaluate( { 'foo':5 } )

        for expr in [ '!np>2', 'not np>2' ]:
            pf = ParamFilter( expr )
            assert     pf.evaluate( {'np':2} )
            assert not pf.evaluate( {'np':3} )
            assert     pf.evaluate( {} )
            assert     pf.evaluate( { 'foo':5 } )

        for expr in [ '!np>3 and np!=1', 'not np>3 and np!=1' ]:
            pf = ParamFilter( expr )
            assert not pf.evaluate( {'np':1} )
            assert     pf.evaluate( {'np':2} )
            assert     pf.evaluate( {'np':3} )
            assert not pf.evaluate( {'np':4} )

    def test_creating_unified_parameter_expression(self):
        ""
        pf = create_parameter_filter( None, None )
        assert pf == None

        pf = create_parameter_filter( ['np=1'], None )
        assert pf.evaluate( {'np':'1'} )

        pf = create_parameter_filter( None, ['np=1'] )
        assert not pf.evaluate( {'np':'1'} )

        pf = create_parameter_filter( ['np<8'], ['np=1/ndevice'] )
        assert     pf.evaluate( {'np':'2'} )
        assert     pf.evaluate( {'np':'1'} )
        assert not pf.evaluate( {'np':'1', 'ndevice':'1'} )
        assert     pf.evaluate( {'np':'2', 'ndevice':'1'} )
        assert not pf.evaluate( {'np':'9', 'ndevice':'1'} )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
