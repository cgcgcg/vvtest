#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

from libvvtest.testcreator import TestCreator, ExpressionEvaluator
from libvvtest.errors import TestSpecError

from libvvtest.paramset import ParameterSet
from libvvtest.testcase import TestCase
from libvvtest.ScriptReader import ScriptReader
import libvvtest.testlistio as tio
import libvvtest.parsevvt as parsevvt


class script_tests( vtu.vvtestTestCase ):

    def test_an_executable_script_as_a_test_file(self):
        ""
        util.writescript( 'hello.vvt', """
            #!/bin/sh
            echo "hello from the hello test script"
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == [ 'hello' ]
        assert vrun.countGrepLogs( 'hello from the hello test script' ) == 1

    def test_that_the_test_name_can_be_different_than_the_script_name(self):
        ""
        util.writescript( 'hello.vvt', """
            #!/bin/sh
            #VVT: name=world
            echo "hello from the hello/world test script"
            """ )
        util.writescript( 'namerr1.vvt', """
            #VVT: name (foo=bar) = world
            assert False
            """ )
        util.writescript( 'namerr2.vvt', """
            #VVT: name = world mars
            assert False
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=1, npass=1 )

        assert vrun.getTestIds() == [ 'world' ]
        assert vrun.countGrepLogs( 'hello from the hello/world test script' ) == 1

        assert vrun.countLines( 'skipping *namerr1.vvt*no attr' ) == 1
        assert vrun.countLines( 'skipping *namerr2.vvt*invalid' ) == 1

    def test_that_python_is_always_used_to_run_non_executable_scripts(self):
        ""
        util.writefile( 'hello.vvt',
            "#!/bin/sh\n" + \
            "print ( 'hello from the hello test script' )\n" )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == [ 'hello' ]
        assert vrun.countGrepLogs( 'hello from the hello test script' ) == 1

    def test_importing_the_helper_fragment(self):
        ""
        util.writefile( 'hello.py.vvt', """
            import os, sys
            print ( "hello from the python test script" )
            import vvtest_util as vvt
            print ( 'hello, dir=', dir(vvt) )

            assert hasattr( vvt, 'NAME' )
            assert hasattr( vvt, 'TESTID' )
            assert hasattr( vvt, 'PLATFORM' )
            assert hasattr( vvt, 'COMPILER' )
            assert hasattr( vvt, 'VVTESTSRC' )
            assert hasattr( vvt, 'CONFIGDIR' )
            assert hasattr( vvt, 'PROJECT' )
            assert hasattr( vvt, 'OPTIONS' )
            assert hasattr( vvt, 'OPTIONS_OFF' )
            assert hasattr( vvt, 'SRCDIR' )

            assert vvt.NAME == 'hello.py'
            print ( 'PROJECT = '+vvt.PROJECT )
            assert vvt.OPTIONS == ['dbg']
            """ )
        os.mkdir( 'bin' )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-j bin -o dbg', batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            assert vrun.getTestIds() == [ 'hello.py' ]

            assert vrun.countGrepLogs( 'hello from the python test script' ) == 1

            L = vrun.greplogs( 'PROJECT =' )
            assert len(L) == 1
            assert L[0].split('=',1)[1].strip() == os.path.abspath('bin')

    def test_a_python_test_that_exits_with_a_diff_a_pass_and_a_fail(self):
        ""
        util.writescript( 'tpass.vvt', """
            #!"""+sys.executable+"""
            import os, sys
            import vvtest_util as vvt
            """ )
        util.writescript( 'tdiff.vvt', """
            #!"""+sys.executable+"""
            import sys
            import vvtest_util as vvt
            sys.exit( vvt.diff_exit_status )
            """ )
        util.writescript( 'tfail.vvt', """
            #!"""+sys.executable+"""
            import os, sys
            def myfunc():
                raise Exception( "test failed" )
            myfunc()
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=1, diff=1, fail=1 )

    def test_multiple_tests_in_one_script_file(self):
        ""
        util.writescript( 'multi.vvt', """
            #!"""+sys.executable+"""
            #VVT: name=multi
            #VVT: name=multi2
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            assert vrun.getTestIds() == [ 'multi', 'multi2' ]

            assert vrun.countGrepLogs( 'hello from the multi test' ) == 1
            assert vrun.countGrepLogs( 'hello from the multi2 test' ) == 1

    def test_header_specification_comment_variations(self):
        ""
        util.writescript( 'tst1.vvt', """
            #!"""+sys.executable+"""

            #VVT: name=test1
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst2.vvt', """
            #!"""+sys.executable+"""
            # 
            #VVT: name=test2
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst3.vvt', """
            #!"""+sys.executable+"""
            import vvtest_util as vvt
            #VVT: name=test3
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst4.vvt', """
            #!"""+sys.executable+"""
            #VVT: name=test4a

            #VVT: name=test4b

            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst5.vvt', """
            #!"""+sys.executable+"""
            # regular comments can be interleaved
            #VVT: name=test5a

            # this test should also be run
            #VVT: name=test5b

            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=7, npass=7 )

        assert vrun.getTestIds() == [ 'test1',
                                      'test2',
                                      'test4a',
                                      'test4b',
                                      'test5a',
                                      'test5b',
                                      'tst3' ]

        assert vrun.countGrepLogs( 'hello from the test1 test' ) == 1
        assert vrun.countGrepLogs( 'hello from the test2 test' ) == 1
        assert vrun.countGrepLogs( 'hello from the tst3 test' ) == 1
        assert vrun.countGrepLogs( 'hello from the test4a test' ) == 1
        assert vrun.countGrepLogs( 'hello from the test4b test' ) == 1
        assert vrun.countGrepLogs( 'hello from the test5a test' ) == 1
        assert vrun.countGrepLogs( 'hello from the test5b test' ) == 1

    def test_using_testname_specification_as_alias_for_name(self):
        ""
        util.writefile( 'multi.vvt', """
            #VVT: testname=testA
            #VVT: name : testB
            #VVT: testname = testC
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=3, npass=3 )

        assert vrun.getTestIds() == [ 'testA', 'testB', 'testC' ]
        assert vrun.countGrepLogs( 'hello from the testA test' ) == 1
        assert vrun.countGrepLogs( 'hello from the testB test' ) == 1
        assert vrun.countGrepLogs( 'hello from the testC test' ) == 1

    def test_incorrect_specification_syntax(self):
        ""
        util.writescript( 'tst1.vvt', """
            #!"""+sys.executable+"""
            #VVT: =junk
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst2.vvt', """
            #!"""+sys.executable+"""
            #VVT: keywords (testname=tst2) foo : bar
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst2b.vvt', """
            #!"""+sys.executable+"""
            #VVT: keywords (testname=tst2b) foo
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst2c.vvt', """
            #!"""+sys.executable+"""
            #VVT: keywords (testname=tst2c) (testname=tst2b)
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst3.vvt', """
            #!"""+sys.executable+"""
            #VVT: keywords (testname=tst3) : junk
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst4.vvt', """
            #!"""+sys.executable+"""
            #VVT::
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst5.vvt', """
            #!"""+sys.executable+"""
            #VVT: keywords (=tst5) : foo bar
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst6.vvt', """
            #!"""+sys.executable+"""
            #VVT: keywords (foo=bar,=) : foo bar
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        util.writescript( 'tst7.vvt', """
            #!"""+sys.executable+"""
            #VVT: keywords (foo=bar : foo bar
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=1, npass=1 )

        assert len( vrun.grepLines( 'skipping *tst1.vvt'  ) ) == 1
        assert len( vrun.grepLines( 'skipping *tst2.vvt'  ) ) == 1
        assert len( vrun.grepLines( 'skipping *tst2b.vvt'  ) ) == 1
        assert len( vrun.grepLines( 'skipping *tst2c.vvt'  ) ) == 1
        assert len( vrun.grepLines( 'skipping *tst4.vvt'  ) ) == 1
        assert len( vrun.grepLines( 'skipping *tst5.vvt'  ) ) == 1
        assert len( vrun.grepLines( 'skipping *tst6.vvt'  ) ) == 1
        assert len( vrun.grepLines( 'skipping *tst7.vvt'  ) ) == 1

        assert vrun.countGrepLogs( 'hello from the tst3 test' ) == 1

    def test_copy_and_link_files_specification(self):
        ""
        util.writefile( 'file1.txt', """
            this is file one
            """ )
        util.writefile( 'file2.txt', """
            this is file two
            """ )
        util.writefile( 'file3.txt', """
            this is file three
            """ )
        util.writescript( 'files.vvt', """
            #!"""+sys.executable+"""
            #VVT: link : file1.txt file2.txt
            #VVT: copy : file3.txt
            #VVT: link (rename) : file1.txt, lfile1 file2.txt,lfile2
            #VVT: copy (rename) : file3.txt ,cfile3
            import os
            assert os.path.exists( 'file1.txt' )
            assert os.path.islink( 'file1.txt' )
            assert os.path.exists( 'file2.txt' )
            assert os.path.islink( 'file2.txt' )
            assert os.path.exists( 'file3.txt' )
            assert not os.path.islink( 'file3.txt' )
            assert os.path.exists( 'lfile1' )
            assert os.path.islink( 'lfile1' )
            assert os.path.exists( 'lfile2' )
            assert os.path.islink( 'lfile2' )
            assert os.path.exists( 'cfile3' )
            assert not os.path.islink( 'cfile3' )

            import filecmp
            assert filecmp.cmp( 'file1.txt', 'lfile1', shallow=False )
            assert filecmp.cmp( 'file2.txt', 'lfile2', shallow=False )
            assert filecmp.cmp( 'file3.txt', 'cfile3', shallow=False )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=1, npass=1 )

    def test_copy_and_link_files_with_attribute_specifications(self):
        ""
        platname = vtu.core_platform_name()

        util.writefile( 'file1.txt', """
            this is file one
            """ )
        util.writefile( 'file2.txt', """
            this is file two
            """ )
        util.writefile( 'file3.txt', """
            this is file three
            """ )
        util.writefile( 'file4.txt', """
            this is file four
            """ )
        util.writefile( 'file5.txt', """
            this is file five
            """ )
        util.writescript( 'files.vvt', """
            #!"""+sys.executable+"""
            
            #VVT: name = files
            #VVT: name = another
            #VVT: link (testname=files): file1.txt
            #VVT: link (testname=not files): file2.txt
            #VVT: copy (options=dbg, testname=another) : file3.txt
            #VVT: link (rename, platforms="Junk") : file4.txt, lfile4
            #VVT: copy (rename, platforms="""+platname+""") : file5.txt,cfile5
            
            import os
            import vvtest_util as vvt
            if vvt.NAME == 'files':
                assert os.path.exists( 'file1.txt' )
                assert os.path.islink( 'file1.txt' )
                assert not os.path.exists( 'file2.txt' )
            else:
                assert os.path.exists( 'file2.txt' )
                assert os.path.islink( 'file2.txt' )
            if 'dbg' in vvt.OPTIONS and vvt.NAME == 'another':
                assert os.path.exists( 'file3.txt' )
                assert not os.path.islink( 'file3.txt' )
            else:
                assert not os.path.exists( 'file3.txt' )
            assert not os.path.exists( 'file4.txt' )
            assert not os.path.exists( 'lfile4' )
            assert os.path.exists( 'cfile5' )
            assert not os.path.islink( 'cfile5' )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            vtu.remove_results()

            vrun = vtu.runvvtest( '-o dbg', batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            fn = util.globfile( 'TestResults*/another/file3.txt' )
            assert not os.path.islink( fn )

    def test_parsing_test_name_specifications(self):
        ""
        nm,aD = parsevvt.parse_test_name_value( 'testA', 'info' )
        assert nm == 'testA' and len(aD) == 0

        self.assertRaises( TestSpecError,
            parsevvt.parse_test_name_value, 'testA testB', 'info' )

        nm,aD = parsevvt.parse_test_name_value( '', 'info' )
        assert nm == '' and len(aD) == 0

        nm,aD = parsevvt.parse_test_name_value( 'testA # comment', 'info' )
        assert nm == 'testA' and len(aD) == 0

        nm,aD = parsevvt.parse_test_name_value( 'testA ()', 'info' )
        assert nm == 'testA' and len(aD) == 0

        self.assertRaises( TestSpecError,
            parsevvt.parse_test_name_value, 'testA (foo=bar)', 'info' )

        self.assertRaises( TestSpecError,
            parsevvt.parse_test_name_value,
                'testA (depends on=testB ', 'info' )

        nm,aD = parsevvt.parse_test_name_value(
                    'testA (depends on=testB)', 'info' )
        assert nm == 'testA' and aD == { 'depends on':'testB' }

        nm,aD = parsevvt.parse_test_name_value(
                    'testA (depends on=testB, result="*")', 'info' )
        assert nm == 'testA' and aD == { 'depends on':'testB', 'result':'*' }

        nm,aD = parsevvt.parse_test_name_value(
                    'testA (result="*", depends on=testB)', 'info' )
        assert nm == 'testA' and aD == { 'depends on':'testB', 'result':'*' }

        nm,aD = parsevvt.parse_test_name_value(
                    'testA (depends on=testB testC, result=pass)', 'info' )
        assert nm == 'testA' and aD == { 'depends on':'testB testC',
                                         'result':'pass' }

    def test_combining_test_name_spec_with_dependency_spec(self):
        ""
        util.writefile( 'hello.vvt', """
            #VVT: testname = world (depends on=mars, result=diff)
            import vvtest_util as vvt
            print ( 'DEPS = '+' '.join( vvt.DEPDIRS ) )
            """ )
        util.writefile( 'mars.vvt', """
            import sys
            import vvtest_util as vvt
            sys.exit( vvt.diff_exit_status )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=2, npass=1, diff=1 )

        assert vrun.getTestIds() == [ 'mars', 'world' ]

        lineL = vrun.greplogs( 'DEPS =' )
        assert len(lineL) == 1
        depd = lineL[0].split( 'DEPS =', 1 )[1].strip()
        assert os.path.samefile( depd, vrun.resultsDir()+'/mars' )

    def test_specify_parameter_types(self):
        ""
        pset = ParameterSet()
        pset.addParameter( 'A', ['1','2'] )
        pset.addParameterGroup( ('B','C'), [ ('1.1','ab'), ('1.2','ac') ] )

        assert pset.getParameterTypeMap() == {}

        tmap = { 'A':int, 'B':float }
        pset.setParameterTypeMap( tmap )
        assert pset.getParameterTypeMap() == tmap
        pDL = pset.getParameters( typed=True )
        assert len( pDL ) == 2
        for nameT,valL in pDL.items():
            if nameT == ('A',):
                assert valL == [ [1], [2] ]
            else:
                assert nameT == ('B','C')
                assert valL == [ [1.1,'ab'], [1.2,'ac'] ]

        tspec = vtu.make_fake_TestSpec()
        assert type( tspec.getParameterValue( 'np' ) ) == type('')
        pD = tspec.getParameters( typed=True )
        assert len( pD ) == 1
        assert pD.pop('np') == '4'

        tspec.getParameterSet().setParameterTypeMap( { 'np': int } )
        assert type( tspec.getParameterValue( 'np' ) ) == type('')
        pD = tspec.getParameters()
        assert len( pD ) == 1
        assert pD['np'] == '4'
        pD = tspec.getParameters( typed=True )
        assert len( pD ) == 1
        assert pD['np'] == 4

    def test_parse_parameter_type_specifications(self):
        ""
        util.writefile( 'blue.vvt', """
            #VVT: parameterize (autotype) : np = 1 8
            #VVT: parameterize            : nt = 1 8
            #VVT: parameterize (autotype) : dx,dy = 1,2 8.8,9.9
            #VVT: parameterize (autotype) : foo = 1 bar
            """ )
        time.sleep(1)

        evaluator = ExpressionEvaluator( 'atari', [] )

        vspecs = ScriptReader( 'blue.vvt' )
        pset = ParameterSet()
        parsevvt.parse_parameterize( pset, vspecs, 'blue', evaluator, None )

        tmap = pset.getParameterTypeMap()
        assert len( tmap ) == 3
        assert tmap['np'] == int
        assert tmap['dx'] == float
        assert tmap['dy'] == float

        tL = TestCreator().fromFile( os.getcwd(), 'blue.vvt', None )
        assert len( tL ) == 2*2*2*2

        tspec = tL[3]
        pD = tspec.getParameters( typed=True )
        assert type( pD['foo'] ) == type('')
        assert type( pD['np'] ) == type(2)
        assert type( pD['dy'] ) == type(9.9)

        sid = tio.test_to_string( TestCase( tspec ) )
        tcase = reparse_test_string( sid )
        pD = tcase.getSpec().getParameters( typed=True )
        assert type( pD['foo'] ) == type('')
        assert type( pD['np'] ) == type(2)
        assert type( pD['dy'] ) == type(9.9)

    def test_integration_with_typed_parameters(self):
        ""
        util.writefile( 'blue.vvt', """
            #VVT: parameterize (autotype) : num = 3 7
            #VVT: parameterize (autotype) : size = 1.1 2.2
            #VVT: analyze : --analyze
            import sys
            import vvtest_util as vvt
            if '--analyze' in sys.argv:
                for val in vvt.PARAM_num:
                    assert type(val) == type(3)
                for val in vvt.PARAM_size:
                    assert type(val) == type(3.3)
            else:
                assert type( vvt.num ) == type(3)
                assert type( vvt.size ) == type(3.3)
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=5, npass=5 )
            tdir = vrun.resultsDir()

            vrun = vtu.runvvtest( '-R', batch=batch, chdir=tdir )
            vrun.assertCounts( total=5, npass=5 )


def reparse_test_string( stringid ):
    ""
    tcase = tio.string_to_test( stringid )

    TestCreator().reparse( tcase.getSpec() )

    return tcase


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
