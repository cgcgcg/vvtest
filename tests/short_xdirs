#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import basename, abspath
from os.path import join as pjoin
import unittest
import time
import glob
import re

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.testid as testid
import libvvtest.outpututils as outpututils


class TestID_tests( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test( cleanout=False )

    def test_consistency_of_hash_algorithm_across_python_versions(self):
        ""
        astr = 'adsf.ioupd_siou=df90 3434jkdfs'
        ahsh = '887e1c3a545c22bf4f1820bc83df4c0077aad87f'
        assert testid._compute_hash( astr ) == ahsh

    def test_simple_test_ids(self):
        ""
        tid1 = testid.TestID( 'foo', 'bar/foo.vvt', {}, [] )
        tid2 = testid.TestID( 'foo', 'bar/baz.ext', {}, [] )

        for tid in [ tid1, tid2 ]:
            print3( tid.computeExecuteDirectory(), tid.computeDisplayString() )
            assert tid.computeExecuteDirectory() == 'bar/foo'
            assert tid.computeDisplayString() == 'bar/foo'
            assert tid.computeID()

        assert tid1.computeID() != tid2.computeID()

    def test_parameterized_test_ids(self):
        ""
        tid = testid.TestID( 'foo', 'bar/foo.vvt', {'A':'13','B':'14'}, [] )
        print3( tid.computeExecuteDirectory(), tid.computeDisplayString() )
        assert tid.computeExecuteDirectory() == 'bar/foo.A=13.B=14'
        assert tid.computeDisplayString() == 'bar/foo.A=13.B=14'
        assert tid.computeID()

        tid2 = testid.TestID( 'foo', 'bar/foo.vvt', {'A':'13','B':'13'}, [] )
        assert tid.computeID() != tid2.computeID()

        tid3 = testid.TestID( 'foo', 'bar/foo.vvt', {'A':'13','C':'14'}, [] )
        assert tid.computeID() != tid3.computeID()

    def test_staged_test_ids(self):
        ""
        pD = {'stage':'1','A':'1'}
        tid1 = testid.TestID( 'foo', 'bar/foo.vvt', pD, ['stage','A'] )
        print3( tid1.computeExecuteDirectory(), tid1.computeDisplayString() )
        assert tid1.computeExecuteDirectory() == 'bar/foo.A'
        assert tid1.computeDisplayString() == 'bar/foo.A stage=1(A=1)'
        assert tid1.computeID()

        pD = {'stage':'1','A':'2'}
        tid2 = testid.TestID( 'foo', 'bar/foo.vvt', pD, ['stage','A'] )
        print3( tid2.computeExecuteDirectory(), tid2.computeDisplayString() )
        assert tid2.computeExecuteDirectory() == 'bar/foo.A'
        assert tid2.computeDisplayString() == 'bar/foo.A stage=1(A=2)'
        assert tid2.computeID()

        assert tid1.computeID() != tid2.computeID()

        pD = {'stage':'2','A':'2'}
        tid3 = testid.TestID( 'foo', 'bar/foo.vvt', pD, ['stage','A'] )
        print3( tid3.computeExecuteDirectory(), tid3.computeDisplayString() )
        assert tid3.computeExecuteDirectory() == 'bar/foo.A'
        assert tid3.computeDisplayString() == 'bar/foo.A stage=2(A=2)'
        assert tid3.computeID()

        assert tid1.computeID() != tid3.computeID()
        assert tid2.computeID() != tid3.computeID()

    def test_execute_directory_length_limit(self):
        ""
        pD = { 'First_Parameter_Name':'123456789012345678901234567890',
               'Second_Parameter_Name':'abcdefghijklmnopqrstuvwxyz',
               'Third_Parameter_Name':'ABCDEFGHIJKLMNOPQRSTUVWXYZ' }
        tid = testid.TestID( 'foo', 'bar/foo.vvt', pD, [] )
        xdir = tid.computeExecuteDirectory()
        print3( xdir, tid.computeDisplayString() )
        assert len( basename( xdir ) ) <= 100
        assert xdir.startswith( 'bar/foo.' )
        assert tid.computeDisplayString() == \
            'bar/foo.First_Parameter_Name=123456789012345678901234567890.' + \
            'Second_Parameter_Name=abcdefghijklmnopqrstuvwxyz.' + \
            'Third_Parameter_Name=ABCDEFGHIJKLMNOPQRSTUVWXYZ'

        # the ID will be different for different parameters/values
        pD2 = dict( pD )
        pD2['Second_Parameter_Name'] = '_abcdefghijklmnopqrstuvwxyz'
        tid2 = testid.TestID( 'foo', 'bar/foo.vvt', pD2, [] )
        assert tid.computeExecuteDirectory() != tid2.computeExecuteDirectory()
        assert tid.computeID() != tid2.computeID()

        # the test name is also limited to 20 characters
        tid3 = testid.TestID( 'foobarbaz_foobarbaz_foobarbaz', 'bar/foo.vvt', pD, [] )
        xdir = tid3.computeExecuteDirectory()
        displ = tid3.computeDisplayString()
        print3( xdir, displ )
        assert len( basename( xdir ) ) <= 100
        assert xdir.startswith( 'bar/foobarbaz_foobarbaz_.' )
        assert displ.startswith( tid3.computeExecuteDirectory(shorten=False) )

    def test_resetting_the_ID_traits(self):
        ""
        tspec = vtu.make_fake_TestSpec()

        xdir1 = tspec.getExecuteDirectory()

        tspec.setIDTraits( {'numchars':5} )

        xdir2 = tspec.getExecuteDirectory()

        print3( xdir1, xdir2 )
        assert xdir1 != xdir2


class using_short_xdirs( vtu.vvtestTestCase ):

    def test_location_display_string(self):
        ""
        tspec = vtu.make_fake_TestSpec()
        trpath = abspath('testresults')

        lds = outpututils.location_display_string( tspec, trpath, os.getcwd() )
        assert lds == 'testresults/sdir/atest.np=4'

        cwd = abspath( 'testresults' )
        lds = outpututils.location_display_string( tspec, trpath, cwd )
        assert lds == 'sdir/atest.np=4'

        tspec = vtu.make_fake_TestSpec( idtraits={'numchars':5} )

        xdir = tspec.getExecuteDirectory()
        displ = tspec.getDisplayString()
        lds = outpututils.location_display_string( tspec, trpath, cwd )
        print3( repr(xdir), repr(displ), repr(lds) )
        assert xdir != displ
        assert re.match( 'sdir/atest[.][0-9a-f]+ -> sdir/atest[.]np=4', lds )

    def test_console_output_with_shortening(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : foobar = foo bar
            #VVT: analyze : --analyze
            import sys
            import vvtest_util as vvt
            if '--analyze' in sys.argv[1:]:
                print ( 'DEPDIRS='+repr(vvt.DEPDIRS) )
            else:
                print ( 'MARK:foobar='+vvt.foobar )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--short-xdirs 10', batch=batch )
            vrun.assertCounts( total=3, npass=3 )
            tdir = vrun.resultsDir()

            assert vrun.getTestIds() == [ 'atest',
                                          'atest.foobar=bar',
                                          'atest.foobar=foo' ]

            line = util.grepfiles( 'DEPDIRS=', tdir+'/atest/execute.log' )[0]
            depdirs = eval( line.split('DEPDIRS=',1)[1].strip() )
            print3( 'DEPDIRS', depdirs )
            assert len( depdirs ) == 2
            for i in range(2):
                assert os.path.exists( pjoin( depdirs[i], 'execute.log' ) )
                assert 'foobar=bar' not in basename( depdirs[i] )
                assert 'foobar=foo' not in basename( depdirs[i] )

            lines1 = vtu.extract_testlines( vrun.out )

            vrun = vtu.runvvtest( '-i -v' )
            lines2 = vtu.extract_testlines( vrun.out )
            assert lines1 == lines2

    def test_running_in_a_results_directory(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : foobar = foo bar
            #VVT: analyze : --analyze
            import sys, os
            import vvtest_util as vvt
            if '--analyze' in sys.argv[1:]:
                for ddir in vvt.DEPDIRS:
                    assert os.path.exists( ddir )
            else:
                with open( 'outfile', 'wt' ) as fp:
                    fp.write( vvt.foobar + os.linesep )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--short-xdirs 10', batch=batch )
            vrun.assertCounts( total=3, npass=3 )
            tdir = vrun.resultsDir()
            assert len( glob.glob( tdir+'/atest.*' ) ) == 2

            vrun = vtu.runvvtest( '-R', batch=batch, chdir=tdir+'/atest' )
            vrun.assertCounts( total=1, npass=1 )
            assert len( glob.glob( tdir+'/atest.*' ) ) == 2

            vrun = vtu.runvvtest( '-R', batch=batch, chdir=tdir )
            vrun.assertCounts( total=3, npass=3 )
            assert len( glob.glob( tdir+'/atest.*' ) ) == 2

            vrun = vtu.runvvtest( '-R --short-xdirs 40', batch=batch, chdir=tdir )
            vrun.assertCounts( total=3, npass=3 )
            # the current behavior is that a previously run test will pick up
            # the previous short xdirs value, and so specifying --short-xdirs
            # on the vvtest command line does not take effect
            assert len( glob.glob( tdir+'/atest.*' ) ) == 2

    def test_shortened_directories_with_staging(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize (staged) : foobar = foo bar
            import os
            import vvtest_util as vvt
            with open( 'outfile', 'at' ) as fp:
                bn = os.path.basename(os.getcwd())
                fp.write( 'stage='+str(vvt.stage)+' '+bn+os.linesep )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--short-xdirs 5', batch=batch )
            vrun.assertCounts( total=2, npass=2 )
            tdir = vrun.resultsDir()
            fL = glob.glob( tdir+'/atest*/outfile' )
            assert len( fL ) == 1
            for line in util.readfile( fL[0] ).splitlines():
                assert 'foobar=' not in line
            assert len( glob.glob( tdir+'/atest*' ) ) == 1

            vrun = vtu.runvvtest( '-R', batch=batch, chdir=tdir )
            vrun.assertCounts( total=2, npass=2 )
            assert len( glob.glob( tdir+'/atest*' ) ) == 1

    def test_depends_on_with_shortening(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : foo = bar baz
            import os
            import vvtest_util as vvt
            if vvt.foo == 'baz':
                with open( 'outfile', 'wt' ) as fp:
                    fp.write( 'bar'+os.linesep )
            """ )
        util.writefile( 'btest.vvt', """
            #VVT: depends on : atest.foo=baz
            import os
            import vvtest_util as vvt
            assert len( vvt.DEPDIRS ) == 1
            assert os.path.exists( vvt.DEPDIRS[0]+'/outfile' )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--short-xdirs 5', batch=batch )
            vrun.assertCounts( total=3, npass=3 )
            tdir = vrun.resultsDir()

            assert len( glob.glob( tdir+'/atest*' ) ) == 2
            assert len( glob.glob( tdir+'/btest' ) ) == 1

    def test_generating_the_tests_then_executing(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : foo = bar baz
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--short-xdirs 5 -g' )
            vrun.assertCounts( total=2, notrun=2 )
            tdir = vrun.resultsDir()

            vrun = vtu.runvvtest( chdir=tdir, batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            assert len( glob.glob( tdir+'/atest.*' ) ) == 2
            assert len( glob.glob( tdir+'/atest.*foo*' ) ) == 0

    def test_rebaseline_with_shortened_test_names(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : foo = bar baz
            #VVT: link : base.txt
            #VVT: baseline (parameters="foo=baz"): --rebase
            import sys, os
            import vvtest_util as vvt
            if '--rebase' in sys.argv[1:]:
                with open( 'base.txt', 'wt' ) as fp:
                    fp.write( 'good value'+os.linesep )
            else:
                with open( 'base.txt', 'rt' ) as fp:
                    val = fp.read().strip()
                if val != 'good value':
                    sys.exit( vvt.diff_exit_status )
            """ )
        util.writefile( 'base.txt', 'bad value' )
        time.sleep(1)

        vrun = vtu.runvvtest( '--short-xdirs 5' )
        vrun.assertCounts( total=2, diff=2 )
        tdir = vrun.resultsDir()
        assert len( glob.glob( tdir+'/atest*' ) ) == 2

        vrun = vtu.runvvtest( '-b', chdir=tdir )
        assert len( glob.glob( tdir+'/atest*' ) ) == 2

        vrun = vtu.runvvtest( '-R', chdir=tdir )
        vrun.assertCounts( total=2, npass=2 )
        assert len( glob.glob( tdir+'/atest*' ) ) == 2

        vrun = vtu.runvvtest( '-R --short-xdirs 5' )
        vrun.assertCounts( total=2, npass=2 )
        assert len( glob.glob( tdir+'/atest*' ) ) == 2

        vrun = vtu.runvvtest( '-R' )
        vrun.assertCounts( total=2, npass=2 )
        assert len( glob.glob( tdir+'/atest*' ) ) == 2


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
