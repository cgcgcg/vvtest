#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import dirname
import time
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.batchutils as batchutils


class batching_unit_tests( vtu.vvtestTestCase ):

    def test_batch_grouping_is_by_np_and_timeout(self):
        ""
        tlist, xlist = vtu.make_fake_TestExecList( timespec='timeout' )
        gpr = batchutils.BatchTestGrouper( xlist, None, None )
        gpr.construct()

        batches = gpr.getGroups()
        assert len( batches ) == 2
        grpL = batch_group_to_list( batches[0] )
        assert grpL == [['sdir/atest1.np=2', (2,0), 22],
                        ['sdir/atest0.np=2', (2,0), 12]]
        grpL = batch_group_to_list( batches[1] )
        assert grpL == [['sdir/atest1.np=1', (1,0), 21],
                        ['sdir/atest0.np=1', (1,0), 11]]

    def test_limit_batch_size_by_time(self):
        ""
        tlist, xlist = vtu.make_fake_TestExecList( timespec='timeout' )
        gpr = batchutils.BatchTestGrouper( xlist, 5, None )
        gpr.construct()

        batches = gpr.getGroups()
        assert len( batches ) == 4
        assert batch_group_to_list( batches[0] ) == [['sdir/atest1.np=2', (2,0), 22]]
        assert batch_group_to_list( batches[1] ) == [['sdir/atest1.np=1', (1,0), 21]]
        assert batch_group_to_list( batches[2] ) == [['sdir/atest0.np=2', (2,0), 12]]
        assert batch_group_to_list( batches[3] ) == [['sdir/atest0.np=1', (1,0), 11]]

    def test_grouping_tests_with_dependencies(self):
        ""
        cwd = os.getcwd()

        util.writefile( 'testA.vvt', """
            #VVT: parameterize : np = 2
            #VVT: parameterize : foo = bar baz
            """ )
        util.writefile( 'testB.vvt', """
            #VVT: depends on = testA.*
            """ )
        util.writefile( 'testC.vvt', """
            #VVT: parameterize : np = 2 4
            #VVT: analyze = --analyze
            """ )
        time.sleep(1)

        tlist,xlist = vtu.scan_to_make_TestExecList( '.', timeout_attr=5 )

        gpr = batchutils.BatchTestGrouper( xlist, 60, None )
        gpr.construct()

        batches = gpr.getGroups()
        assert len( batches ) == 4
        for bat in batches:
            print3( batch_group_to_list(bat) )
        gL = batch_group_to_list( batches[0] )
        gL.sort()  # order within the group is not guaranteed with equal times
        assert gL == [ ['testA.foo=bar.np=2', (2,0), 5],
                       ['testA.foo=baz.np=2', (2,0), 5],
                       ['testC.np=2', (2,0), 5] ]
        assert batch_group_to_list( batches[1] ) == [['testC.np=4', (4,0), 5]]
        g2 = batch_group_to_list( batches[2] )
        g3 = batch_group_to_list( batches[3] )
        if g2 == [['testB', (1,0), 5]]:
            assert g3 == [['testC', (1,0), 5]]
        else:
            assert g2 == [['testC', (1,0), 5]]
            assert g3 == [['testB', (1,0), 5]]

    def test_grouping_tests_with_no_timeout(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np = 3
            #VVT: parameterize : foo = bar baz
            """ )
        time.sleep(1)

        tlist,xlist = vtu.scan_to_make_TestExecList( '.', timeout_attr=0 )

        gpr = batchutils.BatchTestGrouper( xlist, 60, None )
        gpr.construct()

        batches = gpr.getGroups()
        for bat in batches:
            print3( batch_group_to_list(bat) )
        assert len( batches ) == 2
        g1 = batch_group_to_list( batches[0] )
        g2 = batch_group_to_list( batches[1] )
        if g1 == [['atest.foo=bar.np=3', (3,0), 0]]:
            assert g2 == [['atest.foo=baz.np=3', (3,0), 0]]
        else:
            assert g1 == [['atest.foo=baz.np=3', (3,0), 0]]
            assert g2 == [['atest.foo=bar.np=3', (3,0), 0]]

    def test_tests_with_different_num_devices_go_into_different_groups(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np = 2
            #VVT: parameterize : ndevice = 0 2 4
            """ )
        time.sleep(1)

        tlist,xlist = vtu.scan_to_make_TestExecList( '.', timeout_attr=5 )

        gpr = batchutils.BatchTestGrouper( xlist, 60, None )
        gpr.construct()

        batches = gpr.getGroups()
        bL = []
        for bat in batches:
            bL.append( batch_group_to_list(bat) )
            print3( bL[-1] )

        assert len( bL ) == 3
        bL.sort()
        assert bL == [ [['atest.ndevice=0.np=2', (2, 0), 5]],
                       [['atest.ndevice=2.np=2', (2, 2), 5]],
                       [['atest.ndevice=4.np=2', (2, 4), 5]] ]

    def test_same_num_procs_and_same_devices_can_go_into_same_group(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np,ndevice = 2,4
            """ )
        util.writefile( 'btest.vvt', """
            #VVT: parameterize : np,ndevice = 2,4 4,4
            """ )
        time.sleep(1)

        tlist,xlist = vtu.scan_to_make_TestExecList( '.', timeout_attr=5 )

        gpr = batchutils.BatchTestGrouper( xlist, 60, None )
        gpr.construct()

        batches = gpr.getGroups()
        bL = []
        for bat in batches:
            bL.append( batch_group_to_list(bat) )
            print3( bL[-1] )

        assert len( bL ) == 2
        assert len( bL[0] ) == 2
        bL[0].sort()
        assert bL[0] == [ ['atest.ndevice=4.np=2', (2, 4), 5],
                          ['btest.ndevice=4.np=2', (2, 4), 5] ]
        assert bL[1] == [['btest.ndevice=4.np=4', (4, 4), 5]]


def batch_group_to_list( batchgroup ):
    ""
    gL = []

    for tcase in batchgroup:
        tspec = tcase.getSpec()
        tstat = tcase.getStat()
        gL.append( [ tspec.getDisplayString(),
                     tcase.getSize(),
                     tstat.getAttr( 'timeout' ) ] )

    return gL


class inlining_results_file_includes( vtu.vvtestTestCase ):

    def test_specifying_platform_options(self):
        ""
        util.writefile( "testA.vvt", """
            fp = open( 'testA.txt', 'w' ) ; fp.close()
            """ )
        time.sleep(1)

        opts = '--platopt q=pickme --platopt walltime=1:30:00'
        opts += ' --platopt PT=abc --platopt ppn=2'

        vrun = vtu.runvvtest( opts, batch=True )
        vrun.assertCounts( total=1, npass=1 )
        time.sleep(1)

        assert len( glob.glob( 'TestResult*/testA/testA.txt' ) ) == 1

        lines = util.grepfiles( 'np = 2', 'TestResult*/batchset*/qbat.*' )
        assert len( lines ) == 1

        lines = util.grepfiles( 'qtime =', 'TestResult*/batchset*/qbat.*' )
        assert len( lines ) == 1
        assert lines[0].split( 'qtime =', 1 )[1].strip() == '1:30:00'

        lines = util.grepfiles( 'batch attrs = ', 'TestResult*/batchset*/qbat-out.*' )
        assert len( lines ) == 1
        attrs = eval( lines[0].split( 'batch attrs = ', 1 )[1].strip() )
        # print ( attrs )
        self.assertEqual( attrs, { 'queue': 'pickme',
                                   'dpn': None,
                                   'ppn': 2,
                                   'account': 'abc',
                                   'walltime': '1:30:00' } )

    def test_restarting_a_killed_batch_run_three_times(self):
        """
        If a batch run is killed before the result file includes are inlined,
        the only record of the results exist in the batch directories.  But
        the batch directories are cleaned out before running the next time.
        This means that previous results will be lost if they are not inlined
        during vvtest startup.  This test checks that they are by restarting
        a killed batch run a few times in a row.
        """
        util.writefile( "lazyA.vvt", """
            import time
            time.sleep(1)
            fp = open( 'touchA.txt', 'w' ) ; fp.close()
            """ )
        util.writefile( "lazyB.vvt", """
            import time
            time.sleep(1)
            fp = open( 'touchB.txt', 'w' ) ; fp.close()
            """ )
        util.writefile( "lazyC.vvt", """
            import time
            time.sleep(1)
            fp = open( 'touchC.txt', 'w' ) ; fp.close()
            """ )
        time.sleep(1)

        opts = '--batch-limit 1 --force'

        vtu.interrupt_vvtest_batch( '--batch-limit 1',
                                    count=1, signum='SIGTERM' )
        time.sleep(1)

        # exactly one of the three tests should have completed
        assert len( util.findfiles( 'touch*.txt', 'TestResults*' ) ) == 1

        vtu.interrupt_vvtest_batch( '--batch-limit 1 --force',
                                    count=1, signum='SIGTERM' )
        time.sleep(1)

        # exactly one more of the three tests should have completed
        assert len( util.findfiles( 'touch*.txt', 'TestResults*' ) ) == 2

        vrun = vtu.runvvtest( '--force', batch=True )
        time.sleep(1)

        # only the last of the three tests should have been run
        vrun.assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults*/lazy*/touch*.txt' ) ) == 3

        # all three tests should show as completed
        vtu.runvvtest( '-i -v' ).assertCounts( total=3, npass=3 )

    def test_failed_batch_job_issues_warning_about_not_finishing(self):
        ""
        util.writefile( "sleeper1.xml", """
            <rtest name="sleeper1">
                <timeout value="15"/>
                <execute> sleep 5 </execute>
            </rtest>""" )
        util.writefile( "sleeper2.xml", """
            <rtest name="sleeper2">
                <timeout value="15"/>
                <execute> sleep 5 </execute>
            </rtest>""" )
        util.writefile( "sleeper3.xml", """
            <rtest name="sleeper3">
                <timeout value="15"/>
                <execute> sleep 5 </execute>
            </rtest>""" )
        util.writefile( "sleeper4.xml", """
            <rtest name="sleeper4">
                <timeout value="15"/>
                <execute> sleep 5 </execute>
            </rtest>""" )
        time.sleep(1)

        # these four tests are run in two batch
        # batch zero will be ok, while batch one will crash
        # this should cause batch one to show "did not seem to finish"

        opts = '--batch --batch-limit 1 --batch-length 40'
        x,out = vtu.interrupt_vvtest_run( opts, count=1, qid=1 )

        L = util.greplines( 'did not seem to finish:', out )
        assert len(L) == 1
        L2 = L[0].split(':')[-1].split()  # qid list as strings
        L2 = [ int(s) for s in L2 ]  # make integer qids
        assert len(L2) == 1 and L2[0] == 1

        assert len( vtu.greptestlist( 'sleeper[1-4]', out ) ) == 4
        assert len( vtu.greptestlist( 'pass *sleeper[1-4]', out ) ) == 3

    def test_soft_link_from_test_dir_to_batch_files(self):
        ""
        util.writefile( 'testa.vvt', """
            import vvtest_util as vvt
            """ )
        util.writefile( 'testb.vvt', """
            import vvtest_util as vvt
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '--batch-length 0', batch=True )
        vrun.assertCounts( total=2, npass=2 )
        tdir = vrun.resultsDir()

        fn = util.globfile( tdir+'/test*/qbat.0' )
        assert os.path.islink(fn) and os.path.exists(fn)
        fn2 = dirname(fn)+'/qbat-out.0'
        assert os.path.islink(fn2) and os.path.exists(fn2)

        fn = util.globfile( tdir+'/test*/qbat.1' )
        assert os.path.islink(fn) and os.path.exists(fn)
        fn2 = dirname(fn)+'/qbat-out.1'
        assert os.path.islink(fn2) and os.path.exists(fn2)

    def test_queue_time_bump_is_continuous(self):
        ""
        delta = 5.0
        N = 100000
        b = 48*60*60
        x0 = 0
        for i in range(N):

            x1 = b * ( (i+1) / float(N) )

            y0 = batchutils.apply_queue_timeout_bump_factor( x0 )
            y1 = batchutils.apply_queue_timeout_bump_factor( x1 )

            assert y1 > y0
            assert y1-y0 < delta*(x1-x0)

            x0 = x1

    def test_queue_time_bump_is_capped_at_15_minutes(self):
        ""
        max_bump = 15*60 + 0.001

        N = 100000
        b = 48*60*60
        for i in range(N+1):

            x = b * ( i / float(N) )
            y = batchutils.apply_queue_timeout_bump_factor( x )

            assert x < y
            assert y-x < max_bump

    def test_batch_jobs_are_killed_upon_user_interrupt(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize: cnt = 1 2 3 4 5
            import time
            import vvtest_util as vvt
            time.sleep( int(vvt.cnt) )
            print ( 'past sleep '+str(vvt.cnt) )
            """ )
        time.sleep(1)

        t0 = time.time()
        x,out = vtu.interrupt_vvtest_batch( '--batch-limit=5 --batch-length=0',
                                            count=1, signum='SIGINT' )
        t1 = time.time()
        time.sleep(5)

        assert len( util.greplines( 'Cancelling jobs:', out ) ) == 1
        assert len( util.greplines( 'kill -s', out ) ) >= 2
        lineL = util.grepfiles( 'past sleep', 'TestResults*/*/execute.log' )
        assert len( lineL ) >= 1 and len( lineL ) < 5
        assert t1-t0 < 11, 'total vvtest time exceeded: '+str(t1-t0)


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
