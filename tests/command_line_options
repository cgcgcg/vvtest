#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.cmdline as cmdline


class help_page_tests( vtu.vvtestTestCase ):

    def setUp(self):
        vtu.vvtestTestCase.setUp( self, cleanout=False )

    def test_write_help_page(self):
        ""
        rtn,out,err = util.call_capture_output(
                            cmdline.parse_command_line, ['-h'] )
        print3( out )
        assert 'usage:' in out.lower()
        assert 'vvtest' in out
        assert 'Traceback' in err and 'SystemExit' in err

        rtn,out,err = util.call_capture_output(
                            cmdline.parse_command_line, ['--help'] )
        assert 'usage:' in out.lower()
        assert 'vvtest' in out
        assert 'Traceback' in err and 'SystemExit' in err

        rtn,out,err = util.call_capture_output(
                            cmdline.parse_command_line, ['help'] )
        assert 'usage:' in out.lower()
        assert 'vvtest' in out
        assert 'Traceback' in err and 'SystemExit' in err

        # expected argument groups
        assert len( util.greplines( 'Test selection*filters', out ) ) == 1
        assert len( util.greplines( 'Runtime behavior*behavior', out ) ) == 1
        assert len( util.greplines( 'Resource controls*resources', out ) ) == 1
        assert len( util.greplines( 'Runtime configuration*config', out ) ) == 1
        assert len( util.greplines( 'Batching*batch', out ) ) == 1
        assert len( util.greplines( 'Results handling*results', out ) ) == 1
        assert len( util.greplines( 'Other operating modes', out ) ) == 1

    def test_subhelp_spot_check(self):
        ""
        rtn,out,err = util.call_capture_output(
                        cmdline.parse_command_line, [ 'help', 'intro' ] )
        print3( out )
        assert 'The vvtest program' in out
        assert 'Available help sections' not in out
        assert 'Traceback' in err and 'SystemExit' in err

        rtn,out,err = util.call_capture_output(
                        cmdline.parse_command_line, [ 'help', 'filters' ] )
        print3( out )
        assert 'arbitrary keywords' in out
        assert 'Traceback' in err and 'SystemExit' in err

    def test_request_nonexistent_section_will_list_available_sections(self):
        ""
        rtn,out,err = util.call_capture_output(
                        cmdline.parse_command_line, [ 'help', 'silverbullet' ] )
        print3( out )
        assert 'keyword' in out
        assert 'parameter' in out
        assert 'Available help sections' in out
        assert 'Traceback' in err and 'SystemExit' in err


class special_options( vtu.vvtestTestCase ):

    def test_giving_an_optional_value_to_save_results(self):
        ""
        rtn,out,err = util.call_capture_output(
                        cmdline.parse_command_line,
                        [ '-v', '../some/dir' ] )
        assert not out.strip() and not err.strip()
        opts,dopts,args = rtn
        assert not opts.save_results
        assert args == ['../some/dir']

        rtn,out,err = util.call_capture_output(
                        cmdline.parse_command_line,
                        [ '-v', '--save-results', '../some/dir' ] )
        assert not out.strip() and not err.strip()
        opts,dopts,args = rtn
        assert opts.save_results == True
        assert args == ['../some/dir']

        rtn,out,err = util.call_capture_output(
                        cmdline.parse_command_line,
                        [ '-v', '--save-results=/res/ults', '../some/dir' ] )
        assert not out.strip() and not err.strip()
        opts,dopts,args = rtn
        assert opts.save_results == '/res/ults'
        assert args == ['../some/dir']


class deprecations( vtu.vvtestTestCase ):

    def test_deprecated_options_that_should_error_out(self):
        ""
        rtn,out,err = util.call_capture_output(
                        cmdline.parse_command_line, [ '-F' ] )
        assert 'Traceback' in err and 'SystemExit' in err

        rtn,out,err = util.call_capture_output(
                        cmdline.parse_command_line, [ '-H' ] )
        assert 'Traceback' in err and 'SystemExit' in err

        rtn,out,err = util.call_capture_output(
                        cmdline.parse_command_line, [ '--vg' ] )
        assert 'Traceback' in err and 'SystemExit' in err

        rtn,out,err = util.call_capture_output(
                        cmdline.parse_command_line, [ '-G' ] )
        assert 'Traceback' in err and 'SystemExit' in err


class version_info( vtu.vvtestTestCase ):

    def test_using_version_option_prints_the_version(self):
        ""
        rtn,out,err = util.call_capture_output(
                        cmdline.parse_command_line, [ '--version' ], '1.2.3' )
        print3( out )
        assert out.strip() and '1.2.3' in out
        assert 'Traceback' in err and 'SystemExit' in err


class create_derived_options( vtu.vvtestTestCase ):

    def test_error_in_keyword_specification(self):
        ""
        rtn,out,err = util.call_capture_output(
                        cmdline.parse_command_line, [ '-k', 'bad"' ] )
        #print3( err )
        assert 'command line problem with keyword options' in err
        assert 'Traceback' in err and 'SystemExit' in err

    def test_creating_parameter_dictionary(self):
        ""
        pD = cmdline.create_parameter_settings( None )
        assert pD == None

        pD = cmdline.create_parameter_settings( ['np=1'] )
        assert pD == { 'np':['1'] }

    def test_cleaning_up_the_sort_options(self):
        ""
        letters = cmdline.clean_sort_options( None )
        assert letters == None

        letters = cmdline.clean_sort_options( ['n'] )
        assert letters == 'n'

        letters = cmdline.clean_sort_options( ['t','x'] )
        assert letters == 'tx'

    def test_creating_platform_options(self):
        ""
        pD = cmdline.create_platform_options( None )
        assert pD == {}

        pD = cmdline.create_platform_options( ['name=value'] )
        assert pD == { 'name':'value' }

        pD = cmdline.create_platform_options( ['name=value', 'key'] )
        assert pD == { 'name':'value', 'key':'' }

    def test_cleaning_on_off_options(self):
        ""
        onL,offL = cmdline.clean_on_off_options( None, None )
        assert onL == [] and offL == []

        onL,offL = cmdline.clean_on_off_options( ['dbg+a1'], ['foo','bar+baz'] )
        assert onL == ['a1','dbg']
        assert offL == ['bar','baz','foo']

    def test_options_with_special_characters(self):
        ""
        vtu.runvvtest( '-o oval' )
        assert util.globfile( 'TestResults*oval' )
        vtu.remove_results()

        vrun = vtu.runvvtest( '-o ov^al' )
        assert util.globfile( 'TestResults*ov^al' )
        vtu.remove_results()

        vrun = vtu.runvvtest( '-o ov/al', raise_on_error=False )
        assert vrun.x != 0 and 'invalid word' in vrun.out

        vrun = vtu.runvvtest( '-o ov*al', raise_on_error=False )
        assert vrun.x != 0 and 'invalid word' in vrun.out

    def test_converting_test_runtime_options(self):
        ""
        mn,mx,sm = cmdline.convert_test_time_options( None, None, None )
        assert mn == None and mx == None and sm == None

        mn,mx,sm = cmdline.convert_test_time_options( '1', '2', '3' )
        assert abs(mn-1) < 1.e-12 and abs(mx-2) < 1.e-12 and abs(sm-3) < 1.e-12

    def test_results_date_conversion(self):
        ""
        self.assertRaises( Exception, cmdline.check_convert_date_spec, ' ' )

        assert cmdline.check_convert_date_spec( '1_2' ) == '1_2'
        assert cmdline.check_convert_date_spec( ' 1_2' ) == '1_2'
        assert cmdline.check_convert_date_spec( ' 1_2 ' ) == '1_2'

        tm = time.time()
        spec = cmdline.check_convert_date_spec( str(tm) )
        assert abs( spec - tm ) < 2

        assert cmdline.check_convert_date_spec( '0' ) == '0'
        assert cmdline.check_convert_date_spec( '-100000000000' ) == '-100000000000'


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
