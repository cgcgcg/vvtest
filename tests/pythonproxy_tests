#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: trig

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time
import unittest
import shutil
import re

import trigtestutils as trigutil
import testutils as util
from testutils import print3

from remotepython import RemotePython

import pythonproxy
from pythonproxy import RemotePythonProxy


rpy = sys.executable
#rpy='/home/rrdrake/bin/Linux/py266/bin/python'
#rpy='/home/rrdrake/bin/Linux/py365/bin/python'


class tests_using_RemotePython_class( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

        self.remote = RemotePython( pythonexe=rpy )
        ok = self.remote.start()

        assert ok, 'remote start failed: '+repr(ok)

    def tearDown(self):
        ""
        self.remote.close()

    def test_raw_remote_function_call(self):
        ""
        self.remote.execute( pythonproxy.get_source_code( somefunc ) )
        rtn = pythonproxy.remote_function_call( self.remote,
                                                0.4,
                                                'somefunc',
                                                [3],
                                                {'key':'val'} )

        print3( 'rtn', rtn )
        assert ''.join( rtn.split() ) == 'arg0=3,key=val'


class unit_tests( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def test_getting_source_code(self):
        ""
        util.writefile( 'pythonproxy_getting_source_code.py', """
            import os, sys
            def printsyspath():
                print ( sys.path )
            """ )
        time.sleep(1)

        src = pythonproxy.get_source_code( somefunc )
        assert src.strip() == '\n'.join( [
            "def somefunc( arg0, key=None ):",
            '    ""',
            "    if key:",
            "        return 'arg0='+str(arg0)+',key='+str(key)",
            "    else:",
            "        return 'arg0='+str(arg0)" ] )

        src = pythonproxy.get_source_code( SomeClass )
        assert src.strip() == '\n'.join( [
            'class SomeClass:',
            '    def __init__(self, *args):',
            '        pass',
            '    def func(self, **kwargs):',
            '        pass' ] )

        sys.path.append( os.getcwd() )
        try:
            import pythonproxy_getting_source_code as amod
            src = pythonproxy.get_source_code( amod )
            assert src.strip() == '\n'.join( [
                'import os, sys',
                'def printsyspath():',
                '    print ( sys.path )' ] )
        finally:
            sys.path.pop()

    def test_sending_internal_utility_functions(self):
        ""
        util.writefile( 'subdir/amod.py', """
            import os, sys
            def afunc():
                return 'avalue'
            """ )
        time.sleep(1)

        remote = FakeRemote()
        err = pythonproxy._send_internal_utilities( remote )
        assert not err
        assert remote.xcount > 1 and remote.out != None

        # get a function then remove the source so it won't be available
        sys.path.insert( 0, abspath( 'subdir' ) )
        try:
            from amod import afunc
        finally:
            sys.path.pop(0)
        shutil.rmtree( 'subdir' )
        time.sleep(1)

        remote = FakeRemote()
        err = pythonproxy._send_internal_utilities( remote, [afunc] )
        assert 'Failed to get source code' in err and 'afunc' in err

        remote = FakeRemote()
        err = pythonproxy._send_internal_utilities( remote, ['foo=bar86'] )
        assert 'Traceback' in err and re.search( 'bar86.*not defined', err )

    def test_composing_the_remote_command(self):
        ""
        saveargs = []
        savekwargs = {}

        def foo( *args, **kwargs ):
            saveargs.extend( args )
            savekwargs.update( kwargs )

        cmd = pythonproxy.compose_remote_command( 'foo',
                                                  ['a',1],
                                                  {'bar':2, 'baz':3} )
        print3( cmd )
        eval( compile( cmd, '<unittest>', 'exec' ) )

        assert saveargs == ['a',1]
        assert savekwargs == {'bar':2, 'baz':3}

    def test_waiting_for_remote_return_value(self):
        ""
        remote = FakeRemote( call_foofunc=True )
        val = pythonproxy.wait_for_return_value( remote, 5 )
        assert eval(val) == 'foobar'
        assert remote.gcount == 1

        remote = FakeRemote( call_foofunc=True, wait_seconds=4 )
        val = pythonproxy.wait_for_return_value( remote, 5 )
        assert eval(val) == 'foobar'
        assert remote.gcount <= 8

        t0 = time.time()
        remote = FakeRemote( call_foofunc=True, wait_seconds=10 )
        self.assertRaises( pythonproxy.RemoteTimeoutError,
                           pythonproxy.wait_for_return_value, remote, 3 )
        t1 = time.time()
        assert t1-t0 > 2.5 and t1-t0 < 5

    def test_capturing_a_remote_exception(self):
        ""
        remote = FakeRemote()
        val = pythonproxy.remote_function_call( remote, 5, 'foofunc', [], {} )
        assert val == 'foobar'

        remote = FakeRemote()
        try:
            pythonproxy.remote_function_call( remote, 5,
                                              'raise_fake_exception', [], {} )
        except pythonproxy.RemoteExceptionError as e:
            exclines = str(e).splitlines()
        else:
            raise Exception( 'expected a RemoteExceptionError exception' )

        assert exclines[0].startswith( 'caught remote exception:' )
        assert exclines[1].startswith( 'remote: Traceback' )
        for line in exclines[1:]:
            # print3( line )
            assert line.startswith( 'remote: ' )
        assert re.match( 'remote: .*fake exception', exclines[-1] )

    def test_lost_connection_waiting_for_return_value(self):
        ""
        remote = FakeRemote( call_foofunc=True, fake_death=2 )
        t0 = time.time()
        try:
            val = pythonproxy.wait_for_return_value( remote, 10 )
        except pythonproxy.FailedConnectionError as e:
            exc = str(e)
        else:
            raise Exception( 'expected a NoRemoteConnectionError exception' )
        t1 = time.time()
        assert t1-t0 >= 2 and t1-t0 < 5
        assert 'connection lost' in exc


class FakeRemote:

    def __init__(self, call_foofunc=False, wait_seconds=None, fake_death=None):
        ""
        self.xcount = 0
        self.gcount = 0

        self.wait = wait_seconds
        self.startime = time.time()

        self.death = fake_death  # num seconds before isAlive returns False

        self.out = None

        if call_foofunc:
            cmd = pythonproxy.compose_remote_command( 'foofunc', [], {} )
            self.execute( cmd )

    def execute(self, *lines):
        ""
        self.xcount += 1

        with util.redirect_output( 'cmdout' ):
            eval( compile( '\n'.join(lines), '<unittest>', 'exec' ) )

        if self.out == None:
            self.out = ''
        self.out += util.readfile( 'cmdout' )

    def getOutputLine(self):
        ""
        self.gcount += 1
        # print3( 'getOutputLine:', self.gcount, time.time()-self.startime )

        if self.death != None:
            return None

        if self.wait != None and time.time()-self.startime < self.wait:
            return None

        assert self.out != None
        return self.out

    def isAlive(self):
        ""
        # print3( 'isAlive:', self.death, time.time()-self.startime )
        if self.death != None and time.time()-self.startime > self.death:
            return False
        return True

    def close(self):
        ""
        pass


def _pythonproxy_capture_traceback( excinfo ):
    """
    forward this call back to the same named function in pythonproxy.py
    """
    return pythonproxy._pythonproxy_capture_traceback( excinfo )


def foofunc():
    ""
    return 'foobar'


def raise_fake_exception():
    ""
    raise Exception( 'fake exception' )


class startup_RemotePythonProxy( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_normal_startup(self):
        ""
        sshexe = write_fake_ssh_script()
        time.sleep(1)

        remote = RemotePythonProxy( 'sparky', pythonexe=rpy, sshcmd=sshexe )
        remote.start()

    def test_when_startup_fails(self):
        ""
        sshexe = write_fake_ssh_script( fake_crash=True )
        time.sleep(1)

        remote = RemotePythonProxy( 'sparky', pythonexe=rpy, sshcmd=sshexe )
        try:
            remote.start()
        except pythonproxy.FailedConnectionError as e:
            exc = str(e)
        else:
            raise Exception( 'expected a FailedConnectionError exception' )

        assert 'I am not long to this world' in exc
        assert 'startup error' in exc
        assert 'Traceback' in exc and 'fake crash' in exc


class tests_using_RemotePythonProxy_class( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

        self.remote = RemotePythonProxy( pythonexe=rpy, logfile='logfile' )
        self.remote.start()

    def tearDown(self):
        ""
        self.remote.close()

    def test_call_a_function_using_the_call_method(self):
        ""
        self.remote.execute( pythonproxy.get_source_code( somefunc ) )
        rtn = self.remote.call( 'somefunc', ['abc'], key=3 )

        val = ''.join( rtn.split() )
        assert val == "arg0=['abc'],key=3" or val == 'arg0=["abc"],key=3'

    def test_sending_a_function_object(self):
        ""
        self.remote.send( somefunc )
        rtn = self.remote.call( 'somefunc', 'foo' )

        val = ''.join( rtn.split() )
        assert val == "arg0=foo"

    def test_construct_a_remote_object_and_manipulate_locally(self):
        ""
        obj = self.remote.construct( 'open', abspath('foo.txt'), "wt" )
        obj.write( 'hello world\n' )
        obj.close()

        assert util.readfile( 'foo.txt' ).strip() == 'hello world'

    def test_import_a_remote_module_and_manipulate_locally(self):
        ""
        curdir = os.getcwd()
        util.writefile( 'adir/foo.txt', "hello world\n" )
        time.sleep(1)

        obj = self.remote.module( 'os' )
        obj.chdir( abspath( 'adir' ) )
        fL = obj.listdir( '.' )
        rwd = obj.getcwd()
        pwd = os.getcwd()

        print3( 'fL', fL, 'rwd', rwd )
        assert rwd == abspath( 'adir' ) and pwd == curdir
        assert fL == ['foo.txt']

    def test_import_a_nested_module(self):
        ""
        curdir = os.getcwd()
        util.writefile( 'adir/foo.txt', "hello world\n" )
        time.sleep(1)

        obj = self.remote.module( 'os.path' )
        self.remote.execute( 'import os',
                             'os.chdir( "'+abspath('adir')+'" )' )
        val1 = obj.exists( 'foo.txt' )
        val2 = obj.isfile( 'foo.txt' )
        val3 = obj.isdir( 'foo.txt' )
        rwd = os.getcwd()

        assert val1 == True
        assert val2 == True
        assert val3 == False
        assert rwd == curdir

    def could_probably_make_this_work(self):
        ""
        obj = self.remote.module( 'os' )
        rtn = obj.path.exists( '/some/file/path' )

    def test_sending_modules_and_importing_them(self):
        ""
        util.writefile( 'subdir/modA.py', """
            def afunc():
                return 'AFUNC RETURN'
            """ )
        util.writefile( 'subdir/modB.py', """
            import modA
            def bfunc():
                return modA.afunc()
            """ )
        time.sleep(1)

        sys.path.insert( 0, abspath('subdir') )
        try:
            import modA as mA
            import modB as mB
            print3( 'names', mA.__name__, mB.__name__ )
            self.remote.send( mA )
            self.remote.send( mB )
            mod = self.remote.module( 'modB' )
            rtn = mod.bfunc()
        finally:
            sys.path.pop( 0 )

        assert rtn == 'AFUNC RETURN'

    def test_for_lost_remote_process(self):
        ""
        # the implementation fails on the first call, but that is not a
        # requirement; if not, it must fail on the second call

        exc = None
        try:
            self.remote.call( 'sys.exit', 0 )
        except pythonproxy.FailedConnectionError as e:
            exc = str(e)

        if not exc:
            try:
                pythonproxy.FailedConnectionError( self.remote.call, 'os.getcwd' )
            except pythonproxy.FailedConnectionError as e:
                exc = str(e)
            else:
                raise Exception( 'expected a FailedConnectionError exception' )

        assert 'connection lost' in exc

    def test_calling_the_proxy_after_the_connection_is_closed(self):
        ""
        cwd = self.remote.call( 'os.getcwd' )
        assert os.path.samefile( cwd, os.getcwd() )

        self.remote.close()

        try:
            cwd = self.remote.call( 'os.getcwd' )
        except pythonproxy.FailedConnectionError as e:
            exc = str(e)
        else:
            raise Exception( 'expected a FailedConnectionError exception' )
        assert 'connection is not alive' in exc

        try:
            self.remote.execute( 'print ( "hello" )' )
        except pythonproxy.FailedConnectionError as e:
            exc = str(e)
        else:
            raise Exception( 'expected a FailedConnectionError exception' )
        assert 'connection is not alive' in exc


class using_the_context_manager( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_using_the_context_manager(self):
        ""
        sshexe = write_fake_ssh_script()
        util.writefile( 'adir/junk.txt', "junk content" )
        time.sleep(1)

        with pythonproxy.python_proxy( 'sparky',
                                        pythonexe=rpy,
                                        sshcmd=sshexe) as proxy:
            proxy.call( 'os.chdir', abspath('adir') )
            rd = proxy.call( 'os.getcwd' )

        assert os.path.samefile( rd, 'adir' )


def printfunc( *args ):
    ""
    print ( 'args='+','.join( [ str(arg) for arg in args ] ) )


def somefunc( arg0, key=None ):
    ""
    if key:
        return 'arg0='+str(arg0)+',key='+str(key)
    else:
        return 'arg0='+str(arg0)


class SomeClass:
    def __init__(self, *args):
        pass
    def func(self, **kwargs):
        pass


def get_output_line_from_RemotePython( remote, timeout=5 ):
    ""
    tstart = time.time()
    while True:

        line = remote.getOutputLine()
        if line:
            return line

        assert time.time()-tstart < timeout, 'timeout waiting for output line'
        time.sleep(0.5)


def write_fake_ssh_script( fake_crash=False ):
    ""
    lineL = [ '#!'+sys.executable,
              'import sys, os, subprocess, shlex, time' ]

    if fake_crash:
        lineL.append( 'print ( "Warning: I am not long to this world" )' )
        lineL.append( 'raise Exception( "fake crash" )' )

    lineL.extend( [ 'cmdL = []',
                    'for arg in sys.argv[2:]:  # exclude the machine name',
                    '    cmdL.extend( shlex.split( arg ) )',
                    'subprocess.check_call( cmdL )' ] )

    util.writescript( 'fakessh', '\n'.join( lineL ) )

    return abspath( 'fakessh' )


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
