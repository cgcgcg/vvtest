#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: trig

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time
import unittest
import shutil
import re
from textwrap import dedent

import trigtestutils as trigutil
import testutils as util
from testutils import print3

from remotepython import RemotePython

import pythonproxy
from pythonproxy import RemotePythonProxy


rpy = sys.executable
#rpy='/home/rrdrake/bin/Linux/py266/bin/python'
#rpy='/home/rrdrake/bin/Linux/py365/bin/python'


class unit_tests( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

    def test_getting_source_code(self):
        ""
        util.writefile( 'pythonproxy_getting_source_code.py', """
            import os, sys
            def printsyspath():
                print ( sys.path )
            """ )
        time.sleep(1)

        src = pythonproxy.get_source_code( somefunc )
        assert src.strip() == '\n'.join( [
            "def somefunc( arg0, key=None ):",
            '    ""',
            "    if key:",
            "        return 'arg0='+str(arg0)+',key='+str(key)",
            "    else:",
            "        return 'arg0='+str(arg0)" ] )

        src = pythonproxy.get_source_code( SomeClass )
        assert src.strip() == '\n'.join( [
            'class SomeClass:',
            '    def __init__(self, *args):',
            '        pass',
            '    def func(self, **kwargs):',
            '        return 42' ] )

        sys.path.append( os.getcwd() )
        try:
            import pythonproxy_getting_source_code as amod
            src = pythonproxy.get_source_code( amod )
            assert src.strip() == '\n'.join( [
                'import os, sys',
                'def printsyspath():',
                '    print ( sys.path )' ] )
        finally:
            sys.path.pop()

    def test_sending_bootstrap_code(self):
        ""
        remote = RemotePython( logfile='logfile')
        remote.start()

        err = pythonproxy.send_bootstrap_code( remote )
        assert not err

        # check that the remote is still alive
        remote.execute(
            'print ( "MARK="+str(_remotepython_try_except_code_lines) )' )
        assert get_output_line( remote ).startswith( 'MARK=' )

    def test_sending_internal_utility_functions(self):
        ""
        util.writefile( 'subdir/amod.py', """
            import os, sys
            def afunc():
                return 'avalue'
            """ )
        time.sleep(1)

        remote = RemotePython( logfile='logfile')
        remote.start()

        err = pythonproxy.send_internal_utilities( remote, 10 )
        assert not err

        remote.execute( 'print ( "OBJS="+str(_remotepython_function_call)'
                                       '+str(_remotepython_import_module)'
                                       '+str(SerializationError) )' )
        assert get_output_line( remote ).startswith( 'OBJS=' )
        remote.close()

        # get a function then remove the source so it won't be available
        sys.path.insert( 0, abspath( 'subdir' ) )
        try:
            from amod import afunc
        finally:
            sys.path.pop(0)
        shutil.rmtree( 'subdir' )
        time.sleep(1)

        remote = RemotePython( logfile='logfile')
        remote.start()
        err = pythonproxy.send_internal_utilities( remote, 10, [afunc] )
        assert 'Failed to get source code' in err and 'afunc' in err
        remote.close()

        remote = RemotePython( logfile='logfile')
        remote.start()
        err = pythonproxy.send_internal_utilities( remote, 10, [FakeDerivedClass] )
        # print3( err )
        assert 'RemoteExceptionError' in err
        assert 'remote: NameError:' in err

        remote.close()

    def test_waiting_for_remote_return_value(self):
        ""
        remote = RemotePython( logfile='logfile')
        remote.start()

        err = pythonproxy.send_internal_utilities( remote, 10 )
        # print3( err )
        assert not err

        remote.execute( dedent( '''
            import time
            def myfunc(nsecs):
                time.sleep(nsecs)
                return "foobar"
            ''' ) )

        val = pythonproxy.remote_function_call( remote, 5, 'myfunc', [1], {} )
        assert val == 'foobar'

        val = pythonproxy.remote_function_call( remote, 5, 'myfunc', [4], {} )
        assert val == 'foobar'

        t0 = time.time()
        self.assertRaises( pythonproxy.RemoteTimeoutError,
            pythonproxy.remote_function_call, remote, 3, 'myfunc', [10], {} )
        t1 = time.time()
        assert t1-t0 > 2.5 and t1-t0 < 5

    def test_capturing_a_remote_exception(self):
        ""
        remote = RemotePython( logfile='logfile')
        remote.start()

        err = pythonproxy.send_internal_utilities( remote, 10 )
        assert not err

        remote.execute( dedent( '''
            def foofunc():
                return "foobar"
            def raise_fake_exception():
                raise Exception( 'fake exception' )
            ''' ) )

        val = pythonproxy.remote_function_call( remote, 5, 'foofunc', [], {} )
        assert val == 'foobar'

        try:
            pythonproxy.remote_function_call( remote, 5,
                                              'raise_fake_exception', [], {} )
        except pythonproxy.RemoteExceptionError as e:
            exclines = str(e).splitlines()
        else:
            raise Exception( 'expected a RemoteExceptionError exception' )

        assert exclines[0].startswith( 'caught remote exception:' )
        assert exclines[1].startswith( 'remote: Traceback' )
        for line in exclines[1:]:
            # print3( line )
            assert line.startswith( 'remote: ' )
        assert re.match( 'remote: .*fake exception', exclines[-1] )

    def test_lost_connection_waiting_for_return_value(self):
        ""
        remote = RemotePython( logfile='logfile')
        remote.start()

        err = pythonproxy.send_internal_utilities( remote, 10 )
        assert not err

        remote.execute( dedent( '''
            import sys, time
            def callexit(nsecs):
                time.sleep(nsecs)
                sys.exit(0)
            ''' ) )

        t0 = time.time()
        try:
            val = pythonproxy.remote_function_call( remote, 10, 'callexit', [2], {} )
        except pythonproxy.FailedConnectionError as e:
            exc = str(e)
        else:
            raise Exception( 'expected a NoRemoteConnectionError exception' )
        t1 = time.time()
        assert t1-t0 >= 2 and t1-t0 < 5
        assert 'connection lost' in exc


class startup_RemotePythonProxy( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_normal_startup(self):
        ""
        sshexe = write_fake_ssh_script()
        time.sleep(1)

        remote = RemotePythonProxy( 'sparky', pythonexe=rpy, sshcmd=sshexe )
        remote.start()

    def test_when_startup_fails(self):
        ""
        sshexe = write_fake_ssh_script( fake_crash=True )
        time.sleep(1)

        remote = RemotePythonProxy( 'sparky', pythonexe=rpy, sshcmd=sshexe )
        try:
            remote.start()
        except pythonproxy.FailedConnectionError as e:
            exc = str(e)
        else:
            raise Exception( 'expected a FailedConnectionError exception' )

        # print3( exc )
        assert 'I am not long to this world' in exc
        assert 'startup error' in exc
        assert 'Traceback' in exc and 'fake crash' in exc


class tests_using_RemotePythonProxy_class( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

        self.remote = RemotePythonProxy( pythonexe=rpy, logfile='logfile' )
        self.remote.start()

    def tearDown(self):
        ""
        self.remote.shutdown()

    def test_send_source_code_to_remote(self):
        ""
        self.remote.send( dedent( """\
            def myfunc():
                return 42
            """ ) )
        self.remote.send( 'myval = myfunc()',
                          dedent( """\
            with open( '"""+abspath('out.txt')+"""', 'wt' ) as fp:
                fp.write( repr(myval) + os.linesep )
            """ ) )
        time.sleep(1)

        assert util.readfile('out.txt').strip() == '42'

    def test_errors_in_source_code_sent_to_remote(self):
        ""
        try:
            self.remote.send( dedent( """\
                import os
                myvar =
                dir(os)
                """ ) )
        except pythonproxy.RemoteExceptionError as e:
            exc = str(e)
        else:
            raise Exception( 'expected an error' )
        # print3( exc )
        assert 'caught remote exception' in exc
        assert 'remote: SyntaxError:' in exc

        try:
            self.remote.send( dedent( """\
                import os
                myvar = some_non_existent_variable_4893473
                dir(os)
                """ ) )
        except pythonproxy.RemoteExceptionError as e:
            exc = str(e)
        else:
            raise Exception( 'expected an error' )
        # print3( exc )
        assert 'caught remote exception' in exc
        assert 'remote: NameError:' in exc

    def test_call_a_remote_function(self):
        ""
        self.remote.send( dedent( """\
            def myfunc1( arg="" ):
                return "hello"+arg
            """ ) )
        assert self.remote.myfunc1() == 'hello'
        assert self.remote.myfunc1( 'world' ) == 'helloworld'

        self.remote.send( dedent( """\
            def myfunc2( **kwargs ):
                return "hello"+kwargs["foo"]
            """ ) )
        assert self.remote.myfunc2( foo='bar' ) == "hellobar"

        # arguments must be reconstructable with eval(repr(arg))

        # self.remote.myfunc( os )
        self.assertRaises( pythonproxy.RemoteExceptionError,
                           self.remote.myfunc1, os )

        # self.remote.myfunc( foo=os )
        self.assertRaises( pythonproxy.RemoteExceptionError,
                           self.remote.myfunc2, foo=os )

        # the return value must also be reconstructable with eval(repr(rtn))

        self.remote.send( dedent( """\
            def myfunc3():
                return os
            """ ) )
        # self.remote.myfunc3()
        self.assertRaises( pythonproxy.SerializationError, self.remote.myfunc3 )

    def test_construct_and_use_a_remote_object(self):
        ""
        os.mkdir( 'subdir' )
        time.sleep(1)

        obj = self.remote.construct( 'open', abspath('foo.txt'), "wt" )
        obj.write( 'hello world\n' )
        obj.close()
        assert util.readfile( 'foo.txt' ).strip() == 'hello world'

        cwd = os.getcwd()
        self.remote.send( 'os.chdir('+repr(abspath('subdir'))+')' )
        assert os.path.samefile( cwd, os.getcwd() )

        self.remote.assign( 'fp', 'open', 'bar.txt', "wt" )
        self.remote.fp.write( 'hello mars\n' )
        self.remote.fp.close()
        assert util.readfile( 'subdir/bar.txt' ).strip() == 'hello mars'

    def test_sending_a_function_object(self):
        ""
        self.remote.send( somefunc )
        assert self.remote.somefunc( 'foo' ) == 'arg0=foo'
        assert self.remote.somefunc( 'foo', key=42 ) == 'arg0=foo,key=42'

    def test_sending_a_function_whose_source_is_not_available(self):
        ""
        util.writefile( 'subdir/amod.py', """
            import os, sys
            def afunc():
                return 'avalue'
            """ )
        time.sleep(1)

        # get a function then remove the source so it won't be available
        sys.path.insert( 0, abspath( 'subdir' ) )
        try:
            from amod import afunc
        finally:
            sys.path.pop(0)
        shutil.rmtree( 'subdir' )
        time.sleep(1)

        # self.remote.send( afunc )
        self.assertRaises( pythonproxy.PythonProxyError, self.remote.send, afunc )

    def test_sending_a_class_type(self):
        ""
        self.remote.send( SomeClass )

        inst = self.remote.construct( 'SomeClass', 'nada' )
        assert inst.func() == 42

    def test_sending_a_class_type_with_an_error(self):
        ""
        try:
            # the base class is not available on the remote side
            self.remote.send( FakeDerivedClass )
        except pythonproxy.RemoteExceptionError as e:
            exc = str(e)
        else:
            raise Exception( 'expected an exception' )

        # print3( exc )
        assert 'caught remote exception' in exc
        assert 'remote: NameError:' in exc
        assert 'FakeBaseClass' in exc

    def test_sending_a_module(self):
        ""
        util.writefile( 'subdir/modA.py', """
            def afunc():
                return 'AFUNC RETURN'
            """ )
        time.sleep(1)

        sys.path.insert( 0, abspath('subdir') )
        try:
            import modA as mA
            self.remote.send( mA )
        finally:
            sys.path.pop( 0 )

        self.remote.send( dedent( """\
            def call_afunc():
                import modA
                return modA.afunc()
            """ ) )
        assert self.remote.call_afunc() == 'AFUNC RETURN'

    def test_sending_a_module_with_an_error(self):
        ""
        util.writefile( 'subdir/modA.py', """
            def afunc():
                return 'AFUNC RETURN'
            """ )
        util.writefile( 'subdir/modB.py', """
            import modA
            def bfunc():
                return modA.afunc()
            """ )
        time.sleep(1)

        sys.path.insert( 0, abspath('subdir') )
        try:
            import modA as mA
            import modB as mB
            try:
                # module modA is not available on the remote side
                self.remote.send( mB )
            except pythonproxy.RemoteExceptionError as e:
                exc = str(e)
            else:
                raise Exception( 'expected an exception' )
        finally:
            sys.path.pop( 0 )

        # print3( exc )
        assert 'caught remote exception' in exc
        assert 'remote: ImportError' in exc or \
               'remote: ModuleNotFoundError' in exc

        self.remote.dir()

    def test_for_automatically_added_modules(self):
        ""
        util.writefile( 'subdir/file.txt', 'content' )
        time.sleep(1)

        self.remote.os.chdir( abspath('subdir') )
        nb = self.remote.os.path.getsize( 'file.txt' )
        assert nb == os.path.getsize('subdir/file.txt')

        lim = self.remote.sys.getrecursionlimit()
        assert lim and lim > 0

    def test_importing_module_as_local_object(self):
        ""
        cwd = os.getcwd()
        os.mkdir( 'subdir' )
        time.sleep(1)

        ros = self.remote.import_module( 'os' )
        ros.chdir( abspath('subdir') )
        rcwd = ros.getcwd()
        assert os.path.samefile( rcwd, abspath('subdir') )
        assert os.path.samefile( os.getcwd(), cwd )

    def test_importing_module_adds_to_proxy_namespace(self):
        ""
        cwd = os.getcwd()
        os.mkdir( 'subdir' )
        time.sleep(1)

        self.remote.import_module( 'os' )
        self.remote.os.chdir( abspath('subdir') )
        rcwd = self.remote.os.getcwd()
        assert os.path.samefile( rcwd, abspath('subdir') )
        assert os.path.samefile( os.getcwd(), cwd )

    def test_importing_a_nested_module_name(self):
        ""
        util.writefile( 'subdir/file.txt', 'content' )
        time.sleep(1)

        rpath = self.remote.import_module( 'os.path' )
        self.remote.os.chdir( abspath('subdir') )
        assert self.remote.os.path.isfile( 'file.txt' )
        nb = rpath.getsize( 'file.txt' )
        assert nb == os.path.getsize( 'subdir/file.txt' )

    def test_import_errors(self):
        ""
        try:
            self.remote.import_module( 'no_exist_module_name_3894573' )
        except pythonproxy.RemoteExceptionError as e:
            exc = str(e)
        else:
            raise Exception( 'expected an exception' )
        assert 'remote: ImportError' in exc or \
               'remote: ModuleNotFoundError' in exc

        try:
            self.remote.import_module( 'os.no_exist_submodule_3458' )
        except pythonproxy.RemoteExceptionError as e:
            exc = str(e)
        else:
            raise Exception( 'expected an exception' )
        assert 'remote: ImportError' in exc or \
               'remote: ModuleNotFoundError' in exc

    def test_sending_modules_and_importing_them(self):
        ""
        util.writefile( 'subdir/modA.py', """
            def afunc():
                return 'AFUNC RETURN'
            """ )
        util.writefile( 'subdir/modB.py', """
            import modA
            def bfunc():
                return modA.afunc()
            """ )
        time.sleep(1)

        sys.path.insert( 0, abspath('subdir') )
        try:
            import modA as mA
            import modB as mB
            print3( 'names', mA.__name__, mB.__name__ )
            self.remote.send( mA, mB )
            mod = self.remote.import_module( 'modB' )
            rtn = mod.bfunc()
        finally:
            sys.path.pop( 0 )

        assert rtn == 'AFUNC RETURN'

    def test_for_lost_remote_process(self):
        ""
        # the implementation fails on the first call, but that is not a
        # requirement; if not, it must fail on the second call

        exc = None
        try:
            self.remote.sys.exit(0)
        except pythonproxy.FailedConnectionError as e:
            exc = str(e)

        if not exc:
            try:
                self.remote.os.getcwd()
            except pythonproxy.FailedConnectionError as e:
                exc = str(e)
            else:
                raise Exception( 'expected a FailedConnectionError exception' )

        assert 'connection lost' in exc

    def test_calling_the_proxy_after_the_connection_is_closed(self):
        ""
        cwd = self.remote.os.getcwd()
        assert os.path.samefile( cwd, os.getcwd() )

        self.remote.shutdown()

        try:
            cwd = self.remote.os.getcwd()
        except pythonproxy.FailedConnectionError as e:
            exc = str(e)
        else:
            raise Exception( 'expected a FailedConnectionError exception' )
        assert 'connection is not alive' in exc

        try:
            self.remote.send( 'print ( "hello" )' )
        except pythonproxy.FailedConnectionError as e:
            exc = str(e)
        else:
            raise Exception( 'expected a FailedConnectionError exception' )
        assert 'connection is not alive' in exc


class using_the_context_manager( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_using_the_context_manager(self):
        ""
        sshexe = write_fake_ssh_script()
        util.writefile( 'adir/junk.txt', "junk content" )
        time.sleep(1)

        with pythonproxy.python_proxy( 'sparky',
                                        pythonexe=rpy,
                                        sshcmd=sshexe) as proxy:
            proxy.os.chdir( abspath('adir') )
            rd = proxy.os.getcwd()

        assert os.path.samefile( rd, 'adir' )


def somefunc( arg0, key=None ):
    ""
    if key:
        return 'arg0='+str(arg0)+',key='+str(key)
    else:
        return 'arg0='+str(arg0)


class SomeClass:
    def __init__(self, *args):
        pass
    def func(self, **kwargs):
        return 42


class FakeBaseClass:
    pass

class FakeDerivedClass( FakeBaseClass ):
    pass


def get_output_line( remote, timeout=5 ):
    ""
    tstart = time.time()
    while True:

        line = remote.getOutputLine()
        if line:
            return line

        assert time.time()-tstart < timeout, 'timeout waiting for output line'
        time.sleep(0.5)


def write_fake_ssh_script( fake_crash=False ):
    ""
    lineL = [ '#!'+sys.executable,
              'import sys, os, subprocess, shlex, time' ]

    if fake_crash:
        lineL.append( 'print ( "Warning: I am not long to this world" )' )
        lineL.append( 'raise Exception( "fake crash" )' )

    lineL.extend( [ 'cmdL = []',
                    'for arg in sys.argv[2:]:  # exclude the machine name',
                    '    cmdL.extend( shlex.split( arg ) )',
                    'subprocess.check_call( cmdL )' ] )

    util.writescript( 'fakessh', '\n'.join( lineL ) )

    return abspath( 'fakessh' )


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
