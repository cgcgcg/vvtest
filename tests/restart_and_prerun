#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3


class restart_tests( vtu.vvtestTestCase ):

    def test_prerun_file_cleanout(self):
        ""
        util.write_py_script( "clean.vvt", """
            import os
            for f in os.listdir('.'):
                print ( 'existing file = '+f )
            assert not os.path.exists( 'generated_file.txt' )
            fp = open( 'generated_file.txt', 'w' )
            fp.write( 'gen file contents' )
            fp.close()
            """ )

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            assert len( glob.glob( 'TestResults*/clean/generated_file.txt' ) ) == 1

            # the generated file should be removed prior to running the script
            vrun = vtu.runvvtest( '-R', batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            assert vrun.countGrepLogs( 'existing*generated' ) == 0

            # with -m option should fail because of "noclobber" in script
            vrun = vtu.runvvtest( '-R -m', batch=batch )
            vrun.assertCounts( total=1, fail=1 )
            assert vrun.countGrepLogs( 'existing*generated' ) == 1

    def test_prerun_file_cleanout_when_test_contains_a_soft_linked_directory(self):
        ""
        util.writefile( 'softdir.vvt', """
            #VVT: link : subdir
            import os
            assert os.path.exists( 'subdir/afile.txt' )
            """ )
        util.writefile( 'subdir/afile.txt', 'contents\n' )

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            afile = util.globfile( 'TestResults*/softdir/subdir/afile.txt' )

            # run again exercises the pre-clean logic
            vrun = vtu.runvvtest( '-R', batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            assert os.path.exists( afile )

            # now with post-clean (soft links are not cleaned)
            vrun = vtu.runvvtest( '-R -C', batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            assert os.path.exists( afile )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
