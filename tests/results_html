#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util


class suite( vtu.vvtestTestCase ):

    def test_producing_an_HTML_results_file(self):
        ""
        write_three_test_files()

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )

        vrun = vtu.runvvtest( '-i --html=../tr.htm', chdir=vrun.resultsDir() )

        doc = util.read_xml_file( 'tr.htm' )
        lines = get_status_lines_from_html( doc )
        self.assert_tests_in_html( lines )

    def assert_tests_in_html(self, lines):
        ""
        assert len( lines ) == 5
        linestr = '\n'.join(lines)
        assert len( util.greplines( 'FailTest', linestr ) ) == 1
        assert len( util.greplines( 'DiffTest.np=1', linestr ) ) == 1
        assert len( util.greplines( 'DiffTest.np=2', linestr ) ) == 1
        assert len( util.greplines( 'subdir/param.hello=mars', linestr ) ) == 1
        assert len( util.greplines( 'subdir/param.hello=world', linestr ) ) == 1

    def test_producing_an_HTML_results_file_as_part_of_execution(self):
        ""
        write_three_test_files()

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--html tr.html' )
            vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )

            doc = util.read_xml_file( 'tr.html' )
            lines = get_status_lines_from_html( doc )
            self.assert_tests_in_html( lines )


def write_three_test_files():
    ""
    util.writefile( "subdir/param.vvt", """
        #VVT: parameterize : hello = world mars
        import time
        time.sleep(1)
        """ )
    util.writefile( "FailTest.vvt", """
        import os, sys, time
        import vvtest_util as vvt
        time.sleep(2)
        raise Exception( 'pitch a fake exception' )
        """)
    util.writefile( "DiffTest.vvt", """
        #VVT: parameterize : np = 1 2
        import sys, time
        import vvtest_util as vvt
        time.sleep(3)
        print ( "fake difference of 29" )
        sys.exit( vvt.diff_exit_status )
        """ )


def get_status_lines_from_html( htmldoc ):
    ""
    lines = []

    for nd in recurse_status_list_items( htmldoc ):
        txt = util.get_sub_text_from_xml_node( nd )
        lines.append( txt )

    return lines


def recurse_status_list_items( xmlnode ):
    ""
    for nd in util.recursive_find_xml_element( xmlnode, 'li' ):
        if nd.text and nd.text.strip().startswith( 'Status:' ):
            yield nd


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
