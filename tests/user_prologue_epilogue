#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3


class prologue_epilogue_plugin_tests( vtu.vvtestTestCase ):

    def test_calling_prologue(self):
        ""
        plug = vtu.make_user_plugin( """
            def prologue( cmdline ):
                ""
                print ( ' '.join(cmdline) )
            """ )

        rtn,out,err = util.call_capture_output( plug.callPrologue,
                                                ['foo','--bar'] )

        assert out.strip() == 'foo --bar'
        assert not err.strip()

    def test_calling_prologue_with_an_exception(self):
        ""
        plug = vtu.make_user_plugin( """
            def prologue( cmdline ):
                ""
                raise Exception( 'fake exception' )
            """ )

        rtn,out,err = util.call_capture_output( plug.callPrologue,
                                                ['foo','--bar'] )
        assert 'fake exception' in out

        plug.callPrologue( ['foo','--bar'] )

    def epilogue_func(self, result, runtime, timeout, skip):
        ""
        func = """
            def epilogue( tests ):
                ""
                assert len(tests) == 1
                name,tD = list( tests.items() )[0]
                assert name == 'sdir/atest.np=4'
                assert tD['rundir'].endswith( 'sdir/atest.np=4' )
                assert tD['result'] == """+repr(result)+"""
                assert tD['runtime'] == """+repr(runtime)+"""
                assert tD['timeout'] == """+repr(timeout)
        if skip:
            func += """
                assert """+repr(skip)+""" in tD['skip']"""
        func += """
                print ( 'done done done' )
        """
        return func

    def test_calling_epilogue_with_test_that_did_not_run(self):
        ""
        func = self.epilogue_func( 'notrun', None, None, None )
        plug = vtu.make_user_plugin( func )

        tcase = vtu.make_fake_TestCase( result='notrun', runtime=None )

        rtn,out,err = util.call_capture_output(
                        plug.callEpilogue, os.getcwd(), [tcase] )

        assert not err.strip()
        assert out.strip() == 'done done done'

    def test_calling_epilogue_with_test_that_ran_but_timed_out(self):
        ""
        func = self.epilogue_func( 'fail', 42, 40, None )
        plug = vtu.make_user_plugin( func )

        tcase = vtu.make_fake_TestCase( result='fail', runtime=42 )
        tcase.getStat().setAttr( 'timeout', 40 )

        rtn,out,err = util.call_capture_output(
                        plug.callEpilogue, os.getcwd(), [tcase] )

        assert not err.strip()
        assert out.strip() == 'done done done'

    def test_calling_epilogue_with_test_that_was_skipped(self):
        ""
        func = self.epilogue_func( 'notrun', None, None, 'excluded by platform' )
        plug = vtu.make_user_plugin( func )

        tcase = vtu.make_fake_TestCase( result='skip' )

        rtn,out,err = util.call_capture_output(
                        plug.callEpilogue, os.getcwd(), [tcase] )

        assert not err.strip()
        assert out.strip() == 'done done done'

    def test_calling_epilogue_with_an_exception(self):
        ""
        plug = vtu.make_user_plugin( """
            def epilogue( tests ):
                ""
                raise Exception( 'fake exception' )
            """ )
        tcase = vtu.make_fake_TestCase( result='fail', runtime=42 )

        rtn,out,err = util.call_capture_output(
                        plug.callEpilogue, os.getcwd(), [tcase] )
        assert 'fake exception' in out

        plug.callEpilogue( os.getcwd(), [tcase] )

    def test_prologue_epilogue_integration(self):
        ""
        util.writefile( 'testA.vvt', """
            import time
            time.sleep(1)
            """ )
        util.writefile( 'adir/vvtest_user_plugin.py', """
            import os

            def prologue( cmdline ):
                ""
                print ( 'CMDLINE='+' '.join( cmdline ) )

            def epilogue( tests ):
                ""
                assert len(tests) == 1
                info = tests['testA']
                assert info['rundir'].endswith( 'testA' )
                assert os.path.exists( info['rundir']+'/execute.log' )
                assert info['result'] == 'pass'
                assert info['runtime'] > 0 and info['runtime'] < 5
                assert info['timeout'] > 1
                print ( 'EPILOGUE='+repr(info['command']) )
            """ )
        adir = abspath( 'adir' )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-vv --config', adir, batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            tdir = vrun.resultsDir()

            if batch:
                # prologue and epilogue should not be called in the batch jobs
                fn = util.globfile( tdir+'/batchset*/qbat-out*' )
                assert len( util.grepfiles( 'CMDLINE=', fn ) ) == 0
                assert len( util.grepfiles( 'EPILOGUE=', fn ) ) == 0

            def check_cmdline( out ):
                lines = util.greplines( 'EPILOGUE=', out )
                assert len( lines ) == 1
                cmd = eval( lines[0].split( 'EPILOGUE=', 1 )[1] )
                assert sys.executable in cmd and 'testA.vvt' in cmd

            assert 'CMDLINE=' in vrun.out and '-vv --config' in vrun.out
            check_cmdline( vrun.out )

            vrun = vtu.runvvtest( '-i -v --config', adir )
            vrun.assertCounts( total=1, npass=1 )

            assert 'CMDLINE=' not in vrun.out
            check_cmdline( vrun.out )

    def test_calling_epilogue_when_test_directory_does_not_exist(self):
        ""
        util.writefile( 'atest.vvt', 'pass' )

        util.writefile( 'adir/vvtest_user_plugin.py', """
            def epilogue( tests ):
                ""
                print ( 'EPILOGUE=foobar' )
            """ )
        adir = abspath( 'adir' )

        time.sleep(1)

        with util.set_environ( VVTEST_CONFIGDIR=adir ):

            vrun = vtu.runvvtest( '-vv' )
            vrun.assertCounts( total=1, npass=1 )
            assert 'EPILOGUE=foobar' in vrun.out

            vrun = vtu.runvvtest( '-vv -i' )
            assert 'EPILOGUE=foobar' in vrun.out

            vrun = vtu.runvvtest( '-vv -i -o myoption' )
            assert 'EPILOGUE=foobar' not in vrun.out
            assert 'directory not found' in vrun.out
            assert 'Traceback' not in vrun.out

    def test_using_user_args_to_pass_options_to_prologue(self):
        ""
        util.writefile( 'atest.vvt', 'pass' )

        util.writefile( 'adir/vvtest_user_plugin.py', """
            def prologue( cmdline ):
                ""
                print ( 'the_cmdline='+repr(cmdline) )
            """ )
        adir = abspath( 'adir' )

        time.sleep(1)

        with util.set_environ( VVTEST_CONFIGDIR=adir ):

            vrun = vtu.runvvtest( '--user-args "--myoption -j 9"' )
            vrun.assertCounts( total=1, npass=1 )

            sL = vrun.grepLines( 'the_cmdline=' )[0].split('the_cmdline=',1)
            cmdL = eval( sL[1] )
            idx = cmdL.index( '--user-args' )
            assert cmdL[idx+1] == "--myoption -j 9"


############################################################################

util.run_test_cases(sys.argv, sys.modules[__name__])
