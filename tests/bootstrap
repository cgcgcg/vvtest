#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3


class Testing_boostrap_file( vtu.vvtestTestCase ):

    def test_without_a_bootstrap_file(self):
        ""
        util.writefile( 'hello.vvt', """
            import os, sys
            print ( "hello from the python test script" )
            """ )

        vrun = vtu.runvvtest()
        vrun.assertCounts( npass=1 )

    def run_soft_linked_vvtest_and_expect_one_test_pass(self, args='',
                                                              batch=False,
                                                              addplatform=True):
        ""
        cmd = vtu.vvtest_command_line( args, batch=batch,
                                       vvtestpath=abspath( 'vvtest' ),
                                       addplatform=addplatform )

        x,out = util.runcmd( cmd )
        # print ( out )
        assert x == 0
        counts = vtu.parse_vvtest_counts( out )
        assert counts['npass'] == 1

    def test_using_a_softlink_to_vvtest(self):
        ""
        util.writefile( 'hello.vvt', """
            import os, sys
            import vvtest_util as vvt
            import script_util.standard_utilities as util
            assert not util.analyze_only()
            """ )
        os.symlink( vtu.vvtest_file, 'vvtest' )

        self.run_soft_linked_vvtest_and_expect_one_test_pass()

    def test_a_config_dir_next_to_a_vvtest_soft_link(self):
        ""
        os.symlink( vtu.vvtest_file, 'vvtest' )

        util.writefile( 'config/idplatform.py', """
            def platform( opts ):
                return 'SkyNet'
            """ )
        util.writefile( 'config/solarsystem.py', """
            def energy():
                return 'its complicated'
            """ )

        util.writefile( 'hello.vvt', """
            import os, sys
            import vvtest_util as vvt
            assert vvt.PLATFORM == 'SkyNet'
            import script_util.standard_utilities as util
            assert not util.analyze_only()
            import solarsystem
            assert solarsystem.energy() == 'its complicated'
            """ )

        self.run_soft_linked_vvtest_and_expect_one_test_pass( addplatform=False )
        self.run_soft_linked_vvtest_and_expect_one_test_pass( '-w', batch=True,
                                                              addplatform=False )

    def test_with_a_bootstrap_file(self):
        ""
        util.writefile( 'hello.vvt', """
            import os, sys
            print ( "special env var="+os.environ['SPECIAL_TEST_VAR'] )
            """ )
        os.symlink( vtu.vvtest_file, 'vvtest' )
        util.writefile( 'vvtest_bootstrap.py', """
            import os, time
            os.environ['SPECIAL_TEST_VAR'] = 'special value'
            fp = open( '"""+abspath('bscheck_')+"""'+str(os.getpid()), 'at' )
            fp.write( 'PWD='+os.getcwd() + os.linesep )
            fp.close()
            time.sleep(1)
            """ )

        for batch in [False,True]:

            vtu.remove_results()
            for fn in util.findfiles( 'bscheck_*', '.' ):
                os.remove( fn )

            self.run_soft_linked_vvtest_and_expect_one_test_pass( batch=batch )

            assert len( util.grepfiles( 'var=special value',
                        'TestResults*/hello*/execute.log' ) ) == 1

            fL = util.findfiles( 'bscheck_*', '.' )
            if batch:
                # both the initial vvtest execution and the batch job should
                # have run the bootstrap file
                assert len(fL) == 2
            else:
                assert len(fL) == 1

    def test_a_bootstrap_file_setting_the_config_dir(self):
        ""
        util.writefile( 'myconfig/script_util_plugin.py', """
            import os, sys
            def my_special_func():
                print ( 'my special function called' )
            """ )

        os.symlink( vtu.vvtest_file, 'vvtest' )
        util.writefile( 'vvtest_bootstrap.py', """
            import os
            os.environ['VVTEST_CONFIGDIR'] = '"""+abspath('myconfig')+"""'
            """ )

        util.writefile( 'hello.vvt', """
            import os, sys
            import script_util_plugin as util
            util.my_special_func()
            """ )

        self.run_soft_linked_vvtest_and_expect_one_test_pass()

        assert len( util.grepfiles( 'my special function called',
                    'TestResults*/hello*/execute.log' ) ) == 1

    def test_a_bootstrap_config_dir_is_overridden_with_command_line(self):
        ""
        util.writefile( 'myconfig/script_util_plugin.py', """
            import os, sys
            def my_special_func():
                print ( 'my special function called' )
            """ )

        util.writefile( 'cmdconfig/script_util_plugin.py', """
            import os, sys
            def my_special_func():
                print ( 'command config function called' )
            """ )

        os.symlink( vtu.vvtest_file, 'vvtest' )
        util.writefile( 'vvtest_bootstrap.py', """
            import os
            os.environ['VVTEST_CONFIGDIR'] = '"""+abspath('myconfig')+"""'
            """ )

        util.writefile( 'hello.vvt', """
            import os, sys
            import script_util_plugin as util
            util.my_special_func()
            """ )

        for batch in [False,True]:

            vtu.remove_results()

            optcfg = '--config ' + abspath('cmdconfig')
            self.run_soft_linked_vvtest_and_expect_one_test_pass( optcfg,
                                                                  batch=batch )

            assert len( util.grepfiles( 'my special function called',
                        'TestResults*/hello*/execute.log' ) ) == 0
            assert len( util.grepfiles( 'command config function called',
                        'TestResults*/hello*/execute.log' ) ) == 1


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
