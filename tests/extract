#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

import vvtestutils as vtu
import testutils as util
from libvvtest.errors import TestSpecError


class extract_use_cases( vtu.vvtestTestCase ):

    def test_all_files_get_extracted(self):
        ""
        util.writefile( 'orig/atest.vvt', """
            #VVT: copy : file1.txt
            #VVT: link : file2.txt
            #VVT: baseline : file3.txt, file3.txt
            #VVT: sources : file4.txt
            import os, vvtest_util as vvt
            assert os.path.exists( 'file1.txt' )
            assert os.path.exists( 'file2.txt' )
            assert os.path.exists( vvt.SRCDIR+'/file3.txt' )
            """ )
        util.writefile( 'orig/file1.txt', "file one" )
        util.writefile( 'orig/file2.txt', "file two" )
        util.writefile( 'orig/file3.txt', "file three" )
        util.writefile( 'orig/file4.txt', "file four" )

        vrun = vtu.runvvtest( chdir='orig' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.countTestLines( 'pass*atest' ) == 1

        # extract the orig directory then run in the extracted area

        vtu.runvvtest( '--extract copy orig' )

        vrun = vtu.runvvtest( chdir='copy' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.countTestLines( 'pass*atest' ) == 1

    def test_the_three_ways_name_substitution_can_occur(self):
        ""
        util.writefile( 'orig/atest.vvt', """
            #VVT: copy : $NAME.txt
            #VVT: link : NAME.txt
            #VVT: baseline : ${NAME}_base.txt, ${NAME}_base.txt
            #VVT: sources : {$NAME}_src.txt
            import os, vvtest_util as vvt
            assert os.path.exists( 'atest.txt' )
            assert os.path.exists( 'NAME.txt' )
            assert os.path.exists( vvt.SRCDIR+'/atest_base.txt' )
            assert os.path.exists( vvt.SRCDIR+'/atest_src.txt' )
            """ )
        util.writefile( 'orig/atest.txt', "file one" )
        util.writefile( 'orig/NAME.txt', "file two" )
        util.writefile( 'orig/atest_base.txt', "file three" )
        util.writefile( 'orig/atest_src.txt', "file four" )

        vrun = vtu.runvvtest( chdir='orig' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.countTestLines( 'pass*atest' ) == 1

        # extract the orig directory then run in the extracted area

        vtu.runvvtest( '--extract copy orig' )

        vrun = vtu.runvvtest( chdir='copy' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.countTestLines( 'pass*atest' ) == 1

    def test_extract_on_a_test_with_multiple_test_names(self):
        ""
        util.writefile( 'orig/tfile.vvt', """
            #VVT: testname : multi
            #VVT: testname : multi2
            #VVT: copy : common.txt
            #VVT: link (testname=multi) : m1.txt
            #VVT: copy (testname=multi2) : m2.txt
            """ )
        util.writefile( 'orig/common.txt', "file one" )
        util.writefile( 'orig/m1.txt', "file two" )
        util.writefile( 'orig/m2.txt', "file three" )
        util.writefile( 'orig/dummy.txt', "file dummy" )

        vtu.runvvtest( '--extract copy orig' )

        fL = glob.glob( 'copy/*' )
        fL.sort()
        self.assertEqual( fL, ['copy/common.txt','copy/m1.txt','copy/m2.txt','copy/tfile.vvt'] )

        # this time, exclude one of the tests

        vtu.runvvtest( '-k multi --extract cp2 orig' )

        fL = glob.glob( 'cp2/*' )
        fL.sort()
        self.assertEqual( fL, ['cp2/common.txt','cp2/m1.txt','cp2/tfile.vvt'] )

    def test_that_a_glob_pattern_will_be_expanded_in_source_files(self):
        ""
        util.writefile( 'orig/file1.txt', "f1\n" )
        util.writefile( 'orig/file_7.txt', "f7\n" )
        util.writefile( 'orig/atest.vvt', """
            #VVT: sources = file*.txt
            """ )

        vtu.runvvtest( '--extract copy orig' )

        fL = glob.glob( 'copy/*' )
        fL.sort()
        assert fL == ['copy/atest.vvt', 'copy/file1.txt', 'copy/file_7.txt']

    def test_that_globs_work_in_link_and_copy_files(self):
        ""
        util.writefile( 'orig/ln1.txt', "l1\n" )
        util.writefile( 'orig/ln_7.txt', "l7\n" )
        util.writefile( 'orig/cp1.txt', "c1\n" )
        util.writefile( 'orig/cp_7.txt', "c7\n" )
        util.writefile( 'orig/atest.vvt', """
            #VVT: link : ln*.txt
            #VVT: copy : cp*.txt
            """ )

        vtu.runvvtest( '--extract copy orig' )

        fL = glob.glob( 'copy/*' )
        fL.sort()
        assert fL == ['copy/atest.vvt', 'copy/cp1.txt', 'copy/cp_7.txt',
                      'copy/ln1.txt', 'copy/ln_7.txt']

    def test_extract_with_script_specification_file(self):
        ""
        util.write_py_script( 'orig/atest.vvt', """
            #VVT: copy : file1.txt
            #VVT: link : file2.txt
            #VVT: baseline : file3.txt, file3.txt
            #VVT: sources : file4.txt ${NAME}_*.py
            import os
            import vvtest_util as vvt
            for fn in [ 'file1.txt', 'file2.txt',
                        vvt.SRCDIR+'/file3.txt', vvt.SRCDIR+'/file4.txt',
                        vvt.SRCDIR+'/atest_1.py' ]:
                with open( fn, 'rt' ) as fp:
                    print ( fp.read() )
            if os.path.exists( vvt.SRCDIR+'/2_atest.py' ):
                print ( 'py file 2 exists' )
            """ )
        util.writefile( 'orig/file1.txt', "file one" )
        util.writefile( 'orig/file2.txt', "file two" )
        util.writefile( 'orig/file3.txt', "file three" )
        util.writefile( 'orig/file4.txt', "file four" )
        util.writefile( 'orig/atest_1.py', "py file one" )
        util.writefile( 'orig/2_atest.py', "py file two" )

        vrun = vtu.runvvtest( chdir='orig' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.countTestLines( 'pass*atest' ) == 1
        assert vrun.countGrepLogs( 'py file 2 exists' ) == 1

        # extract the orig directory then run in the extracted area

        vtu.runvvtest( '--extract copy orig' )

        vrun = vtu.runvvtest( chdir='copy' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.countTestLines( 'pass*atest' ) == 1
        assert vrun.countGrepLogs( 'py file 2 exists' ) == 0

    def test_script_specification_with_analyze_file(self):
        ""
        util.write_py_script( 'orig/atest.vvt', """
            #VVT: parameterize : P = 1 2
            #VVT: analyze : atest_analyze.py
            import vvtest_util as vvt
            fp = open( 'genfile.txt', 'w' )
            fp.write( 'param P='+vvt.P+'\\n' )
            fp.close()
            """ )

        util.write_py_script( "orig/atest_analyze.py", """
            import os
            import vvtest_util as vvt
            for P in vvt.PARAM_P:
                fn = '../'+vvt.NAME+'.P='+P+'/genfile.txt'
                assert os.path.exists( fn )
            """ )

        vtu.runvvtest( chdir='orig' ).assertCounts( total=3, npass=3 )

        # extract the orig directory then run in the extracted area

        vtu.runvvtest( '--extract copy orig' )

        vtu.runvvtest( chdir='copy' ).assertCounts( total=3, npass=3 )

    def test_extract_when_a_subdir_in_source_file_list(self):
        ""
        util.writefile( 'orig/auxdir/file1.txt', "file contents" )

        util.write_py_script( 'orig/atest.vvt', """
            #VVT: copy : auxdir
            import os
            import glob
            assert os.path.isdir( 'auxdir' )
            assert not os.path.islink( 'auxdir' )
            assert os.path.isfile( 'auxdir/file1.txt' )
            """ )

        vtu.runvvtest( chdir='orig' ).assertCounts( total=1, npass=1 )

        # extract the orig directory then run in the extracted area

        vtu.runvvtest( '--extract copy orig' )

        vtu.runvvtest( chdir='copy' ).assertCounts( total=1, npass=1 )

    def test_allowable_attributes_for_sources(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: testname : atest
            #VVT: testname : btest
            #VVT: sources (testname=btest) : foo.txt
            #VVT: sources (testname=atest) : bar.txt
            """ )
        util.writefile( 'bad1.vvt', """
            #VVT: sources (foobar) : hmm.txt
            """ )
        util.writefile( 'bad2.vvt', """
            #VVT: sources (platform=Linux) : hmm.txt
            """ )

        tL = vtu.create_tests_from_file( 'atest.vvt' )
        assert len(tL) == 2
        self.assertEqual( tL[0].getSpec().getSourceFileList(), ['bar.txt'] )
        self.assertEqual( tL[1].getSpec().getSourceFileList(), ['foo.txt'] )

        self.assertRaises( TestSpecError, vtu.create_tests_from_file, 'bad1.vvt' )
        self.assertRaises( TestSpecError, vtu.create_tests_from_file, 'bad2.vvt' )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
