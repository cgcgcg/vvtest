#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import time
import filecmp
import shutil
import glob

import vvtestutils as vtu
import testutils as util

import libvvtest.results as results

import results_util as ru

import libvvtest.fmtresults as fmtresults

timesfname = fmtresults.runtimes_filename
multifname = fmtresults.multiruntimes_filename


class test_results_tests( vtu.vvtestTestCase ):

    def test_source_tree_runtimes_files_within_subdirectories(self):
        ""
        ru.write_tests_cat_dog_circle( in_subdir='tsrc' )
        time.sleep(1)

        vrun = vtu.runvvtest( 'tsrc' )
        vrun.assertCounts( total=3, npass=3 )
        tdir = vrun.resultsDir()

        os.mkdir( 'testing' )
        os.environ['TESTING_DIRECTORY'] = os.path.abspath( 'testing' )

        resultsfname = ru.create_runtimes_and_results_file( tdir, 'tsrc' )

        # create a runtimes file in a subdirectory
        util.runcmd( vtu.resultspy + ' save ' + resultsfname, chdir='tsrc/one' )

        ru.assert_results_file_has_tests(
                'tsrc/one/'+timesfname,
                'one/cat',
                'one/dog',
                topdir='tsrc' )
        assert not os.path.exists('tsrc/two/'+timesfname)

        # add a test to 'one', rerun the tests, then save runtimes at the top level
        util.writefile( "tsrc/one/ferret.vvt", """
            import time
            time.sleep(1)
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '-w tsrc' )
        vrun.assertCounts( total=4, npass=4 )

        vtu.runvvtest( '-i --save-results' )
        util.runcmd( vtu.resultspy + ' save ' + resultsfname, chdir='tsrc' )

        ru.assert_results_file_has_tests(
                'tsrc/'+timesfname,
                'one/cat',
                'one/dog',
                'one/ferret',
                'two/circle',
                topdir='tsrc' )
        ru.assert_results_file_has_tests(
                'tsrc/one/'+timesfname,
                'one/cat',
                'one/dog',
                'one/ferret',
                topdir='tsrc' )
        assert not os.path.exists('tsrc/two/'+timesfname)

    def test_saving_source_tree_runtimes_files_without_merging(self):
        ""
        ru.write_tests_cat_dog_circle( in_subdir='tsrc' )
        time.sleep(1)

        vrun = vtu.runvvtest( 'tsrc' )
        vrun.assertCounts( total=3, npass=3 )
        tdir = vrun.resultsDir()

        os.mkdir( 'testing' )
        os.environ['TESTING_DIRECTORY'] = os.path.join( os.getcwd(), 'testing' )

        resultsfname = ru.create_runtimes_and_results_file( tdir, 'tsrc' )

        # create a runtimes file in a subdirectory
        util.runcmd( vtu.resultspy + ' save ' + resultsfname, chdir='tsrc' )

        ru.assert_results_file_has_tests(
                'tsrc/'+timesfname,
                'one/cat',
                'one/dog',
                'two/circle',
                topdir='tsrc' )

        # remove a test
        os.remove( 'tsrc/one/dog.vvt' )

        vrun = vtu.runvvtest( '-w tsrc' )
        vrun.assertCounts( total=2, npass=2 )

        vtu.runvvtest( '-i --save-results' )
        util.runcmd( vtu.resultspy+' save -w '+resultsfname, chdir='tsrc' )

        # dog should be gone
        ru.assert_results_file_has_tests(
                'tsrc/'+timesfname,
                'one/cat',
                'two/circle',
                topdir='tsrc' )
        ru.assert_results_file_does_not_have_tests(
                'tsrc/'+timesfname,
                'one/dog',
                topdir='tsrc' )

    def test_listing_of_results_files(self):
        ""
        ru.write_tests_cat_dog_circle( in_subdir='tsrc' )
        time.sleep(1)

        vrun = vtu.runvvtest( 'tsrc' )
        vrun.assertCounts( total=3, npass=3 )
        tdir = vrun.resultsDir()

        os.mkdir( 'testing' )
        os.environ['TESTING_DIRECTORY'] = os.path.abspath( 'testing' )

        resultsfname = ru.create_runtimes_and_results_file( tdir, 'tsrc' )

        resultsfname1 = os.path.abspath( 'testing/results1' )
        ru.copy_results_file_with_new_platid(
                resultsfname,
                resultsfname1,
                'Plat1/Cplr1' )
        resultsfname2 = os.path.abspath( 'testing/results2' )
        ru.copy_results_file_with_new_platid(
                resultsfname,
                resultsfname2,
                'Plat2/Cplr2' )

        # check listing a results file
        x,out = util.runcmd( vtu.resultspy + ' list -p '+resultsfname1 )
        assert out.strip() == 'Plat1/Cplr1'
        x,out = util.runcmd( vtu.resultspy + ' list '+resultsfname1 )
        assert len( util.greplines( 'Plat1/Cplr1', out ) ) == 0
        assert len( util.greplines( 'tsrc/two/circle', out ) ) == 1
        assert len( util.greplines( 'tsrc/one/dog', out ) ) == 1
        assert len( util.greplines( 'tsrc/one/cat', out ) ) == 1

        # create multiplat file with two platform/compiler combos
        util.runcmd( vtu.resultspy + ' merge -x ' + \
                               resultsfname1 + ' ' + resultsfname2,
                     chdir='testing' )

        # check listing a multiplatform file
        x,out = util.runcmd( vtu.resultspy + ' list -p testing/'+multifname )
        assert out.split() == ['Plat1/Cplr1','Plat2/Cplr2']
        
        x,out = util.runcmd( vtu.resultspy + ' list testing/'+multifname )
        assert len( util.greplines( 'Plat1/Cplr1', out ) ) == 3
        assert len( util.greplines( 'Plat2/Cplr2', out ) ) == 3
        assert len( util.greplines( 'tsrc/two/circle', out ) ) == 2
        assert len( util.greplines( 'tsrc/one/dog', out ) ) == 2
        assert len( util.greplines( 'tsrc/one/cat', out ) ) == 2

        # remove Plat1/Cplr1 from the multiplat file
        util.runcmd( vtu.resultspy + ' clean -p Plat1/Cplr1 testing/'+multifname )
        x,out = util.runcmd( vtu.resultspy + ' list testing/'+multifname )
        assert len( util.greplines( 'Plat1/Cplr1', out ) ) == 0
        assert len( util.greplines( 'Plat2/Cplr2', out ) ) == 3
        assert len( util.greplines( 'tsrc/two/circle', out ) ) == 1
        assert len( util.greplines( 'tsrc/one/dog', out ) ) == 1
        assert len( util.greplines( 'tsrc/one/cat', out ) ) == 1

    def test_the_process_files_function(self):
        ""
        # globbing files
        optD = {}
        fL = ['file.txt']
        results.process_files( optD, fL, None )
        assert fL == ['file.txt']

        util.writefile( 'file1.txt', """
            file one contents
            """ )
        util.writefile( 'file2.txt', """
            file two contents
            """ )
        util.writefile( 'file3.log', """
            file three contents
            """ )
        util.writefile( 'foo.dat', """
            foo contents
            """ )
        time.sleep(1)

        optD = { '-g':['file*.txt','fo*.*'] }
        fL = ['bar.txt']
        results.process_files( optD, fL, None )
        fL.sort()
        assert fL == ['bar.txt','file1.txt','file2.txt','foo.dat']

        # specifying the platform
        fileL = [ 'results.2016_02_10.Linux.gnu4.bnb',
                  'results.2016_02_10.SunOS.gnu4.bnb',
                  'results.2016_02_11.Linux.gnu4.bnb' ]
        optD = { '-p':['Linux'] }
        results.process_files( optD, fileL, None )
        assert fileL == ['results.2016_02_10.Linux.gnu4.bnb',
                         'results.2016_02_11.Linux.gnu4.bnb']

        fileL = [ 'results.2016_02_10.TLCC.gnu4.bnb',
                  'results.2016_02_10.SunOS.gnu4.bnb',
                  'results.2016_02_11.Darwin.gnu4.bnb' ]
        optD = { '-p':['SunOS','TLCC'] }
        results.process_files( optD, fileL, None )
        assert fileL == ['results.2016_02_10.TLCC.gnu4.bnb',
                         'results.2016_02_10.SunOS.gnu4.bnb']

        fileL = [ 'results.2016_02_10.TLCC.gnu4.bnb',
                  'results.2016_02_10.SunOS.gnu4.bnb',
                  'results.2016_02_11.Darwin.gnu4.bnb' ]
        optD = { '-P':['TLCC'] }
        results.process_files( optD, fileL, None )
        assert fileL == ['results.2016_02_10.SunOS.gnu4.bnb',
                         'results.2016_02_11.Darwin.gnu4.bnb']

        fileL = [ 'results.2016_02_10.TLCC.gnu4.bnb',
                  'results.2016_02_10.SunOS.gnu4.bnb',
                  'results.2016_02_11.Darwin.gnu4.bnb' ]
        optD = { '-P':['Darwin','TLCC'] }
        results.process_files( optD, fileL, None )
        assert fileL == ['results.2016_02_10.SunOS.gnu4.bnb' ]

        fileL = [ 'results.2016_02_10.TLCC.gnu4.bnb',
                  'results.2016_02_10.SunOS.gnu4.bnb',
                  'results.2016_02_11.Darwin.gnu4.bnb' ]
        optD = { '-p':['SunOS'], '-P':['Darwin'] }
        results.process_files( optD, fileL, None )
        assert fileL == ['results.2016_02_10.SunOS.gnu4.bnb' ]

        # specifying options
        fileL = [ 'results.2016_02_10.Linux.gnu4.bnb',
                  'results.2016_02_10.Linux.gnu4.dev',
                  'results.2016_02_11.Linux.gnu4.bnb' ]
        optD = { '-t':['bnb'] }
        results.process_files( optD, fileL, None )
        assert fileL == ['results.2016_02_10.Linux.gnu4.bnb',
                        'results.2016_02_11.Linux.gnu4.bnb' ]

        # specifying options
        fileL = [ 'results.2016_02_10.Linux.gnu4.bnb',
                  'results.2016_02_10.Linux.gnu4+cxx11.dev',
                  'results.2016_02_11.Linux.gnu4.bnb' ]
        optD = { '-o':['gnu4'] }
        results.process_files( optD, fileL, None )
        assert fileL == ['results.2016_02_10.Linux.gnu4.bnb',
                         'results.2016_02_10.Linux.gnu4+cxx11.dev',
                         'results.2016_02_11.Linux.gnu4.bnb' ]

        fileL = [ 'results.2016_02_10.Linux.gnu4.bnb',
                  'results.2016_02_10.Linux.gnu4+cxx11.dev',
                  'results.2016_02_11.Linux.gnu4.bnb' ]
        optD = { '-o':['cxx11'] }
        results.process_files( optD, fileL, None )
        assert fileL == ['results.2016_02_10.Linux.gnu4+cxx11.dev' ]

        fileL = [ 'results.2016_02_10.Linux.intel.bnb',
                  'results.2016_02_10.Linux.gnu4.dev',
                  'results.2016_02_11.Linux.intel+cxx11.bnb' ]
        optD = { '-o':['intel','cxx11'] }
        results.process_files( optD, fileL, None )
        assert fileL == ['results.2016_02_10.Linux.intel.bnb',
                         'results.2016_02_11.Linux.intel+cxx11.bnb' ]

        fileL = [ 'results.2016_02_10.Linux.intel.bnb',
                  'results.2016_02_10.Linux.gnu4.dev',
                  'results.2016_02_11.Linux.intel+cxx11.bnb' ]
        optD = { '-o':['gnu4','cxx11'] }
        results.process_files( optD, fileL, None )
        assert fileL == ['results.2016_02_10.Linux.gnu4.dev',
                         'results.2016_02_11.Linux.intel+cxx11.bnb' ]

        fileL = [ 'results.2016_02_10.Linux.intel.bnb',
                  'results.2016_02_10.Linux.gnu4+cxx11.dev',
                  'results.2016_02_11.Linux.intel+cxx11.bnb' ]
        optD = { '-o':['intel'], '-O':['cxx11'] }
        results.process_files( optD, fileL, None )
        assert fileL == ['results.2016_02_10.Linux.intel.bnb' ]

        fileL = [ 'results.2016_02_10.Linux.intel+dbg.bnb',
                  'results.2016_02_10.Linux.gnu4+dbg.dev',
                  'results.2016_02_11.Linux.intel+cxx11.bnb' ]
        optD = { '-O':['cxx11','gnu4'] }
        results.process_files( optD, fileL, None )
        assert fileL == ['results.2016_02_10.Linux.intel+dbg.bnb' ]

        # specifying tags
        fileL = [ 'results.2016_02_10.Linux.gnu4.bnb',
                  'results.2016_02_10.Linux.gnu4.dev',
                  'results.2016_02_11.Linux.gnu4.bnb' ]
        optD = { '-t':['bnb'] }
        results.process_files( optD, fileL, None )
        assert fileL == ['results.2016_02_10.Linux.gnu4.bnb',
                         'results.2016_02_11.Linux.gnu4.bnb' ]

        fileL = [ 'results.2016_02_10.Linux.gnu4.bnb',
                  'results.2016_02_10.Linux.gnu4.dev',
                  'results.2016_02_11.Linux.gnu4.bnb' ]
        optD = { '-T':['dev'] }
        results.process_files( optD, fileL, None )
        assert fileL == ['results.2016_02_10.Linux.gnu4.bnb',
                         'results.2016_02_11.Linux.gnu4.bnb' ]

        fileL = [ 'results.2016_02_10.Linux.gnu4.bnb',
                  'results.2016_02_10.Linux.gnu4.dev',
                  'results.2016_02_11.Linux.gnu4.longbnb' ]
        optD = { '-T':['dev'], '-t':['longbnb'] }
        results.process_files( optD, fileL, None )
        assert fileL == ['results.2016_02_11.Linux.gnu4.longbnb' ]

    def test_the_report_subcommand(self):
        ""
        os.mkdir( 'config' )  # force the test to use default plat & cplr

        write_cat_dog_ferret_tests()
        time.sleep(1)

        vrun = vtu.runvvtest( '--config config' )
        vrun.assertCounts( total=3, npass=1, diff=1, fail=1 )
        tdir = vrun.resultsDir()

        rf1 = ru.create_runtimes_and_results_file( tdir, 'one' )

        rf2 = '.'.join( rf1.split('.')[:2] + [ 'Fake', 'gcc' ] )
        ru.copy_results_file_with_new_platid( rf1, rf2, 'Fake/gcc', '/fake/path' )

        x,out = util.runcmd( vtu.resultspy + ' report ' + rf1 + ' ' + rf2 )

        assert len( util.greplines( 'Fake.gcc', out ) ) == 3
        assert len( util.greplines( 'pass=1 ', out ) ) == 2
        assert len( util.greplines( 'diff=1 ', out ) ) == 2
        assert len( util.greplines( 'fail=1 ', out ) ) == 2
        assert len( util.greplines( 'one/dog', out ) ) == 1
        assert len( util.greplines( 'one/ferret', out ) ) == 1

    def test_the_report_subcommand_with_G_option(self):
        ""
        write_cat_dog_ferret_tests()
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=3, npass=1, diff=1, fail=1 )
        tdir = vrun.resultsDir()

        rf = ru.create_runtimes_and_results_file( tdir, 'one' )

        x,out = util.runcmd( vtu.resultspy + ' report -G ' + rf )

        assert len( util.greplines( 'pass=1 ', out ) ) == 1
        assert len( util.greplines( 'diff=1 ', out ) ) == 1
        assert len( util.greplines( 'fail=1 ', out ) ) == 1
        assert len( util.greplines( 'one/dog', out ) ) == 0
        assert len( util.greplines( 'one/ferret', out ) ) == 0

        x,out = util.runcmd( vtu.resultspy + ' report -g ' + rf )

        assert len( util.greplines( 'pass=1 ', out ) ) == 1
        assert len( util.greplines( 'diff=1 ', out ) ) == 1
        assert len( util.greplines( 'fail=1 ', out ) ) == 1
        assert len( util.greplines( 'one/dog', out ) ) == 1
        assert len( util.greplines( 'one/ferret', out ) ) == 1

    def test_the_in_progress_results_file(self):
        ""
        write_cat_dog_circle_tests()
        time.sleep(1)

        vtu.interrupt_vvtest_run( '--save-results', count=2 )
        tdir = util.globfile( 'TestResults*' )

        resultsfname = util.globfile('results.*')

        x,out = util.runcmd( vtu.resultspy + ' report ' + resultsfname )

        tr = fmtresults.TestResults( resultsfname )
        assert tr.inProgress()

        found_start = False
        for line in util.greplines( ' pass=', out ):
            if line.split()[0] == 's':
                found_start = True
                break
        assert found_start

    def test_the_results_date_option(self):
        ""
        write_cat_dog_circle_tests()
        time.sleep(1)

        olddate = time.time() - 2*24*60*60
        vrun = vtu.runvvtest(
            '--save-results --results-date ' + str(olddate) )
        vrun.assertCounts( total=3, npass=3 )

        rfile1 = ru.get_latest_results_filename()

        vrun = vtu.runvvtest( '-w --save-results' )
        vrun.assertCounts( total=3, npass=3 )
        rfile2 = ru.get_latest_results_filename()
        print( 'results files: '+str(rfile1)+' '+str(rfile2) )
        assert rfile2 != rfile1

        vrun = vtu.runvvtest(
            '-w --save-results --results-date 2016_07_15' )
        vrun.assertCounts( total=3, npass=3 )
        rfile3 = ru.get_latest_results_filename()
        print( 'results files: '+str(rfile1)+' '+str(rfile2)+' '+str(rfile3) )
        assert '2016_07_15' in rfile3
        assert rfile3 not in [ rfile1, rfile2 ]

    def test_that_timeout_only_reported_if_two_or_more_times_in_a_row(self):
        ""
        util.writefile( "subdir/test1.vvt", """
            #VVT: timeout : 5
            import time
            time.sleep(2)
            """ )
        util.writefile( "subdir/test2.vvt", """
            #VVT: timeout : 10
            import time
            time.sleep(1)
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( 'subdir' )
        vrun.assertCounts( total=2, npass=2 )
        tdir = vrun.resultsDir()

        rf1 = ru.create_runtimes_and_results_file( tdir, 'subdir' )

        # compute results filename with yesterday's date
        L1 = rf1.split('.')
        L1[1] = ru.compute_yesterdays_date_string()
        rf2 = '.'.join( L1 )

        # rewrite the results file to a file with yesterday's date
        ru.copy_results_file_with_new_platid( rf1, rf2 )

        # rerun the tests and save results
        time.sleep(1)
        vrun = vtu.runvvtest( '-w --save-results subdir' )
        vrun.assertCounts( total=2, npass=2 )

        x,out = util.runcmd( vtu.resultspy + ' report ' + rf1 + ' ' + rf2 )
        assert len( util.greplines( 'test1', out ) ) == 0
        assert len( util.greplines( 'test2', out ) ) == 0

        # now make a test timeout
        util.writefile( "subdir/test1.vvt", """
            #VVT: timeout : 5
            import time
            time.sleep(10)
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '-w --save-results subdir' )
        vrun.assertCounts( total=2, npass=1, timeout=1 )

        # the timed out test should not be reported
        x,out = util.runcmd( vtu.resultspy + ' report ' + rf1 + ' ' + rf2 )
        assert len( util.greplines( 'test1', out ) ) == 0
        assert len( util.greplines( 'test2', out ) ) == 0

        # rename the results with the timed out test to yesterday's date
        os.remove( rf2 )
        os.rename( rf1, rf2 )

        # rerun one more time, in which the test will timeout again
        vrun = vtu.runvvtest( '-w --save-results subdir' )
        vrun.assertCounts( total=2, npass=1, timeout=1 )

        # the timed out test should now be reported
        x,out = util.runcmd( vtu.resultspy + ' report ' + rf1 + ' ' + rf2 )
        assert len( util.greplines( 'test1', out ) ) == 1
        assert len( util.greplines( 'test2', out ) ) == 0


############################################################################

def write_cat_dog_ferret_tests():
    ""
    util.writefile( "one/cat.vvt", """
        import time
        time.sleep(1)
        """ )

    util.writefile( "one/dog.vvt", """
        import sys
        import vvtest_util as vvt
        sys.exit( vvt.diff_exit_status )
        """ )

    util.writefile( "one/ferret.vvt", """
        raise Exception( 'fake exception' )
        """ )


def write_cat_dog_circle_tests():
    ""
    util.writefile( "cat.vvt", """
        import time
        time.sleep(1)
        """ )

    util.writefile( "dog.vvt", """
        import time
        time.sleep(2)
        """ )

    util.writefile( "circle.vvt", """
        import time
        time.sleep(3)
        """ )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
