#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3


class restart_tests( vtu.vvtestTestCase ):

    def test_that_notrun_or_notdone_get_run_upon_restart(self):
        ""
        util.writefile( "param.xml", """
            <rtest name="param">
              <parameterize hello="world mars"/>
              <execute>
                sleep 1
              </execute>
            </rtest>""" )
        util.writefile( "FailTest.xml", """
            <rtest name="FailTest">
              <execute>
                sleep 1
                exit 1
              </execute>
            </rtest>""")
        util.writefile( "DiffTest.xml", """
            <rtest name="DiffTest">
              <execute>
                sleep 1
                set have_diff = yes
              </execute>
            </rtest>""")
        time.sleep(1)

        # run the test set but provide a false interruption
        vtu.interrupt_vvtest_run( '-n 2', count=1 )
        vrun = vtu.runvvtest( '-i -v' )
        cntD = vtu.parse_vvtest_counts( vrun.out )
        assert cntD['total'] == 4 and cntD['notrun'] > 0

        # restart with no keywords
        vtu.runvvtest( '-n 2' )
        vtu.runvvtest( '-i -v' ).assertCounts( total=4, npass=2, diff=1, fail=1 )

        # restart using results keyword
        vtu.interrupt_vvtest_run( '-n 2 -w', count=1 )
        vrun = vtu.runvvtest( '-i -v' )
        cntD = vtu.parse_vvtest_counts( vrun.out )
        assert cntD['total'] == 4 and cntD['notrun'] > 0

        vtu.runvvtest( '-n 2 -k notrun/notdone' )
        vtu.runvvtest( '-i -v' ).assertCounts( total=4, npass=2, diff=1, fail=1 )

        # none should restart now
        vtu.runvvtest( '-n 2' ).assertCounts( total=0 )

        # all of them should run again
        vrun = vtu.runvvtest( '-n 2 -R' )
        vrun.assertCounts( total=4, npass=2, diff=1, fail=1 )

    def test_restarting_script_tests(self):
        ""
        util.writefile( "param.vvt", """
            #VVT: parameterize : hello = world mars
            import time
            time.sleep(1)
            """[1:] )
        util.writescript( "FailTest.vvt", """
            import time
            time.sleep(1)
            raise Exception( "fake failure" )
            """ )
        util.writefile( "DiffTest.vvt", """
            import vvtest_util as vvt
            import sys, time
            time.sleep(1)
            sys.exit( vvt.diff_exit_status )
            """[1:] )
        time.sleep(1)

        # run the test set but provide a false interruption
        vtu.interrupt_vvtest_run( '-n 2', count=1 )
        vrun = vtu.runvvtest( '-i -v' )
        cntD = vtu.parse_vvtest_counts( vrun.out )
        assert cntD['total'] == 4 and cntD['notrun'] > 0

        # restart with no keywords
        vtu.runvvtest( '-n 2' )
        vtu.runvvtest( '-i -v' ).assertCounts( total=4, npass=2, diff=1, fail=1 )

        # restart using results keyword
        vtu.interrupt_vvtest_run( '-n 2 -w', count=1 )
        vrun = vtu.runvvtest( '-i -v' )
        cntD = vtu.parse_vvtest_counts( vrun.out )
        assert cntD['total'] == 4 and cntD['notrun'] > 0

        vtu.runvvtest( '-n 2 -k notrun/notdone' )
        vtu.runvvtest( '-i -v' ).assertCounts( total=4, npass=2, diff=1, fail=1 )

        # none should restart now
        vtu.runvvtest( '-n 2' ).assertCounts( total=0 )

        # all of them should run again
        vrun = vtu.runvvtest( '-n 2 -R' )
        vrun.assertCounts( total=4, npass=2, diff=1, fail=1 )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
