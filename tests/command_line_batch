#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath, join as pjoin
import time
import glob

import vvtestutils as vtu
import testutils as util

import libvvtest.batchutils as batchutils


class use_cases( vtu.vvtestTestCase ):

    def write_two_test_files(self, destdir=None):
        ""
        if not destdir:
            destdir = os.getcwd()

        util.writefile( pjoin(destdir,'atest.vvt'), """
            #VVT: timeout : 2h
            """ )

        util.writefile( pjoin(destdir,'btest.vvt'), """
            #VVT: timeout : 2h
            import vvtest_util as vvt
            import script_util as util
            util.exit_diff()
            """ )

    def test_integrated_workflow(self):
        ""
        self.write_two_test_files()

        util.writefile( 'cfg/vvtest_user_plugin.py', """
            import os

            def epilogue( tests ):
                ""
                with open( 'epilog.out', 'wt' ) as fp:
                    fp.write( str( tests.items() ) + os.linesep )
            """ )
        cfg = abspath( 'cfg' )

        vrun = vtu.runvvtest( batch=True )
        vrun.assertCounts( total=2, npass=1, diff=1 )

        # vtu.remove_results()

        # vrun = vtu.runvvtest( '--batch -g --config '+cfg, batch=True )
        # vrun = vtu.runvvtest( '--batch-id 0' )
        # vrun = vtu.runvvtest( '--batch-id 1' )
        # vrun = vtu.runvvtest( '-i' )

    def test_create_the_batch_files_but_dont_run(self):
        ""
        self.write_two_test_files()

        vrun = vtu.runvvtest( '--batch -g', batch=True )

        # self.assertEqual( len( glob.glob('TestResults*/batchset*/testlist.?') ), 2 )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
