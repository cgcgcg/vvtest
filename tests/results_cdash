#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import basename, abspath
from os.path import join as pjoin
import time
import glob

import vvtestutils as vtu
import testutils as util

import libvvtest.cdashwriter as cdashwriter
import cdashutil

from libvvtest.testlist import TestList
from libvvtest.permsetter import PermissionSetter
from libvvtest.tcfactory import TestCaseFactory


class unit_tests( vtu.vvtestTestCase ):

    def test_recognizing_http_urls(self):
        ""
        os.mkdir( 'subdir' )
        time.sleep(1)

        assert not cdashwriter.is_http_url( 'subdir' )
        assert not cdashwriter.is_http_url( abspath('subdir') )
        assert not cdashwriter.is_http_url( 'foobarbaz' )
        assert not cdashwriter.is_http_url( abspath('foobarbaz') )

        assert cdashwriter.is_http_url( 'http://hostname' )
        assert cdashwriter.is_http_url( 'http://hostname.com' )
        assert cdashwriter.is_http_url( 'http://hostname.com/' )
        assert cdashwriter.is_http_url( 'http://hostname.com/cdash' )

        assert cdashwriter.is_http_url( 'https://hostname' )
        assert cdashwriter.is_http_url( 'https://hostname.com' )
        assert cdashwriter.is_http_url( 'https://hostname.com/' )
        assert cdashwriter.is_http_url( 'https://hostname.com/cdash' )

    def test_sitename_buildname_start_end_elapsed(self):
        ""
        tm = 1584832080.0295939  # Sat Mar 21 17:08:00 2020 MDT

        rtinfo = { 'startepoch':tm,
                   'hostname':'sparky',
                   'rundir':'/path/to/testresultsdir',
                   'finishepoch':tm+73 }
        wr = make_CDashWriter( 'file.xml', rtinfo=rtinfo )

        testlist = TestList( TestCaseFactory() )

        wr.postrun( testlist )

        xml = util.read_xml_file( 'file.xml' )

        assert extract_site_name( xml ) == 'sparky'
        assert extract_build_name( xml ) == 'testresultsdir'

        assert abs( extract_start_time( xml ) - tm ) <= 2
        assert abs( extract_end_time( xml ) - (tm+73) ) <= 2
        assert abs( extract_elapsed_time( xml ) - 73 ) <= 2

    def test_writing_test_results(self):
        ""
        wr = make_CDashWriter( 'file.xml' )

        testlist = TestList( TestCaseFactory() )
        tcase = vtu.make_fake_TestCase( name='atest', result='pass', runtime=42 )
        testlist.addTest( tcase )
        tcase = vtu.make_fake_TestCase( name='btest', result='diff', runtime=23 )
        testlist.addTest( tcase )
        tcase = vtu.make_fake_TestCase( name='ctest', result='notrun' )
        testlist.addTest( tcase )

        wr.postrun( testlist )

        xml = util.read_xml_file( 'file.xml' )

        testinfo = extract_test_results( xml, 'sdir/atest.np=4' )
        assert testinfo['status'] == 'passed'
        assert abs( float( testinfo['Execution Time'] ) - 42 ) <= 2

        testinfo = extract_test_results( xml, 'sdir/btest.np=4' )
        assert testinfo['status'] == 'failed'
        assert testinfo['Completion Status'] == 'diff'
        assert abs( float( testinfo['Execution Time'] ) - 23 ) <= 2

        testinfo = extract_test_results( xml, 'sdir/ctest.np=4' )
        assert testinfo['status'] == 'notrun'

    def test_a_url_destination_will_submit(self):
        ""
        records = []

        class OverrideFileSubmitter( cdashutil.FileSubmitter ):
            def urllib_submit(self, submit_url, filename):
                records.append( ('urllib',submit_url,filename) )
            def curl_submit(self, curlcmd, submit_url, filename):
                records.append( (curlcmd,submit_url,filename) )

        testlist = TestList( TestCaseFactory() )

        wr = make_CDashWriter( 'file.xml',
                               subclass_submitter=OverrideFileSubmitter() )
        wr.postrun( testlist )

        assert os.path.isfile( 'file.xml' )
        assert len( records ) == 0

        wr = make_CDashWriter( 'http://localhost/cdash',
                               subclass_submitter=OverrideFileSubmitter(),
                               project='CoolProj' )
        wr.postrun( testlist )

        assert len( records ) == 1
        assert records[0][0] == 'urllib'
        assert records[0][1].startswith( 'http://localhost/cdash/' )
        assert records[0][1].endswith( 'project=CoolProj' )

        wr = make_CDashWriter( 'http://localhost2/cdash,method=curl',
                               subclass_submitter=OverrideFileSubmitter(),
                               project='CoolProj' )
        wr.postrun( testlist )

        assert len( records ) == 2
        assert records[1][0] == 'curl'
        assert records[1][1].startswith( 'http://localhost2/cdash/' )

    def test_parse_destination_specifications(self):
        ""
        dspecs,err = cdashwriter.construct_destination_specs( 'afile.xml' )
        assert dspecs.url == None and dspecs.file == 'afile.xml'
        assert not err

        dspecs,err = cdashwriter.construct_destination_specs(
                                    'http://localhost/cdash',
                                    project='HotProj' )
        assert dspecs.url == 'http://localhost/cdash' and dspecs.file == None
        assert dspecs.project == 'HotProj'
        assert not err

        dspecs,err = cdashwriter.construct_destination_specs(
                                    'http://localhost/cdash,project=CoolProj',
                                    project='HotProj' )
        assert dspecs.url == 'http://localhost/cdash'
        assert dspecs.project == 'CoolProj'
        assert not err

        dspecs,err = cdashwriter.construct_destination_specs(
                                    'afile, group=Production CTS-1' )
        assert not err
        assert dspecs.group == 'Production CTS-1'

        dspecs,err = cdashwriter.construct_destination_specs(
                        'afile, group=Production CTS-1, project=MyProj' )
        assert not err
        assert dspecs.group == 'Production CTS-1'
        assert dspecs.project == 'MyProj'

        tm = 1593303125.556993  # Sat Jun 27 18:12:05 2020
        dspecs,err = cdashwriter.construct_destination_specs(
                        'afile, date='+str(tm) )
        assert not err
        assert dspecs.date == int(tm)

        tm2 = tm+605
        dspecs,err = cdashwriter.construct_destination_specs(
                        'afile, date='+str(tm), datestamp=tm2 )
        assert not err
        assert dspecs.date == int(tm)

        dspecs,err = cdashwriter.construct_destination_specs(
                        'afile, project=Proj', datestamp=tm2 )
        assert not err
        assert dspecs.date == int(tm2)

        dspecs,err = cdashwriter.construct_destination_specs(
                        'afile, site=eclipse' )
        assert not err
        assert dspecs.site == 'eclipse'

        dspecs,err = cdashwriter.construct_destination_specs(
                        'afile, name=gcc_results' )
        assert not err
        assert dspecs.name == 'gcc_results'

    def test_destination_specification_errors(self):
        ""
        dspecs,err = cdashwriter.construct_destination_specs( "" )
        assert err and 'missing or invalid' in err

        dspecs,err = cdashwriter.construct_destination_specs( " " )
        assert err and 'missing or invalid' in err

        dspecs,err = cdashwriter.construct_destination_specs( ",a=b" )
        assert err and 'missing or invalid' in err

        dspecs,err = cdashwriter.construct_destination_specs( " ,a=b" )
        assert err and 'missing or invalid' in err

        dspecs,err = cdashwriter.construct_destination_specs( "foo, n=v" )
        assert not err

        dspecs,err = cdashwriter.construct_destination_specs( "foo,n=v" )
        assert not err

        dspecs,err = cdashwriter.construct_destination_specs( "foo,n=" )
        assert err and 'invalid' in err

        dspecs,err = cdashwriter.construct_destination_specs( "foo,n=,a=b" )
        assert err and 'invalid' in err

        dspecs,err = cdashwriter.construct_destination_specs( "foo,n=v,a=b" )
        assert not err

        dspecs,err = cdashwriter.construct_destination_specs( "foo,=v,a=b" )
        assert err and 'invalid' in err

    def test_destination_files_and_file_max_specifications(self):
        ""
        dspecs,err = cdashwriter.construct_destination_specs( 'afile, files=nonpass' )
        assert not err
        assert dspecs.files == 'nonpass'

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, files=all' )
        assert not err
        assert dspecs.files == 'all'

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, files=foobar' )
        assert err and 'unknown' in err

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, filemax=100' )
        assert not err
        assert dspecs.filemax == 100

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, filemax=200' )
        assert not err
        assert dspecs.filemax == 200

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, filemax=200K' )
        assert not err
        assert dspecs.filemax == 200

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, filemax=200KB' )
        assert not err
        assert dspecs.filemax == 200

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, filemax=1M' )
        assert not err
        assert dspecs.filemax == 1000

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, filemax=1MB' )
        assert not err
        assert dspecs.filemax == 1000

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, filemax=10G' )
        assert not err
        assert dspecs.filemax == 10000000

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, filemax=10gB' )
        assert not err
        assert dspecs.filemax == 10000000

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, filemax=10T' )
        assert not err
        assert dspecs.filemax == 10000000000

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, filemax=10TB' )
        assert not err
        assert dspecs.filemax == 10000000000

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, filemax=256B' )
        assert not err
        assert abs( dspecs.filemax - 0.256 ) < 0.01

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, filemax=-1' )
        assert not err
        assert not dspecs.filemax < 0 and dspecs.filemax < 0.01

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, filemax=foo' )
        assert err and 'invalid' in err

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, filemax=fookb' )
        assert err and 'invalid' in err

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, filemax=10-100' )
        assert err and 'invalid' in err

    def test_submission_method_specifications(self):
        ""
        dspecs,err = cdashwriter.construct_destination_specs( 'afile' )
        assert not err
        assert dspecs.method == None

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, method=curl' )
        assert not err
        assert dspecs.method == 'curl'

        dspecs,err = cdashwriter.construct_destination_specs( 'afile, method=curl -v -k' )
        assert not err
        assert dspecs.method == 'curl -v -k'

        dspecs,err = cdashwriter.construct_destination_specs(
                                    'afile, method=curl -v, file=1TB' )
        assert not err
        assert dspecs.method == 'curl -v'

    def test_a_URL_without_a_project_name_is_an_error(self):
        ""
        wr = cdashwriter.CDashWriter( None, None, None )

        err = wr.initialize( {}, 'http://localhost/cdash' )
        assert err

        err = wr.initialize( {}, 'http://localhost/cdash', project='CoolProj' )
        assert not err

        err = wr.initialize( {}, 'http://localhost/cdash,project=CoolProj' )
        assert not err

    def test_cdash_specification_data_flow(self):
        ""
        bdate = 1512812080.2058824  # Sat Dec  9 02:34:40 2017 MDT

        wr = make_CDashWriter( 'file.xml' + \
                               ',date='+str(bdate) + \
                               ',group=Must Pass' + \
                               ',site=redstorm' + \
                               ',name=smoke_tests' )

        testlist = TestList( TestCaseFactory() )
        wr.postrun( testlist )

        xml = util.read_xml_file( 'file.xml' )
        assert extract_build_stamp( xml ).startswith( '2017' )
        assert extract_build_stamp( xml ).endswith( '-Must Pass' )
        assert extract_site_name( xml ) == 'redstorm'
        assert extract_build_name( xml ) == 'smoke_tests'

    def test_results_date_forms_cdash_build_stamp(self):
        ""
        rdate  = 1512812080.2058824  # Sat Dec  9 02:34:40 2017 MDT
        tstart = 1584832080.0295939  # Sat Mar 21 17:08:00 2020 MDT

        rtinfo = { 'startepoch':tstart, 'rundir':os.getcwd() }
        wr = make_CDashWriter( 'file.xml', datestamp=rdate, rtinfo=rtinfo )

        testlist = TestList( TestCaseFactory() )
        wr.postrun( testlist )

        xml = util.read_xml_file( 'file.xml' )
        assert extract_build_stamp( xml ).startswith( '2017' )
        assert abs( extract_start_time( xml ) - tstart ) <= 2

    def test_reading_file_properties(self):
        ""
        util.writefile( 'file1', 'junk one' )
        util.writefile( 'subdir/file2', 'junk two' )
        os.symlink( 'subdir/file2', 'alink' )

        tm = time.time()

        props = cdashwriter.read_file_properties( 'file1' )
        assert props['type'] == '-'
        assert abs( props['mtime'] - tm ) < 10
        assert props['size'] >= 8 and props['size'] < 1000000
        assert type(props['owner']) == type('') and props['owner']
        assert type(props['group']) == type('') and props['group']
        assert props['mode'][0] == 'r' and props['mode'][2] == '-'
        assert props['mode'][5] == '-' and props['mode'][8] == '-'

        props = cdashwriter.read_file_properties( 'subdir' )
        assert props['type'] == 'd'
        assert abs( props['mtime'] - tm ) < 10
        assert props['size'] >= 0 and props['size'] < 1000000
        assert type(props['owner']) == type('') and props['owner']
        assert type(props['group']) == type('') and props['group']
        assert props['mode'][0] == 'r' and props['mode'][2] == 'x'

        props = cdashwriter.read_file_properties( 'alink' )
        assert props['type'] == 'l'
        assert props['link'] == 'subdir/file2'
        assert abs( props['mtime'] - tm ) < 10
        assert props['size'] >= 0 and props['size'] < 1000000
        assert type(props['owner']) == type('') and props['owner']
        assert type(props['group']) == type('') and props['group']
        assert props['mode'][0] == 'r' and props['mode'][2] == 'x'

        props = cdashwriter.read_file_properties( 'noexist' )
        assert props['type'] == '?'
        assert props['mtime'] < 2
        assert props['size'] < 2
        assert props['owner'] == '?'
        assert props['group'] == '?'
        assert props['mode'] == '?????????'

    def test_sorted_list_of_files_with_properties(self):
        ""
        util.writefile( 'file1', 'junk one' )
        util.writefile( 'subdir/file2', 'junk two' )
        os.symlink( 'subdir/file2', 'alink' )

        tm0 = time.time() - 654
        tm1 = tm0 + 234

        os.utime( 'file1', (tm0,tm0) )
        os.utime( 'subdir', (tm1,tm1) )

        fL = os.listdir( '.' ) + [ '.' ]
        files = cdashwriter.list_file_properties( '.', fL )
        assert len(files) == 4
        assert files[0][0] == 'file1'
        assert files[1][0] == 'subdir'

        os.utime( 'file1', (tm1,tm1) )
        os.utime( 'subdir', (tm0,tm0) )

        files = cdashwriter.list_file_properties( '.', fL )
        assert len(files) == 4
        assert files[1][0] == 'file1'
        assert files[0][0] == 'subdir'

    def test_string_list_files_in_a_directory(self):
        ""
        util.writefile( 'file1', 'junk one' )
        util.writefile( 'subdir/file2', 'junk two' )
        os.symlink( 'subdir/file2', 'alink' )

        lines = cdashwriter.list_directory_as_strings( '.' )
        for line in lines:
            print( line )
        assert len( lines ) == 4
        out = '\n'.join( lines )
        assert len( util.greplines( 'alink*subdir', out ) ) == 1
        assert len( util.greplines( 'file1', out ) ) == 1
        assert len( util.greplines( 'subdir', out ) ) == 2
        assert len( util.greplines( ' .', out ) ) == 1

    def make_fake_test_list_with_exec_directory(self, result='diff',
                                                      extraout=False ):
        ""
        testlist = TestList( TestCaseFactory() )
        tcase = vtu.make_fake_TestCase( name='atest', result=result, runtime=23 )
        testlist.addTest( tcase )

        xdir = tcase.getSpec().getExecuteDirectory()

        util.writefile( pjoin( xdir, 'file1.txt' ), """
            my contents
            """ )
        os.mkdir( pjoin( xdir, 'asubdir' ) )
        os.symlink( 'file1.txt', pjoin( xdir, 'file2.txt' ) )
        extra = ''
        if extraout:
            extra = ' '*20+'a'*75+'\n'
            extra += ' '*20+'b'*75+'\n'
            extra += ' '*20+'c'*75+'\n'
        util.writefile( pjoin( xdir, 'execute.log' ), """
            bunch of info
            more info"""+'\n'+extra )

        return testlist

    def test_output_from_failed_tests(self):
        ""
        testlist = self.make_fake_test_list_with_exec_directory()

        fmtr = MockFormatter()
        dspecs,err = cdashwriter.construct_destination_specs( 'afile' )
        cdashwriter.set_test_list( fmtr, dspecs, testlist, os.getcwd() )

        assert len( fmtr.tests ) == 1
        displ,attrs = list(fmtr.tests.items())[0]

        assert displ == 'sdir/atest.np=4'

        out = attrs['output']
        print( out )
        yr = time.strftime( "%Y", time.localtime() )
        assert len( util.greplines( yr+'* execute.log', out ) ) == 1
        assert len( util.greplines( '$ cat*execute.log', out ) ) == 1
        assert len( util.greplines( 'bunch of info', out ) ) == 1
        assert len( util.greplines( 'more info', out ) ) == 1

        assert attrs['runtime'] == 23
        assert attrs['status'] == 'failed'

    def test_output_from_passed_tests(self):
        ""
        testlist = self.make_fake_test_list_with_exec_directory( 'pass' )

        fmtr = MockFormatter()
        dspecs,err = cdashwriter.construct_destination_specs( 'afile' )
        cdashwriter.set_test_list( fmtr, dspecs, testlist, os.getcwd() )

        assert len( fmtr.tests ) == 1
        displ,attrs = list(fmtr.tests.items())[0]
        assert displ == 'sdir/atest.np=4'
        assert not attrs.get( 'output', None )

        fmtr = MockFormatter()
        dspecs,err = cdashwriter.construct_destination_specs( 'afile,files=all' )
        cdashwriter.set_test_list( fmtr, dspecs, testlist, os.getcwd() )

        assert len( fmtr.tests ) == 1
        displ,attrs = list(fmtr.tests.items())[0]
        assert displ == 'sdir/atest.np=4'
        out = attrs['output']
        print( out )
        assert len( util.greplines( 'bunch of info', out ) ) == 1

    def test_output_file_size_is_limited(self):
        ""
        testlist = self.make_fake_test_list_with_exec_directory( extraout=True )

        fmtr = MockFormatter()
        dspecs,err = cdashwriter.construct_destination_specs( 'afile' )
        cdashwriter.set_test_list( fmtr, dspecs, testlist, os.getcwd() )

        assert len( fmtr.tests ) == 1
        displ,attrs = list(fmtr.tests.items())[0]
        out = attrs['output']
        assert 'middle of this file has been removed' not in out

        fmtr = MockFormatter()
        dspecs,err = cdashwriter.construct_destination_specs( 'afile,filemax=20B' )
        cdashwriter.set_test_list( fmtr, dspecs, testlist, os.getcwd() )

        assert len( fmtr.tests ) == 1
        displ,attrs = list(fmtr.tests.items())[0]

        out = attrs['output']
        print( out )
        assert 'middle of this file has been removed' in out

        fmtr = MockFormatter()
        dspecs,err = cdashwriter.construct_destination_specs( 'afile,filemax=20MB' )
        cdashwriter.set_test_list( fmtr, dspecs, testlist, os.getcwd() )

        assert len( fmtr.tests ) == 1
        displ,attrs = list(fmtr.tests.items())[0]

        out = attrs['output']
        print( out )
        assert 'middle of this file has been removed' not in out


class MockFormatter:

    def __init__(self):
        ""
        self.tests = {}  # display string to kwargs

    def addTest(self, displ, **kwargs):
        ""
        assert displ and displ.strip() == displ
        self.tests[ displ ] = dict( kwargs )


class integration_tests( vtu.vvtestTestCase ):

    def test_the_workflow(self):
        ""
        util.writefile( 'good.vvt', """
            import time
            print ( 'hello from the good test' )
            time.sleep(2)
            """ )
        util.writefile( 'bad.vvt', """
            import sys
            import vvtest_util as vtu
            print ( 'hello from the bad test' )
            sys.exit( vtu.diff_exit_status )
            """ )
        util.writefile( 'ugly.vvt', """
            #VVT: keywords = notme
            """ )

        vrun = vtu.runvvtest( '-K notme --cdash file.xml' )
        vrun.assertCounts( total=2, npass=1, diff=1 )

        time.sleep(1)
        self.check_good_bad_ugly( 'file.xml' )

        vrun = vtu.runvvtest( '-i --cdash file2.xml' )
        self.check_good_bad_ugly( 'file2.xml' )

        self.assert_same_submit_files( 'file.xml', 'file2.xml' )

        vrun = vtu.runvvtest( '-i --cdash "file3.xml,files=all,filemax=1MB"' )
        self.check_good_bad_ugly( 'file3.xml', good_output=True )

    def check_good_bad_ugly(self, filename, good_output=False):
        ""
        xml = util.read_xml_file( filename )

        testinfo = extract_test_results( xml, 'good' )
        assert float(testinfo['Execution Time']) < 10
        assert int(testinfo['Exit Value']) == 0
        assert sys.executable in testinfo['FullCommandLine']
        assert 'good.vvt' in testinfo['FullCommandLine']
        if good_output:
            assert 'hello from the good test' in testinfo['output']
        else:
            assert 'output' not in testinfo

        testinfo = extract_test_results( xml, 'bad' )
        assert testinfo['Completion Status'] == 'diff'
        assert float(testinfo['Execution Time']) < 10
        assert int(testinfo['Exit Value']) > 0
        assert sys.executable in testinfo['FullCommandLine']
        assert 'bad.vvt' in testinfo['FullCommandLine']
        assert 'hello from the bad test' in testinfo['output']

        assert extract_test_results( xml, 'ugly' ) == None

    def assert_same_submit_files(self, file1, file2):
        ""
        xml1 = util.read_xml_file( file1 )
        xml2 = util.read_xml_file( file2 )

        assert extract_build_stamp( xml1 ) == extract_build_stamp( xml2 )
        assert extract_site_name( xml1 ) == extract_site_name( xml2 )
        assert extract_build_name( xml1 ) == extract_build_name( xml2 )

        t1 = extract_start_time( xml1 )
        t2 = extract_start_time( xml2 )
        assert abs( t1-t2 ) <= 1

        t1 = extract_end_time( xml1 )
        t2 = extract_end_time( xml2 )
        assert abs( t1-t2 ) <= 1

        t1 = extract_elapsed_time( xml1 )
        t2 = extract_elapsed_time( xml2 )
        assert abs( t1-t2 ) <= 1

    def test_cdash_url_without_a_project_is_an_error(self):
        ""
        util.writefile( 'atest.vvt', """
            pass
            """ )

        vrun = vtu.runvvtest( '--cdash http://a.cdash.server/foo837',
                              raise_on_error=False )
        assert vrun.x != 0
        lines = vrun.grepLines( 'project must be specified when the CDash '
                                'destination is an http URL' )
        assert len( lines ) == 1

    def test_staged_test_handling(self):
        ""
        util.writefile( 'foo.vvt', """
            #VVT: parameterize (staged) : bar = A B C

            import sys
            import vvtest_util as vvt
            from script_util import exit_diff

            print ( 'bar='+vvt.bar+' stage='+vvt.stage )

            if vvt.bar == 'A':
                exit_diff()
            elif vvt.bar == 'B':
                sys.exit(1)
            """ )

        vrun = vtu.runvvtest( '--cdash file.xml' )

        xml = util.read_xml_file( 'file.xml' )

        testinfo = extract_test_results( xml, 'foo.bar stage=1(bar=A)' )
        assert 'bar=A stage=1' in testinfo['output']
        assert 'foo.vvt' in testinfo['FullCommandLine']

        testinfo = extract_test_results( xml, 'foo.bar stage=2(bar=B)' )
        assert 'bar=B stage=2' in testinfo['output']
        assert 'foo.vvt' in testinfo['FullCommandLine']

        testinfo = extract_test_results( xml, 'foo.bar stage=3(bar=C)' )
        assert not testinfo.get( 'output', None )
        assert not testinfo.get( 'FullCommandLine', None )


def make_CDashWriter( destination, subclass_submitter=None,
                      project=None, datestamp=None, rtinfo=None ):
    ""
    perms = PermissionSetter( os.getcwd(), None )

    fmtr = cdashutil.TestResultsFormatter()
    if subclass_submitter:
        subm = subclass_submitter
    else:
        subm = cdashutil.FileSubmitter()

    wr = cdashwriter.CDashWriter( perms, fmtr, subm )

    if rtinfo is None:
        rtinfo = { 'rundir':os.getcwd() }

    wr.initialize( rtinfo, destination, project=project, datestamp=datestamp )

    return wr


def extract_test_results( xmlroot, testname ):
    ""
    testinfo = None

    for nd0 in xmlroot.findall( 'Testing/Test' ):
        if nd0.find( 'Name' ).text == testname:

            testinfo = {}
            testinfo['status'] = nd0.get( 'Status' )

            nd1 = nd0.find( 'FullCommandLine' )
            if nd1 != None:
                testinfo[ 'FullCommandLine' ] = nd1.text

            for nd1 in nd0.findall( 'Results/NamedMeasurement' ):
                testinfo[ nd1.get('name') ] = nd1.find('Value').text

            nd1 = nd0.find( 'Results/Measurement' )
            if nd1 != None:
                testinfo[ 'output' ] = nd1.find('Value').text

    return testinfo


def extract_site_name( xmlroot ):
    ""
    return xmlroot.get('Name')


def extract_build_name( xmlroot ):
    ""
    return xmlroot.get('BuildName')


def extract_build_stamp( xmlroot ):
    ""
    return xmlroot.get('BuildStamp')


def extract_start_time( xmlroot ):
    ""
    ndL = util.recursive_find_xml_element( xmlroot, 'StartTestTime' )
    assert len( ndL ) == 1
    return float( ndL[0].text )


def extract_end_time( xmlroot ):
    ""
    ndL = util.recursive_find_xml_element( xmlroot, 'EndTestTime' )
    assert len( ndL ) == 1
    return float( ndL[0].text )


def extract_elapsed_time( xmlroot ):
    ""
    ndL = util.recursive_find_xml_element( xmlroot, 'ElapsedMinutes' )
    assert len( ndL ) == 1
    return float( ndL[0].text ) * 60


def extract_test_output( xmlroot, testname ):
    ""
    out = None

    for nd0 in util.recursive_find_xml_element( xmlroot, 'Test' ):
        for nd1 in nd0:
            if nd1.tag == 'Name' and nd1.text == testname:
                out = extract_measurement( nd0 )
                break

    return out


def extract_measurement( xmlnode ):
    ""
    out = None

    for nd0 in util.recursive_find_xml_element( xmlnode, 'Measurement' ):
        for nd1 in nd0:
            if nd1.tag == 'Value':
                out = nd1.text

    return out


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
