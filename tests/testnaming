#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

from libvvtest.errors import TestSpecError
import libvvtest.parsexml as parsexml
import libvvtest.parsevvt as parsevvt
import libvvtest.parseutil as parseutil


class parsing_testnames( vtu.vvtestTestCase ):

    def test_expanding_a_single_file_into_multiple_tests(self):
        ""
        util.writefile( 'afile.xml', """
            <rtest name="afile">
              <execute> echo "hello world" </execute>
            </rtest>
            """ )
        util.writefile( 'bfile.xml', """
            <rtest name="bname">
              <rtest name="cname"/>
              <execute> echo "hello world" </execute>
            </rtest>
            """ )
        util.writefile( 'dfile.vvt', """
            pass
            """ )
        util.writefile( 'efile.vvt', """
            #VVT: testname = fname
            """ )
        util.writefile( 'gfile.vvt', """
            #VVT: testname = hname
            #VVT: testname = iname
            """ )
        time.sleep(1)

        parser = parsexml.XMLTestParser( 'afile.xml' )
        assert parser.parseTestNames() == ['afile']

        parser = parsexml.XMLTestParser( 'bfile.xml' )
        names = parser.parseTestNames()
        names.sort()
        assert names == ['bname','cname']

        parser = parsevvt.ScriptTestParser( 'dfile.vvt' )
        assert parser.parseTestNames() == ['dfile']

        parser = parsevvt.ScriptTestParser( 'efile.vvt' )
        assert parser.parseTestNames() == ['fname']

        parser = parsevvt.ScriptTestParser( 'gfile.vvt' )
        names = parser.parseTestNames()
        names.sort()
        assert names == ['hname','iname']

    def test_that_multiple_tests_in_one_xml_file_works(self):
        ""
        util.writefile( "multi.xml", """
            <rtest name="multi">
                <rtest name="multi_2nd"/>
                <keywords> common </keywords>
                <keywords testname="multi"> justmulti </keywords>
                <keywords testname="multi_2nd"> just2nd </keywords>
                <execute> echo "test name ${NAME}XXX" </execute>
            </rtest>""" )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=2, npass=2 )

        assert len( util.findfiles( 'execute.log', 'TestResults*' ) ) == 2
        assert vrun.countGrepLogs( 'test name multiXXX' ) == 1
        assert vrun.countGrepLogs( 'test name multi_2ndXXX' ) == 1

    def test_using_testname_specifications_in_a_script_test(self):
        ""
        util.writefile( 'multi.vvt', """
            #VVT: testname=testA
            #VVT: name : testB      # can use "name" as an alias for testname
            #VVT: testname = testC
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=3, npass=3 )

        assert vrun.getTestIds() == [ 'testA', 'testB', 'testC' ]
        assert vrun.countGrepLogs( 'hello from the testA test' ) == 1
        assert vrun.countGrepLogs( 'hello from the testB test' ) == 1
        assert vrun.countGrepLogs( 'hello from the testC test' ) == 1

    def test_xml_test_naming(self):
        ""
        util.writefile( 'bad1.xml', """
            <rtest>
                <keywords> junk1 junk2 </keywords>
            </rtest>""" )

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'bad1.xml' )

        util.writefile( 'bad2.xml', """
            <rtest name="ate/st">
              <keywords> junk1 junk2 </keywords>
            </rtest>""" )

        self.assertRaises( TestSpecError, vtu.parse_single_test_file, 'bad2.xml' )

        util.writefile( 'ok.xml', """
            <rtest name="ok">
              <keywords> junk1 junk2 </keywords>
            </rtest>""" )

        tspec = vtu.parse_single_test_file( 'ok.xml' )
        assert tspec.getName() == 'ok'

    def test_for_valid_testname(self):
        ""
        util.writefile( 'atest.xml', """
            <rtest name="foo bar">
                <execute> echo "hello" </execute>
            </rtest>""" )
        util.writefile( 'btest.vvt', """
            #VVT: testname = foo bar
            """ )
        util.writefile( 'ctest.vvt', """
            #VVT: testname = foo*
            """ )
        util.writefile( 'd test.vvt', """
            pass
            """ )
        time.sleep(1)

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'atest.xml' )

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'btest.vvt' )

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'ctest.vvt' )

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'd test.vvt' )

    def test_testname_attribute_expressions(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: testname : atest
            #VVT: testname : btest
            #VVT: parameterize (testname=not btest) : np = 2
            #VVT: keywords (testname=btest or atest) : foo bar
            """ )

        tL = vtu.create_tests_from_file( 'atest.vvt' )
        tidL = [ tc.getSpec().getDisplayString() for tc in tL ]
        assert tidL == ['atest.np=2', 'btest']
        for i in range(2):
            kL = tL[i].getSpec().getKeywords( include_implicit=False )
            kL.sort()
            assert kL == ['bar','foo']

    def test_parsing_testname_expressions(self):
        ""
        util.writefile( 'atest.xml', """
            <rtest name="atest">
                <keywords testname="foo or b$ar"> foo </keywords>
            </rtest>""" )
        util.writefile( 'btest.xml', """
            <rtest name="btest">
                <execute testname="foo or b$ar"> echo "hello" </execute>
            </rtest>""" )
        util.writefile( 'ctest.xml', """
            <rtest name="ctest">
                <include testname="foo or b$ar" platforms="Linux"/>
            </rtest>""" )
        util.writefile( 'dtest.vvt', """
            #VVT: keywords (testname=foo or b$ar) : foo
            """ )
        util.writefile( 'etest.vvt', """
            #VVT: link (testname=foo or b$ar) : file.txt
            """ )
        util.writefile( 'ftest.vvt', """
            #VVT: enable (testname=foo or b$ar, options=debug)
            """ )
        time.sleep(1)

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'atest.xml' )
        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'btest.xml' )
        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'ctest.xml' )
        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'dtest.vvt' )
        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'etest.vvt' )
        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'ftest.vvt' )

        assert parseutil.evaluate_testname_expr( 'foo', 'foo or bar' )
        assert not parseutil.evaluate_testname_expr( 'baz', 'foo or bar' )
        self.assertRaises( Exception,
                    parseutil.evaluate_testname_expr, 'foo', 'foo or b$ar' )

    def test_testname_expression_globbing(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: testname : atest-foo
            #VVT: testname : atest-bar
            #VVT: parameterize (testname=*-foo) : np = 1 4
            #VVT: parameterize (testname=*-bar) : ndevice = 2
            """ )
        time.sleep(1)

        tL = vtu.create_tests_from_file( 'atest.vvt' )
        tidL = [ tc.getSpec().getDisplayString() for tc in tL ]
        assert tidL == ['atest-foo.np=1','atest-foo.np=4','atest-bar.ndevice=2']


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
