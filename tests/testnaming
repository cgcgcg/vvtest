#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util

from libvvtest.errors import TestSpecError
import libvvtest.parsevvt as parsevvt
import libvvtest.parseutil as parseutil


class parsing_testnames( vtu.vvtestTestCase ):

    def test_expanding_a_single_file_into_multiple_tests(self):
        ""
        util.writefile( 'dfile.vvt', """
            pass
            """ )
        util.writefile( 'efile.vvt', """
            #VVT: testname = fname
            """ )
        util.writefile( 'gfile.vvt', """
            #VVT: testname = hname
            #VVT: testname = iname
            """ )

        parser = parsevvt.ScriptTestParser( 'dfile.vvt' )
        assert parser.parseTestNames() == ['dfile']

        parser = parsevvt.ScriptTestParser( 'efile.vvt' )
        assert parser.parseTestNames() == ['fname']

        parser = parsevvt.ScriptTestParser( 'gfile.vvt' )
        names = parser.parseTestNames()
        names.sort()
        assert names == ['hname','iname']

    def test_attributes_are_not_allowed_on_testname_specs(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : foo = a b
            #VVT: testname (parameters="foo=a") = fname
            """ )
        parser = parsevvt.ScriptTestParser( 'atest.vvt' )
        self.assertRaises( TestSpecError, parser.parseTestNames )

    def test_using_testname_specifications_in_a_script_test(self):
        ""
        util.writefile( 'multi.vvt', """
            #VVT: testname=testA
            #VVT: name : testB      # can use "name" as an alias for testname
            #VVT: testname = testC
            import vvtest_util as vvt
            print ( "hello from the "+vvt.NAME+" test" )
            """ )

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=3, npass=3 )

        assert vrun.getTestIds() == [ 'testA', 'testB', 'testC' ]
        assert vrun.countGrepLogs( 'hello from the testA test' ) == 1
        assert vrun.countGrepLogs( 'hello from the testB test' ) == 1
        assert vrun.countGrepLogs( 'hello from the testC test' ) == 1

    def test_for_valid_testname(self):
        ""
        util.writefile( 'btest.vvt', """
            #VVT: testname = foo bar
            """ )
        util.writefile( 'ctest.vvt', """
            #VVT: testname = foo*
            """ )
        util.writefile( 'd test.vvt', """
            pass
            """ )

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'btest.vvt' )

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'ctest.vvt' )

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'd test.vvt' )

    def test_testname_attribute_expressions(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: testname : atest
            #VVT: testname : btest
            #VVT: parameterize (testname=not btest) : np = 2
            #VVT: keywords (testname=btest or atest) : foo bar
            """ )

        tL = vtu.create_tests_from_file( 'atest.vvt' )
        tidL = [ tc.getSpec().getDisplayString() for tc in tL ]
        assert tidL == ['atest.np=2', 'btest']
        for i in range(2):
            kL = tL[i].getSpec().getKeywords( include_implicit=False )
            kL.sort()
            assert kL == ['bar','foo']

    def test_parsing_testname_expressions(self):
        ""
        util.writefile( 'dtest.vvt', """
            #VVT: keywords (testname=foo or b$ar) : foo
            """ )
        util.writefile( 'etest.vvt', """
            #VVT: link (testname=foo or b$ar) : file.txt
            """ )
        util.writefile( 'ftest.vvt', """
            #VVT: enable (testname=foo or b$ar, options=debug)
            """ )

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'dtest.vvt' )
        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'etest.vvt' )
        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'ftest.vvt' )

        assert parseutil.evaluate_testname_expr( 'foo', 'foo or bar' )
        assert not parseutil.evaluate_testname_expr( 'baz', 'foo or bar' )
        self.assertRaises( Exception,
                    parseutil.evaluate_testname_expr, 'foo', 'foo or b$ar' )

    def test_testname_expression_globbing(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: testname : atest-foo
            #VVT: testname : atest-bar
            #VVT: parameterize (testname=*-foo) : np = 1 4
            #VVT: parameterize (testname=*-bar) : ndevice = 2
            """ )

        tL = vtu.create_tests_from_file( 'atest.vvt' )
        tidL = [ tc.getSpec().getDisplayString() for tc in tL ]
        self.assertEqual( tidL,
            ['atest-bar.ndevice=2','atest-foo.np=1','atest-foo.np=4'] )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
