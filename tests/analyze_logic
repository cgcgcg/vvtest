#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3


class parameterize_analyze_logic( vtu.vvtestTestCase ):

    def test_analyze_with_dep_that_fails_then_passes(self):
        ""
        good_vvt = """
            #VVT: keywords : fast medium
            #VVT: parameterize : timestep = 1 2
            #VVT: analyze : --analyze
            import os, sys, time, vvtest_util as vvt
            if '--analyze' not in sys.argv[1:]:
                with open( 'afile.'+vvt.timestep, 'wt' ):
                    pass
            else:
                assert os.path.exists( '../good.timestep=1/afile.1' )
                assert os.path.exists( '../good.timestep=2/afile.2' )
            """
        bad_vvt = """
            #VVT: keywords : fast medium
            #VVT: parameterize : timestep = 1 2
            #VVT: analyze : --analyze
            import os, sys, time, vvtest_util as vvt
            if '--analyze' not in sys.argv[1:]:
                if vvt.timestep == '2':
                    raise Exception( "fake failure" )
                else:
                    with open( 'bfile.'+vvt.timestep, 'wt' ):
                        pass
            else:
                assert os.path.exists( '../bad.timestep=1/bfile.1' )
                assert os.path.exists( '../bad.timestep=2/bfile.2' )
            """
        fixed_vvt = """
            #VVT: keywords : fast medium
            #VVT: parameterize : timestep = 1 2
            #VVT: analyze : --analyze
            import os, sys, time, vvtest_util as vvt
            if '--analyze' not in sys.argv[1:]:
                with open( 'bfile.'+vvt.timestep, 'wt' ):
                    pass
            else:
                assert os.path.exists( '../bad.timestep=1/bfile.1' )
                assert os.path.exists( '../bad.timestep=2/bfile.2' )
            """

        util.writefile( 'parentchild/good.vvt', good_vvt )

        for batch in [False,True]:

            vtu.remove_results()

            util.writefile( 'parentchild/bad.vvt', bad_vvt )
            time.sleep(1)

            vrun = vtu.runvvtest( '-k bad parentchild', batch=batch )
            vrun.assertCounts( total=3, npass=1, fail=1, notrun=1 )

            # "fix" the bad test
            util.writefile( 'parentchild/bad.vvt', fixed_vvt )
            time.sleep(1)

            vrun = vtu.runvvtest( '-R -k notdone/notrun/fail',
                                  '-k bad parentchild', batch=batch )
            vrun.assertCounts( total=2, npass=2 )

    def test_a_test_with_analyze_must_have_parameterize(self):
        ""
        util.writefile( 'noparam.vvt', """
            #VVT: analyze : --analyze
            """ )

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=0 )
        assert vrun.countLines( 'skipping *noparam' ) == 1

    def test_analyze_with_multiple_tests_in_one_file(self):
        """
        using testname filter with analyze
        """
        util.writefile( 'multi.vvt', """
            #VVT: testname = multi
            #VVT: testname = multi2
            #VVT: parameterize : param = one two
            #VVT: analyze : --analyze
            import os, sys, time, vvtest_util as vvt
            if '--analyze' not in sys.argv[1:]:
                print ( 'exec test '+vvt.NAME+' param '+vvt.param )
            elif vvt.NAME == 'multi':
                print ( 'analyze test multi '+vvt.NAME )
            else:
                print ( 'analyze test multi2 '+vvt.NAME )
            """ )

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=6, npass=6 )

            assert len( util.grepfiles( 'exec test multi ',
                        'TestResults.*/multi.param=one/execute.log' ) ) >= 1
            assert len( util.grepfiles( 'exec test multi ',
                        'TestResults.*/multi.param=two/execute.log' ) ) >= 1
            assert len( util.grepfiles( 'analyze test multi ',
                        'TestResults.*/multi/execute.log' ) ) >= 1

            assert len( util.grepfiles( 'exec test multi2 ',
                        'TestResults.*/multi2.param=one/execute.log' ) ) >= 1
            assert len( util.grepfiles( 'exec test multi2 ',
                        'TestResults.*/multi2.param=two/execute.log' ) ) >= 1
            assert len( util.grepfiles( 'analyze test multi2 ',
                        'TestResults.*/multi2/execute.log' ) ) >= 1

    def test_mutiliple_testnames_only_one_with_analyze(self):
        """
        testname filter with analyze where one test does not have an analyze
        """
        util.writefile( 'multi.vvt', """
            #VVT: testname = multi
            #VVT: testname = multi2
            #VVT: parameterize : param = one two
            #VVT: analyze (testname=multi2) : --analyze
            import os, sys, time, vvtest_util as vvt
            if '--analyze' not in sys.argv[1:]:
                print ( 'exec test '+vvt.NAME+' param '+vvt.param )
            else:
                print ( 'analyze test '+vvt.NAME+' (multi2)' )
            """ )

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=5, npass=5 )

            assert len( util.grepfiles( 'exec test multi ',
                        'TestResults.*/multi.param=one/execute.log' ) ) >= 1
            assert len( util.grepfiles( 'exec test multi ',
                        'TestResults.*/multi.param=two/execute.log' ) ) >= 1
            assert len( glob.glob( 'TestResults.*/multi/execute.log' ) ) == 0

            assert len( util.grepfiles( 'exec test multi2 ',
                        'TestResults.*/multi2.param=one/execute.log' ) ) >= 1
            assert len( util.grepfiles( 'exec test multi2 ',
                        'TestResults.*/multi2.param=two/execute.log' ) ) >= 1
            assert len( util.grepfiles( 'analyze test multi2 ',
                        'TestResults.*/multi2/execute.log' ) ) >= 1

    def test_using_analyze_command_line_option(self):
        ""    
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : ival = 1 2
            #VVT: analyze : --analyze
            import os, sys, time, vvtest_util as vvt
            import script_util as util
            if '--analyze' not in sys.argv[1:]:
                if not util.analyze_only():
                    print ( 'running touch' )
                    with open( 'afile.'+vvt.ival, 'wt' ):
                        pass
                print ( 'running execute analyze' )
            else:
                print ( 'running analyze' )
                assert os.path.exists( '../atest.ival=1/afile.1' )
                assert os.path.exists( '../atest.ival=2/afile.2' )
            """ )

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            assert len( util.grepfiles( 'running touch',
                        'TestResults.*/atest.ival=1/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running execute analyze',
                        'TestResults.*/atest.ival=1/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running touch',
                        'TestResults.*/atest.ival=2/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running execute analyze',
                        'TestResults.*/atest.ival=2/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running analyze',
                        'TestResults.*/atest/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running touch',
                        'TestResults.*/atest/execute.log' ) ) == 0

            vrun = vtu.runvvtest( '-Ra', batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            assert len( util.grepfiles( 'running touch',
                        'TestResults.*/atest.ival=1/execute.log' ) ) == 0
            assert len( util.grepfiles( 'running execute analyze',
                        'TestResults.*/atest.ival=1/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running touch',
                        'TestResults.*/atest.ival=2/execute.log' ) ) == 0
            assert len( util.grepfiles( 'running execute analyze',
                        'TestResults.*/atest.ival=2/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running analyze',
                        'TestResults.*/atest/execute.log' ) ) == 1
            assert len( util.grepfiles( 'running touch',
                        'TestResults.*/atest/execute.log' ) ) == 0


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
