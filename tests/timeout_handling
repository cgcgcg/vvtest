#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.timeout as timeout
from libvvtest.fmtresults import LookupCache


class timeout_handler_tests( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp( self, cleanout=False )

    def test_TimeoutHandler_construct_and_load(self):
        ""
        th = make_timeout_handler()
        th.setTimeouts( [ vtu.make_fake_TestCase() ] )

    def test_a_timeout_specified_by_the_test(self):
        ""
        th = make_timeout_handler()
        tL = make_test_list( timeout=281 )

        th.setTimeouts( tL )

        tstat = tL[0].getStat()
        assert tstat.getAttr( 'timeout' ) == 281

    def test_a_timeout_maximum(self):
        ""
        th = make_timeout_handler( max_timeout=200 )
        tL = make_test_list( timeout=281 )

        th.setTimeouts( tL )

        tstat = tL[0].getStat()
        assert tstat.getAttr( 'timeout' ) == 200

    def test_a_timeout_multiplier(self):
        ""
        th = make_timeout_handler( timeout_multiplier=2.5 )
        tL = make_test_list( timeout=11 )

        th.setTimeouts( tL )

        tstat = tL[0].getStat()
        assert abs( tstat.getAttr( 'timeout' ) - 11*2.5 ) < 2

    def test_a_command_line_timeout(self):
        ""
        th = make_timeout_handler( cmdline_timeout=42 )
        tL = make_test_list( timeout=281 )

        th.setTimeouts( tL )

        tstat = tL[0].getStat()
        assert tstat.getAttr( 'timeout' ) == 42

    def test_that_max_timeout_takes_precedence(self):
        ""
        th = make_timeout_handler( cmdline_timeout=42, max_timeout=31 )
        tL = make_test_list( timeout=281 )

        th.setTimeouts( tL )

        tstat = tL[0].getStat()
        assert tstat.getAttr( 'timeout' ) == 31

    def test_default_timeout_is_one_hour_or_5_hours_for_long(self):
        ""
        th = make_timeout_handler()
        tL = make_test_list()

        th.setTimeouts( tL )

        tstat = tL[0].getStat()
        assert tstat.getAttr( 'timeout' ) == 60*60

        tL = make_test_list( keyword='long' )
        th.setTimeouts( tL )

        tstat = tL[0].getStat()
        assert tstat.getAttr( 'timeout' ) == 5*60*60

    def test_the_timeout_table_from_a_previous_runtime(self):
        ""
        th = make_timeout_handler()
        assert th._timeout_from_previous_runtime( 1 ) == 120

        tm = th._timeout_from_previous_runtime( 5*60*60 )
        assert abs( tm - 1.3*5*60*60 ) < 10

    def test_timeout_selection_after_a_previous_timeout_occurred(self):
        ""
        th = make_timeout_handler()

        tcase = vtu.make_fake_TestCase()
        tm = th._timeout_if_test_timed_out( tcase.getSpec(), 231 )
        assert tm == 60*60

        add_keyword_to_test( tcase.getSpec(), 'long' )

        tm = th._timeout_if_test_timed_out( tcase.getSpec(), 231 )
        assert tm == 4*60*60

        tm = th._timeout_if_test_timed_out( tcase.getSpec(), 12*60*60 )
        assert abs( tm - 4*12*60*60 ) < 10

        tm = th._timeout_if_test_timed_out( tcase.getSpec(), 6*24*60*60 )
        assert abs( tm - 5*24*60*60 ) < 10


class test_timeouts( vtu.vvtestTestCase ):

    def check_timeout_setting(self, filename, timeout_value,
                                    cmdline_timeout=None,
                                    timeout_multiplier=None,
                                    max_timeout=None ):
        ""
        tL = vtu.create_tests_from_file( filename )
        assert len( tL ) == 1

        th = make_timeout_handler( cmdline_timeout=cmdline_timeout,
                                   timeout_multiplier=timeout_multiplier,
                                   max_timeout=max_timeout )
        th.setTimeouts( tL )

        tm = tL[0].getStat().getAttr('timeout')
        if tm != timeout_value:
            raise Exception( 'Expected timeout '+str(timeout_value)+\
                             ' but got '+str(tm) )

    def test_ways_that_timeout_is_set_on_a_test(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: timeout = 5
            pass
            """ )
        util.writefile( 'btest.xml', """
            <rtest name="btest">
              <timeout value="3"/>
            </rtest>""" )
        util.writefile( 'ctest.vvt', """
            pass
            """ )
        time.sleep(1)

        self.check_timeout_setting( 'atest.vvt', 5 )
        self.check_timeout_setting( 'btest.xml', 3 )
        self.check_timeout_setting( 'ctest.vvt', 3600 )  # the default timeout
        self.check_timeout_setting( 'atest.vvt', 30, cmdline_timeout=30 )
        self.check_timeout_setting( 'atest.vvt', 15, timeout_multiplier=3 )
        self.check_timeout_setting( 'atest.vvt', 40, cmdline_timeout=4,
                                                     timeout_multiplier=10 )
        self.check_timeout_setting( 'atest.vvt', 30, cmdline_timeout=4,
                                                     timeout_multiplier=10,
                                                     max_timeout=30 )

        self.check_timeout_setting( 'atest.vvt', 0, cmdline_timeout=0 )
        # self.check_timeout_setting( 'atest.vvt', 0, cmdline_timeout=-1 )

    def test_timeouts_are_reevaluated_in_restart_mode(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: timeout = 2
            import vvtest_util as vvt
            print ( 'atestTIMEOUT='+repr(vvt.TIMEOUT) )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '--timeout-multiplier 10' )
        vrun.assertCounts( total=1, npass=1 )
        tdir = vrun.resultsDir()
        tmo = int( vrun.greplogs( 'atestTIMEOUT=' )[0].split('=',1)[1] )
        assert tmo == 20

        vrun = vtu.runvvtest( '-R --timeout-multiplier 5', chdir=tdir )
        vrun.assertCounts( total=1, npass=1 )
        tmo = int( vrun.greplogs( 'atestTIMEOUT=' )[0].split('=',1)[1] )
        assert tmo == 10


###########################################################################

def make_timeout_handler( cmdline_timeout=None,
                          timeout_multiplier=None,
                          max_timeout=None ):
    ""
    plug = vtu.make_user_plugin( platname='XBox' )
    cache = LookupCache( 'XBox', 'gcc' )

    th = timeout.TimeHandler( plug,
                              cmdline_timeout,
                              timeout_multiplier,
                              max_timeout,
                              cache )

    return th


def make_test_list( timeout=None, keyword=None ):
    ""
    tL = [ vtu.make_fake_TestCase() ]

    tspec = tL[0].getSpec()

    if timeout != None:
        tspec.setTimeout( timeout )

    if keyword != None:
        add_keyword_to_test( tspec, keyword )

    return tL


def add_keyword_to_test( tspec, keyword ):
    ""
    kwL = tspec.getKeywords( include_implicit=False ) + [ keyword ]
    tspec.setKeywordList( kwL )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
