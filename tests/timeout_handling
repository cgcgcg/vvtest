#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.timehandler as timehandler
from libvvtest.fmtresults import LookupCache
import libvvtest.testcreator as testcreator


class timeout_handler_tests( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp( self, cleanout=False )

    def test_TimeoutHandler_construct_and_load(self):
        ""
        th = make_timeout_handler()
        th.setTimeouts( [ vtu.make_fake_TestCase() ] )

    def test_a_timeout_specified_by_the_test(self):
        ""
        th = make_timeout_handler()
        tL = make_test_list( timeout=281 )

        th.setTimeouts( tL )

        tstat = tL[0].getStat()
        assert tstat.getAttr( 'timeout' ) == 281

    def test_a_timeout_maximum(self):
        ""
        th = make_timeout_handler( max_timeout=200 )
        tL = make_test_list( timeout=281 )

        th.setTimeouts( tL )

        tstat = tL[0].getStat()
        assert tstat.getAttr( 'timeout' ) == 200

    def test_a_timeout_multiplier(self):
        ""
        th = make_timeout_handler( timeout_multiplier=2.5 )
        tL = make_test_list( timeout=11 )

        th.setTimeouts( tL )

        tstat = tL[0].getStat()
        assert abs( tstat.getAttr( 'timeout' ) - 11*2.5 ) < 2

    def test_a_command_line_timeout(self):
        ""
        th = make_timeout_handler( cmdline_timeout=42 )
        tL = make_test_list( timeout=281 )

        th.setTimeouts( tL )

        tstat = tL[0].getStat()
        assert tstat.getAttr( 'timeout' ) == 42

    def test_that_max_timeout_takes_precedence(self):
        ""
        th = make_timeout_handler( cmdline_timeout=42, max_timeout=31 )
        tL = make_test_list( timeout=281 )

        th.setTimeouts( tL )

        tstat = tL[0].getStat()
        assert tstat.getAttr( 'timeout' ) == 31

    def test_default_timeout_is_one_hour_or_5_hours_for_long(self):
        ""
        th = make_timeout_handler()
        tL = make_test_list()

        th.setTimeouts( tL )

        tstat = tL[0].getStat()
        assert tstat.getAttr( 'timeout' ) == 60*60

        tL = make_test_list( keyword='long' )
        th.setTimeouts( tL )

        tstat = tL[0].getStat()
        assert tstat.getAttr( 'timeout' ) == 5*60*60

    def test_the_timeout_table_from_a_previous_runtime(self):
        ""
        th = make_timeout_handler()
        assert th._timeout_from_previous_runtime( 1 ) == 120

        tm = th._timeout_from_previous_runtime( 5*60*60 )
        assert abs( tm - 1.3*5*60*60 ) < 10

    def test_timeout_selection_after_a_previous_timeout_occurred(self):
        ""
        th = make_timeout_handler()

        tcase = vtu.make_fake_TestCase()
        tm = th._timeout_if_test_timed_out( tcase.getSpec(), 231 )
        assert tm == 60*60

        add_keyword_to_test( tcase.getSpec(), 'long' )

        tm = th._timeout_if_test_timed_out( tcase.getSpec(), 231 )
        assert tm == 4*60*60

        tm = th._timeout_if_test_timed_out( tcase.getSpec(), 12*60*60 )
        assert abs( tm - 4*12*60*60 ) < 10

        tm = th._timeout_if_test_timed_out( tcase.getSpec(), 6*24*60*60 )
        assert abs( tm - 5*24*60*60 ) < 10

    def test_parsing_timeout_multiplier(self):
        ""
        val,err = timehandler.parse_timeout_multiplier( None )
        assert val == None and not err

        val,err = timehandler.parse_timeout_multiplier( '3' )
        assert val == 3 and not err
        val,err = timehandler.parse_timeout_multiplier( '3.3' )
        assert abs(val-3.3) < 1.e-12 and not err

        val,err = timehandler.parse_timeout_multiplier( '10s' )
        assert err

        val,err = timehandler.parse_timeout_multiplier( '0' )
        assert err
        val,err = timehandler.parse_timeout_multiplier( '0.0' )
        assert err
        val,err = timehandler.parse_timeout_multiplier( '-1' )
        assert err
        val,err = timehandler.parse_timeout_multiplier( '-0.5' )
        assert err

    def test_parsing_timeout_value(self):
        ""
        val,err = timehandler.parse_timeout_value( None )
        assert val == None and not err

        val,err = timehandler.parse_timeout_value( '3' )
        assert val == 3 and not err
        val,err = timehandler.parse_timeout_value( '3.3' )
        assert val == 3 and not err
        val,err = timehandler.parse_timeout_value( '3.7' )
        assert val == 4 and not err
        val,err = timehandler.parse_timeout_value( '0' )
        assert val == 0 and not err
        val,err = timehandler.parse_timeout_value( '-1' )
        assert val == 0 and not err
        val,err = timehandler.parse_timeout_value( '-0.1' )
        assert val == 0 and not err
        val,err = timehandler.parse_timeout_value( '0.0' )
        assert val == 0 and not err
        val,err = timehandler.parse_timeout_value( '0.0001' )
        assert val == 1 and not err
        val,err = timehandler.parse_timeout_value( '0.4' )
        assert val == 1 and not err
        val,err = timehandler.parse_timeout_value( '0.8' )
        assert val == 1 and not err

        val,err = timehandler.parse_timeout_value( '3h 2m 59s' )
        assert val == 3*60*60+2*60+59 and not err

        val,err = timehandler.parse_timeout_value( '3:02:59' )
        assert val == 3*60*60+2*60+59 and not err

        val,err = timehandler.parse_timeout_value( '3:62:59' )
        assert err

    def test_parsing_timeout_value(self):
        ""
        val,err = timehandler.parse_max_time( None )
        assert val == None and not err

        val,err = timehandler.parse_max_time( '3' )
        assert val == 3 and not err
        val,err = timehandler.parse_max_time( '3.3' )
        assert val == 3 and not err
        val,err = timehandler.parse_max_time( '3.7' )
        assert val == 4 and not err
        val,err = timehandler.parse_max_time( '0' )
        assert val == None and not err
        val,err = timehandler.parse_max_time( '-1' )
        assert val == None and not err
        val,err = timehandler.parse_max_time( '-0.1' )
        assert val == None and not err
        val,err = timehandler.parse_max_time( '0.0' )
        assert val == None and not err
        val,err = timehandler.parse_max_time( '0.0001' )
        assert val == 1 and not err
        val,err = timehandler.parse_max_time( '0.4' )
        assert val == 1 and not err
        val,err = timehandler.parse_max_time( '0.8' )
        assert val == 1 and not err

        val,err = timehandler.parse_max_time( '3h 2m 59s' )
        assert val == 3*60*60+2*60+59 and not err

        val,err = timehandler.parse_max_time( '3:02:59' )
        assert val == 3*60*60+2*60+59 and not err

        val,err = timehandler.parse_max_time( '3:62:59' )
        assert err


class test_timeouts( vtu.vvtestTestCase ):

    def check_timeout(self, filename, timeout_value,
                            cmdline_timeout=None,
                            timeout_multiplier=None,
                            max_timeout=None,
                            platform_name=None ):
        ""
        plt = platform_name
        if not plt:
            plt = vtu.core_platform_name()

        tL = vtu.create_tests_from_file( filename, platname=plt )
        assert len( tL ) == 1

        th = make_timeout_handler( cmdline_timeout=cmdline_timeout,
                                   timeout_multiplier=timeout_multiplier,
                                   max_timeout=max_timeout )
        th.setTimeouts( tL )

        tm = tL[0].getStat().getAttr('timeout')
        if tm != timeout_value:
            raise Exception( 'Expected timeout '+str(timeout_value)+\
                             ' but got '+str(tm) )

    def test_ways_that_timeout_is_set_on_a_test(self):
        ""
        platname = vtu.core_platform_name()

        util.writefile( 'atest.vvt', """
            #VVT: timeout = 5
            pass
            """ )
        util.writefile( 'btest.xml', """
            <rtest name="btest">
              <timeout value="3"/>
            </rtest>""" )
        util.writefile( 'ctest.vvt', """
            pass
            """ )
        util.writefile( 'dtest.vvt', """
            #VVT: timeout = 5
            #VVT: timeout (platforms="""+platname+"""): 50
            pass
            """ )
        util.writefile( 'etest.xml', '''
            <rtest name="etest">
              <timeout value="3"/>
              <timeout platforms="'''+platname+'''" value="30"/>
            </rtest>''' )
        util.writefile( 'ftest.vvt', """
            #VVT: timeout = 0
            pass
            """ )
        util.writefile( 'gtest.vvt', """
            #VVT: timeout = 5h
            pass
            """ )
        util.writefile( 'htest.xml', """
            <rtest name="htest">
              <timeout value="3:30"/>
            </rtest>""" )
        time.sleep(1)

        self.check_timeout( 'atest.vvt', 5 )
        self.check_timeout( 'btest.xml', 3 )
        self.check_timeout( 'ctest.vvt', 3600 )  # the default timeout
        self.check_timeout( 'atest.vvt', 30, cmdline_timeout=30 )
        self.check_timeout( 'atest.vvt', 15, timeout_multiplier=3 )
        self.check_timeout( 'atest.vvt', 40, cmdline_timeout=4,
                                             timeout_multiplier=10 )
        self.check_timeout( 'atest.vvt', 30, cmdline_timeout=4,
                                             timeout_multiplier=10,
                                             max_timeout=30 )

        self.check_timeout( 'atest.vvt', 0, cmdline_timeout=0 )

        self.check_timeout( 'dtest.vvt', 50 )
        self.check_timeout( 'etest.xml', 30 )
        self.check_timeout( 'dtest.vvt', 5, platform_name='XBox' )
        self.check_timeout( 'etest.xml', 3, platform_name='XBox' )

        self.check_timeout( 'ftest.vvt', 0 )

        self.check_timeout( 'gtest.vvt', 5*60*60 )
        self.check_timeout( 'htest.xml', 3*60+30 )

    def test_parsing_timeout_in_xml_specification_files(self):
        ""
        util.writefile( 'atest.xml', """
            <rtest name="atest">
              <timeout value="5"/>
            </rtest>""" )
        util.writefile( 'btest.xml', """
            <rtest name="btest">
              <timeout value="5:30"/>
            </rtest>""" )
        util.writefile( 'ctest.xml', """
            <rtest name="ctest">
              <timeout value="2h 30m"/>
            </rtest>""" )
        util.writefile( 'dtest.xml', """
            <rtest name="dtest">
              <timeout value="2:62:04"/>
            </rtest>""" )
        util.writefile( 'etest.xml', """
            <rtest name="etest">
              <timeout value="-1"/>
            </rtest>""" )
        time.sleep(1)

        tspec = vtu.parse_single_test_file( 'atest.xml' )
        assert tspec.getTimeout() == 5

        tspec = vtu.parse_single_test_file( 'btest.xml' )
        assert tspec.getTimeout() == 5*60+30

        tspec = vtu.parse_single_test_file( 'ctest.xml' )
        assert tspec.getTimeout() == 2*60*60 + 30*60

        self.assertRaises( testcreator.TestSpecError,
                           vtu.parse_single_test_file, 'dtest.xml' )

        tspec = vtu.parse_single_test_file( 'etest.xml' )
        assert tspec.getTimeout() == 0

    def test_parsing_timeout_in_vvt_specification_files(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: timeout = 5
            pass
            """ )
        util.writefile( 'btest.vvt', """
            #VVT: timeout = 5:30
            pass
            """ )
        util.writefile( 'ctest.vvt', """
            #VVT: timeout = 2h 30m
            pass
            """ )
        util.writefile( 'dtest.vvt', """
            #VVT: timeout = 2:62:04
            pass
            """ )
        util.writefile( 'etest.vvt', """
            #VVT: timeout = -1
            pass
            """ )
        time.sleep(1)

        tspec = vtu.parse_single_test_file( 'atest.vvt' )
        assert tspec.getTimeout() == 5

        tspec = vtu.parse_single_test_file( 'btest.vvt' )
        assert tspec.getTimeout() == 5*60+30

        tspec = vtu.parse_single_test_file( 'ctest.vvt' )
        assert tspec.getTimeout() == 2*60*60 + 30*60

        self.assertRaises( testcreator.TestSpecError,
                           vtu.parse_single_test_file, 'dtest.vvt' )

        tspec = vtu.parse_single_test_file( 'etest.vvt' )
        assert tspec.getTimeout() == 0

    def test_timeout_integration(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: timeout : 2
            import time
            time.sleep(10)
            """ )
        util.writefile( 'btest.xml', """
            <rtest name="btest">
              <timeout value="2"/>
              <execute>sleep 10</execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            t0 = time.time()
            vrun = vtu.runvvtest()
            vrun.assertCounts( total=2, timeout=2 )
            t1 = time.time()

            assert t1-t0 < 9

    def test_timeouts_are_reevaluated_in_restart_mode(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: timeout = 2
            import vvtest_util as vvt
            print ( 'atestTIMEOUT='+repr(vvt.TIMEOUT) )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '--timeout-multiplier 10' )
        vrun.assertCounts( total=1, npass=1 )
        tdir = vrun.resultsDir()
        tmo = int( vrun.greplogs( 'atestTIMEOUT=' )[0].split('=',1)[1] )
        assert tmo == 20

        vrun = vtu.runvvtest( '-R --timeout-multiplier 5.9', chdir=tdir )
        vrun.assertCounts( total=1, npass=1 )
        tmo = int( vrun.greplogs( 'atestTIMEOUT=' )[0].split('=',1)[1] )
        assert tmo == 12

    def test_some_invalid_timeouts(self):
        ""
        vrun = vtu.runvvtest( '--timeout-multiplier -1', raise_on_error=False )
        assert vrun.x != 0

        vrun = vtu.runvvtest( '--timeout-multiplier foo', raise_on_error=False )
        assert vrun.x != 0

        vrun = vtu.runvvtest( '-T 3:62', raise_on_error=False )
        assert vrun.x != 0

        vrun = vtu.runvvtest( '-T nonsense', raise_on_error=False )
        assert vrun.x != 0

        vrun = vtu.runvvtest( '--max-timeout 36hr', raise_on_error=False )
        assert vrun.x != 0

    def test_the_VVTEST_TIMEOUT_environ_variable(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: timeout = 5h
            import os
            print ( 'atestTIMEOUT='+os.environ['VVTEST_TIMEOUT'] )
            """ )
        util.writefile( 'btest.xml', """
            <rtest name="btest">
              <timeout value="7h"/>
              <execute>echo "btestTIMEOUT=$VVTEST_TIMEOUT"</execute>
            </rtest>""" )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=2, npass=2 )
        aval = int( vrun.greplogs( 'atestTIMEOUT=' )[0].split('=',1)[1] )
        bval = int( vrun.greplogs( 'btestTIMEOUT=' )[0].split('=',1)[1] )

        # a bump factor is added; however, doing so is now deprecated [Oct 2020]
        assert aval >= 5*60*60
        assert bval >= 7*60*60


class total_timeout( vtu.vvtestTestCase ):

    def test_timing_out_vvtest_itself(self):
        ""
        # magic: this test does not work for subprocess mode in python 2.7,
        #        but does with python 3.6+ (I think subprocess.communicate
        #        waits for all child processes to finish before returning)

        util.writefile( 'atest.vvt', """
            import time
            time.sleep(20)
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            t0 = time.time()
            vrun = vtu.runvvtest( '--total-timeout 3', batch=batch )
            vrun.assertCounts( total=1, notdone=1 )
            t1 = time.time()

            assert t1-t0 < 10

            vrun = vtu.runvvtest( '-vv -i' )
            vrun.assertCounts( total=1, notdone=1 )


###########################################################################

def make_timeout_handler( cmdline_timeout=None,
                          timeout_multiplier=None,
                          max_timeout=None ):
    ""
    plug = vtu.make_user_plugin( platname='XBox' )
    cache = LookupCache( 'XBox', 'gcc' )

    th = timehandler.TimeHandler( plug,
                                  cmdline_timeout,
                                  timeout_multiplier,
                                  max_timeout,
                                  cache )

    return th


def make_test_list( timeout=None, keyword=None ):
    ""
    tL = [ vtu.make_fake_TestCase() ]

    tspec = tL[0].getSpec()

    if timeout != None:
        tspec.setTimeout( timeout )

    if keyword != None:
        add_keyword_to_test( tspec, keyword )

    return tL


def add_keyword_to_test( tspec, keyword ):
    ""
    kwL = tspec.getKeywords( include_implicit=False ) + [ keyword ]
    tspec.setKeywordList( kwL )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
