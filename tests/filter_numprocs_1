#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

import vvtestutils as vtu
import testutils as util

from libvvtest.RuntimeConfig import RuntimeConfig


class filter_and_num_processors( vtu.vvtestTestCase ):

    def test_filter_out_tests_exceeding_max_num_procs(self):
        ""
        util.write_py_script( 'atest.vvt', """
            import vvtest_util as vvt
            print ( 'executing test' )
            """ )
        util.write_py_script( 'btest.vvt', """
            #VVT: parameterize : np = 1 2 4
            import vvtest_util as vvt
            print ( 'executing test, np='+str(vvt.np) )
            """ )
        util.write_py_script( 'ctest.vvt', """
            #VVT: parameterize : np = 1 2 4
            #VVT: analyze : --analyze
            import sys
            import vvtest_util as vvt
            if '--analyze' in sys.argv:
                print ( 'executing analyze, np='+str(vvt.PARAM_np) )
            else:
                print ( 'executing test, np='+str(vvt.np) )
            """ )

        for batch in [False,True]:

            vtu.remove_results()
            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=8, npass=8 )

            vtu.remove_results()
            vrun = vtu.runvvtest( '-n 1', batch=batch )
            vrun.assertCounts( total=8, npass=8 )

            vtu.remove_results()
            vrun = vtu.runvvtest( '-N 2', batch=batch )
            vrun.assertCounts( total=5, npass=5 )

            assert len( glob.glob( 'TestResults*/atest*/execute.log' ) ) == 1
            assert len( glob.glob( 'TestResults*/btest*/execute.log' ) ) == 2
            assert len( glob.glob( 'TestResults*/ctest*/execute.log' ) ) == 2

            vtu.remove_results()
            vrun = vtu.runvvtest( '-n 1 -N 2', batch=batch )
            vrun.assertCounts( total=5, npass=5 )

            assert len( glob.glob( 'TestResults*/atest*/execute.log' ) ) == 1
            assert len( glob.glob( 'TestResults*/btest*/execute.log' ) ) == 2
            assert len( glob.glob( 'TestResults*/ctest*/execute.log' ) ) == 2

            vtu.remove_results()
            vrun = vtu.runvvtest( '-N 4', batch=batch )
            vrun.assertCounts( total=8, npass=8 )

            vtu.remove_results()
            vrun = vtu.runvvtest( '-p "np<=2 or not np"', batch=batch )
            vrun.assertCounts( total=6, npass=6 )

            assert len( glob.glob( 'TestResults*/atest*/execute.log' ) ) == 1
            assert len( glob.glob( 'TestResults*/btest*/execute.log' ) ) == 2
            assert len( glob.glob( 'TestResults*/ctest*/execute.log' ) ) == 3


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
