#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
from os.path import join as pjoin
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

from libvvtest.RuntimeConfig import RuntimeConfig
from libvvtest.filtering import TestFilter


class device_tests( vtu.vvtestTestCase ):

    def test_evaluating_maxdevices_in_RuntimeConfig(self):
        ""
        rtconfig = RuntimeConfig()
        assert rtconfig.evaluate_maxdevices( (1,1000000) )

        rtconfig = RuntimeConfig()
        rtconfig.setMaxSize( (5,7) )
        assert     rtconfig.evaluate_maxdevices( (1,7) )
        assert not rtconfig.evaluate_maxdevices( (1,8) )

        rtconfig = RuntimeConfig()
        rtconfig.setMaxSize( (4,None) )
        assert rtconfig.evaluate_maxdevices( (1,1) )
        assert rtconfig.evaluate_maxdevices( (1,1000000) )

    def test_filtering_out_tests_by_max_devices(self):
        ""
        tcase1 = vtu.make_fake_TestCase()
        tcase1.getSpec().setParameters( { 'np':'1', 'ndevice':'0' } )

        tcase2 = vtu.make_fake_TestCase()
        tcase2.getSpec().setParameters( { 'np':'1', 'ndevice':'1' } )

        tcase3 = vtu.make_fake_TestCase()
        tcase3.getSpec().setParameters( { 'np':'1', 'ndevice':'4' } )

        rtc = vtu.make_RuntimeConfig()
        rtc.setMaxSize( (1,0) )
        tf = TestFilter( rtc, None )
        assert tf.checkMaxSize( tcase1 )
        assert not tf.checkMaxSize( tcase2 )
        assert not tf.checkMaxSize( tcase3 )

        rtc.applyMaxDevicesExpression( False )
        assert tf.checkMaxSize( tcase1 )
        assert tf.checkMaxSize( tcase2 )
        assert tf.checkMaxSize( tcase3 )

        rtc = vtu.make_RuntimeConfig()
        rtc.setMaxSize( (1,1) )
        tf = TestFilter( rtc, None )
        assert tf.checkMaxSize( tcase1 )
        assert tf.checkMaxSize( tcase2 )
        assert not tf.checkMaxSize( tcase3 )

        rtc = vtu.make_RuntimeConfig()
        rtc.setMaxSize( (1,4) )
        tf = TestFilter( rtc, None )
        assert tf.checkMaxSize( tcase1 )
        assert tf.checkMaxSize( tcase2 )
        assert tf.checkMaxSize( tcase3 )

    def test_run_a_test_using_two_devices(self):
        ""
        util.writefile( 'config/idplatform.py', """
            def platform( opts ):
                if '--plat' in opts:
                    return opts['--plat']
                else:
                    return 'GPUstacks'
            """ )
        util.writefile( 'config/platform_plugin.py', """
            def initialize( plat ):
                if plat.getName() == 'GPUstacks':
                    plat.setattr( 'maxdevices', 4 )
            """ )

        util.writefile( 'atest.vvt', """
            #VVT: parameterize : ndevice = 2 8
            import vvtest_util as vvt
            print ( 'np_ids='+repr(vvt.RESOURCE_IDS_np) )
            print ( 'np_tot='+repr(vvt.RESOURCE_TOTAL_np) )
            print ( 'device_ids='+repr(vvt.RESOURCE_IDS_ndevice) )
            print ( 'device_tot='+repr(vvt.RESOURCE_TOTAL_ndevice) )
            """ )

        vrun = vtu.runvvtest( '-n 1 -N 5 --devices 4' )
        vrun.assertCounts( total=1, npass=1 )
        self.check_resource_output( vrun )

        vrun = vtu.runvvtest( '-i -v', chdir=vrun.resultsDir() )
        vrun.assertCounts( total=1, npass=1 )

        vrun = vtu.runvvtest( '-i --max-devices=1 -v', chdir=vrun.resultsDir() )
        vrun.assertCounts( total=0 )

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--plat GPUstacks --batch --config config',
                                  batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            self.check_resource_output( vrun )

    def check_resource_output(self, vrun):
        ""
        sval = vrun.greplogs( 'np_ids=' )[0]
        npids = eval( sval.split( 'np_ids=' )[1].strip() )
        assert len( npids ) == 1 and npids[0] >= 0

        sval = vrun.greplogs( 'np_tot=' )[0]
        nptot = eval( sval.split( 'np_tot=' )[1].strip() )
        assert nptot > 0

        sval = vrun.greplogs( 'device_ids=' )[0]
        ndids = eval( sval.split( 'device_ids=' )[1].strip() )
        assert len( ndids ) == 2
        assert ndids[0] >= 0 and ndids[1] >= 0 and ndids[0] != ndids[1]

        sval = vrun.greplogs( 'device_tot=' )[0]
        ndtot = eval( sval.split( 'device_tot=' )[1].strip() )
        assert ndtot == 4


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
