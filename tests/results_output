#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time
from os.path import getsize as getfsize
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3
from vvtestutils import adjust_sys_path_for_unit_testing

import libvvtest.outpututils as outpututils
import libvvtest.listwriter as listwriter
from libvvtest.TestList import TestList
import libvvtest.fmtresults as fmtresults
from libvvtest.runinfo import RuntimeInfo


class misc_tests( vtu.vvtestTestCase ):

    def test_make_date_stamp(self):
        ""
        tm0 = time.mktime( time.strptime( 'Sun Oct 11 13:20:58 2018' ) )
        tm1 = tm0 - 600

        s = outpututils.make_date_stamp( tm0, None )
        assert s == '2018_10_11'

        s = outpututils.make_date_stamp( tm0, None, "%Y-%m-%d_%H:%M:%S" )
        assert s == '2018-10-11_13:20:58'

        s = outpututils.make_date_stamp( tm0, 'foobar' )
        assert s == 'foobar'

        s = outpututils.make_date_stamp( tm0, tm1, "%Y-%m-%d_%H:%M:%S" )
        assert s == '2018-10-11_13:10:58'

    def test_pretty_time(self):
        ""
        assert outpututils.pretty_time( 0 ) == '1s'
        assert outpututils.pretty_time( 1 ) == '1s'
        assert outpututils.pretty_time( 5.2 ) == '5s'
        assert outpututils.pretty_time( 67.3 ) == '1m 7s'
        assert outpututils.pretty_time( 3*60*60 + 67.3 ) == '3h 1m 7s'

    def test_colon_separated_time(self):
        ""
        assert outpututils.colon_separated_time( 0 ) == '0:00'
        assert outpututils.colon_separated_time( 1 ) == '0:01'
        assert outpututils.colon_separated_time( 5.2 ) == '0:05'
        assert outpututils.colon_separated_time( 67.3 ) == '1:07'
        assert outpututils.colon_separated_time( 3*60*60 + 67.3 ) == '3:01:07'
        assert outpututils.colon_separated_time( 30*60*60 + 67.3 ) == '30:01:07'

    def test_reading_file_with_size_limit(self):
        ""
        util.writefile( 'afile.txt', """
            line one is number one
            line two is last one wins
            """ )
        time.sleep(1)

        buf = outpututils.file_read_with_limit( 'afile.txt', 10 )
        assert len( buf.splitlines() ) > 2
        assert len( util.greplines( 'line one', buf ) ) == 1
        assert len( util.greplines( 'line two', buf ) ) == 1

    def test_reading_a_file_that_has_its_middle_taken_out(self):
        ""
        line = 'All work and no play makes Jack a dull boy.\n'
        with open( 'afile.txt', 'w' ) as fp:
            fp.write( 'The Overlook Hotel.\n' )
            fp.write( line * 10000 )
            fp.write( 'REDRUM!  REDRUM!\n' )
        time.sleep(1)

        assert getfsize( 'afile.txt' ) > 1*1024
        buf = outpututils.file_read_with_limit( 'afile.txt', 1 )
        assert len( buf ) <= 1*1024
        assert len( buf.splitlines() ) > 10
        assert buf.lstrip().startswith( 'The Overlook Hotel' )
        assert buf.rstrip().endswith( 'REDRUM!  REDRUM!' )
        assert len( util.greplines(
                        'middle of this file has been removed', buf ) ) == 1


class html_output_format_tests( vtu.vvtestTestCase ):

    def test_producing_an_HTML_results_file(self):
        ""
        write_three_test_files()
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )

        vrun = vtu.runvvtest( '-i --html=../tr.htm', chdir=vrun.resultsDir() )
        time.sleep(1)

        doc = util.read_xml_file( 'tr.htm' )
        lines = get_status_lines_from_html( doc )
        self.assert_tests_in_html( lines )

    def assert_tests_in_html(self, lines):
        ""
        assert len( lines ) == 5
        linestr = '\n'.join(lines)
        assert len( util.greplines( 'FailTest', linestr ) ) == 1
        assert len( util.greplines( 'DiffTest.np=1', linestr ) ) == 1
        assert len( util.greplines( 'DiffTest.np=2', linestr ) ) == 1
        assert len( util.greplines( 'subdir/param.hello=mars', linestr ) ) == 1
        assert len( util.greplines( 'subdir/param.hello=world', linestr ) ) == 1

    def test_producing_an_HTML_results_file_as_part_of_execution(self):
        ""
        write_three_test_files()
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--html tr.html' )
            vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )
            time.sleep(1)

            doc = util.read_xml_file( 'tr.html' )
            lines = get_status_lines_from_html( doc )
            self.assert_tests_in_html( lines )


class save_results_output( vtu.vvtestTestCase ):

    def test_methods_for_specifying_the_save_results_directory(self):
        ""
        os.mkdir( 'plugout' )
        os.mkdir( 'envout' )
        os.mkdir( 'cmdout' )

        util.writefile( 'atest.vvt', """
            #VVT: parameterize: np=1 4
            pass
            """ )

        util.writefile( "adir/platform_plugin.py", """
            import os, sys
            def initialize( platobj ):
                platobj.setattr( 'testingdir', '"""+abspath('plugout')+"""' )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=2, npass=2 )

        with util.set_environ( TESTING_DIRECTORY=None ):

            vrun = vtu.runvvtest( '-i --save-results', raise_on_error=False )
            assert vrun.x != 0
            assert 'vvtest error' in vrun.out

            vrun = vtu.runvvtest( '-i --save-results --config '+abspath('adir') )
            assert len( glob.glob( 'plugout/results.*' ) ) == 1

            assert len( glob.glob( 'envout/*' ) ) == 0
            os.environ['TESTING_DIRECTORY'] = abspath('envout')
            vrun = vtu.runvvtest( '-i --save-results --config '+abspath('adir') )
            assert len( glob.glob( 'envout/results.*' ) ) == 1

            assert len( glob.glob( 'cmdout/*' ) ) == 0
            vrun = vtu.runvvtest( '-i --save-results='+abspath('cmdout'),
                                  '--config '+abspath('adir') )
            assert len( glob.glob( 'cmdout/results.*' ) ) == 1

    def test_getting_relative_root_path_with_marker_file(self):
        ""
        tcase = make_fake_test_in_subdir( 'adir' )
        time.sleep(1)

        rel = fmtresults.determine_rootrel( tcase.getSpec(), {} )
        assert not rel

        add_runtimes_marker_file( 'adir' )
        rel = fmtresults.determine_rootrel( tcase.getSpec(), {} )
        assert rel == 'adir/sdir'

    def prep_testlist(self, subdir):
        ""
        tcase = make_fake_test_in_subdir( 'adir' )
        add_runtimes_marker_file( 'adir' )

        tlist = TestList( 'testlist' )
        tlist.addTest( tcase )
        time.sleep(1)

        return tcase, tlist

    def test_writing_testlist_results_file(self):
        ""
        tcase,tlist = self.prep_testlist( 'adir' )

        perm = MockPermissionSetter()
        rtinfo = RuntimeInfo( platform='Xbox', compiler='gcc' )

        lwr = listwriter.ListWriter( perm, 'odir', abspath('tdir') )

        lwr.writeList( tlist, rtinfo )
        fL = util.grepfiles( 'adir/sdir/atest.np=4', 'odir/results.*' )
        assert len(fL) == 1

    def test_recognizing_scp_like_directory(self):
        ""
        assert not listwriter.is_target_like_scp( '/abs/path' )
        assert not listwriter.is_target_like_scp( '/abs/path/with:colon' )
        assert not listwriter.is_target_like_scp( 'rel/path_with:colon' )
        assert listwriter.is_target_like_scp( 'sparky:rel/path' )
        assert listwriter.is_target_like_scp( 'sparky:/abs/path' )
        assert listwriter.is_target_like_scp( 'sparky:/abs/path/with:colon' )
        assert listwriter.is_target_like_scp( 'sparky.edu:/abs/path' )
        assert listwriter.is_target_like_scp( 'sparky.edu:rel/path' )

    def test_writing_testlist_results_file_to_remote_machine(self):
        ""
        util.writescript( 'fakescp', """
            #!"""+sys.executable+"""
            import sys, subprocess
            dest = sys.argv[-1].split(':',1)[1] + '.scp'
            argv = [ 'cp' ] + sys.argv[1:-1] + [ dest ]
            sys.exit( subprocess.call( argv ) )
            """ )

        os.mkdir( 'odir' )

        tcase,tlist = self.prep_testlist( 'adir' )

        perm = MockPermissionSetter()
        rtinfo = RuntimeInfo( platform='Xbox', compiler='gcc' )

        lwr = listwriter.ListWriter( perm, 'sparky:'+abspath('odir'),
                                     abspath('tdir'), scpexe=abspath('fakescp') )
        lwr.writeList( tlist, rtinfo )

        fL = util.grepfiles( 'adir/sdir/atest.np=4', 'odir/results.*.scp' )
        assert len(fL) == 1


def make_fake_test_in_subdir( subdir ):
    ""
    os.makedirs( subdir+'/sdir' )

    with util.change_directory( subdir ):
        tcase = vtu.make_fake_TestCase()

    return tcase


def add_runtimes_marker_file( rootdir ):
    ""
    tr = fmtresults.TestResults()
    tr.writeRuntimes( abspath(rootdir), None )


class MockPermissionSetter:
    def __init__(self): pass
    def apply(self, path): pass
    def recurse(self, path): pass


def write_three_test_files():
    ""
    util.writefile( "subdir/param.vvt", """
        #VVT: parameterize : hello = world mars
        import time
        time.sleep(1)
        """ )
    util.writefile( "FailTest.vvt", """
        import os, sys, time
        import vvtest_util as vvt
        time.sleep(2)
        raise Exception( 'pitch a fake exception' )
        """)
    util.writefile( "DiffTest.xml", """
        <rtest name="DiffTest">
            <parameterize np="1 2"/>
            <execute>
                sleep 3
                echo "fake difference of 29"
                set have_diff = yes
            </execute>
        </rtest>""")


def get_status_lines_from_html( htmldoc ):
    ""
    lines = []

    for nd in recurse_status_list_items( htmldoc ):
        txt = util.get_sub_text_from_xml_node( nd )
        lines.append( txt )

    return lines


def recurse_status_list_items( xmlnode ):
    ""
    for nd in util.recursive_find_xml_element( xmlnode, 'li' ):
        if nd.text and nd.text.strip().startswith( 'Status:' ):
            yield nd


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
