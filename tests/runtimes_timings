#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

import vvtestutils as vtu
import testutils as util

import results_util as ru

import libvvtest.runtimes as runtimes


class runtimes_and_timings( vtu.vvtestTestCase ):

    def test_create_and_use_a_runtimes_file(self):
        ""
        util.writefile( "tests/dir1/one.vvt", """
            import time
            time.sleep(1)
            """)
        util.writefile( "tests/dir1/two.vvt", """
            import time
            time.sleep(2)
            """)
        util.writefile( "tests/dir2/three.vvt", """
            import time
            time.sleep(3)
            """)
        util.writefile( "tests/.git/config", "" )  # for results 'pathid'

        platname = vtu.core_platform_name()
        tests = os.path.abspath( 'tests' )

        vrun = vtu.runvvtest( '--save-results tests' )
        vrun.assertCounts( total=3, npass=3 )

        cache = runtimes.LookupCache( {'platform':platname}, '.' )
        cache.load()

        tL = vtu.creator().fromFile( 'dir1/one.vvt', tests )
        tst = tL[0]
        tm,tv = cache.getRunTime( tst )
        assert tm is not None and tm >= 1

        tL = vtu.creator().fromFile( 'dir1/two.vvt', tests )
        tst = tL[0]
        tm,tv = cache.getRunTime( tst )
        assert tm is not None and tm >= 2

        tL = vtu.creator().fromFile( 'dir2/three.vvt', tests )
        tst = tL[0]
        tm,tv = cache.getRunTime( tst )
        assert tm is not None and tm >= 3

        # magic: lot more tests needed to exercise the LookupCache machinery

    def test_that_longest_runtimes_are_run_first(self):
        ""
        util.write_py_script( "tests/AA.vvt", """
            import os, sys, time
            time.sleep(5)
            """ )
        util.write_py_script( "tests/BB.vvt", """
            #VVT: parameterize : planet=mercury mars venus
            #VVT: analyze : --analyze
            import os, sys, time
            import vvtest_util as vvt
            if '--analyze' not in sys.argv:
                if vvt.planet == 'mercury':
                    time.sleep(1)
                elif vvt.planet == 'mars':
                    time.sleep(3)
                elif vvt.planet == 'venus':
                    time.sleep(7)
            else:
                pass  # the analyze test
            """ )
        util.write_py_script( "tests/CC.vvt", """
            import os, sys, time
            time.sleep(10)
            """ )

        tests = os.path.abspath( 'tests' )

        # run first to get the timings
        vrun = vtu.runvvtest( tests )
        vrun.assertCounts( total=6, npass=6 )

        # run again one at a time and check the execution order
        vrun = vtu.runvvtest( '-n 1 -R '+tests )
        vrun.assertCounts( total=6, npass=6 )

        assert vrun.startedTestIds() == [ 'CC', 'BB.planet=venus',
                                          'AA', 'BB.planet=mars',
                                          'BB.planet=mercury', 'BB' ]

    def test_using_timings_file_with_tmin_max(self):
        """
        exercise runtime min/max using a timings file
        """
        util.write_py_script( "tests/AA.vvt", """
            import os, sys, time
            time.sleep(1)
            """ )
        util.write_py_script( "tests/BB.vvt", """
            import os, sys, time
            time.sleep(3)
            """ )
        util.write_py_script( "tests/CC.vvt", """
            import os, sys, time
            time.sleep(7)
            """ )
        util.writefile( "tests/.git/config", "" )  # for results 'pathid'

        for batch in [False,True]:

            vtu.remove_results()
            for fn in glob.glob( 'vvtresults.*' ):
                util.fault_tolerant_remove( fn )

            # without a runtimes available, all tests should run
            vrun = vtu.runvvtest( '--save-results --tmax 6 tests', batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            # select tests based on the timings file
            vtu.remove_results()
            vrun = vtu.runvvtest( '--tmax 6 tests', batch=batch )
            vrun.assertCounts( total=2, npass=2 )
            self.assertEqual( vrun.getTestIds(), ['AA','BB'] )

    def test_runtimes_work_in_a_subdirectory(self):
        ""
        util.write_py_script( "tests/AA.vvt", """
            import os, sys, time
            time.sleep(1)
            """ )
        util.write_py_script( "tests/sub/BB.vvt", """
            import os, sys, time
            time.sleep(4)
            """ )
        util.writefile( "tests/.git/config", "" )  # for results 'pathid'

        vrun = vtu.runvvtest( '--save-results tests' )
        vrun.assertCounts( total=2, npass=2 )

        vtu.remove_results()
        vrun = vtu.runvvtest( '-vv --tmax 3 tests/sub' )
        vrun.assertCounts( total=1, skip=1 )
        self.assertEqual( vrun.getTestIds(), ['BB'] )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
