#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import join as pjoin
from os.path import abspath, dirname, basename
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.location as location
from libvvtest.location import find_vvtest_test_root_file
from libvvtest.location import collect_config_dirs
from libvvtest.location import split_by_largest_existing_path
from libvvtest.location import determine_test_directory
from libvvtest.location import test_results_subdir_name
from libvvtest.execute import encode_integer_warning

from libvvtest.testctor import TestConstructor
import libvvtest.TestList as TestList
import libvvtest.testlistio as testlistio
from libvvtest.permsetter import PermissionSetter
from libvvtest.errors import FatalError
from libvvtest.teststatus import DIFF_EXIT_STATUS


class Function_find_vvtest_test_root_file( vtu.vvtestTestCase ):

    def test_no_marker_file_exists(self):
        ""
        p = find_vvtest_test_root_file( os.getcwd(), None, 'foobar.baz' )
        assert p == None

        p = find_vvtest_test_root_file( os.getcwd(), os.getcwd(), 'foobar.baz' )
        assert p == None

    def test_marker_file_in_start_directory(self):
        ""
        util.writefile( 'foobar.baz', 'junk' )
        time.sleep(1)

        p = find_vvtest_test_root_file( os.getcwd(), None, 'foobar.baz' )
        assert p == abspath( 'foobar.baz' )

        p = find_vvtest_test_root_file( os.getcwd(), os.getcwd(), 'foobar.baz' )
        assert p == abspath( 'foobar.baz' )

    def test_marker_file_in_parent_directory(self):
        ""
        util.writefile( 'foobar.baz', 'junk' )
        os.makedirs( 'subdir/deep' )
        time.sleep(1)

        startd = abspath( 'subdir' )
        markf = abspath( 'foobar.baz' )

        p = find_vvtest_test_root_file( startd, None, 'foobar.baz' )
        assert p == markf

        p = find_vvtest_test_root_file( startd, os.getcwd(), 'foobar.baz' )
        assert p == None

        startd = abspath( 'subdir/deep' )
        markf = abspath( 'foobar.baz' )

        p = find_vvtest_test_root_file( startd, None, 'foobar.baz' )
        assert p == markf

        p = find_vvtest_test_root_file( startd, os.getcwd(), 'foobar.baz' )
        assert p == None


class configdir_handling( vtu.vvtestTestCase ):

    def test_simple_configdir_specification(self):
        ""
        dL = collect_config_dirs( [], None )
        assert dL == []

        dL = collect_config_dirs( ['/a/path'], None )
        assert dL == [ '/a/path' ]

        dL = collect_config_dirs( [], '/a/path' )
        assert dL == [ '/a/path' ]

        dL = collect_config_dirs( ['/a/path'], '/b/path' )
        assert dL == [ '/a/path' ]

    def test_abspath_is_applied(self):
        ""
        os.mkdir( 'subdir' )
        time.sleep(1)

        dL = collect_config_dirs( ['subdir'], None )
        assert dL == [ abspath('subdir') ]

        dL = collect_config_dirs( [], '..' )
        assert dL == [ dirname( os.getcwd() ) ]

    def test_multiple_paths(self):
        ""
        os.mkdir( 'subdir' )
        time.sleep(1)

        dL = collect_config_dirs( ['/a/path','/b/path'], None )
        assert dL == ['/a/path','/b/path']

        dL = collect_config_dirs( ['/a/path:/b/path'], None )
        assert dL == ['/a/path','/b/path']

        dL = collect_config_dirs( [], '/a/path:/b/path' )
        assert dL == ['/a/path','/b/path']

        dL = collect_config_dirs( [], '/a/path:subdir' )
        assert dL == ['/a/path',abspath('subdir')]

    def test_directories_with_colons(self):
        ""
        os.mkdir( 'subdir' )
        os.mkdir( 'some:dir' )
        time.sleep(1)

        d1,d2 = split_by_largest_existing_path( abspath('subdir') )
        assert d1 == abspath('subdir') and d2 == None

        d1,d2 = split_by_largest_existing_path( abspath('some:dir') )
        assert d1 == abspath('some:dir') and d2 == None

        d1,d2 = split_by_largest_existing_path( 'some:dir' )
        assert d1 == 'some:dir' and d2 == None

        d1,d2 = split_by_largest_existing_path( 'subdir:some:dir' )
        assert d1 == 'subdir' and d2 == 'some:dir'

        d1,d2 = split_by_largest_existing_path( 'foo:some:dir' )
        assert d1 == None and d2 == 'foo:some:dir'

        d1,d2 = split_by_largest_existing_path( 'some:dir:foo' )
        assert d1 == 'some:dir' and d2 == 'foo'

        d1,d2 = split_by_largest_existing_path( 'some:dir:foo:bar' )
        assert d1 == 'some:dir' and d2 == 'foo:bar'

        d1,d2 = split_by_largest_existing_path( 'subdir:some:dir' )
        assert d1 == 'subdir' and d2 == 'some:dir'

        d1,d2 = split_by_largest_existing_path( 'foo:bar' )
        assert d1 == None and d2 == 'foo:bar'


        dL = collect_config_dirs( [], 'some:dir:subdir' )
        assert dL == [abspath('some:dir'),abspath('subdir')]

        dL = collect_config_dirs( [], 'subdir:some:dir' )
        assert dL == [abspath('subdir'),abspath('some:dir')]

        dL = collect_config_dirs( [], 'foo:some:dir' )
        assert dL == [abspath('foo'),abspath('some:dir')]


class test_results_directory( vtu.vvtestTestCase ):

    def test_getting_the_test_directory_path(self):
        ""
        td = determine_test_directory( 'subdir', None, '/some/path' )
        assert td == '/some/path/subdir'

        self.assertRaises( Exception,
                determine_test_directory, 'subdir', None, 'some/path' )

        td = determine_test_directory( None, '/path/to/test.cache', None )
        assert td == '/path/to'

        td = determine_test_directory( 'foo', '/path/to/test.cache', 'bar' )
        assert td == '/path/to'

        self.assertRaises( Exception,
                determine_test_directory, None, 'path/to/test.cache', None )

    def test_the_test_subdirectory_name(self):
        ""
        sd = test_results_subdir_name( 'anything', None, None, None )
        assert sd == 'anything'
        sd = test_results_subdir_name( 'anything', 'foo', 'bar', 'baz' )
        assert sd == 'anything'

        sd = test_results_subdir_name( None, None, None, 'XBox' )
        assert sd == 'TestResults.XBox'
        sd = test_results_subdir_name( None, ['foo','bar'], None, 'XBox' )
        assert sd == 'TestResults.XBox.ON=foo_bar'
        sd = test_results_subdir_name( None, None, ['foo','bar'], 'XBox' )
        assert sd == 'TestResults.XBox.OFF=foo_bar'
        sd = test_results_subdir_name( None, ['foo'], ['bar'], 'XBox' )
        assert sd == 'TestResults.XBox.ON=foo.OFF=bar'

    def test_if_a_directory_is_writable(self):
        ""
        assert location.writable_directory( os.getcwd() )

        assert not location.writable_directory( abspath( 'noexist' ) )

        util.writefile( 'junk1', 'foo' )
        assert not location.writable_directory( 'junk1' )
        assert not location.writable_directory( abspath('junk1') )

        util.writefile( 'noexec/junk2', 'foo' )
        save_perm = util.remove_execute_perms( 'noexec' )
        try:
            assert not location.writable_directory( 'noexec' )
        finally:
            os.chmod( 'noexec', save_perm )

        util.writefile( 'nowrite/junk3', 'foo' )
        save_perm = util.remove_write_perms( 'nowrite' )
        try:
            assert not location.writable_directory( 'nowrite' )
        finally:
            os.chmod( 'nowrite', save_perm )

    def test_make_a_scratch_mirror(self):
        ""
        assert len( os.listdir('.') ) == 0

        perms = PermissionSetter( os.getcwd(), [] )

        rtn = location.make_scratch_mirror( os.getcwd(), perms )

        fL = os.listdir( '.' )
        assert len(fL) == 1
        usrdir = fL[0]
        assert os.path.isdir( usrdir )
        assert os.path.samefile( rtn, usrdir )

        rtn2 = location.make_scratch_mirror( os.getcwd(), perms )

        assert rtn == rtn2
        assert os.path.samefile( rtn, usrdir )

    def test_search_and_pick_a_scratch_mirror(self):
        ""
        os.mkdir( 'thisone' )

        perms = PermissionSetter( os.getcwd(), [] )

        dirs = [ abspath('noexist'), abspath('thisone') ]
        rtn = location.search_and_make_scratch_directory( dirs, perms )

        assert os.path.samefile( dirname(rtn), 'thisone' )

    def test_making_a_scratch_directory(self):
        ""
        curdir = os.getcwd()
        perms = PermissionSetter( curdir, [] )

        rtn = location.make_any_scratch_directory( [ abspath('junk') ], perms )
        assert rtn == None
        assert len( os.listdir('.') ) == 0

        rtn = location.make_any_scratch_directory( [curdir], perms )
        scr = util.globfile( '*/vvtest_rundir' )
        assert len( os.listdir(scr) ) == 0

    def test_making_a_directory(self):
        ""
        os.mkdir( 'existing' )
        os.symlink( abspath('existing'), 'goodlink' )
        os.symlink( abspath('noexist'), 'badlink' )
        util.writefile( 'afile', 'junk' )

        location.check_and_make_directory( abspath('newdir') )
        assert not os.path.islink( 'newdir' ) and os.path.isdir( 'newdir' )

        location.check_and_make_directory( abspath('existing') )
        assert not os.path.islink( 'existing' ) and os.path.isdir( 'existing' )

        location.check_and_make_directory( abspath('goodlink') )
        assert os.path.islink( 'goodlink' ) and os.path.isdir( 'goodlink' )

        location.check_and_make_directory( abspath('afile') )
        assert not os.path.islink( 'afile' ) and os.path.isdir( 'afile' )

        location.check_and_make_directory( abspath('badlink') )
        assert not os.path.islink( 'badlink' ) and os.path.isdir( 'badlink' )

    def test_force_linking_a_directory(self):
        ""
        util.writefile( 'somedir/afile', 'foo' )
        util.writefile( 'somefile', 'bar' )

        location.force_link_directory( abspath('frompath'), abspath('topath') )
        assert os.path.islink( 'frompath' )
        assert os.readlink('frompath') == abspath('topath')

        # idempotent
        location.force_link_directory( abspath('frompath'), abspath('topath') )
        assert os.path.islink( 'frompath' )
        assert os.readlink('frompath') == abspath('topath')

        # same from path but different target
        location.force_link_directory( abspath('frompath'), abspath('target') )
        assert os.path.islink( 'frompath' )
        assert os.readlink('frompath') == abspath('target')

        location.force_link_directory( abspath('somedir'), abspath('t2') )
        assert os.path.islink( 'somedir' )
        assert os.readlink('somedir') == abspath('t2')

        location.force_link_directory( abspath('somefile'), abspath('t3') )
        assert os.path.islink( 'somefile' )
        assert os.readlink('somefile') == abspath('t3')

    def test_making_a_mirror_directory(self):
        ""
        os.mkdir( 'dest1' )
        os.makedirs( 'wrkdir/dest2' )
        os.makedirs( 'fakescratch' )

        perms = PermissionSetter( os.getcwd(), [] )

        ok = location.make_mirror_directory( abspath('testdir'),
                                             abspath('dest1'),
                                             os.getcwd(), perms )
        assert ok
        assert os.path.islink( 'testdir' )
        assert os.path.samefile( os.readlink( 'testdir' ), 'dest1/testdir' )
        assert os.path.isdir( 'dest1/testdir' )

        ok = location.make_mirror_directory( abspath('testdir'),
                                             'dest2',
                                             abspath('wrkdir'), perms )
        assert ok
        assert os.path.islink( 'testdir' )
        assert os.path.samefile( os.readlink( 'testdir' ), 'wrkdir/dest2/testdir' )
        assert os.path.isdir( 'wrkdir/dest2/testdir' )

        self.assertRaises( FatalError,
                location.make_mirror_directory, abspath('testdir'),
                                                'dest1/..',
                                                os.getcwd(), perms )

        ok = location.make_mirror_directory( abspath('testdir'),
                                             'any',
                                             os.getcwd(), perms,
                                             scratchdirs=[abspath('fakescratch')] )
        assert ok
        assert os.path.islink( 'testdir' )
        rdir = util.globfile( 'fakescratch/*/vvtest_rundir' )
        assert os.path.samefile( os.readlink( 'testdir' ), rdir+'/testdir' )
        assert os.path.isdir( rdir+'/testdir' )


class exit_status_controls( vtu.vvtestTestCase ):

    def test_encoding_an_integer_by_tests_notrun_or_notpass(self):
        ""
        tl = TestList.TestList( None )
        tl.addTest( vtu.make_fake_TestCase( 'pass' ) )
        assert encode_integer_warning( tl ) == 0

        tl = TestList.TestList( None )
        tl.addTest( vtu.make_fake_TestCase( 'diff' ) )
        assert encode_integer_warning( tl ) == 2**1

        tl = TestList.TestList( None )
        tl.addTest( vtu.make_fake_TestCase( 'fail' ) )
        assert encode_integer_warning( tl ) == 2**2

        tl = TestList.TestList( None )
        tl.addTest( vtu.make_fake_TestCase( 'timeout' ) )
        assert encode_integer_warning( tl ) == 2**3

        tl = TestList.TestList( None )
        tl.addTest( vtu.make_fake_TestCase( 'notdone' ) )
        assert encode_integer_warning( tl ) == 2**4

        tl = TestList.TestList( None )
        tl.addTest( vtu.make_fake_TestCase( 'notrun' ) )
        assert encode_integer_warning( tl ) == 2**5

    def test_encoding_tests_notrun_or_notpass_in_the_exit_status(self):
        ""
        util.writefile( 'tpass.vvt', """
            pass
            """ )
        util.writefile( 'timeo.vvt', """
            #VVT: parameterize : P = a b
            import time
            time.sleep( 10 )
            """ )
        util.writefile( 'tdiff.vvt', """
            #VVT: parameterize : P = a b
            import sys
            import vvtest_util as vvt
            sys.exit( vvt.diff_exit_status )
            """ )
        util.writefile( 'tfail.vvt', """
            #VVT: parameterize : P = a b
            raise Exception( 'fake exception' )
            """ )
        util.writefile( 'tnada.vvt', """
            #VVT: parameterize : P = a b
            #VVT: depends on : tfail*
            """ )
        time.sleep(1)

        code = 2**1 + 2**2 + 2**3 + 2**5

        vrun = vtu.runvvtest( '-T 3 --encode-exit-status',
                              raise_on_error=False )
        assert vrun.x == code
        tdir = vrun.resultsDir()

        vrun = vtu.runvvtest( '-i --encode-exit-status',
                              raise_on_error=False )
        assert vrun.x == code

        vrun = vtu.runvvtest( '-R -T 3 --encode-exit-status',
                              chdir=tdir,
                              raise_on_error=False )
        assert vrun.x == code

    def test_exit_status_encoding_does_not_consider_skips(self):
        ""
        util.writefile( 'testA.vvt', """
            #VVT: keywords : one
            """ )
        util.writefile( 'testB.vvt', """
            #VVT: keywords : two
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '-vv -k one/two --encode-exit-status',
                              raise_on_error=False )
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.x == 0

        vtu.remove_results()

        vrun = vtu.runvvtest( '-vv -k one --encode-exit-status',
                              raise_on_error=False )
        vrun.assertCounts( total=2, npass=1, skip=1 )
        assert vrun.x == 0

    def test_command_line_is_stored_in_testlist_files(self):
        ""
        util.writefile( 'testA.vvt', """
            #VVT: keywords : one
            """ )
        util.writefile( 'testB.vvt', """
            #VVT: keywords : two
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '-g -k one' )
        trdir = vrun.resultsDir()

        cmdl = get_command_line( trdir+'/testlist' )
        assert '-g' in cmdl and '-k' in cmdl and 'one' in cmdl

        vrun = vtu.runvvtest( chdir=trdir )
        vrun.assertCounts( total=1, npass=1 )
        cmdl = get_command_line( trdir+'/testlist.*' )
        assert '--plat' in cmdl

        vtu.remove_results()

        vrun = vtu.runvvtest( '-k two' )
        vrun.assertCounts( total=1, npass=1 )
        cmdl = get_command_line( trdir+'/testlist' )
        assert '-k' in cmdl and 'two' in cmdl
        cmdl2 = get_command_line( trdir+'/testlist.*' )
        assert cmdl == cmdl2

    def test_exit_status_is_stored_in_test_results_file(self):
        ""
        util.writefile( 'good.vvt', """
            pass
            """ )
        util.writefile( 'bad.vvt', """
            raise Exception( 'fake exception' )
            """ )
        util.writefile( 'ugly.vvt', """
            import sys
            import vvtest_util as vvt
            sys.exit( vvt.diff_exit_status )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest()
        tdir = vrun.resultsDir()
        vrun.assertCounts( total=3, npass=1, diff=1, fail=1 )

        fn = util.globfile( tdir+'/testlist.*' )
        rd = testlistio.TestListReader( fn )
        rd.read( TestConstructor() )

        testD = rd.getTests()
        assert len( testD ) == 3

        for tcase in testD.values():
            tspec = tcase.getSpec()
            tstat = tcase.getStat()
            if tspec.getName() == 'good':
                assert tstat.getAttr( 'result' ) == 'pass'
                assert tstat.getAttr( 'xvalue' ) == 0
            elif tspec.getName() == 'bad':
                assert tstat.getAttr( 'result' ) == 'fail'
                assert tstat.getAttr( 'xvalue' ) > 0
            elif tspec.getName() == 'ugly':
                assert tstat.getAttr( 'result' ) == 'diff'
                assert tstat.getAttr( 'xvalue' ) == DIFF_EXIT_STATUS


def get_command_line( filepat ):
    ""
    rf = util.globfile( filepat )

    lr = testlistio.TestListReader( rf )
    lr.read( TestConstructor() )

    cmdl = lr.getAttr( 'cmdline' )
    assert type(cmdl) == type([])

    return cmdl


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
