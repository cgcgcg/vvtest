#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import platform
from os.path import abspath
from os.path import join as pjoin
import time

import vvtestutils as vtu
import testutils as util
from vvtestutils import adjust_sys_path_for_unit_testing

from libvvtest.vvplatform import Platform
import libvvtest.makeplatform as makeplatform


class loading_idplatform( vtu.vvtestTestCase ):

    def test_import_idplatform_module(self):
        ""
        util.writefile( 'adir/idplatform.py', """
            def hello():
                return 'world'
            """ )
        adir = abspath( 'adir' )
        time.sleep(1)

        # first check adjust_sys_path_for_unit_testing()
        savepath = list( sys.path )
        try:
            sys.path.insert( 0, adir )
            sys.path.append( adir )
            assert adir in sys.path
            adjust_sys_path_for_unit_testing()
            assert adir not in sys.path
        finally:
            sys.path[:] = savepath

        # None is returned if idplatform.py not in sys.path
        savepath = adjust_sys_path_for_unit_testing()
        try:
            idp = makeplatform.import_idplatform()
        finally:
            sys.path[:] = savepath
        assert idp == None

        # module returned if idplatform.py is in sys.path
        sys.path.insert( 0, adir )
        try:
            idp = makeplatform.import_idplatform()
        finally:
            sys.path.pop(0)
        assert idp.hello() == 'world'

    def test_option_convert_function(self):
        ""
        opts = makeplatform.convert_to_option_dictionary( None, [], [] )
        assert '--plat' not in opts
        assert opts['-o'] == []
        assert opts['-O'] == []

        opts = makeplatform.convert_to_option_dictionary( 'foo', ['a'], ['b'] )
        assert opts['--plat'] == 'foo'
        assert opts['-o'] == ['a']
        assert opts['-O'] == ['b']

    def test_using_idplatform_to_define_platform_and_compiler(self):
        ""
        util.writefile( 'adir/idplatform.py', """
            def platform( opts ):
                return 'XBox'
            def compiler( platname, opts ):
                return 'llvm'
            """ )
        adir = abspath( 'adir' )
        time.sleep(1)

        savepath = adjust_sys_path_for_unit_testing()
        try:
            plat1,cplr1 = makeplatform.determine_platform_and_compiler( None, [], [] )
            plat2,cplr2 = makeplatform.determine_platform_and_compiler( 'foo', [], [] )
        finally:
            sys.path[:] = savepath
        assert plat1 == platform.uname()[0] and cplr1 is None
        assert plat2 == 'foo' and cplr2 is None

        savepath = adjust_sys_path_for_unit_testing()
        try:
            sys.path.insert( 0, adir )
            plat1,cplr1 = makeplatform.determine_platform_and_compiler( None, [], [] )
            plat2,cplr2 = makeplatform.determine_platform_and_compiler( 'foo', [], [] )
        finally:
            sys.path[:] = savepath
        assert plat1 == 'XBox' and cplr1 == 'llvm'
        assert plat2 == 'foo' and cplr2 == 'llvm'


class constructing_platform( vtu.vvtestTestCase ):

    def test_initialize_platformconfig_from_platform_plugin(self):
        ""
        util.writefile( 'adir/platform_plugin.py', """
            def initialize( platobj ):
                platobj.setattr( 'foo', 'bar' )
            """ )
        adir = abspath( 'adir' )
        time.sleep(1)

        savepath = adjust_sys_path_for_unit_testing()
        try:
            plat = makeplatform.PlatformConfig( {}, None, None )
            makeplatform.initialize_platform( plat )
        finally:
            sys.path[:] = savepath
        assert plat.getattr( 'foo', None ) == None

        savepath = adjust_sys_path_for_unit_testing()
        try:
            plat = makeplatform.PlatformConfig( {}, None, None )
            sys.path.insert( 0, adir )
            makeplatform.initialize_platform( plat )
        finally:
            sys.path[:] = savepath
        assert plat.getattr( 'foo', None ) == 'bar'

    def test_setting_platformconfig_options(self):
        ""
        platcfg = makeplatform.PlatformConfig( {}, None, None )
        makeplatform.set_platform_options( platcfg, {} )

        popts = { 'q':'admin',
                  'PT':'fy666',
                  'walltime':'2:34',
                  'QoS':'long' }
        makeplatform.set_platform_options( platcfg, popts )

        assert platcfg.getattr( 'queue' ) == 'admin'
        assert platcfg.getattr( 'account' ) == 'fy666'
        assert platcfg.getattr( 'walltime' ) == '2:34'
        assert platcfg.getattr( 'QoS' ) == 'long'

    def test_the_create_Platform_instance_function(self):
        ""
        plat = makeplatform.create_Platform_instance(
                    os.getcwd(), None, None, {},
                    None, None, None, None,
                    None, None )

        optD = { 'q':'justdoit', 'knl':'', 'PT':'fy666', 'walltime':'2:34' }
        plat = makeplatform.create_Platform_instance(
                    os.getcwd(),
                    'XBox', True,
                    optD,
                    10, 20, None, None,
                    ['dbg'], ['symbols'] )

        assert plat.getName() == 'XBox'
        assert plat.getMaxSize() == (20,0)
        assert plat.getSize() == (10,0)
        assert plat.getattr( 'queue' ) == 'justdoit'
        assert plat.getattr( 'account' ) == 'fy666'
        assert plat.getattr( 'walltime' ) == '2:34'


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
