#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import platform
from os.path import abspath
from os.path import join as pjoin
import time

import vvtestutils as vtu
import testutils as util
from vvtestutils import clean_sys_path_and_plugin_modules

import libvvtest.makeplatform as makeplatform
from libvvtest.makeplatform import determine_platform_and_compiler


class idplatform( vtu.vvtestTestCase ):

    def test_cleaning_sys_path_and_plugin_modules_for_unit_testing(self):
        ""
        util.writefile( 'adir/idplatform.py', 'pass' )
        adir = abspath( 'adir' )

        savepath = list( sys.path )
        try:
            sys.path.insert( 0, adir )
            sys.path.append( adir )
            assert adir in sys.path
            clean_sys_path_and_plugin_modules()
            assert adir not in sys.path
        finally:
            sys.path[:] = savepath

    def test_import_idplatform_module(self):
        ""
        util.writefile( 'adir/idplatform.py', """
            def hello():
                return 'world'
            """ )
        adir = abspath( 'adir' )
        time.sleep(1)

        # None is returned if idplatform.py not in sys.path
        with vtu.clean_sys_path():
            assert makeplatform.import_idplatform() is None

        # module returned if idplatform.py is in sys.path
        with vtu.clean_sys_path():
            sys.path.insert( 0, adir )
            idp = makeplatform.import_idplatform()
            assert idp.hello() == 'world'

    def test_using_idplatform_to_define_platform_and_compiler(self):
        ""
        util.writefile( 'adir/idplatform.py', """
            def platform( opts ):
                return 'XBox'
            def compiler( platname, opts ):
                return 'llvm'
            """ )
        adir = abspath( 'adir' )
        time.sleep(1)

        with vtu.clean_sys_path():
            plat1,cplr1 = determine_platform_and_compiler( None, [], [] )
            plat2,cplr2 = determine_platform_and_compiler( 'foo', [], [] )
            assert plat1 == platform.uname()[0] and cplr1 is None
            assert plat2 == 'foo' and cplr2 is None

        with vtu.clean_sys_path():
            sys.path.insert( 0, adir )
            plat1,cplr1 = determine_platform_and_compiler( None, [], [] )
            plat2,cplr2 = determine_platform_and_compiler( 'foo', [], [] )
            assert plat1 == 'XBox' and cplr1 == 'llvm'
            assert plat2 == 'foo' and cplr2 == 'llvm'


class construction( vtu.vvtestTestCase ):

    # def test_get_alias_attr_utility_function(self):
    #     ""
    #     assert makeplatform.get_aliased_attr( {}, 'foo', 'bar' ) is None

    #     aD = { 'foo':'val' }
    #     val = makeplatform.get_aliased_attr( aD, 'foo', 'bar' )
    #     assert val == 'val' and aD == { 'foo':'val' }

    #     aD = { 'foo':'val' }
    #     val = makeplatform.get_aliased_attr( aD, 'baz', 'jaz' )
    #     assert val is None and aD == {'foo':'val'}

    #     aD = { 'bar':'val' }
    #     val = makeplatform.get_aliased_attr( aD, 'foo', 'bar' )
    #     assert val == 'val' and aD == { 'foo':'val' }

    #     aD = { 'bar':'val', 'foo':'val' }
    #     val = makeplatform.get_aliased_attr( aD, 'foo', 'bar' )
    #     assert val == 'val' and aD == { 'foo':'val' }

    #     try:
    #         aD = { 'bar':'val1', 'foo':'val2' }
    #         val = makeplatform.get_aliased_attr( aD, 'foo', 'bar' )
    #     except Exception as e:
    #         assert 'both given values' in str(e)
    #     else:
    #         raise Exception( 'expected an exception' )

    def test_initialize_platformconfig_from_platform_plugin(self):
        ""
        util.writefile( 'adir/platform_plugin.py', """
            def initialize( platobj ):
                platobj.setattr( 'foo', 'bar' )
            """ )
        adir = abspath( 'adir' )
        time.sleep(1)

        with vtu.clean_sys_path():
            plat = makeplatform.PlatformConfig( {}, None, None )
            makeplatform.initialize_platform( plat )
            assert plat.getattr( 'foo', None ) == None

        with vtu.clean_sys_path():
            plat = makeplatform.PlatformConfig( {}, None, None )
            sys.path.insert( 0, adir )
            makeplatform.initialize_platform( plat )
            assert plat.getattr( 'foo', None ) == 'bar'

    def test_setting_platformconfig_options(self):
        ""
        platcfg = makeplatform.PlatformConfig( {}, None, None )
        makeplatform.set_platform_options( platcfg, {} )

        popts = { 'q':'admin',
                  'PT':'fy666',
                  'walltime':'2:34',
                  'QoS':'long' }
        makeplatform.set_platform_options( platcfg, popts )

        assert platcfg.getattr( 'queue' ) == 'admin'
        assert platcfg.getattr( 'account' ) == 'fy666'
        assert platcfg.getattr( 'walltime' ) == '2:34'
        assert platcfg.getattr( 'QoS' ) == 'long'

    def test_the_create_Platform_instance_function(self):
        ""
        plat = makeplatform.create_Platform_instance(
                    os.getcwd(), None, 'direct', {},
                    None, None, None, None,
                    None, None )

        optD = { 'q':'justdoit', 'knl':'', 'PT':'fy666', 'walltime':'2:34' }
        plat = makeplatform.create_Platform_instance(
                    os.getcwd(),
                    'XBox', 'batch',
                    optD,
                    10, 20, None, None,
                    ['dbg'], ['symbols'] )

        assert plat.getName() == 'XBox'
        assert plat.getMaxSize() == (20,0)
        assert plat.getSize() == (10,0)
        assert plat.getattr( 'queue' ) == 'justdoit'
        assert plat.getattr( 'account' ) == 'fy666'
        assert plat.getattr( 'walltime' ) == '2:34'


class modes( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp( self )

        util.writefile( 'cfg/platform_plugin.py', """
            def initialize( platobj ):
                platobj.setattr( 'maxprocs', 27 )
                platobj.setattr( 'maxdevices', 11 )
            """ )
        self.cfgdir = abspath( 'cfg' )

        util.writefile( 'nocfg/platform_plugin.py', """
            def initialize( platobj ):
                pass
            """ )
        self.nocfg = abspath( 'nocfg' )

    def test_direct_mode_getMaxSize(self):
        ""
        # precedence:
        #   1. command line options
        #   2. plugin value
        #   3. CPU probe (no device probe yet)

        check_maxsize( self.nocfg,  'direct', setmax=(23,None),   expected=(23,0) )
        check_maxsize( self.nocfg,  'direct', setmax=(23,7),      expected=(23,7) )
        check_maxsize( self.cfgdir, 'direct', setmax=(None,None), expected=(27,11) )
        check_maxsize( self.cfgdir, 'direct', setmax=(23,7),      expected=(23,7) )

        # the system probe should always return a positive integer
        np,nd = check_maxsize( self.nocfg, 'direct', setmax=(None,None) )
        assert type(np) == type(2) and np > 0
        assert nd == 0

    def test_batch_mode_getMaxSize(self):
        ""
        check_maxsize( self.nocfg,  'batch', setmax=(23,None),   expected=(23,0) )
        check_maxsize( self.nocfg,  'batch', setmax=(23,7),      expected=(23,7) )
        check_maxsize( self.cfgdir, 'batch', setmax=(None,None), expected=(27,11) )
        check_maxsize( self.cfgdir, 'batch', setmax=(23,7),      expected=(23,7) )
        # no max procs by default in batch mode:
        check_maxsize( self.nocfg,  'batch', setmax=(None,None), expected=(None,0) )


def check_maxsize( cfgdir, mode, setmax=(None,None), expected=None ):
    ""
    nprocs,ndevice = setmax

    with vtu.clean_sys_path():
        sys.path.insert( 0, cfgdir )

        plat = makeplatform.create_Platform_instance(
                    os.getcwd(), None, mode, {},
                    None, nprocs, None, ndevice, None, None )

        mxsz = plat.getMaxSize()
        if expected is not None:
            assert mxsz == expected

    return mxsz


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
