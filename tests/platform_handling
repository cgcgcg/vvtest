#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import platform
from os.path import abspath
from os.path import join as pjoin
import time

import vvtestutils as vtu
import testutils as util
from vvtestutils import clean_sys_path_for_testing

import libvvtest.makeplatform as makeplatform
from libvvtest.makeplatform import PlatformCreator
from libvvtest.importutil import import_file_from_sys_path
from libvvtest.importutil import gather_modules_by_filename


class idplatform( vtu.vvtestTestCase ):

    def test_cleaning_sys_path_and_plugin_modules_for_unit_testing(self):
        ""
        util.writefile( 'adir/idplatform.py', 'pass' )
        adir = abspath( 'adir' )

        savepath = list( sys.path )
        try:
            sys.path.insert( 0, adir )
            sys.path.append( adir )
            assert adir in sys.path
            clean_sys_path_for_testing()
            assert adir not in sys.path
        finally:
            sys.path[:] = savepath

    def test_import_idplatform_module(self):
        ""
        util.writefile( 'adir/idplatform.py', """
            def hello():
                return 'world'
            """ )
        adir = abspath( 'adir' )

        # None is returned if idplatform.py not in sys.path
        with vtu.clean_sys_path():
            assert import_file_from_sys_path( 'idplatform.py' ) is None

        # module returned if idplatform.py is in sys.path
        with vtu.clean_sys_path():
            sys.path.insert( 0, adir )
            idp = import_file_from_sys_path( 'idplatform.py' )
            assert idp.hello() == 'world'

    def test_using_idplatform_to_define_platform_and_compiler(self):
        ""
        util.writefile( 'adir/idplatform.py', """
            def get_platform():
                return 'XBox'
            def get_compiler( platname, opts ):
                return 'llvm'
            """ )

        with vtu.clean_sys_path():
            creator = PlatformCreator()

            plat,cplr = creator.determine_platform_and_compiler( None )
            assert plat == platform.uname()[0] and cplr is None

            plat,cplr = creator.determine_platform_and_compiler( 'foo' )
            assert plat == 'foo' and cplr is None

        with vtu.clean_sys_path():
            sys.path.insert( 0, abspath( 'adir' ) )
            creator = PlatformCreator()

            plat,cplr = creator.determine_platform_and_compiler( None )
            assert plat == 'XBox' and cplr == 'llvm'

            plat,cplr = creator.determine_platform_and_compiler( 'foo' )
            assert plat == 'foo' and cplr == 'llvm'

    def test_get_platform_searches_sys_path_for_a_name(self):
        ""
        util.writefile( 'dir1/idplatform.py', """
            def get_platform():
                pass
            """ )

        util.writefile( 'dir2/idplatform.py', """
            def get_platform():
                return 'DOS'
            """ )

        util.writefile( 'dir3/idplatform.py', """
            def get_platform():
                return 'VMS'
            """ )

        with vtu.clean_sys_path():
            sys.path.insert( 0, abspath( 'dir1' ) )
            sys.path.insert( 1, abspath( 'dir2' ) )

            creator = PlatformCreator()
            plat,cplr = creator.determine_platform_and_compiler( None )
            assert plat == 'DOS'

        with vtu.clean_sys_path():
            sys.path.insert( 0, abspath( 'dir2' ) )
            sys.path.insert( 1, abspath( 'dir3' ) )

            creator = PlatformCreator()
            plat,cplr = creator.determine_platform_and_compiler( None )
            assert plat == 'DOS'

    def test_platform_name_precedence(self):
        """
        1. command line --plat option
        2. VVTEST_PLATFORM environ variable
        3. user idplatform.py get_platform() function
        4. builtin idplatform.py get_platform() function
        """
        util.writefile( 'atest.vvt', """
            import vvtest_util as vvt
            print ( 'PLATFORM='+repr(vvt.PLATFORM) )
            """ )

        util.writefile( 'cfg/idplatform.py', """
            def get_platform():
                return 'UsrConfig'
            """ )

        def scrape_platname( vr ):
            lines = vr.greplogs( 'PLATFORM=', 'atest' )
            assert len(lines) == 1
            pname = eval( lines[0].split('PLATFORM=',1)[1].strip() )
            assert vr.platformName() == pname
            return pname

        vrun = vtu.runvvtest( addplatform=False )
        vrun.assertCounts( total=1, npass=1 )
        self.assertTrue( scrape_platname(vrun) )

        vtu.remove_results()
        vrun = vtu.runvvtest( '--config cfg', addplatform=False )
        vrun.assertCounts( total=1, npass=1 )
        self.assertEqual( scrape_platname(vrun), 'UsrConfig' )

        vtu.remove_results()
        vrun = vtu.runvvtest( '--plat NuttinHoney --config cfg', addplatform=False )
        vrun.assertCounts( total=1, npass=1 )
        self.assertEqual( scrape_platname(vrun), 'NuttinHoney' )

        vtu.remove_results()
        vrun = vtu.runvvtest( '--plat NuttinHoney', addplatform=False )
        vrun.assertCounts( total=1, npass=1 )
        self.assertEqual( scrape_platname(vrun), 'NuttinHoney' )

        vtu.remove_results()
        with util.set_environ( VVTEST_PLATFORM='dotcom' ):
            vrun = vtu.runvvtest( addplatform=False )
            vrun.assertCounts( total=1, npass=1 )
            self.assertEqual( scrape_platname(vrun), 'dotcom' )

        vtu.remove_results()
        with util.set_environ( VVTEST_PLATFORM='dotcom' ):
            vrun = vtu.runvvtest( '--config cfg', addplatform=False )
            vrun.assertCounts( total=1, npass=1 )
            self.assertEqual( scrape_platname(vrun), 'dotcom' )

        vtu.remove_results()
        with util.set_environ( VVTEST_PLATFORM='dotcom' ):
            vrun = vtu.runvvtest( '--plat NuttinHoney', addplatform=False )
            vrun.assertCounts( total=1, npass=1 )
            self.assertEqual( scrape_platname(vrun), 'NuttinHoney' )

    def test_the_compiler_name_can_depend_on_the_platform_and_options(self):
        ""
        util.writefile( 'dir1/idplatform.py', """
            def get_compiler( platname, opts ):
                if platname == 'XBox':
                    return 'PGI'
                elif platname == 'PS2':
                    return 'Compaq'
            """ )

        util.writefile( 'dir2/idplatform.py', """
            def get_platform():
                return 'XBox'
            """ )

        util.writefile( 'dir3/idplatform.py', """
            def get_compiler( platname, opts ):
                if 'intel' in opts:
                    return 'OneAPI'
            """ )

        with vtu.clean_sys_path():
            sys.path.insert( 0, abspath( 'dir1' ) )
            sys.path.insert( 1, abspath( 'dir2' ) )
            creator = PlatformCreator()

            plat,cplr = creator.determine_platform_and_compiler( None )
            assert plat == 'XBox' and cplr == 'PGI'

            plat,cplr = creator.determine_platform_and_compiler( 'PS2' )
            assert plat == 'PS2' and cplr == 'Compaq'

        with vtu.clean_sys_path():
            sys.path.insert( 0, abspath( 'dir3' ) )

            creator = PlatformCreator()
            plat,cplr = creator.determine_platform_and_compiler( None )
            assert cplr is None

            creator = PlatformCreator()
            creator.set_command_line_options( ['foo'], [] )
            plat,cplr = creator.determine_platform_and_compiler( None )
            assert cplr is None

            creator = PlatformCreator()
            creator.set_command_line_options( ['intel'], [] )
            plat,cplr = creator.determine_platform_and_compiler( None )
            assert cplr == 'OneAPI'

    def test_stop_at_the_first_compiler_name(self):
        ""
        util.writefile( 'dir1/idplatform.py', """
            def get_compiler( platname, opts ):
                pass
            """ )

        util.writefile( 'dir2/idplatform.py', """
            def get_compiler( platname, opts ):
                if platname != 'foobar':
                    return 'assembly'
            """ )

        with vtu.clean_sys_path():
            sys.path.insert( 0, abspath( 'dir1' ) )
            sys.path.insert( 1, abspath( 'dir2' ) )
            creator = PlatformCreator()

            plat,cplr = creator.determine_platform_and_compiler( None )
            assert cplr == 'assembly'

            plat,cplr = creator.determine_platform_and_compiler( 'foobar' )
            assert cplr is None


class config_specs( vtu.vvtestTestCase ):

    def test_attribute_normalization(self):
        ""
        defs = [ [ 'foo', str, 'fake description' ] ]
        tab = makeplatform.AttrTable( defs )
        self.assertEqual( tab.normalize( 'foo', 'fooval' ), ('foo','fooval') )
        self.assertRaises( Exception, tab.normalize, 'bar', 'fooval' )

        defs = [ [ 'foo', str, 'bar', 'fake description' ] ]
        tab = makeplatform.AttrTable( defs )
        self.assertEqual( tab.normalize( 'foo', 'fooval' ), ('foo','fooval') )
        self.assertEqual( tab.normalize( 'bar', 'fooval' ), ('foo','fooval') )
        self.assertRaises( Exception, tab.normalize, 'baz', 'val' )

        defs = [ [ 'foo', int, 'bar', 'fake description' ] ]
        tab = makeplatform.AttrTable( defs )
        self.assertEqual( tab.normalize( 'foo', '23' ), ('foo',23) )
        self.assertEqual( tab.normalize( 'bar', '23' ), ('foo',23) )
        self.assertRaises( Exception, tab.normalize, 'foo', '2.3' )
        self.assertRaises( Exception, tab.normalize, 'bar', '2.3' )

    def test_attribute_group_normalization(self):
        ""
        defs = [ [ 'foo', str, 'bar', 'fake description' ],
                 [ 'a', int, 'A', 'another desc' ] ]
        tab = makeplatform.AttrTable( defs )

        self.assertEqual( tab.normalize_group( {'foo':'val'} ), {'foo':'val'} )
        self.assertEqual( tab.normalize_group( {'bar':'val'} ), {'foo':'val'} )
        self.assertEqual( tab.normalize_group( {'a':'1'} ), {'a':1} )
        self.assertEqual( tab.normalize_group( {'A':'1'} ), {'a':1} )

        self.assertEqual( tab.normalize_group( {'foo':'val','a':'1'} ),
                          {'foo':'val','a':1} )
        self.assertEqual( tab.normalize_group( {'bar':'val','A':'1'} ),
                          {'foo':'val','a':1} )

        self.assertEqual( tab.normalize_group( {'foo':'val1','bar':'val1'} ),
                          {'foo':'val1'} )
        self.assertRaises( Exception,
                           tab.normalize_group, {'foo':'val1','bar':'val2'} )

    def test_set_get_platform_specs(self):
        ""
        specs = makeplatform.PlatformSpecs()

        self.assertEqual( len(specs), 0 )

        specs['foo'] = 'bar'
        self.assertEqual( specs['foo'], 'bar' )
        self.assertEqual( len(specs), 1 )

        self.assertEqual( specs.get('foo'), 'bar' )
        self.assertEqual( specs.get( 'foo', 'dog' ), 'bar' )
        self.assertEqual( specs.get( 'bad', 'dog' ), 'dog' )
        self.assertRaises( Exception, specs.get, 'wrong' )

        specs['earth'] = 'moon'
        self.assertEqual( sorted( specs.items() ), [ ('earth','moon'), ('foo','bar') ] )
        self.assertEqual( sorted( specs.keys() ), ['earth','foo'] )
        self.assertEqual( sorted( specs.values() ), ['bar','moon'] )

        # no overwrite
        specs['foo'] = 'baz'
        self.assertEqual( specs['foo'], 'bar' )

        specs.overwrite( 'foo', 'baz' )
        self.assertEqual( specs['foo'], 'baz' )

        self.assertTrue( 'foo' in specs )
        self.assertTrue( 'flubber' not in specs )

    def test_the_platform_specs_remembers_if_it_is_modified(self):
        ""
        specs = makeplatform.PlatformSpecs()

        self.assertFalse( specs.is_modified() )

        specs['foo'] = 'bar'
        self.assertTrue( specs.is_modified() )

        specs.set_unmodified()
        self.assertFalse( specs.is_modified() )
        self.assertEqual( list( specs.items() ), [ ('foo','bar') ] )

        specs['foo'] = 'baz'
        self.assertTrue( specs.is_modified() )
        self.assertEqual( list( specs.items() ), [ ('foo','bar') ] )

        specs.set_unmodified()
        self.assertFalse( specs.is_modified() )
        specs.overwrite( 'foo', 'abc' )
        self.assertTrue( specs.is_modified() )
        self.assertEqual( list( specs.items() ), [ ('foo','abc') ] )

    def test_constraining_the_platform_specs_to_known_attributes(self):
        ""
        tab = makeplatform.AttrTable( [ ['foo',str,'bar','foo desc'],
                                        ['num',int,'number','num desc'] ] )
        specs = makeplatform.PlatformSpecs( tab )

        specs['foo'] = 'val'
        self.assertEqual( specs['foo'], 'val' )
        self.assertEqual( specs.get('foo'), 'val' )

        try:
            specs['baz'] = 'val'
        except Exception: pass
        else: raise Exception( 'expected an exception' )
        self.assertRaises( Exception, specs.get, 'baz' )
        self.assertRaises( Exception, specs.get, 'baz', 'avalue' )

        specs.overwrite( 'foo', 'new' )
        self.assertEqual( specs['foo'], 'new' )

        self.assertRaises( Exception, specs.overwrite, 'shucks', 'val' )

        specs['num'] = '3'
        self.assertEqual( specs['num'], 3 )

        specs = makeplatform.PlatformSpecs( tab )
        specs['num'] = 5
        self.assertEqual( specs['num'], 5 )

        specs = makeplatform.PlatformSpecs( tab )
        try:
            specs['num'] = 'five'
        except Exception: pass
        else: raise Exception( 'expected an exception' )

        specs.overwrite( 'num', '7' )
        self.assertEqual( specs['num'], 7 )
        self.assertRaises( Exception, specs.overwrite, 'num', 'seven' )


class construction( vtu.vvtestTestCase ):

    def test_loading_platform_specs_from_plugin(self):
        ""
        util.writefile( 'dir1/idplatform.py', """
            def load_specifications( specs, platname, cplrname, opts ):
                pass
            """ )

        util.writefile( 'dir2/idplatform.py', """
            def load_specifications( specs, platname, cplrname, opts ):
                specs['maxprocs'] = 128
                specs['maxdevices'] = 16
            """ )

        util.writefile( 'dir3/idplatform.py', """
            def load_specifications( specs, platname, cplrname, opts ):
                specs['maxprocs'] = 256
            """ )

        util.writefile( 'dir4/idplatform.py', """
            def typo( specs, platname, cplrname, opts ):
                specs['maxprocs'] = 256
            """ )

        util.writefile( 'dir5/idplatform.py', """
            def load_specifications( specs, platname, cplrname, opts ):
                specs['maxprocs'] = 256
                specs.set_unmodified()
            """ )

        util.writefile( 'dir6/idplatform.py', """
            def load_specifications( specs, platname, cplrname, opts ):
                specs['maxprocs'] = 256
                return 'continue'
            """ )

        util.writefile( 'dir7/idplatform.py', """
            def load_specifications( specs, platname, cplrname, opts ):
                return 'break'
            """ )

        def loadspecs():
            attrtab = makeplatform.AttrTable()
            creator = makeplatform.PlatformCreator()
            specs = makeplatform.PlatformSpecs( attrtab )
            creator.load( specs )
            return specs

        with vtu.clean_sys_path():
            sys.path.insert( 0, abspath( 'dir1' ) )
            sys.path.insert( 1, abspath( 'dir2' ) )
            specs = loadspecs()
            self.assertEqual( specs['maxprocs'], 128 )

        with vtu.clean_sys_path():
            sys.path.insert( 0, abspath( 'dir2' ) )
            sys.path.insert( 1, abspath( 'dir3' ) )
            specs = loadspecs()
            self.assertEqual( specs['maxprocs'], 128 )

        with vtu.clean_sys_path():
            sys.path.insert( 0, abspath( 'dir4' ) )
            sys.path.insert( 1, abspath( 'dir3' ) )
            specs = loadspecs()
            self.assertEqual( specs['maxprocs'], 256 )

        with vtu.clean_sys_path():
            sys.path.insert( 0, abspath( 'dir3' ) )
            sys.path.insert( 1, abspath( 'dir2' ) )
            specs = loadspecs()
            self.assertEqual( specs['maxprocs'], 256 )
            self.assertFalse( 'maxdevices' in specs )

        with vtu.clean_sys_path():
            sys.path.insert( 0, abspath( 'dir5' ) )
            sys.path.insert( 1, abspath( 'dir2' ) )
            specs = loadspecs()
            self.assertEqual( specs['maxprocs'], 256 )
            self.assertEqual( specs['maxdevices'], 16 )

        with vtu.clean_sys_path():
            sys.path.insert( 0, abspath( 'dir6' ) )
            sys.path.insert( 1, abspath( 'dir2' ) )
            specs = loadspecs()
            self.assertEqual( specs['maxprocs'], 256 )
            self.assertEqual( specs['maxdevices'], 16 )

        with vtu.clean_sys_path():
            sys.path.insert( 0, abspath( 'dir7' ) )
            sys.path.insert( 1, abspath( 'dir2' ) )
            specs = loadspecs()
            self.assertEqual( len( list( specs.items() ) ), 0 )

    def test_the_preset_platform_options(self):
        ""
        attrtab = makeplatform.AttrTable()

        popts = { 'batchsys':'slurm',          'ppn':'5',
                  'dpn':'7',                   'queue':'admin',
                  'account':'fy666',           'variation':'knl',
                  'walltime':'2:34',           'maxprocs':'23',
                  'maxdevices':'33',           'maxqtime':'3600',
                  'maxsubs':'11',              'QoS':'long',
                  'testingdir':'/path',        'extra_flags':'--foo=bar',
                }
        popts = attrtab.normalize_group( popts )
        self.assertEqual( popts,
                { 'batchsys':'slurm',          'ppn':5,
                  'dpn':7,                     'queue':'admin',
                  'account':'fy666',           'variation':'knl',
                  'walltime':'2:34',           'maxprocs':23,
                  'maxdevices':33,             'maxqtime':3600,
                  'maxsubs':11,                'QoS':'long',
                  'testingdir':'/path',        'submit_flags':'--foo=bar',
                } )

        popts = { 'processors_per_node':'5',   'devices_per_node':'7',
                  'q':'admin',                 'PT':'fy666',
                  'submit_flags':'--foo=bar',
                }
        popts = attrtab.normalize_group( popts )
        self.assertEqual( popts,
                { 'ppn':5,                     'dpn':7,
                  'queue':'admin',             'account':'fy666',
                  'submit_flags':'--foo=bar',
                } )

        popts = { 'cores_per_node':'5', 'partition':'admin', }
        popts = attrtab.normalize_group( popts )
        self.assertEqual( popts, { 'ppn':5, 'queue':'admin', } )

    def test_Platform_object_construction(self):
        ""
        plat = makeplatform.create_Platform_instance(
                    None, 'direct', {},
                    None, None, None, None,
                    None, None )

        platopts = { 'q':'justdoit', 'PT':'fy666', 'walltime':'2:34' }
        plat = makeplatform.create_Platform_instance(
                    'XBox', 'batch', platopts,
                    10, 20, 2, 4,
                    ['dbg'], ['symbols'] )

        self.assertEqual( plat.getName(), 'XBox' )
        self.assertEqual( plat.getMaxSize(), (20,4) )
        self.assertEqual( plat.getattr( 'queue' ), 'justdoit' )
        self.assertEqual( plat.getattr( 'account' ), 'fy666' )
        self.assertEqual( plat.getattr( 'walltime' ), '2:34' )

        specstr = "q=justdoit,PT=fy666,walltime=2:34"
        with util.set_environ( VVTEST_PLATFORM_SPECS=specstr ):
            plat = makeplatform.create_Platform_instance(
                        None, 'direct', {},
                        None, None, None, None,
                        None, None )
            self.assertEqual( plat.getattr( 'queue' ), 'justdoit' )
            self.assertEqual( plat.getattr( 'account' ), 'fy666' )
            self.assertEqual( plat.getattr( 'walltime' ), '2:34' )

    def test_platform_specs_parser_from_environ(self):
        ""
        with util.set_environ( VVTEST_PLATFORM_SPECS='foo=bar' ):
            self.assertEqual( makeplatform.environ_platform_specs(),
                              {'foo':'bar'} )

        with util.set_environ( VVTEST_PLATFORM_SPECS='foo=bar,a=val' ):
            self.assertEqual( makeplatform.environ_platform_specs(),
                              {'foo':'bar','a':'val'} )

        with util.set_environ( VVTEST_PLATFORM_SPECS='foo=bar,foo=val' ):
            self.assertEqual( makeplatform.environ_platform_specs(),
                              {'foo':'val'} )

        with util.set_environ( VVTEST_PLATFORM_SPECS='a= b , c =d ' ):
            self.assertEqual( makeplatform.environ_platform_specs(),
                              {'a':'b', 'c':'d'} )

        with util.set_environ( VVTEST_PLATFORM_SPECS='a= b ,' ):
            self.assertEqual( makeplatform.environ_platform_specs(),
                              {'a':'b'} )

        with util.set_environ( VVTEST_PLATFORM_SPECS=',a=b' ):
            self.assertEqual( makeplatform.environ_platform_specs(),
                              {'a':'b'} )

        with util.set_environ( VVTEST_PLATFORM_SPECS=', a=b' ):
            self.assertEqual( makeplatform.environ_platform_specs(),
                              {'a':'b'} )

        with util.set_environ( VVTEST_PLATFORM_SPECS='=val' ):
            self.assertRaises( Exception, makeplatform.environ_platform_specs )

        with util.set_environ( VVTEST_PLATFORM_SPECS='ab=cd,=val' ):
            self.assertRaises( Exception, makeplatform.environ_platform_specs )

        with util.set_environ( VVTEST_PLATFORM_SPECS='noequals' ):
            self.assertRaises( Exception, makeplatform.environ_platform_specs )

        with util.set_environ( VVTEST_PLATFORM_SPECS='a=b,noequals,c=d' ):
            self.assertRaises( Exception, makeplatform.environ_platform_specs )

    def test_platform_option_precedence(self):
        """
            1) command line dedicated, such as -N
            2) --platopts on command line
            3) the VVTEST_PLATFORM_SPECS environ variable
            4) platform plugin
            5) probing
        """
        util.writefile( 'cfg/idplatform.py', """
            def load_specifications( specs, platname, cplrname, options ):
                specs['maxprocs'] = 3
                specs['maxdevices'] = 9
            """ )

        cfg = abspath( 'cfg' )

        with vtu.clean_sys_path():

            # no plugin or command line
            plat = makeplatform.create_Platform_instance(
                        'XBox', 'direct', {},
                        None, None, None, None,
                        [], [] )
            mxnp,mxnd = plat.getMaxSize()
            assert mxnp and mxnp > 0 and mxnd == 0

            sys.path.insert( 0, cfg )

            # just plugin
            plat = makeplatform.create_Platform_instance(
                        'XBox', 'direct', {},
                        None, None, None, None,
                        [], [] )
            self.assertEqual( list( plat.getMaxSize() ), [3,9] )

            # plugin plus --platopts
            platopts = { 'maxprocs':'5', 'maxdevices':'7' }
            plat = makeplatform.create_Platform_instance(
                        'XBox', 'direct', platopts,
                        None, None, None, None,
                        [], [] )
            self.assertEqual( list( plat.getMaxSize() ), [5,7] )

            # plugin plus environ
            specstr = "maxdevices=11"
            with util.set_environ( VVTEST_PLATFORM_SPECS=specstr ):
                plat = makeplatform.create_Platform_instance(
                            'XBox', 'direct', {},
                            None, None, None, None,
                            [], [] )
                self.assertEqual( list( plat.getMaxSize() ), [3,11] )

            # plugin plus --platopts plus dedicated command line
            platopts = { 'maxprocs':'5', 'maxdevices':'7' }
            plat = makeplatform.create_Platform_instance(
                        'XBox', 'direct', platopts,
                        None, 20, None, 4,
                        [], [] )
            self.assertEqual( list( plat.getMaxSize() ), [20,4] )

            # all mechanisms; direct command line takes precedence
            platopts = { 'maxdevices':'543' }
            specstr = "maxdevices=111"
            with util.set_environ( VVTEST_PLATFORM_SPECS=specstr ):
                plat = makeplatform.create_Platform_instance(
                            'XBox', 'direct', platopts,
                            None, None, None, 73,
                            [], [] )
            self.assertEqual( list( plat.getMaxSize() ), [3,73] )


class platform_modes( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp( self )
        self.write_config_files()

    def write_config_files(self):
        ""
        util.writefile( 'cfg/idplatform.py', """
            def load_specifications( specs, platname, cplrname, options ):
                specs['maxprocs'] = 27
                specs['maxdevices'] = 11
                specs['cores_per_node'] = 17
                specs['devices_per_node'] = 19
            """ )
        self.cfgdir = abspath( 'cfg' )

        util.writefile( 'nocfg/platform_plugin.py', """
            def load_specifications( specs, platname, cplrname, options ):
                return 'break'
            """ )
        self.nocfg = abspath( 'nocfg' )

    def test_direct_mode_getMaxSize(self):
        """
        max procs:
            1) command line max
            2) plugin max
            3) procs per node
            4) system probe
            5) the value 4
        max devices:
            1) command line max
            2) plugin max
            3) devices per node
            4) command line num devices
            5) zero
        """
        # the system probe should always return a positive integer for np
        plat = newplatform( self.nocfg, 'direct', cmdmax=(None,None) )
        np,nd = plat.getMaxSize()
        assert type(np) == type(2) and np > 0 and nd == 0

        plat = newplatform( self.nocfg, 'direct', cmdmax=(23,None), )
        self.assertEqual( plat.getMaxSize(), (23,0) )

        plat = newplatform( self.nocfg, 'direct', cmdmax=(23,7) )
        self.assertEqual( plat.getMaxSize(), (23,7) )

        plat = newplatform( self.nocfg, 'direct', cmdsize=(None,15), cmdmax=(None,None) )
        np,nd = plat.getMaxSize()
        self.assertEqual( nd, 15 )

        plat = newplatform( self.nocfg, 'direct', cmdsize=(None,15), cmdmax=(None,13) )
        np,nd = plat.getMaxSize()
        self.assertEqual( nd, 13 )

        plat = newplatform( self.cfgdir, 'direct', cmdmax=(None,None) )
        self.assertEqual( plat.getMaxSize(), (27,11) )

        plat = newplatform( self.cfgdir, 'direct', cmdmax=(23,7) )
        self.assertEqual( plat.getMaxSize(), (23,7) )

        attrs = {'ppn':'13','dpn':'15'}
        plat = newplatform( self.nocfg, 'direct', cmdmax=(None,None), attrs=attrs )
        self.assertEqual( plat.getMaxSize(), (13,15) )

        attrs = {'ppn':'13','dpn':'15'}
        plat = newplatform( self.nocfg, 'direct', cmdmax=(23,7), attrs=attrs )
        self.assertEqual( plat.getMaxSize(), (23,7) )

    def test_batch_mode_getMaxSize(self):
        """
        max procs:
            1) command line max
            2) plugin max
            3) None (no maximum)
        max devices:
            1) command line max
            2) plugin max
            3) if dpn set, then None (no maximum), else zero
        """
        plat = newplatform( self.nocfg, 'batch', cmdmax=(None,None) )
        self.assertEqual( plat.getMaxSize(), (None,0) )

        attrs = {'dpn':3}
        plat = newplatform( self.nocfg, 'batch', cmdmax=(None,None), attrs=attrs )
        self.assertEqual( plat.getMaxSize(), (None,None) )

        plat = newplatform( self.nocfg, 'batch', cmdmax=(23,None) )
        self.assertEqual( plat.getMaxSize(), (23,0) )

        plat = newplatform( self.nocfg, 'batch', cmdmax=(23,7) )
        self.assertEqual( plat.getMaxSize(), (23,7) )

        plat = newplatform( self.cfgdir, 'batch', cmdmax=(None,None) )
        self.assertEqual( plat.getMaxSize(), (27,11) )

        plat = newplatform( self.cfgdir, 'batch', cmdmax=(23,7) )
        self.assertEqual( plat.getMaxSize(), (23,7) )

    def test_batchjob_mode_getMaxSize(self):
        """
        Since procs per node is always positive, the max np is always num_nodes*ppn
        If devices per node is positive, then max devices will be num_nodes*dpn
        These values will be set on the batch job vvtest command line with -N
        and --max-devices
        """
        plat = newplatform( self.nocfg, 'batchjob', cmdmax=(23,None) )
        self.assertEqual( plat.getMaxSize(), (23,None) )

        plat = newplatform( self.nocfg, 'batchjob', cmdmax=(23,7) )
        self.assertEqual( plat.getMaxSize(), (23,7) )

        plat = newplatform( self.cfgdir, 'batchjob', cmdmax=(23,None) )
        self.assertEqual( plat.getMaxSize(), (23,None) )

        plat = newplatform( self.cfgdir, 'batchjob', cmdmax=(23,7) )
        self.assertEqual( plat.getMaxSize(), (23,7) )

    def test_direct_mode_num_cores_and_num_devices(self):
        ""
        # the system probe should always return a positive integer for np
        plat = newplatform( self.nocfg, 'direct', cmdsize=(None,None) )
        np,nd = plat.getSize()
        assert type(np) == type(2) and np > 0 and nd is None

        plat = newplatform( self.nocfg, 'direct', cmdmax=(23,None) )
        self.assertEqual( plat.getSize(), (23,None) )

        plat = newplatform( self.nocfg, 'direct', cmdmax=(23,7) )
        self.assertEqual( plat.getSize(), (23,7) )

        plat = newplatform( self.cfgdir, 'direct', cmdmax=(None,None) )
        self.assertEqual( plat.getSize(), (27,11) )

        plat = newplatform( self.cfgdir, 'direct', cmdmax=(23,7) )
        self.assertEqual( plat.getSize(), (23,7) )

        plat = newplatform( self.nocfg,  'direct', cmdsize=(2,None), cmdmax=(23,None) )
        self.assertEqual( plat.getSize(), (2,None) )

        plat = newplatform( self.nocfg,  'direct', cmdsize=(2,5),    cmdmax=(23,7) )
        self.assertEqual( plat.getSize(), (2,5) )

        plat = newplatform( self.cfgdir, 'direct', cmdsize=(2,None), cmdmax=(None,None) )
        self.assertEqual( plat.getSize(), (2,11) )

        plat = newplatform( self.cfgdir, 'direct', cmdsize=(2,5),    cmdmax=(23,7) )
        self.assertEqual( plat.getSize(), (2,5) )

    def test_batch_mode_num_cores_and_num_devices(self):
        """
        Since no tests are run in batch mode, the number of cores/devices is
        not used.
        """
        plat = newplatform( self.nocfg, 'batch', cmdsize=(None,None) )
        self.assertEqual( plat.getSize(), (None,None) )
        self.assertEqual( plat.getMaxSize(), (None,0) )

        plat = newplatform( self.nocfg, 'batch', cmdsize=(8,4) )
        self.assertEqual( plat.getSize(), (8,4) )
        self.assertEqual( plat.getMaxSize(), (None,0) )

    def test_batchjob_mode_num_cores_and_num_devices(self):
        """
        For batch jobs, only the command line options should be used. Either
            1) num cores/devices is specified, or
            2) max num cores/devices is specified
        If max is given but not number, then the number will be set to the max.
        """
        plat = newplatform( self.nocfg, 'batchjob', cmdsize=(4,2) )
        self.assertEqual( plat.getSize(), (4,2) )

        plat = newplatform( self.nocfg, 'batchjob', cmdsize=(None,None), cmdmax=(5,3) )
        self.assertEqual( plat.getSize(), (5,3) )

        plat = newplatform( self.nocfg, 'batchjob', cmdsize=(4,2), cmdmax=(5,3) )
        self.assertEqual( plat.getSize(), (4,2) )

        plat = newplatform( self.cfgdir, 'batchjob', cmdsize=(4,2) )
        self.assertEqual( plat.getSize(), (4,2) )

        plat = newplatform( self.cfgdir, 'batchjob', cmdsize=(None,None), cmdmax=(5,3) )
        self.assertEqual( plat.getSize(), (5,3) )

        plat = newplatform( self.cfgdir, 'batchjob', cmdsize=(4,2), cmdmax=(5,3) )
        self.assertEqual( plat.getSize(), (4,2) )

        # this is unrealistic, but correct in theory
        plat = newplatform( self.nocfg, 'batchjob', cmdsize=(None,None) )
        self.assertEqual( plat.getSize(), (None,None) )

        plat = newplatform( self.cfgdir, 'batchjob', cmdsize=(None,None) )
        self.assertEqual( plat.getSize(), (None,None) )

    def test_direct_mode_compute_node_size(self):
        """
        By default in direct mode, the whole workstation is treated as a single
        node. But it uses values for ppn and dpn if given on the command line
        or in the platform plugin.
        """
        plat = newplatform( self.nocfg, 'direct', cmdmax=(None,None), attrs={} )
        ppn,dpn = plat.getNodeSize()
        assert ppn and ppn > 0 and dpn is None

        plat = newplatform( self.nocfg, 'direct', cmdmax=(5,7), attrs={} )
        self.assertEqual( plat.getNodeSize(), (5,7) )

        plat = newplatform( self.nocfg, 'direct', cmdmax=(None,None),
                            attrs={'ppn':5,'dpn':7} )
        self.assertEqual( plat.getNodeSize(), (5,7) )

        plat = newplatform( self.cfgdir, 'direct', cmdmax=(None,None), attrs={} )
        self.assertEqual( plat.getNodeSize(), (17,19) )

        plat = newplatform( self.cfgdir, 'direct', cmdmax=(5,7), attrs={} )
        self.assertEqual( plat.getNodeSize(), (17,19) )

        plat = newplatform( self.cfgdir, 'direct', cmdmax=(None,None),
                            attrs={'ppn':5,'dpn':7} )
        self.assertEqual( plat.getNodeSize(), (5,7) )

    def test_batch_mode_compute_node_size(self):
        """
        In batch mode, the "subprocs" batch system is special - it uses ppn
        and dpn if defined, otherwise it uses the max cores/devices.
        For other batch systems, at least ppn must be set; it is an error
        otherwise.
        """
        attrs = {'batchsys':'subprocs'}

        plat = newplatform( self.nocfg, 'batch', cmdmax=(None,None), attrs=attrs )
        ppn,dpn = plat.getNodeSize()
        assert ppn and ppn > 0 and dpn == 0

        plat = newplatform( self.cfgdir, 'batch', attrs=attrs )
        self.assertEqual( plat.getNodeSize(), (17,19) )

        plat = newplatform( self.nocfg, 'batch', cmdmax=(5,7), attrs=attrs )
        self.assertEqual( plat.getNodeSize(), (5,7) )

        attrs = {'batchsys':'subprocs','ppn':'8','dpn':'3'}
        plat = newplatform( self.nocfg, 'batch', cmdmax=(5,7), attrs=attrs )
        self.assertEqual( plat.getNodeSize(), (8,3) )

        attrs = {'batchsys':'slurm'}

        # ppn must get set
        self.assertRaises( Exception,
            newplatform, self.nocfg, 'batch', cmdmax=(5,7), attrs=attrs )

        plat = newplatform( self.cfgdir, 'batch', cmdmax=(5,7), attrs=attrs )
        self.assertEqual( plat.getNodeSize(), (17,19) )

        attrs = {'batchsys':'slurm','ppn':'9'}
        plat = newplatform( self.nocfg, 'batch', cmdmax=(5,7), attrs=attrs )
        self.assertEqual( plat.getNodeSize(), (9,None) )

        attrs = {'batchsys':'slurm','ppn':'9','dpn':'25'}
        plat = newplatform( self.nocfg, 'batch', cmdmax=(5,7), attrs=attrs )
        self.assertEqual( plat.getNodeSize(), (9,25) )

    def test_batchjob_mode_compute_node_size(self):
        """
        In batch jobs, the ppn and dpn are specified on the vvtest command line.
        """
        # ppn must get set
        self.assertRaises( Exception,
            newplatform, self.nocfg, 'batchjob', cmdmax=(5,7), attrs={} )

        attrs = {'ppn':'5','dpn':7}
        plat = newplatform( self.nocfg, 'batchjob', cmdmax=(5,7), attrs=attrs )
        self.assertEqual( plat.getNodeSize(), (5,7) )

        attrs = {'ppn':'5'}
        plat = newplatform( self.nocfg, 'batchjob', cmdmax=(5,None), attrs=attrs )
        self.assertEqual( plat.getNodeSize(), (5,None) )


def newplatform( cfgdir, mode, cmdsize=(None,None),
                               cmdmax=(None,None),
                               attrs={'ppn':1} ):
    ""
    np,nd = cmdsize
    nprocs,ndevice = cmdmax

    with vtu.clean_sys_path():
        sys.path.insert( 0, cfgdir )

        plat = makeplatform.create_Platform_instance(
                    None, mode, attrs,
                    np, nprocs, nd, ndevice, None, None )

    return plat


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
