#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import platform
from os.path import abspath
from os.path import join as pjoin
import time

import vvtestutils as vtu
import testutils as util
from vvtestutils import clean_sys_path_and_plugin_modules

import libvvtest.makeplatform as makeplatform
from libvvtest.makeplatform import determine_platform_and_compiler


class idplatform( vtu.vvtestTestCase ):

    def test_cleaning_sys_path_and_plugin_modules_for_unit_testing(self):
        ""
        util.writefile( 'adir/idplatform.py', 'pass' )
        adir = abspath( 'adir' )

        savepath = list( sys.path )
        try:
            sys.path.insert( 0, adir )
            sys.path.append( adir )
            assert adir in sys.path
            clean_sys_path_and_plugin_modules()
            assert adir not in sys.path
        finally:
            sys.path[:] = savepath

    def test_import_idplatform_module(self):
        ""
        util.writefile( 'adir/idplatform.py', """
            def hello():
                return 'world'
            """ )
        adir = abspath( 'adir' )
        time.sleep(1)

        # None is returned if idplatform.py not in sys.path
        with vtu.clean_sys_path():
            assert makeplatform.import_plugin_file( 'idplatform.py' ) is None

        # module returned if idplatform.py is in sys.path
        with vtu.clean_sys_path():
            sys.path.insert( 0, adir )
            idp = makeplatform.import_plugin_file( 'idplatform.py' )
            assert idp.hello() == 'world'

    def test_using_idplatform_to_define_platform_and_compiler(self):
        ""
        util.writefile( 'adir/idplatform.py', """
            def platform( opts ):
                return 'XBox'
            def compiler( platname, opts ):
                return 'llvm'
            """ )
        adir = abspath( 'adir' )
        time.sleep(1)

        with vtu.clean_sys_path():
            plat1,cplr1 = determine_platform_and_compiler( None, [], [] )
            plat2,cplr2 = determine_platform_and_compiler( 'foo', [], [] )
            assert plat1 == platform.uname()[0] and cplr1 is None
            assert plat2 == 'foo' and cplr2 is None

        with vtu.clean_sys_path():
            sys.path.insert( 0, adir )
            plat1,cplr1 = determine_platform_and_compiler( None, [], [] )
            plat2,cplr2 = determine_platform_and_compiler( 'foo', [], [] )
            assert plat1 == 'XBox' and cplr1 == 'llvm'
            assert plat2 == 'foo' and cplr2 == 'llvm'


class construction( vtu.vvtestTestCase ):

    def test_parsing_attributes(self):
        ""
        psr = makeplatform.AttrParser( [['foo',str,'desc']] )
        attrs = psr.parse_in_place( {} )
        self.assertEqual( attrs, {} )
        attrs = psr.parse_in_place( {'foo':'fooval'} )
        self.assertEqual( attrs, {'foo':'fooval'} )

        psr = makeplatform.AttrParser( [['foo',int,'desc']] )
        attrs = psr.parse_in_place( {'foo':'3'} )
        self.assertEqual( attrs, {'foo':3} )
        attrs = psr.parse_in_place( {'foo':3} )
        self.assertEqual( attrs, {'foo':3} )
        self.assertRaises( Exception, psr.parse_in_place, {'foo':'bar'} )

        psr = makeplatform.AttrParser( [['foo',int,'bar','desc']] )
        attrs = psr.parse_in_place( {'foo':3} )
        self.assertEqual( attrs, {'foo':3} )
        attrs = psr.parse_in_place( {'bar':3} )
        self.assertEqual( attrs, {'foo':3} )
        attrs = psr.parse_in_place( {'bar':3, 'foo':'3'} )
        self.assertEqual( attrs, {'foo':3} )
        self.assertRaises( Exception, psr.parse_in_place, {'bar':'3', 'foo':'4'} )

        psr = makeplatform.AttrParser( [['foo',int,'bar','baz','desc']] )
        self.assertEqual( psr.parse_in_place( {'foo':3} ), {'foo':3} )
        self.assertEqual( psr.parse_in_place( {'bar':3} ), {'foo':3} )
        self.assertEqual( psr.parse_in_place( {'baz':3} ), {'foo':3} )

        psr = makeplatform.AttrParser( [['foo',str,'desc1'],
                                        ['bar',int,'baz','desc2']] )
        self.assertEqual( psr.parse_in_place( {'foo':'a'} ), {'foo':'a'} )
        self.assertEqual( psr.parse_in_place( {'baz':2} ), {'bar':2} )
        attrs = psr.parse_in_place( {'baz':2,'foo':'b'} )
        self.assertEqual( attrs, {'foo':'b', 'bar':2} )

        psr = makeplatform.AttrParser( [['foo',int,'desc']] )
        self.assertRaises( Exception, psr.parse_in_place, {'bar':5} )

    def test_the_preset_platform_options(self):
        ""
        apsr = makeplatform.AttrParser()

        popts = { 'batchsys':'slurm',          'ppn':'5',
                  'dpn':'7',                   'queue':'admin',
                  'account':'fy666',           'variation':'knl',
                  'walltime':'2:34',           'maxprocs':'23',
                  'maxdevices':'33',           'maxqtime':'3600',
                  'maxsubs':'11',              'QoS':'long',
                  'testingdir':'/path',        'extra_flags':'--foo=bar',
                }
        apsr.parse_in_place( popts )
        self.assertEqual( popts,
                { 'batchsys':'slurm',          'ppn':5,
                  'dpn':7,                     'queue':'admin',
                  'account':'fy666',           'variation':'knl',
                  'walltime':'2:34',           'maxprocs':23,
                  'maxdevices':33,             'maxqtime':3600,
                  'maxsubs':11,                'QoS':'long',
                  'testingdir':'/path',        'extra_flags':'--foo=bar',
                } )

        popts = { 'processors_per_node':'5',   'devices_per_node':'7',
                  'q':'admin',                 'PT':'fy666',
                  'submit_flags':'--foo=bar',
                }
        apsr.parse_in_place( popts )
        self.assertEqual( popts,
                { 'ppn':5,                     'dpn':7,
                  'queue':'admin',             'account':'fy666',
                  'extra_flags':'--foo=bar',
                } )

        popts = { 'cores_per_node':'5', 'partition':'admin', }
        apsr.parse_in_place( popts )
        self.assertEqual( popts, { 'ppn':5, 'queue':'admin', } )

    def test_initialize_platform_config_from_platform_plugin(self):
        ""
        util.writefile( 'adir/platform_plugin.py', """
            def initialize( platobj ):
                platobj.setattr( 'ppn', 3 )
            """ )
        adir = abspath( 'adir' )

        apsr = makeplatform.AttrParser()

        with vtu.clean_sys_path():
            platcfg = makeplatform.PlatformConfig( apsr, {}, None, None )
            makeplatform.initialize_platform( platcfg )
            assert platcfg.getattr( 'ppn', None ) is None

        with vtu.clean_sys_path():
            platcfg = makeplatform.PlatformConfig( apsr, {}, None, None )
            sys.path.insert( 0, adir )
            makeplatform.initialize_platform( platcfg )
            self.assertEqual( platcfg.getattr( 'ppn', None ), 3 )

    def test_Platform_object_construction(self):
        ""
        plat = makeplatform.create_Platform_instance(
                    None, 'direct', {},
                    None, None, None, None,
                    None, None )

        platopts = { 'q':'justdoit', 'PT':'fy666', 'walltime':'2:34' }
        plat = makeplatform.create_Platform_instance(
                    'XBox', 'batch', platopts,
                    10, 20, 2, 4,
                    ['dbg'], ['symbols'] )

        assert plat.getName() == 'XBox'
        assert plat.getMaxSize() == (20,4)
        assert plat.getSize() == (10,2)
        assert plat.getattr( 'queue' ) == 'justdoit'
        assert plat.getattr( 'account' ) == 'fy666'
        assert plat.getattr( 'walltime' ) == '2:34'

    def test_platform_option_precedence(self):
        """
            1) command line dedicated, such as -N
            2) --platopts on command line
            3) platform plugin
            4) probing
        """
        util.writefile( 'adir/platform_plugin.py', """
            def initialize( platobj ):
                platobj.setattr( 'maxprocs', 3 )
                platobj.setattr( 'maxdevices', 9 )
            """ )
        adir = abspath( 'adir' )

        with vtu.clean_sys_path():

            # no plugin or command line
            plat = makeplatform.create_Platform_instance(
                        'XBox', 'direct', {},
                        None, None, None, None,
                        [], [] )
            mxnp,mxnd = plat.getMaxSize()
            assert mxnp and mxnp > 0 and mxnd == 0

            sys.path.insert( 0, adir )

            # just plugin
            plat = makeplatform.create_Platform_instance(
                        'XBox', 'direct', {},
                        None, None, None, None,
                        [], [] )
            self.assertEqual( list( plat.getMaxSize() ), [3,9] )

            # plugin plus --platopts
            platopts = { 'maxprocs':'5', 'maxdevices':'7' }
            plat = makeplatform.create_Platform_instance(
                        'XBox', 'direct', platopts,
                        None, None, None, None,
                        [], [] )
            self.assertEqual( list( plat.getMaxSize() ), [5,7] )

            # plugin plus --platopts plus dedicated command line
            platopts = { 'maxprocs':'5', 'maxdevices':'7' }
            plat = makeplatform.create_Platform_instance(
                        'XBox', 'direct', platopts,
                        None, 20, None, 4,
                        [], [] )
            self.assertEqual( list( plat.getMaxSize() ), [20,4] )


class modes( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp( self )

        util.writefile( 'cfg/platform_plugin.py', """
            def initialize( platobj ):
                platobj.setattr( 'maxprocs', 27 )
                platobj.setattr( 'maxdevices', 11 )
            """ )
        self.cfgdir = abspath( 'cfg' )

        util.writefile( 'nocfg/platform_plugin.py', """
            def initialize( platobj ):
                pass
            """ )
        self.nocfg = abspath( 'nocfg' )

    def test_direct_mode_getMaxSize(self):
        ""
        # precedence:
        #   1. command line options
        #   2. plugin value
        #   3. CPU probe (no device probe yet)

        check_maxsize( self.nocfg,  'direct', setmax=(23,None),   expected=(23,0) )
        check_maxsize( self.nocfg,  'direct', setmax=(23,7),      expected=(23,7) )
        check_maxsize( self.cfgdir, 'direct', setmax=(None,None), expected=(27,11) )
        check_maxsize( self.cfgdir, 'direct', setmax=(23,7),      expected=(23,7) )

        # the system probe should always return a positive integer
        np,nd = check_maxsize( self.nocfg, 'direct', setmax=(None,None) )
        assert type(np) == type(2) and np > 0
        assert nd == 0

    def test_batch_mode_getMaxSize(self):
        ""
        check_maxsize( self.nocfg,  'batch', setmax=(23,None),   expected=(23,0) )
        check_maxsize( self.nocfg,  'batch', setmax=(23,7),      expected=(23,7) )
        check_maxsize( self.cfgdir, 'batch', setmax=(None,None), expected=(27,11) )
        check_maxsize( self.cfgdir, 'batch', setmax=(23,7),      expected=(23,7) )
        # no max procs by default in batch mode:
        check_maxsize( self.nocfg,  'batch', setmax=(None,None), expected=(None,0) )


def check_maxsize( cfgdir, mode, setmax=(None,None), expected=None ):
    ""
    nprocs,ndevice = setmax

    with vtu.clean_sys_path():
        sys.path.insert( 0, cfgdir )

        plat = makeplatform.create_Platform_instance(
                    None, mode, {},
                    None, nprocs, None, ndevice, None, None )

        mxsz = plat.getMaxSize()
        if expected is not None:
            assert mxsz == expected

    return mxsz


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
