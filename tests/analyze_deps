#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3


class parameterize_analyze_dependency_handling( vtu.vvtestTestCase ):

    def test_analyze_tests_dont_wait_until_end_to_run(self):
        ""
        util.writefile( 'test1.xml', """
            <rtest name="test1">
              <parameterize timestep="1 2"/>
              <execute>
                sleep 1
                touch afile.$timestep
              </execute>
              <analyze>
                 ls ../test1.timestep=1/afile.1 || exit 1
                 ls ../test1.timestep=2/afile.2 || exit 1
              </analyze>
            </rtest>""" )
        util.writefile( 'test2.xml', """
            <rtest name="test2">
              <execute>
                sleep 10
                echo "that was a nice nap"
              </execute>
            </rtest>""" )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )

            vrun.assertCounts( total=4, npass=4 )

            assert vrun.startDate('test1') >= vrun.endDate('test1.timestep=1')
            assert vrun.startDate('test1') >= vrun.endDate('test1.timestep=2')
            assert vrun.startDate('test1') <  vrun.endDate('test2')

    def test_analyze_tests_dont_run_child_failed_previously(self):
        ""
        fail_test_xml = """
            <rtest name="atest">
              <parameterize timestep="1 2"/>
              <execute>
                if ( "$timestep" == 2 ) then
                  echo "fake failure"
                  exit 1
                else
                  touch afile.$timestep
                endif
              </execute>
              <analyze>
                 ls ../atest.timestep=1/afile.1 || exit 1
                 ls ../atest.timestep=2/afile.2 || exit 1
              </analyze>
            </rtest>"""
        fixed_test_xml = """
            <rtest name="atest">
              <parameterize timestep="1 2"/>
              <execute>
                touch afile.$timestep
              </execute>
              <analyze>
                 ls ../atest.timestep=1/afile.1 || exit 1
                 ls ../atest.timestep=2/afile.2 || exit 1
              </analyze>
            </rtest>"""
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            util.writefile( 'atest.xml', fail_test_xml )
            time.sleep(1)

            # the analyze should not run because a child fails
            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=1, fail=1, notrun=1 )

            # the analyze should not run here
            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=1, notrun=1 )

            # double check the state
            vrun = vtu.runvvtest( '-i -v', batch=batch )
            vrun.assertCounts( total=3, npass=1, fail=1, notrun=1 )

            # "fix" the failure
            util.writefile( 'atest.xml', fixed_test_xml )
            time.sleep(1)

            # rerun the failure
            vrun = vtu.runvvtest( '-k fail', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            # now the analyze should run
            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            vrun = vtu.runvvtest( '-i -v', batch=batch )
            vrun.assertCounts( total=3, npass=3, fail=0, notrun=0 )

    def test_rerun_with_analyze_deps(self):
        ""
        fail_xml_test = """
            <rtest name="atest">
              <parameterize timestep="1 2"/>
              <execute>
                sleep 5
                touch afile.$timestep
              </execute>
              <analyze>
                 ls ../atest.timestep=1/bfile.1 || exit 1
                 ls ../atest.timestep=2/bfile.2 || exit 1
              </analyze>
            </rtest>"""
        fixed_xml_test = """
            <rtest name="atest">
              <parameterize timestep="1 2"/>
              <execute>
                sleep 5
                touch bfile.$timestep
              </execute>
              <analyze>
                 ls ../atest.timestep=1/bfile.1 || exit 1
                 ls ../atest.timestep=2/bfile.2 || exit 1
              </analyze>
            </rtest>"""
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            util.writefile( 'atest.xml', fail_xml_test )
            time.sleep(1)
            
            # the analyze should fail
            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=2, fail=1 )

            # "fix" the execute
            util.writefile( 'atest.xml', fixed_xml_test )
            time.sleep(1)
            
            # the analyze test should NOT run at the same time as the children
            # (if it does in this case, then the analyze test will show a fail)
            vrun = vtu.runvvtest( '-R', batch=batch )
            vrun.assertCounts( total=3, npass=3 )

    def test_analyze_waits_for_deps_with_limited_num_procs(self):
        """
        make sure if a child test takes more processors than available, then
        the analyze will still wait for all the children to finish
        """
        util.writefile( 'atest.xml', """
            <rtest name="atest">
              <parameterize np="1 1 2 2" foo="bar baz bar baz"/>
              <execute>
                sleep 4
                touch afile.$foo.$np
              </execute>
              <analyze>
                 ls ../atest.foo=bar.np=1/afile.bar.1 || exit 1
                 ls ../atest.foo=baz.np=1/afile.baz.1 || exit 1
                 ls ../atest.foo=bar.np=2/afile.bar.2 || exit 1
                 ls ../atest.foo=baz.np=2/afile.baz.2 || exit 1
              </analyze>
            </rtest>""" )
        time.sleep(1)

        vrun = vtu.runvvtest( '-n 1' )
        vrun.assertCounts( total=5, npass=5 )

    def test_failed_analyze_deps_are_still_listed_with_info_option(self):
        """
        analyze tests that have bad children are not pruned when using -i
        """
        util.writefile( 'bad.xml', """
            <rtest name="bad">
              <keywords> fast medium </keywords>
              <parameterize timestep="1 2"/>
              <execute>
                if ( "$timestep" == 2 ) then
                  echo "fake failure"
                  exit 1
                else
                  touch bfile.$timestep
                endif
              </execute>
              <analyze>
                 ls ../bad.timestep=1/bfile.1 || exit 1
                 ls ../bad.timestep=2/bfile.2 || exit 1
              </analyze>
            </rtest>""" )
        time.sleep(1)

        # the analyze should be run here
        vrun = vtu.runvvtest()
        vrun.assertCounts( total=3, npass=1, fail=1, notrun=1 )

        # the analyze should show up in the listing here
        vrun = vtu.runvvtest( '-i -v -k notrun/pass' )
        vrun.assertCounts( total=2, npass=1, notrun=1 )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
