#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3


class parameterize_analyze_dependency_handling( vtu.vvtestTestCase ):

    def test_analyze_tests_dont_wait_until_end_to_run(self):
        ""
        util.writefile( 'test1.vvt', """
            #VVT: parameterize : timestep = 1 2
            #VVT: analyze : --analyze
            import sys, os, vvtest_util as vvt
            if '--analyze' not in sys.argv[1:]:
                with open( 'afile.'+vvt.timestep, 'wt' ):
                    pass
            else:
                assert os.path.exists( '../test1.timestep=1/afile.1' )
                assert os.path.exists( '../test1.timestep=2/afile.2' )
            """ )
        util.writefile( 'test2.vvt', """
            import time
            time.sleep(10)
            """ )

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )

            vrun.assertCounts( total=4, npass=4 )

            assert vrun.startDate('test1') >= vrun.endDate('test1.timestep=1')
            assert vrun.startDate('test1') >= vrun.endDate('test1.timestep=2')
            assert vrun.startDate('test1') <  vrun.endDate('test2')

    def test_analyze_tests_dont_run_child_failed_previously(self):
        ""
        fail_test_vvt = """
            #VVT: parameterize : timestep = 1 2
            #VVT: analyze : --analyze
            import sys, os, vvtest_util as vvt
            if '--analyze' not in sys.argv[1:]:
                if vvt.timestep == '2':
                    raise Exception( 'fake failure' )
                else:
                    with open( 'afile.'+vvt.timestep, 'wt' ):
                        pass
            else:
                assert os.path.exists( '../atest.timestep=1/afile.1' )
                assert os.path.exists( '../atest.timestep=2/afile.2' )
            """
        fixed_test_vvt = """
            #VVT: parameterize : timestep = 1 2
            #VVT: analyze : --analyze
            import sys, os, vvtest_util as vvt
            if '--analyze' not in sys.argv[1:]:
                with open( 'afile.'+vvt.timestep, 'wt' ):
                    pass
            else:
                assert os.path.exists( '../atest.timestep=1/afile.1' )
                assert os.path.exists( '../atest.timestep=2/afile.2' )
            """

        for batch in [False,True]:

            vtu.remove_results()

            util.writefile( 'atest.vvt', fail_test_vvt )
            time.sleep(1)

            # the analyze should not run because a child fails
            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=1, fail=1, notrun=1 )

            # the analyze should not run here
            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=1, notrun=1 )

            # double check the state
            vrun = vtu.runvvtest( '-i -v', batch=batch )
            vrun.assertCounts( total=3, npass=1, fail=1, notrun=1 )

            # "fix" the failure
            util.writefile( 'atest.vvt', fixed_test_vvt )
            time.sleep(1)

            # rerun the failure
            vrun = vtu.runvvtest( '-k fail', batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            # now the analyze should run
            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=1, npass=1 )

            vrun = vtu.runvvtest( '-i -v', batch=batch )
            vrun.assertCounts( total=3, npass=3, fail=0, notrun=0 )

    def test_rerun_with_analyze_deps(self):
        ""
        fail_test = """
            #VVT: parameterize : timestep = 1 2
            #VVT: analyze : --analyze
            import sys, os, time, vvtest_util as vvt
            if '--analyze' not in sys.argv[1:]:
                time.sleep(5)
                with open( 'afile.'+vvt.timestep, 'wt' ):
                    pass
            else:
                assert os.path.exists( '../atest.timestep=1/bfile.1' )
                assert os.path.exists( '../atest.timestep=2/bfile.2' )
            """
        fixed_test = """
            #VVT: parameterize : timestep = 1 2
            #VVT: analyze : --analyze
            import sys, os, time, vvtest_util as vvt
            if '--analyze' not in sys.argv[1:]:
                time.sleep(5)
                with open( 'bfile.'+vvt.timestep, 'wt' ):
                    pass
            else:
                assert os.path.exists( '../atest.timestep=1/bfile.1' )
                assert os.path.exists( '../atest.timestep=2/bfile.2' )
            """
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            util.writefile( 'atest.vvt', fail_test )
            time.sleep(1)
            
            # the analyze should fail
            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=3, npass=2, fail=1 )

            # "fix" the execute
            util.writefile( 'atest.vvt', fixed_test )
            time.sleep(1)
            
            # the analyze test should NOT run at the same time as the children
            # (if it does in this case, then the analyze test will show a fail)
            vrun = vtu.runvvtest( '-R', batch=batch )
            vrun.assertCounts( total=3, npass=3 )

    def test_analyze_waits_for_deps_with_limited_num_procs(self):
        """
        make sure if a child test takes more processors than available, then
        the analyze will still wait for all the children to finish
        """
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np,foo = 1,bar 1,baz 2,bar 2,baz
            #VVT: analyze : --analyze
            import os, sys, time, vvtest_util as vvt
            if '--analyze' not in sys.argv[1:]:
                time.sleep(4)
                with open( 'afile.'+vvt.foo+'.'+vvt.np, 'wt' ):
                    pass
            else:
                assert os.path.exists( '../atest.foo=bar.np=1/afile.bar.1' )
                assert os.path.exists( '../atest.foo=baz.np=1/afile.baz.1' )
                assert os.path.exists( '../atest.foo=bar.np=2/afile.bar.2' )
                assert os.path.exists( '../atest.foo=baz.np=2/afile.baz.2' )
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '-n 1' )
        vrun.assertCounts( total=5, npass=5 )

    def test_failed_analyze_deps_are_still_listed_with_info_option(self):
        """
        analyze tests that have bad children are not pruned when using -i
        """
        util.writefile( 'bad.vvt', """
            #VVT: keywords = fast medium
            #VVT: parameterize : timestep = 1 2
            #VVT: analyze : --analyze
            import os, sys, time, vvtest_util as vvt
            if '--analyze' not in sys.argv[1:]:
                if vvt.timestep == '2':
                    raise Exception( 'fake failure' )
                else:
                    with open( 'bfile.'+vvt.timestep, 'wt' ):
                        pass
            else:
                assert os.path.exists( '../bad.timestep=1/bfile.1' )
                assert os.path.exists( '../bad.timestep=2/bfile.2' )
            """ )
        time.sleep(1)

        # the analyze should be run here
        vrun = vtu.runvvtest()
        vrun.assertCounts( total=3, npass=1, fail=1, notrun=1 )

        # the analyze should show up in the listing here
        vrun = vtu.runvvtest( '-i -v -k notrun/pass' )
        vrun.assertCounts( total=2, npass=1, notrun=1 )


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
