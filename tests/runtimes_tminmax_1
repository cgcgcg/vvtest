#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3


class runtimes_and_tmin_tmax( vtu.vvtestTestCase ):

    def test_if_tmax_filtered_out_a_test_then_its_not_rerun(self):
        ""
        util.writescript( "tests/AA.vvt", """
            #!"""+sys.executable+"""
            import os, sys, time
            time.sleep(1)
            """ )
        util.writescript( "tests/BB.vvt", """
            #!"""+sys.executable+"""
            import os, sys, time
            time.sleep(3)
            """ )
        util.writescript( "tests/CC.vvt", """
            #!"""+sys.executable+"""
            import os, sys, time
            time.sleep(7)
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            if os.path.exists( 'timings' ):
                os.remove( 'timings' )

            vrun = vtu.runvvtest( 'tests', batch=batch )
            vrun.assertCounts( total=3, npass=3 )
            tdir = vrun.resultsDir()

            # create a timings file
            util.runcmd( vtu.resultspy + ' save', chdir='tests' )
            vtu.runvvtest( '-i --save-results', chdir=tdir )
            resultsfname = util.globfile('results.*')
            util.runcmd( vtu.resultspy + ' merge -x '+resultsfname )

            vtu.remove_results()

            # select tests based on the timings file
            vrun = vtu.runvvtest( '--tmax 6 tests', batch=batch )
            vrun.assertCounts( total=2, npass=2 )
            assert vrun.getTestIds() == [ 'AA', 'BB' ]

            # the --tmax 6 above filtered out test CC, which means test CC should
            # not be in the TestResults test list;  check this by running vvtest
            # inside the TestResults directory (test CC should never be run)

            vrun = vtu.runvvtest( batch=batch, chdir=tdir )
            vrun.assertCounts( total=0 )

            # if we force tests to rerun, only 2 should be run
            vrun = vtu.runvvtest( '-R', batch=batch, chdir=tdir )
            vrun.assertCounts( total=2, npass=2 )
            assert vrun.getTestIds() == [ 'AA', 'BB' ]


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
