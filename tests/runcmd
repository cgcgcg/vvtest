#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: trig
#OPTION: realssh

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import struct
import time
import filecmp
import stat
import shutil
import unittest

import trigtestutils as trigutil
import testutils as util
from testutils import print3

# this is the module we are testing
import runcmd

# For the tests that use ssh, a "fake" ssh script is used that acts like ssh.
# To use an actual ssh, add the -s option to the unit test command line.  In
# this case, make sure you can ssh to the current machine without a password.

localpy = sys.executable


#######################################################################

class catchall( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()
        if 'COMMAND_DRYRUN' in os.environ:
            del os.environ['COMMAND_DRYRUN']

    def test_the_command_function(self):
        ""
        s = runcmd.command()
        assert type(s) == type('') and not s
        s = runcmd.command( 'a', 'b' )
        assert type(s) == type('') and s == 'a b'
        s = runcmd.command( 'a b' )
        assert type(s) == type('') and s == '"a b"'
        s = runcmd.command( 'c', 'a b' )
        assert type(s) == type('') and s == 'c "a b"'
        s = runcmd.command( 'a b', 'c' )
        assert type(s) == type('') and s == '"a b" c'
        s = runcmd.command( 'c', 'a b', 'd' )
        assert type(s) == type('') and s == 'c "a b" d'
        s = runcmd.command( 'c', 'a b', 'd e' )
        assert type(s) == type('') and s == 'c "a b" "d e"'

    def test_the_escape_function(self):
        ""
        s = runcmd.escape()
        assert type(s) == type('') and not s
        s = runcmd.escape('')
        assert type(s) == type('') and s == '""'
        s = runcmd.escape('','')
        assert type(s) == type('') and s == '"" ""'
        s = runcmd.escape('ls','-l','')
        assert type(s) == type('') and s == 'ls -l ""'
        s = runcmd.escape('ls','-l','*')
        assert type(s) == type('') and s == "ls -l '*'"
        s = runcmd.escape('ls','-l','*','a space')
        assert type(s) == type('') and s == "ls -l '*' 'a space'"
        s = runcmd.escape('ls','stupid" then\\n"\'blank man\'')
        #print3( s )
        assert type(s) == type('') and ( \
                s == r"""ls 'stupid" then\n"'"'"'blank man'"'"''""" or \
                s == r'''ls "stupid\" then\\n\"'blank man'"''' )

    def test_run_command_with_the_echo_keyword(self):
        ""
        util.writefile( 'cmd1.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            run_command( 'ls', 'cmd1.py' )
            """ )

        util.writefile( 'cmd2.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            run_command( 'ls', 'cmd2.py', echo=False )
            """ )

        x,out1 = util.runcmd( localpy+' cmd1.py' )
        #print3( out1 )
        x,out2 = util.runcmd( localpy+' cmd2.py' )
        #print3( out2 )

        L = util.greplines( 'runcmd:', out1 )
        assert len(L) == 1 and 'ls cmd1.py' in L[0]
        st = None
        argL = eval( L[0].split('runcmd:',1)[1].strip() )
        for s in argL:
            if s.startswith( 'start=' ):
                st = s
                break
        assert st

        L = util.greplines( 'return:', out1 )
        assert len(L) == 1 and 'ls cmd1.py' in L[0]
        assert st in L[0]

        assert len( util.greplines( '^cmd1.py', out1 ) ) == 1
        assert len( util.greplines( 'ls cmd2.py', out2 ) ) == 0
        assert len( util.greplines( '^cmd2.py', out2 ) ) == 1

    def test_run_output_with_the_echo_keyword_argument(self):
        ""
        util.writefile( 'cmd1.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            out = run_output( 'ls', 'cmd1.py' )
            assert out.find( 'ls cmd1.py' ) < 0
            assert out.find( 'cmd1.py' ) >= 0
            """ )

        util.writefile( 'cmd2.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            out = run_output( 'ls', 'cmd2.py', echo=False )
            assert out.find( 'ls cmd2.py' ) < 0
            assert out.find( 'cmd2.py' ) >= 0
            """ )

        x,out1 = util.runcmd( localpy+' cmd1.py' )
        #print3( out1 )
        x,out2 = util.runcmd( localpy+' cmd2.py' )
        #print3( out2 )

        L = util.greplines( 'runcmd:', out1 )
        assert len(L) == 1 and 'ls cmd1.py' in L[0]
        st = None
        argL = eval( L[0].split('runcmd:',1)[1].strip() )
        for s in argL:
            if s.startswith( 'start=' ):
                st = s
                break
        assert st

        L = util.greplines( 'return:', out1 )
        assert len(L) == 1 and 'ls cmd1.py' in L[0]
        assert st in L[0]

        assert len( util.greplines( '^cmd1.py', out1 ) ) == 0
        assert len( util.greplines( 'ls cmd2.py', out2 ) ) == 0
        assert len( util.greplines( '^cmd2.py', out2 ) ) == 0

    def test_run_timeout_with_the_echo_keyword_argument(self):
        ""
        util.writefile( 'cmd1.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            run_timeout( 'ls', 'cmd1.py', timeout=10 )
            """ )

        util.writefile( 'cmd2.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            run_timeout( 'ls', 'cmd2.py', timeout=10, echo=False )
            """ )

        x,out1 = util.runcmd( localpy+' cmd1.py' )
        #print3( out1 )
        x,out2 = util.runcmd( localpy+' cmd2.py' )
        #print3( out2 )

        L = util.greplines( 'runcmd:', out1 )
        assert len(L) == 1 and 'ls cmd1.py' in L[0]
        st = None
        argL = eval( L[0].split('runcmd:',1)[1].strip() )
        for s in argL:
            if s.startswith( 'start=' ):
                st = s
                break
        assert st

        L = util.greplines( 'return:', out1 )
        assert len(L) == 1 and 'ls cmd1.py' in L[0]
        assert st in L[0]

        assert len( util.greplines( '^cmd1.py', out1 ) ) == 1
        assert len( util.greplines( 'ls cmd2.py', out2 ) ) == 0
        assert len( util.greplines( '^cmd2.py', out2 ) ) == 1

    def test_using_the_chdir_argument(self):
        ""
        os.mkdir( 'subdir' )

        x = runcmd.run_command( 'touch file1.txt' )
        y = runcmd.run_command( 'touch file2.txt', chdir='subdir' )
        z = runcmd.run_command( 'touch file3.txt' )

        time.sleep(1)
        assert x == 0 and y == 0 and z == 0
        assert os.path.exists( 'file1.txt' )
        assert os.path.exists( 'subdir/file2.txt' )
        assert os.path.exists( 'file3.txt' )

        x = runcmd.run_output( 'touch file4.txt ; echo hello' )
        y = runcmd.run_output( 'touch file5.txt ; echo hello', chdir='subdir' )
        z = runcmd.run_output( 'touch file6.txt ; echo hello' )

        time.sleep(1)
        assert x.strip()=="hello" and y.strip()=="hello" and z.strip()=="hello"
        assert os.path.exists( 'file4.txt' )
        assert os.path.exists( 'subdir/file5.txt' )
        assert os.path.exists( 'file6.txt' )

        x = runcmd.run_timeout( 'touch file7.txt', timeout=10 )
        y = runcmd.run_timeout( 'touch file8.txt', chdir='subdir', timeout=10 )
        z = runcmd.run_timeout( 'touch file9.txt', timeout=10 )

        time.sleep(1)
        assert x == 0 and y == 0 and z == 0
        assert os.path.exists( 'file7.txt' )
        assert os.path.exists( 'subdir/file8.txt' )
        assert os.path.exists( 'file9.txt' )

    def test_using_the_chdir_argument_at_the_same_time_as_redirect_argument(self):
        ""
        os.mkdir( 'subdir' )

        x = runcmd.run_command( 'touch file1.txt ; echo hello',
                                chdir='subdir', redirect='out1.txt' )

        time.sleep(1)
        assert x == 0
        assert os.path.exists( 'subdir/file1.txt' )
        assert os.path.exists( 'subdir/out1.txt' )
        assert len( util.grepfiles( 'hello', 'subdir/out1.txt' ) ) == 1

        x = runcmd.run_timeout( 'touch file2.txt ; echo hello', timeout=10,
                                chdir='subdir', redirect='out2.txt' )

        time.sleep(1)
        assert x == 0
        assert os.path.exists( 'subdir/file2.txt' )
        assert os.path.exists( 'subdir/out2.txt' )
        assert len( util.grepfiles( 'hello', 'subdir/out2.txt' ) ) == 1

        x = runcmd.run_command( 'touch file3.txt ; echo hello',
                                chdir='subdir',
                                redirect=os.path.abspath('out3.txt') )

        time.sleep(1)
        assert x == 0
        assert os.path.exists( 'subdir/file3.txt' )
        assert os.path.exists( 'out3.txt' )
        assert len( util.grepfiles( 'hello', 'out3.txt' ) ) == 1

        x = runcmd.run_timeout( 'touch file4.txt ; echo hello',
                                chdir='subdir', timeout=10,
                                redirect=os.path.abspath('out4.txt') )

        time.sleep(1)
        assert x == 0
        assert os.path.exists( 'subdir/file4.txt' )
        assert os.path.exists( 'out4.txt' )
        assert len( util.grepfiles( 'hello', 'out4.txt' ) ) == 1

    def test_using_chdir_argument_along_with_a_timeout(self):
        ""
        os.mkdir( 'subdir1' )
        os.mkdir( 'subdir2' )

        x = runcmd.run_timeout( 'touch file1.txt ; sleep 10', timeout=4,
                                chdir='subdir1', raise_on_failure=False )
        y = runcmd.run_timeout( 'touch file2.txt ; sleep 1', timeout=10,
                                chdir='subdir2' )

        time.sleep(1)
        assert x == None and y == 0
        assert os.path.exists( 'subdir1/file1.txt' )
        assert os.path.exists( 'subdir2/file2.txt' )

    def test_run_command_with_raise_on_failure(self):
        ""
        try:
            runcmd.run_command( 'echo hello ; exit 1' )
        except runcmd.CommandException:
            pass
        else:
            raise Exception( "expected an exception" )
        try:
            runcmd.run_command( 'echo hello ; exit 1', raise_on_failure=True )
        except runcmd.CommandException:
            pass
        else:
            raise Exception( "expected an exception" )
        x = runcmd.run_command( 'echo hello ; exit 1', raise_on_failure=False )
        assert x != None and x != 0

    def test_run_output_with_raise_on_failure(self):
        ""
        try:
            runcmd.run_output( 'echo hello ; exit 1' )
        except runcmd.CommandException:
            pass
        else:
            raise Exception( "expected an exception" )
        try:
            runcmd.run_output( 'echo hello ; exit 1', raise_on_failure=True )
        except runcmd.CommandException:
            pass
        else:
            raise Exception( "expected an exception" )
        x = runcmd.run_output( 'echo hello ; exit 1', raise_on_failure=False )
        assert x != None and x != 0

    def test_run_timeout_with_raise_on_failure(self):
        ""
        try:
            runcmd.run_timeout( 'echo hello ; exit 1', timeout=10 )
        except runcmd.CommandException:
            pass
        else:
            raise Exception( "expected an exception" )
        try:
            runcmd.run_timeout( 'echo hello ; exit 1', timeout=10,
                                raise_on_failure=True )
        except runcmd.CommandException:
            pass
        else:
            raise Exception( "expected an exception" )
        x = runcmd.run_timeout( 'echo hello ; exit 1', timeout=10,
                                raise_on_failure=False )
        assert x != None and x != 0

    def test_run_command_with_redirect_argument(self):
        ""
        runcmd.run_command( 'echo hello ; echo world', redirect="out.txt" )
        assert util.readfile( 'out.txt' ).strip() == "hello\nworld"

        runcmd.run_command( 'echo foobar', redirect="out.txt" )
        assert util.readfile( 'out.txt' ).strip() == "foobar"

        runcmd.run_command( 'echo next output', redirect="out.txt", append=True )
        assert util.readfile( 'out.txt' ).strip() == "foobar\nnext output"

        fpout = open( 'fdout.txt', 'w' )
        runcmd.run_command( 'echo foobar', redirect=fpout.fileno() )
        fpout.close()
        assert util.readfile( 'fdout.txt' ).strip() == "foobar"

    def test_run_timeout_with_redirect_argument(self):
        ""
        runcmd.run_timeout( 'echo hello ; echo world', redirect="out.txt",
                            timeout=10 )
        assert util.readfile( 'out.txt' ).strip() == "hello\nworld"

        runcmd.run_timeout( 'echo foobar', redirect="out.txt",
                            timeout=10 )
        assert util.readfile( 'out.txt' ).strip() == "foobar"

        runcmd.run_timeout( 'echo next output', redirect="out.txt", append=True,
                            timeout=10 )
        assert util.readfile( 'out.txt' ).strip() == "foobar\nnext output"

        fpout = open( 'fdout.txt', 'w' )
        runcmd.run_timeout( 'echo foobar', redirect=fpout.fileno(),
                            timeout=10 )
        fpout.close()
        assert util.readfile( 'fdout.txt' ).strip() == "foobar"

    def test_run_output_with_include_stderr(self):
        ""
        py = 'import os,sys;'
        py += ' sys.stdout.write( "hello"+os.linesep );'
        py += ' sys.stderr.write( "world"+os.linesep )'
        out = runcmd.run_output( localpy, '-c', py )
        #print3( out )
        assert len( util.greplines( "hello", out ) ) == 1
        assert len( util.greplines( "world", out ) ) == 1

        out = runcmd.run_output( localpy, '-c', py,
                                 include_stderr=False )
        #print3( out )
        assert len( util.greplines( "hello", out ) ) == 1
        assert len( util.greplines( "world", out ) ) == 0

        # run in a script to make sure stderr does not get lost
        util.writefile( 'cmd1.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            out = run_output( '"""+localpy+"""', '-c', """+repr(py)+""",
                              echo=False )
            """ )

        util.writefile( 'cmd2.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            out = run_output( '"""+localpy+"""', '-c', """+repr(py)+""",
                              include_stderr=False, echo=False )
            """ )

        x,out1 = util.runcmd( localpy+' cmd1.py' )
        #print3( out1 )
        assert out1.strip() == ""
        x,out2 = util.runcmd( localpy+' cmd2.py' )
        #print3( out2 )
        assert out2.strip() == "world"

    def test_return_status_of_process_that_timed_out(self):
        ""
        util.writefile( 'ok.py', """
            import os, sys, time
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            def log( *args ):
                fp = open( 'ok.txt', 'a' )
                fp.write( ' '.join( [ str(x) for x in args ] ) + os.linesep )
                fp.close()
            log( 'PID', os.getpid(), time.asctime() )
            time.sleep(2)
            log( 'DONE', time.asctime() )
            """ )

        util.writefile( 'fail.py', """
            import os, sys, time
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            def log( *args ):
                fp = open( 'fail.txt', 'a' )
                fp.write( ' '.join( [ str(x) for x in args ] ) + os.linesep )
                fp.close()
            log( 'PID', os.getpid(), time.asctime() )
            time.sleep(2)
            log( 'RAISE', time.asctime() )
            raise Exception( 'fake failure' )
            log( 'DONE', time.asctime() )
            """ )

        util.writefile( 'tout.py', """
            import os, sys, time
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            def log( *args ):
                fp = open( 'tout.txt', 'a' )
                fp.write( ' '.join( [ str(x) for x in args ] ) + os.linesep )
                fp.close()
            log( 'PID', os.getpid(), time.asctime() )
            time.sleep(20)
            log( 'DONE', time.asctime() )
            """ )

        t0 = time.time()
        x = runcmd.run_timeout( localpy, 'ok.py', timeout=10 )
        t1 = time.time()
        assert x != None and x == 0
        assert t1 - t0 < 8
        time.sleep(1)
        L = util.grepfiles( 'PID', 'ok.txt' )[0].strip().split(' ',2)
        t2 = time.mktime( time.strptime( L[-1] ) )
        L = util.grepfiles( 'DONE', 'ok.txt' )[0].strip().split(' ',1)
        t3 = time.mktime( time.strptime( L[-1] ) )
        assert t3 - t2 < 8

        t0 = time.time()
        x = runcmd.run_timeout( localpy, 'fail.py',
                                timeout=10, raise_on_failure=False )
        t1 = time.time()
        assert x != None and type(x) == type(2) and x != 0
        assert t1 - t0 < 8
        time.sleep(1)
        L = util.grepfiles( 'PID', 'fail.txt' )[0].strip().split(' ',2)
        t2 = time.mktime( time.strptime( L[-1] ) )
        L = util.grepfiles( 'RAISE', 'fail.txt' )[0].strip().split(' ',1)
        t3 = time.mktime( time.strptime( L[-1] ) )
        assert t3 - t2 < 8
        assert len( util.grepfiles( 'DONE', 'fail.txt' ) ) == 0

        t0 = time.time()
        x = runcmd.run_timeout( localpy, 'tout.py',
                                timeout=5, raise_on_failure=False )
        t1 = time.time()
        assert x == None
        assert t1-t0 >= 5 and t1-t0 < 15
        time.sleep(1)
        L = util.grepfiles( 'PID', 'tout.txt' )[0].strip().split(' ',2)
        t0 = time.mktime( time.strptime( L[-1] ) )
        assert len( util.grepfiles( 'DONE', 'tout.txt' ) ) == 0

        os.remove( 'tout.txt' )
        try:
            t0 = time.time()
            runcmd.run_timeout( localpy, 'tout.py', timeout=5 )
        except runcmd.CommandException:
            t1 = time.time()
            msg = str( sys.exc_info()[1] )
        assert msg.find( "Command timed out" ) >= 0
        assert len( util.grepfiles( 'PID', 'tout.txt' ) ) == 1
        L = util.grepfiles( 'PID', 'tout.txt' )[0].strip().split(' ',2)
        t0 = time.mktime( time.strptime( L[-1] ) )
        assert len( util.grepfiles( 'DONE', 'tout.txt' ) ) == 0

    def test_sub_sub_processes_should_get_killed_upon_timeout(self):
        ""
        # first check a sub-sub process chain without a timeout

        util.writefile( 'tout1.py', """
            import os, sys, time
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            def log( *args ):
                fp = open( 'tout1.txt', 'a' )
                fp.write( ' '.join( [ str(x) for x in args ] ) + os.linesep )
                fp.close()
            log( 'PID', os.getpid(), time.asctime() )
            import subprocess
            subprocess.call( sys.executable+' """+os.getcwd()+"""/tout2.py',
                             shell=True )
            time.sleep(2)
            log( 'DONE', time.asctime() )
            """ )

        util.writefile( 'tout2.py', """
            import os, sys, time
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            def log( *args ):
                fp = open( 'tout2.txt', 'a' )
                fp.write( ' '.join( [ str(x) for x in args ] ) + os.linesep )
                fp.close()
            log( 'PID', os.getpid(), time.asctime() )
            time.sleep(2)
            log( 'DONE', time.asctime() )
            """ )

        t0 = time.time()
        x = runcmd.run_timeout( localpy, 'tout1.py',
                                timeout=10, raise_on_failure=False )
        t1 = time.time()
        assert x != None and x == 0
        assert t1-t0 < 8

        pid1 = util.grepfiles( 'PID', 'tout1.txt' )[0].strip().split(' ',2)[1]
        pid2 = util.grepfiles( 'PID', 'tout2.txt' )[0].strip().split(' ',2)[1]
        assert len( util.grepfiles( 'DONE', 'tout1.txt' ) ) == 1
        assert len( util.grepfiles( 'DONE', 'tout2.txt' ) ) == 1

        # make sure the child pids have disappeared
        time.sleep(1)
        psout = processes()
        assert len( util.greplines( pid1, psout ) ) == 0
        assert len( util.greplines( pid2, psout ) ) == 0

        # same scripts but make the timeout larger
        util.writefile( 'tout3.py', """
            import os, sys, time
            import subprocess
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            def log( *args ):
                fp = open( 'tout3.txt', 'a' )
                fp.write( ' '.join( [ str(x) for x in args ] ) + os.linesep )
                fp.close()
            log( 'PID', os.getpid(), time.asctime() )
            subprocess.call( sys.executable+' """+os.getcwd()+"""/tout4.py',
                             shell=True )
            time.sleep(20)
            log( 'DONE', time.asctime() )
            """ )

        util.writefile( 'tout4.py', """
            import os, sys, time
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            def log( *args ):
                fp = open( 'tout4.txt', 'a' )
                fp.write( ' '.join( [ str(x) for x in args ] ) + os.linesep )
                fp.close()
            log( 'PID', os.getpid(), time.asctime() )
            time.sleep(20)
            log( 'DONE', time.asctime() )
            """ )

        # this time, the subprocess should timeout
        t0 = time.time()
        x = runcmd.run_timeout( localpy, 'tout3.py',
                                timeout=5, raise_on_failure=False )
        t1 = time.time()
        assert x == None
        assert t1-t0 >= 5 and t1-t0 < 15

        pid1 = util.grepfiles( 'PID', 'tout3.txt' )[0].strip().split(' ',2)[1]
        pid2 = util.grepfiles( 'PID', 'tout4.txt' )[0].strip().split(' ',2)[1]
        assert len( util.grepfiles( 'DONE', 'tout3.txt' ) ) == 0
        assert len( util.grepfiles( 'DONE', 'tout4.txt' ) ) == 0

        # make sure the child pids have disappeared
        time.sleep(1)
        psout = processes()
        assert len( util.greplines( pid1, psout ) ) == 0
        assert len( util.greplines( pid2, psout ) ) == 0

    def test_using_timeout_date_argument(self):
        ""
        util.writefile( 'ok.py', """
            import os, sys, time
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            def log( *args ):
                fp = open( 'ok.txt', 'a' )
                fp.write( ' '.join( [ str(x) for x in args ] ) + os.linesep )
                fp.close()
            log( 'PID', os.getpid(), time.asctime() )
            time.sleep(2)
            log( 'DONE', time.asctime() )
            """ )

        util.writefile( 'tout.py', """
            import os, sys, time
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            def log( *args ):
                fp = open( 'tout.txt', 'a' )
                fp.write( ' '.join( [ str(x) for x in args ] ) + os.linesep )
                fp.close()
            log( 'PID', os.getpid(), time.asctime() )
            time.sleep(20)
            log( 'DONE', time.asctime() )
            """ )

        t0 = time.time()
        x = runcmd.run_timeout( localpy, 'ok.py', timeout_date=time.time()+10 )
        t1 = time.time()
        assert x != None and x == 0
        assert t1 - t0 < 8
        time.sleep(1)
        L = util.grepfiles( 'PID', 'ok.txt' )[0].strip().split(' ',2)
        t2 = time.mktime( time.strptime( L[-1] ) )
        L = util.grepfiles( 'DONE', 'ok.txt' )[0].strip().split(' ',1)
        t3 = time.mktime( time.strptime( L[-1] ) )
        assert t3 - t2 < 8

        t0 = time.time()
        x = runcmd.run_timeout( localpy, 'tout.py',
                                timeout_date=time.time()+5,
                                raise_on_failure=False )
        t1 = time.time()
        assert x == None
        assert t1-t0 >= 5 and t1-t0 < 15
        time.sleep(1)
        L = util.grepfiles( 'PID', 'tout.txt' )[0].strip().split(' ',2)
        t0 = time.mktime( time.strptime( L[-1] ) )
        assert len( util.grepfiles( 'DONE', 'tout.txt' ) ) == 0

    # TODO: test poll_interval in run_timeout()

    def test_run_command_using_COMMAND_DRYRUN_to_prevent_execution(self):
        ""
        util.writescript( 'cmd1.py', """
            #!"""+localpy+""" -E
            import os, sys
            fp = open( 'file1.txt', 'w' ) ; fp.close()
            """ )

        util.writescript( 'cmd2.py', """
            #!"""+localpy+""" -E
            import os, sys
            fp = open( 'file2.txt', 'w' ) ; fp.close()
            """ )

        assert runcmd.run_command( 'cmd1.py' ) == 0
        os.environ['COMMAND_DRYRUN'] = ''
        assert runcmd.run_command( 'cmd2.py' ) == 0

        time.sleep(1)
        assert os.path.exists( 'file1.txt' )
        assert not os.path.exists( 'file2.txt' )

    def test_run_output_using_COMMAND_DRYRUN_to_prevent_execution(self):
        ""
        s = runcmd.run_output( 'echo hello' )
        assert s.strip() == 'hello'
        os.environ['COMMAND_DRYRUN'] = ''
        s = runcmd.run_output( 'echo goodbye' )
        assert not s.strip()

    def test_run_timeout_using_COMMAND_DRYRUN_to_prevent_execution(self):
        ""
        util.writescript( 'cmd1.py', """
            #!"""+localpy+""" -E
            import os, sys
            fp = open( 'file1.txt', 'w' ) ; fp.close()
            """ )

        util.writescript( 'cmd2.py', """
            #!"""+localpy+""" -E
            import os, sys
            fp = open( 'file2.txt', 'w' ) ; fp.close()
            """ )

        assert runcmd.run_timeout( 'cmd1.py', timeout=10 ) == 0
        os.environ['COMMAND_DRYRUN'] = ''
        assert runcmd.run_timeout( 'cmd2.py', timeout=10 ) == 0

        time.sleep(1)
        assert os.path.exists( 'file1.txt' )
        assert not os.path.exists( 'file2.txt' )

    def test_using_COMMAND_DRYRUN_with_value_of_a_number_one(self):
        ""
        util.writescript( 'cmd1.py', """
            #!"""+localpy+""" -E
            import os, sys
            fp = open( 'file1.txt', 'w' ) ; fp.close()
            """ )

        util.writescript( 'cmd2.py', """
            #!"""+localpy+""" -E
            import os, sys
            fp = open( 'file2.txt', 'w' ) ; fp.close()
            """ )

        assert runcmd.run_command( os.path.abspath('cmd1.py') ) == 0
        os.environ['COMMAND_DRYRUN'] = '1'
        assert runcmd.run_command( os.path.abspath('cmd2.py') ) == 0

        time.sleep(1)
        assert os.path.exists( 'file1.txt' )
        assert not os.path.exists( 'file2.txt' )

    def test_using_COMMAND_DRYRUN_with_a_list_of_program_names(self):
        ""
        util.writescript( 'cmd1.py', """
            #!"""+localpy+""" -E
            import os, sys
            fp = open( 'file1.txt', 'w' ) ; fp.close()
            """ )

        util.writescript( 'cmd2.py', """
            #!"""+localpy+""" -E
            import os, sys
            fp = open( 'file2.txt', 'w' ) ; fp.close()
            """ )

        util.writescript( 'cmd3', """
            #!"""+localpy+""" -E
            import os, sys
            fp = open( 'file3.txt', 'w' ) ; fp.close()
            """ )

        util.writescript( 'cmd4', """
            #!"""+localpy+""" -E
            import os, sys
            fp = open( 'file4.txt', 'w' ) ; fp.close()
            """ )

        os.environ['COMMAND_DRYRUN'] = 'cmd3/cmd2.py/cmd4'
        assert runcmd.run_command( os.path.abspath('cmd1.py') ) == 0
        assert runcmd.run_command( os.path.abspath('cmd2.py') ) == 0
        assert runcmd.run_command( os.path.abspath('cmd3')+' -h arg' ) == 0
        assert runcmd.run_command( [os.path.abspath('cmd4'), '-h', 'arg'] ) == 0

        time.sleep(1)
        assert not os.path.exists( 'file1.txt' )
        assert os.path.exists( 'file2.txt' )
        assert os.path.exists( 'file3.txt' )
        assert os.path.exists( 'file4.txt' )

    def test_run_command_with_machine_argument(self):
        ""
        util.writefile( 'subdir/file.txt', 'a file' )
        util.writefile( 'subdir/file2.txt', 'another file' )
        util.writefile( 'subdir/a b.txt', 'file with a space' )
        sdir = os.path.abspath( 'subdir' )
        time.sleep(1)

        sshprog,sshmach = util.get_ssh_pair()

        # a simple command with no spaces or arguments
        util.writefile( 'cmd1.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            run_command( 'date', machine='"""+sshmach+"""',
                         sshexe='"""+sshprog+"""', raise_on_error=True )
            """ )

        x,out = util.runcmd( localpy+' cmd1.py' )
        #print3( out )
        #os.system( localpy+' cmd1.py' )

        dow,mo,yr = time.strftime( "%a %b %Y" ).split()
        L = util.greplines( yr, out )
        assert len( L )  > 0
        assert dow in L[-1] and mo in L[-1]

        # more complex command
        util.writefile( 'cmd2.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            sshprog = '"""+sshprog+"""'
            cmd = 'cd """+sdir+""" && ls file2.txt'
            run_command( cmd, echo=False,
                         machine='"""+sshmach+"""', sshexe=sshprog )
            """ )

        x,out = util.runcmd( localpy+' cmd2.py' )
        print3( out )

        assert len( util.greplines( 'file.txt', out ) ) == 0
        assert len( util.greplines( 'file2.txt', out ) ) == 1
        assert len( util.greplines( 'a b.txt', out ) ) == 0

        # a command with a quoted argument
        util.writefile( 'cmd3.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            sshprog = '"""+sshprog+"""'
            cmd = 'cd """+sdir+""" && ls "a b.txt"'
            run_command( cmd, echo=False,
                         machine='"""+sshmach+"""', sshexe=sshprog )
            """ )

        x,out = util.runcmd( localpy+' cmd3.py' )
        #print3( out )

        # use a list of arguments
        assert len( util.greplines( 'file.txt', out ) ) == 0
        assert len( util.greplines( 'file2.txt', out ) ) == 0
        assert len( util.greplines( 'a b.txt', out ) ) == 1

        util.writefile( 'cmd4.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            sshprog = '"""+sshprog+"""'
            run_command( 'ls', '"""+sdir+"""/a b.txt', echo=False,
                         machine='"""+sshmach+"""', sshexe=sshprog,
                         raise_on_error=True )
            """ )

        x,out = util.runcmd( localpy+' cmd4.py' )
        #print3( out )
        #os.system( localpy+' cmd4.py' )

        assert len( util.greplines( 'file.txt', out ) ) == 0
        assert len( util.greplines( 'file2.txt', out ) ) == 0
        assert len( util.greplines( 'a b.txt', out ) ) == 1

        # use a wildcard
        util.writefile( 'cmd5.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            sshprog = '"""+sshprog+"""'
            cmd = 'cd """+sdir+""" && ls *'
            run_command( cmd, machine='"""+sshmach+"""', sshexe=sshprog )
            """ )

        x,out = util.runcmd( localpy+' cmd5.py' )
        #print3( out )

        assert len( util.greplines( 'file.txt', out ) ) == 1
        assert len( util.greplines( 'file2.txt', out ) ) == 1
        assert len( util.greplines( 'a b.txt', out ) ) == 1

    def test_run_output_with_machine_argument(self):
        ""
        util.writefile( 'subdir/file.txt', 'a file' )
        util.writefile( 'subdir/file2.txt', 'another file' )
        util.writefile( 'subdir/a b.txt', 'file with a space' )
        sdir = os.path.abspath( 'subdir' )
        time.sleep(1)

        sshprog,sshmach = util.get_ssh_pair()

        out = runcmd.run_output( 'date', machine=sshmach,
                                 sshexe=sshprog, raise_on_error=True )
        #print3( out )
        #os.system( localpy+' cmd1.py' )

        dow,mo,yr = time.strftime( "%a %b %Y" ).split()
        L = util.greplines( yr, out )
        assert len( L )  > 0
        assert dow in L[-1] and mo in L[-1]

        cmd = 'cd "'+sdir+'" && ls file2.txt'
        out = runcmd.run_output( cmd, machine=sshmach,
                                 sshexe=sshprog, raise_on_error=True )
        #print3( out )

        assert len( util.greplines( 'file.txt', out ) ) == 0
        assert len( util.greplines( 'file2.txt', out ) ) == 1
        assert len( util.greplines( 'a b.txt', out ) ) == 0

        cmd = 'cd '+sdir+' && ls "a b.txt"'
        out = runcmd.run_output( cmd, machine=sshmach,
                                 sshexe=sshprog, raise_on_error=True )
        #print3( out )

        assert len( util.greplines( 'file.txt', out ) ) == 0
        assert len( util.greplines( 'file2.txt', out ) ) == 0
        assert len( util.greplines( 'a b.txt', out ) ) == 1

        out = runcmd.run_output( 'ls', sdir+'/a b.txt', machine=sshmach,
                                 sshexe=sshprog, raise_on_error=True )
        #print3( out )

        assert len( util.greplines( 'file.txt', out ) ) == 0
        assert len( util.greplines( 'file2.txt', out ) ) == 0
        assert len( util.greplines( 'a b.txt', out ) ) == 1

        cmd = 'cd '+sdir+' && ls *'
        out = runcmd.run_output( cmd, machine=sshmach,
                                 sshexe=sshprog, raise_on_error=True )
        #print3( out )

        assert len( util.greplines( 'file.txt', out ) ) == 1
        assert len( util.greplines( 'file2.txt', out ) ) == 1
        assert len( util.greplines( 'a b.txt', out ) ) == 1

    def test_run_timeout_with_machine_argument(self):
        ""
        util.writefile( 'subdir/file.txt', 'a file' )
        util.writefile( 'subdir/file2.txt', 'another file' )
        util.writefile( 'subdir/a b.txt', 'file with a space' )
        sdir = os.path.abspath( 'subdir' )
        time.sleep(1)

        sshprog,sshmach = util.get_ssh_pair()

        # a simple command with no spaces or arguments
        util.writefile( 'cmd1.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            run_timeout( 'date', machine='"""+sshmach+"""', timeout=10,
                         sshexe='"""+sshprog+"""', raise_on_error=True )
            """ )

        x,out = util.runcmd( localpy+' cmd1.py' )
        #print3( out )
        #os.system( localpy+' cmd1.py' )

        dow,mo,yr = time.strftime( "%a %b %Y" ).split()
        L = util.greplines( yr, out )
        assert len( L )  > 0
        assert dow in L[-1] and mo in L[-1]

        # more complex command
        util.writefile( 'cmd2.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            sshprog = '"""+sshprog+"""'
            cmd = 'cd """+sdir+""" && ls file2.txt'
            run_timeout( cmd, echo=False, timeout=10,
                         machine='"""+sshmach+"""', sshexe=sshprog )
            """ )

        x,out = util.runcmd( localpy+' cmd2.py' )
        print3( out )

        assert len( util.greplines( 'file.txt', out ) ) == 0
        assert len( util.greplines( 'file2.txt', out ) ) == 1
        assert len( util.greplines( 'a b.txt', out ) ) == 0

        # a command with a quoted argument
        util.writefile( 'cmd3.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            sshprog = '"""+sshprog+"""'
            cmd = 'cd """+sdir+""" && ls "a b.txt"'
            run_timeout( cmd, echo=False, timeout=10,
                         machine='"""+sshmach+"""', sshexe=sshprog )
            """ )

        x,out = util.runcmd( localpy+' cmd3.py' )
        #print3( out )

        # use a list of arguments
        assert len( util.greplines( 'file.txt', out ) ) == 0
        assert len( util.greplines( 'file2.txt', out ) ) == 0
        assert len( util.greplines( 'a b.txt', out ) ) == 1

        util.writefile( 'cmd4.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            sshprog = '"""+sshprog+"""'
            run_timeout( 'ls', '"""+sdir+"""/a b.txt', echo=False, timeout=10,
                         machine='"""+sshmach+"""', sshexe=sshprog,
                         raise_on_error=True )
            """ )

        x,out = util.runcmd( localpy+' cmd4.py' )
        #print3( out )
        #os.system( localpy+' cmd4.py' )

        assert len( util.greplines( 'file.txt', out ) ) == 0
        assert len( util.greplines( 'file2.txt', out ) ) == 0
        assert len( util.greplines( 'a b.txt', out ) ) == 1

        # use a wildcard
        util.writefile( 'cmd5.py', """
            import os, sys
            sys.path.insert( 0, '"""+trigutil.trigdir+"""' )
            from runcmd import *
            sshprog = '"""+sshprog+"""'
            cmd = 'cd """+sdir+""" && ls *'
            run_timeout( cmd, timeout=10,
                         machine='"""+sshmach+"""', sshexe=sshprog )
            """ )

        x,out = util.runcmd( localpy+' cmd5.py' )
        #print3( out )

        assert len( util.greplines( 'file.txt', out ) ) == 1
        assert len( util.greplines( 'file2.txt', out ) ) == 1
        assert len( util.greplines( 'a b.txt', out ) ) == 1


#######################################################################

# magic: convert the use of this to get_process_list from trigtestutils.py

def processes():
    """
    Return a list of all processes on the current machine, where each line
    contains

        user pid ppid
    """
    plat = sys.platform.lower()
    if plat.startswith( 'darwin' ):
        cmd = 'ps -o user,pid,ppid'
    elif plat.startswith( 'sunos' ):
        cmd = '/usr/bin/ps -o user,pid,ppid'
    else:
        cmd = 'ps -o user,pid,ppid'
    cmd += ' -e'

    x,out = util.runcmd( cmd )

    # strip off first non-empty line (the header)
    out = out.strip() + os.linesep
    i = 0
    while i < len(out):
        if out[i:].startswith( os.linesep ):
            out = out[i:].lstrip()
            break
        i += 1

    out = out.strip()
    if out:
        out += os.linesep

    return out


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
