#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import basename, join as pjoin, abspath
import re
import time
import glob
import tempfile
import shutil
import json

import vvtestutils as vtu
import testutils as util

import libvvtest.testcase as testcase
import libvvtest.pathid as pathid
import libvvtest.listwriter as listwriter
from libvvtest.location import Locator

vvtroot = pathid.VVTEST_ROOT_FILENAME


class unit_tests( vtu.vvtestTestCase ):

    def test_writing_testlist_results_file(self):
        ""
        util.writefile( 'adir/sdir/atest.vvt', 'pass\n' )
        util.writefile( pjoin('adir',vvtroot), 'ROOTPATH=adir\n' )

        tlist = vtu.scan_to_make_TestList( 'adir' )

        perm = vtu.make_fake_PermissionSetter()
        lw = listwriter.ListWriter( tlist, Locator(os.getcwd()), perm )
        rtinfo = { 'rundir':abspath('tdir'), 'platform':'Xbox' }
        lw.initialize( rtinfo, 'odir' )

        lw.writeList( tlist )
        fL = util.grepfiles( 'adir/sdir/atest.vvt', 'odir/vvtresults.*' )
        assert len(fL) == 1

        # magic: add rundir to listwriter file header


class integration_tests( vtu.vvtestTestCase ):

    def test_saving_results_when_pathid_root_cannot_be_determined(self):
        ""
        # use /tmp dir to avoid case where .git repository is in current dir path
        tmpd = tempfile.mkdtemp('','vvt_tmpdir_')
        try:
            util.writefile( tmpd+"/one/cat.vvt", "pass\n" )
            util.writefile( tmpd+"/one/dog.vvt", "pass\n" )
            util.writefile( tmpd+"/two/circle.vvt", "pass\n" )

            vrun = vtu.runvvtest( tmpd, '--save-results' )
            vrun.assertCounts( total=3, npass=3 )

            resultsfname = util.globfile('vvtresults.*')
            _,testinfo = vtu.read_results_file( resultsfname )
            self.assertEqual( len(testinfo), 3 )
            for testD in testinfo:
                self.assertTrue( testD['pathid'] is None )

        finally:
            shutil.rmtree( tmpd )

    def test_timings_are_saved_in_results_file(self):
        ""
        util.writefile( "tests/one/cat.vvt", """
            import time
            time.sleep(1)
            """ )
        util.writefile( "tests/one/dog.vvt", """
            import time
            time.sleep(2)
            """ )
        util.writefile( "tests/two/circle.vvt", """
            import time
            time.sleep(3)
            """ )

        for batch in [False,True]:

            vtu.remove_results()

            # this also tests that the results directory will be created if necessary
            resdir = 'batch' if batch else 'direct'
            vrun = vtu.runvvtest( '--save-results='+resdir+' tests', batch=batch )
            vrun.assertCounts( total=3, npass=3 )

            fn = util.globfile( resdir+'/vvtresults.*' )
            fileinfo,testinfo = vtu.read_results_file( fn )

            assert fileinfo['duration'] >= 3

            self.assertEqual( len(testinfo), 3 )
            self.assertEqual( list( testinfo[0]['testid'] ), ['one/cat.vvt', 'cat'] )
            assert testinfo[0]['runtime'] >= 1
            self.assertEqual( list( testinfo[1]['testid'] ), ['one/dog.vvt', 'dog'] )
            assert testinfo[1]['runtime'] >= 2
            self.assertEqual( list( testinfo[2]['testid'] ), ['two/circle.vvt', 'circle'] )
            assert testinfo[2]['runtime'] >= 3

    def test_save_results_on_parameterize_analyze_tests(self):
        ""
        util.writefile( "seat.vvt", """
            #VVT: parameterize : direction = front rear
            #VVT: parameterize : side = left right
            #VVT: analyze: --anything
            """ )

        vrun = vtu.runvvtest( '--save-results' )
        vrun.assertCounts( total=5, npass=5 )

        _,tL = vtu.read_results_file( util.globfile('vvtresults.*') )

        self.assertEqual( len(tL), 5 )
        self.assertEqual( list( tL[0]['testid'] ), ['seat.vvt', 'seat'] )
        self.assertEqual( list( tL[1]['testid'] ), ['seat.vvt', 'seat', 'direction=front', 'side=left'] )
        self.assertEqual( list( tL[2]['testid'] ), ['seat.vvt', 'seat', 'direction=front', 'side=right'] )
        self.assertEqual( list( tL[3]['testid'] ), ['seat.vvt', 'seat', 'direction=rear', 'side=left'] )
        self.assertEqual( list( tL[4]['testid'] ), ['seat.vvt', 'seat', 'direction=rear', 'side=right'] )

    def test_a_subsequent_save_results_will_replicate_attributes(self):
        ""
        util.writefile( "cat.vvt", '' )
        util.writefile( 'sub/junk.txt', '' )

        vrun = vtu.runvvtest( '--save-results' )
        vrun.assertCounts( total=1, npass=1 )

        fn1 = util.globfile('vvtresults.*')
        f1info,_ = vtu.read_results_file( fn1 )
        time.sleep(1)

        vtu.runvvtest( '-i --save-results=sub' )
        fn2 = util.globfile('sub/vvtresults.*')
        f2info,_ = vtu.read_results_file( fn2 )

        self.assertEqual( fn1, basename(fn2) )
        self.assertEqual( sorted(f1info.keys()), sorted(f2info.keys()) )
        self.assertEqual( f1info, f2info )

    def test_nothing_to_run_produces_a_complete_results_file(self):
        ""
        util.writefile( 'sub/foo.txt', '' )
        util.writefile( 'tests/junk.txt', '' )

        vrun = vtu.runvvtest( '--save-results' )
        vrun.assertCounts( total=0 )

        fn1 = util.globfile('vvtresults.*')
        finfo,_ = vtu.read_results_file( fn1 )
        assert finfo['starttime'] > 0 and finfo['endtime'] > 0
        assert finfo['returncode'] == 0

        # running this currently does not replicate the start & finish dates
        # because a testlist results file is never written to contain them
        vrun = vtu.runvvtest( '-i --save-results=sub' )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
