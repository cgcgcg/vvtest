#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import re

import vvtestutils as vtu
import testutils as util
from testutils import print3

from libvvtest.errors import TestSpecError

from libvvtest.parseutil import evaluate_platform_expr
from libvvtest.runconfig import RuntimeConfig
from libvvtest.testcase import TestCase
import libvvtest.testlistio as tio
from libvvtest.tcfactory import TestCaseFactory


class suite( vtu.vvtestTestCase ):

    def test_evaluate_platform_expr_utility(self):
        ""
        assert evaluate_platform_expr( 'foo', 'foo or bar' )

        assert not evaluate_platform_expr( 'baz', 'foo or bar' )

        self.assertRaises( Exception,
                    evaluate_platform_expr, 'foo', 'foo or b$ar' )

        assert evaluate_platform_expr( 'foo-bar', 'foo-*' )
        assert not evaluate_platform_expr( 'foobar', 'foo-*' )

        assert evaluate_platform_expr( 'Foo', 'foo' )
        assert evaluate_platform_expr( 'Foo', 'fo*' )
        assert evaluate_platform_expr( 'foo', 'Foo' )
        assert evaluate_platform_expr( 'foo', 'Fo*' )
        assert evaluate_platform_expr( 'Pooky', '*OKY' )

    def test_build_option_specifications(self):
        ""
        util.writefile( 'btest.vvt', """
            #VVT: link (options="foo or b^r") : file.txt
            """ )
        util.writefile( 'ctest.vvt', """
            #VVT: link (options="foo or b$r") : file.txt
            """ )
        util.writefile( 'dtest.vvt', """
            #VVT: timeout (options="foo or bar-*") : 1234
            """ )
        time.sleep(1)

        self.assertEqual( get_link_files_from_test( 'btest.vvt', [] ), [] )
        self.assertEqual( get_link_files_from_test( 'btest.vvt', ['foo'] ),
                          [('file.txt',None)] )
        self.assertEqual( get_link_files_from_test( 'btest.vvt', ['bar'] ), [] )
        self.assertEqual( get_link_files_from_test( 'btest.vvt', ['spot','b^r'] ),
                          [('file.txt',None)] )

        self.assertRaises( TestSpecError,
                           vtu.parse_single_test_file, 'ctest.vvt' )

        tspec = vtu.parse_single_test_file( 'dtest.vvt', optionlist=['baz'] )
        assert tspec.getTimeout() is None
        tspec = vtu.parse_single_test_file( 'dtest.vvt', optionlist=['bar-baz'] )
        assert tspec.getTimeout() == 1234

    def test_parameterize_analyze_combinations(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np = 1 4
            #VVT: analyze : --analyze
            """ )

        tL = create_tests( 'atest.vvt' )
        assert len(tL) == 3
        assert tL[0].isAnalyze()
        assert tL[0].getAnalyzeScript()
        assert not tL[1].isAnalyze()
        assert not tL[2].isAnalyze()

        util.writefile( 'atest.vvt', """
            #VVT: parameterize (platforms="SunOS") : np = 1 2
            #VVT: parameterize (platforms="Linux or tbird") : np = 1 2 4
            """ )

        tL = create_tests( 'atest.vvt', 'SunOS' )
        assert len(tL) == 2
        tL = create_tests( 'atest.vvt', 'Linux' )
        assert len(tL) == 3
        tL = create_tests( 'atest.vvt', 'tbird' )
        assert len(tL) == 3

    def test_file_globbing_and_source_file_specification(self):
        ""
        util.writefile( 'globfile1.txt', "a file" )
        util.writefile( 'globfile2.txt', "a second file" )
        util.writefile( 'link_glob.txt', "a file for linking" )
        util.writefile( 'link2_glob.txt', "another file for linking" )
        util.writefile( 'conditional_glob.txt', "a file for linking" )
        util.writefile( 'notme_glob.txt', "some other file" )

        util.writefile( 'ok51.vvt', """
            #VVT: parameterize : np = 1
            #VVT: copy : glob*.txt
            #VVT: link : link*_${NAME}.txt
            #VVT: link (parameters="np=1") : conditional*_glob.txt
            #VVT: link (parameters="np=4") : notme*_glob.txt
            </rtest>""" )

        tL = create_tests( 'ok51.vvt' )
        assert len(tL) == 1
        self.assertEqual( sorted( tL[0].getCopyFiles() ), [('glob*.txt',None)] )
        self.assertEqual( sorted( tL[0].getLinkFiles() ),
            [ ('conditional*_glob.txt',None), ('link*_ok51.txt',None), ('ok51.vvt',None) ] )

        util.writefile( 'baseline_glob.txt', "some other file" )

        util.writefile( 'srcfiles.vvt', """
            #VVT: parameterize : np = 1
            #VVT: copy : glob*.txt
            #VVT: copy : link_glob.txt
            #VVT: link : globfile2.txt
            #VVT: baseline : baseline_glob.txt, baseline_glob.base_txt
            #VVT: sources : notme*_glob.txt cond*_glob.txt
            </rtest>""" )

        tL = create_tests( 'srcfiles.vvt' )
        assert len(tL) == 1
        self.assertEqual( sorted(tL[0].getSourceFiles()),
                ['baseline_glob.base_txt', 'cond*_glob.txt',
                 'glob*.txt', 'globfile2.txt', 'link_glob.txt',
                 'notme*_glob.txt', 'srcfiles.vvt'] )

        # sources does not take a parameters attribute
        util.writefile( 'bad31.vvt', """
            #VVT: parameterize : np = 1
            #VVT: sources (parameters="np=1") : glob*.txt
            """ )
        self.assertRaises( TestSpecError, create_tests, 'bad31.vvt' )


class reparsing( vtu.vvtestTestCase ):

    def test_refreshing_a_TestSpec_object(self):
        ""
        # parameter changes in a reparse are not processed

        util.writefile( 'atest.vvt', """
            pass
            """ )
        tL = create_tests( 'atest.vvt' )
        assert len(tL) == 1
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np = 1
            """ )

        newspec = reparse_test( tL[0] )
        self.assertEqual( newspec.getParameters(), {} )

        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np = 1
            """ )

        tL = create_tests( 'atest.vvt' )
        assert len(tL) == 1
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np = 4
            """ )

        newspec = reparse_test( tL[0] )
        self.assertEqual( newspec.getParameters(), {'np':'1'} )

        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np = 1 4
            """ )

        tL = create_tests( 'atest.vvt' )
        assert len(tL) == 2
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np = 1 4
            #VVT: parameterize : N = 1 4
            """ )

        for t in tL:
            newspec = reparse_test( t )
            assert 'np' in newspec.getParameters()
            assert 'N' not in newspec.getParameters()

        # test name changes in a reparse are not processed

        util.writefile( 'atest.vvt', """
            #VVT: testname = atest
            #VVT: parameterize : np = 1 4
            """ )

        tL = create_tests( 'atest.vvt' )
        assert len(tL) == 2
        util.writefile( 'atest.vvt', """
            #VVT: testname = atest2
            #VVVT: parameterize : np = 1 4
            """ )

        for t in tL:
            reparse_test( t )
            self.assertEqual( t.getName(), 'atest' )

        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np = 1 4
            """ )

        tL = create_tests( 'atest.vvt' )
        assert len(tL) == 2
        util.writefile( 'atest.vvt', """
            #VVT: parameterize : np = 1 4
            #VVT: keywords (mistake) : foo bar
            """ )

        for t in tL:
            self.assertRaises( TestSpecError, reparse_test, t )

    def test_reparsing_an_analyze_test(self):
        ""
        util.writefile( 'btest.vvt', """
            #VVT: parameterize : size = tiny big
            #VVT: analyze : -a
            """ )

        tcase = parse_create_analyze_test( 'btest.vvt' )
        sid = tio.test_to_string( tcase )
        tcase2 = reparse_test_string( sid )
        assert tcase2.getSpec().isAnalyze()
        pset = tcase2.getSpec().getParameterSet().getParameters()
        assert len( pset ) == 1
        assert pset[ ('size',) ] == [ ['tiny'], ['big'] ]

    def test_transfer_of_hasdependent_mark_through_string_write_read(self):
        ""
        tcase = vtu.make_fake_TestCase()
        tcase.setHasDependent()

        sid = tio.test_to_string( tcase )
        tcase2 = tio.string_to_test( sid, TestCaseFactory() )
        assert not tcase2.hasDependent()

        sid = tio.test_to_string( tcase, extended=True )
        tcase3 = tio.string_to_test( sid, TestCaseFactory() )
        assert tcase3.hasDependent()

    def test_transfer_dep_dirs_through_string_write_read(self):
        ""
        tcase = vtu.make_fake_TestCase()
        tcase.addDepDirectory( 'A*', 'foo/Atest' )
        tcase.addDepDirectory( 'B*', 'bar/Btest' )

        sid = tio.test_to_string( tcase, extended=True )
        tcase2 = tio.string_to_test( sid, TestCaseFactory() )

        matchL = tcase2.getDepDirectories()
        assert len( matchL ) == 2
        pat,xdir = matchL[0]
        if pat == 'A*':
            assert xdir == 'foo/Atest'
            pat,xdir = matchL[1]
            assert pat == 'B*' and xdir == 'bar/Btest'
        else:
            assert pat == 'B*' and xdir == 'bar/Btest'
            pat,xdir = matchL[1]
            assert pat == 'A*' and xdir == 'foo/Atest'


def reparse_test_string( stringid ):
    ""
    tcase = tio.string_to_test( stringid, TestCaseFactory() )

    vtu.creator().reparse( tcase.getSpec() )

    return tcase


def parse_create_analyze_test( filename ):
    ""
    tL = vtu.creator().fromFile( filename )

    analyzeL = list( filter( lambda ts: ts.isAnalyze(), tL ) )
    assert len( analyzeL ) == 1

    return TestCase( analyzeL[0] )


#####################################################################

def create_tests( relpath, platname='dummy', optlist=[] ):
    ""
    creator = vtu.creator( {}, platname, optlist )
    tL = creator.fromFile( relpath )
    sortL = [ (ts.getDisplayString(),ts) for ts in tL ]
    sortL.sort()
    tL = [ T[1] for T in sortL ]
    return tL


def reparse_test( testobj ):
    """
    writes the given test to a file, reads it back in as a new TestSpec
    object, followed by a reparse
    """
    tw = tio.TestListWriter( 'tmplist' )
    tw.start()
    tw.append( TestCase( testobj ) )
    tw.finish()

    tr = tio.TestListReader( TestCaseFactory(), 'tmplist' )
    tr.read()
    tests = list( tr.getTests().values() )
    assert len( tests ) == 1

    newobj = tests[0].getSpec()

    vtu.creator().reparse( newobj )

    return newobj


def get_link_files_from_test( filename, options ):
    ""
    rtcfg = RuntimeConfig()

    if options:
        rtcfg.setOptionList( options )
    tL = create_tests( filename, optlist=options )
    assert len(tL) == 1
    lnL = tL[0].getLinkFileList()
    return sorted(lnL)


#####################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
