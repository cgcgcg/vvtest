#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

import vvtestutils as vtu
import testutils as util
from testutils import print3

from libvvtest.ScriptReader import ScriptReader
from libvvtest.errors import TestSpecError
import libvvtest.parsevvt as parsevvt


class ScriptReader_file_reads( vtu.vvtestTestCase ):

    def test_parse_file_with_no_directives(self):
        ""
        util.writefile( 'script.vvt', """
            pass
            """ )

        rdr = ScriptReader( 'script.vvt' )

        assert len( rdr.getSpecList() ) == 0

    def test_parse_file_with_keyword_value(self):
        ""
        util.writefile( 'script.vvt', """
            #VVT: keyname = value1 value2
            pass
            """ )

        rdr = ScriptReader( 'script.vvt' )

        assert_speclist( rdr.getSpecList(),
                         ('keyname', 'value1 value2' ) )

    def test_directives_can_have_spaces_before_and_after_VVT(self):
        ""
        util.writefile( 'script.vvt', """
            # VVT: keyname1 = value1
            #  VVT: keyname2 = value2
            #\tVVT: keyname3 = value3
            #VVT : keyname4 = value4
            # VVT  : keyname5 = value5
            #VVT \t: keyname6 = value6
            pass
            """ )

        rdr = ScriptReader( 'script.vvt' )

        assert_speclist( rdr.getSpecList(),
                         ('keyname1', 'value1' ),
                         ('keyname2', 'value2' ),
                         ('keyname3', 'value3' ),
                         ('keyname4', 'value4' ),
                         ('keyname5', 'value5' ),
                         ('keyname6', 'value6' ) )

    def test_solitary_strings_before_directives_are_ignored(self):
        ""
        util.writefile( 'script00.vvt', """\
            "My cool file"
            #VVT: keyname : value
            """ )
        util.writefile( 'script01.vvt', """

            "My cool file"

            #VVT: keyname : value
            """ )
        util.writefile( 'script02.vvt', """\
            'My cool file'
            #VVT: keyname : value
            """ )
        util.writefile( 'script03.vvt', """

            'My cool file'

            #VVT: keyname : value
            """ )
        util.writescript( 'script04.vvt', """
            #!/usr/bin/env python
            'My cool file'
            #VVT: keyname : value
            """ )
        util.writefile( 'script05.vvt', '''

            """My cool file"""

            #VVT: keyname : value
            ''' )
        util.writefile( 'script06.vvt', """
            '''My cool file'''

            #VVT: keyname : value
            """ )
        util.writefile( 'script07.vvt', '''

            """
            My cool file.
            This is line two.
            """

            #VVT: keyname : value
            ''' )
        util.writefile( 'script08.vvt', """
            '''
            My cool file.
            This is line two.
            '''

            #VVT: keyname : value
            """ )
        util.writefile( 'script09.vvt', '''
            """
            My cool file.
            This is line two.
            """
            #VVT: keyname : value
            ''' )
        util.writefile( 'script10.vvt', '''
            """My cool file.
            This is line two."""

            #VVT: keyname : value
            ''' )
        util.writefile( 'script11.vvt', '''
            """My cool file.
            This is line two."""
            #VVT: keyname : value
            ''' )

        fnL = glob.glob( 'script*.vvt' )
        fnL.sort()
        for fn in fnL:
            print3( fn )
            rdr = ScriptReader( fn )
            assert_speclist( rdr.getSpecList(), ('keyname', 'value') )

    def test_parse_file_with_attributes(self):
        ""
        util.writefile( 'script.vvt', """
            #VVT: key1 (foo) = val1
            #VVT: key2 (foo=bar) = val2
            #VVT: key3 ( foo=bar ) = val3
            #VVT: key4 ( foo = bar ) = val4
            #VVT: key5 ( foo = ) = val5
            pass
            """ )

        rdr = ScriptReader( 'script.vvt' )

        for spec in rdr.getSpecList():
            if spec.keyword == 'key1':
                assert spec.attrs == {'foo':''}
                assert spec.value.strip() == 'val1'
            elif spec.keyword == 'key2':
                assert spec.attrs == {'foo':'bar'}
                assert spec.value.strip() == 'val2'
            elif spec.keyword == 'key3':
                assert spec.attrs == {'foo':'bar'}
                assert spec.value.strip() == 'val3'
            elif spec.keyword == 'key4':
                assert spec.attrs == {'foo':'bar'}
                assert spec.value.strip() == 'val4'
            elif spec.keyword == 'key5':
                assert spec.attrs == {'foo':''}
                assert spec.value.strip() == 'val5'
            else:
                assert spec.keyword in ['key1','key2','key3','key4','key5']

    def test_attribute_errors(self):
        ""
        util.writefile( 'f1.vvt', """
            #VVT: key1 (=blah) = val1
            pass
            """ )
        util.writefile( 'f2.vvt', """
            #VVT: key1 (=) = val1
            pass
            """ )
        util.writefile( 'f3.vvt', """
            #VVT: key1 (foo=bar,=baz) = val1
            pass
            """ )
        util.writefile( 'f4.vvt', """
            #VVT: key1 (foo=bar,=) = val1
            pass
            """ )
        util.writefile( 'f5.vvt', """
            #VVT: key1 ( foo=bar, = ) = val1
            pass
            """ )
        util.writefile( 'f6.vvt', """
            #VVT: key1 ( foo=bar, =, jaz ) = val1
            pass
            """ )
        util.writefile( 'f7.vvt', """
            #VVT: key1 ( =, jaz ) = val1
            pass
            """ )

        fL = glob.glob( 'f*.vvt' )
        fL.sort()
        for fn in fL:
            self.assertRaises( TestSpecError, ScriptReader, fn )


class continuation_lines( vtu.vvtestTestCase ):

    def test_basic_continuation(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: name = value1
            #VVT::       value2
            pass
            """ )
        util.writefile( 'btest.vvt', """
            #VVT: nameA = value1
            #VVT::        value2
            #VVT: nameB = value3
            pass
            """ )
        util.writefile( 'ctest.vvt', """
            #VVT: nameA = value1
            #VVT: nameB = value2
            #VVT::        value3
            pass
            """ )
        util.writefile( 'dtest.vvt', """
            #VVT: name = value1
            #VVT::       value2
            #VVT::       value3
            pass
            """ )

        util.writefile( 'etest.vvt', """
            #VVT: nameA = value1
            #VVT:       : value2
            #VVT: nameB : value3
            #VVT ::       value4
            #VVT :      : value5
            pass
            """ )

        rdr = ScriptReader( 'atest.vvt' )
        specs = list( rdr.getSpecList() )
        assert len( specs ) == 1
        assert specs[0].keyword == 'name'
        assert specs[0].value.split() == ['value1','value2']

        rdr = ScriptReader( 'btest.vvt' )
        specs = list( rdr.getSpecList() )
        assert len( specs ) == 2
        assert specs[0].keyword == 'nameA'
        assert specs[0].value.split() == ['value1','value2']
        assert specs[1].keyword == 'nameB'
        assert specs[1].value.strip() == 'value3'

        rdr = ScriptReader( 'ctest.vvt' )
        specs = list( rdr.getSpecList() )
        assert len( specs ) == 2
        assert specs[0].keyword == 'nameA'
        assert specs[0].value.split() == ['value1']
        assert specs[1].keyword == 'nameB'
        assert specs[1].value.split() == ['value2','value3']

        rdr = ScriptReader( 'dtest.vvt' )
        specs = list( rdr.getSpecList() )
        assert len( specs ) == 1
        assert specs[0].keyword == 'name'
        assert specs[0].value.split() == ['value1','value2','value3']

        rdr = ScriptReader( 'etest.vvt' )
        specs = list( rdr.getSpecList() )
        assert len( specs ) == 2
        assert specs[0].keyword == 'nameA'
        assert specs[0].value.split() == ['value1','value2']
        assert specs[1].keyword == 'nameB'
        assert specs[1].value.split() == ['value3','value4','value5']

    def test_comments_are_ignored_but_blank_lines_break_continuation(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: name = value1

            #VVT::       value2
            pass
            """ )
        util.writefile( 'btest.vvt', """
            #VVT: name = value1
            #
            #VVT::       value2
            pass
            """ )
        util.writefile( 'ctest.vvt', """
            #VVT: name = value1
            #   any comment
            #VVT::       value2
            pass
            """ )

        try:
            ScriptReader( 'atest.vvt' )
        except TestSpecError:
            assert 'nothing to continue' in str( sys.exc_info()[1] )
            assert 'atest.vvt:4' in str( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

        for fname in ['btest.vvt','ctest.vvt']:
            rdr = ScriptReader( fname )
            specs = list( rdr.getSpecList() )
            assert len( specs ) == 1
            assert specs[0].keyword == 'name'
            assert specs[0].value.split() == ['value1','value2']


class ScriptReader_include_directives( vtu.vvtestTestCase ):

    def test_insert_file_into_directives(self):
        ""
        # the include directive has aliases
        for keyname in ['include','insert directive file']:

            util.writefile( 'script.vvt', """
                #VVT: """+keyname+""" : directive_file.txt
                pass
                """ )
            util.writefile( 'directive_file.txt', """
                #VVT: keyname = value
                """ )

            rdr = ScriptReader( 'script.vvt' )

            kvL = flatten_key_values( rdr.getSpecList() )
            self.assertEqual( kvL, [ ('keyname', 'value' ) ] )

    def test_insert_file_contained_in_parent_directory(self):
        ""
        os.mkdir( 'rundir' )

        util.writefile( 'subdir/script.vvt', """
            #VVT : perl : is old school
            #VVT: include : ../directive_file.txt
            # VVT: python : rocks
            pass
            """ )
        util.writefile( 'directive_file.txt', """
            #VVT: whatever key = whatever value
            #VVT: foo : bar

            """ )

        vvtfile = os.path.abspath( 'subdir/script.vvt' )

        os.chdir( 'rundir' )
        rdr = ScriptReader( vvtfile )

        kvL = flatten_key_values( rdr.getSpecList() )
        self.assertEqual( kvL, [ ('perl', 'is old school' ),
                                 ('whatever key', 'whatever value' ),
                                 ('foo', 'bar' ),
                                 ('python', 'rocks' ) ] )

    def test_insert_nested_files(self):
        ""
        os.mkdir( 'rundir' )

        util.writefile( 'subdir/script.vvt', """
            #VVT: include : ../directive_file.txt
            # VVT: python : rocks
            pass
            """ )
        util.writefile( 'directive_file.txt', """
            #VVT: foo : bar
            #VVT: include: subdir/moredirectives.txt
            """ )
        util.writefile( 'subdir/moredirectives.txt', """
            #VVT: planets : earth mars others
            """ )

        with util.change_directory( 'rundir' ):

            rdr = ScriptReader( '../subdir/script.vvt' )

            kvL = flatten_key_values( rdr.getSpecList() )
            self.assertEqual( kvL, [ ('foo', 'bar' ),
                                     ('planets', 'earth mars others' ),
                                     ('python', 'rocks' ) ] )

    def test_insert_abspath_file(self):
        ""
        util.writefile( 'subdir/directive_file.txt', """
            #VVT: perl : old
            """ )
        fname = os.path.abspath( 'subdir/directive_file.txt' )
        util.writefile( 'script.vvt', """
            #VVT: include : """+fname+"""
            #VVT: python : rocks
            pass
            """ )

        rdr = ScriptReader( 'script.vvt' )

        kvL = flatten_key_values( rdr.getSpecList() )
        self.assertEqual( kvL, [ ('perl', 'old' ),
                                 ('python', 'rocks' ) ] )

    def test_directive_iteration_by_name(self):
        ""
        util.writefile( 'misc.vvt', """
            #VVT: parameterize (autotype)   : np = 1 8
            #VVT: link                      : somefile.txt
            #VVT: depends on (result=pass)  : goodtest
            #VVT: baseline (platform=Linux) : --baseline
            """ )

        specL = parser_iteration( 'misc.vvt' )
        self.assertEqual( specL, [
                ('parameterize', {'autotype': ''}, 'np = 1 8'),
                ( 'link', None, 'somefile.txt'),
                ( 'depends on', {'result': 'pass'}, 'goodtest'),
                ( 'baseline', {'platform': 'Linux'}, '--baseline'),
            ] )

        specL = parser_iteration( 'misc.vvt', 'link' )
        self.assertEqual( specL, [
                ( 'link', None, 'somefile.txt'),
            ] )

        specL = parser_iteration( 'misc.vvt', 'baseline', 'link' )
        self.assertEqual( specL, [
                ( 'link', None, 'somefile.txt'),
                ( 'baseline', {'platform': 'Linux'}, '--baseline'),
            ] )

    def test_directive_iteration_with_nesting(self):
        ""
        util.writefile( 'param.vvt', """
            #VVT: include : incl_param.txt
            #VVT: link    : somefile.txt
            """ )
        util.writefile( 'incl_param.txt', """
            #VVT: parameterize : np = 1 8
            """ )

        specL = parser_iteration( 'param.vvt' )
        self.assertEqual( specL, [
                ( 'parameterize', None, 'np = 1 8'),
                ( 'link', None, 'somefile.txt'),
            ] )

        specL = parser_iteration( 'param.vvt', 'parameterize' )
        self.assertEqual( specL, [
                ( 'parameterize', None, 'np = 1 8'),
            ] )

    def test_directive_iteration_with_include_filtering_by_platform(self):
        ""
        util.writefile( 'tname.vvt', """
            #VVT: include (platform=foobar) : incl.txt
            #VVT: link : somefile.txt
            """ )
        util.writefile( 'incl.txt', """
            #VVT: parameterize : np = 1 8
            """ )

        specL = parser_iteration( 'tname.vvt', platname='foobar' )
        self.assertEqual( specL, [
                ( 'parameterize', None, 'np = 1 8'),
                ( 'link', None, 'somefile.txt'),
            ] )

        specL = parser_iteration( 'tname.vvt', platname='justsayno' )
        self.assertEqual( specL, [
                ( 'link', None, 'somefile.txt'),
            ] )

    def test_directive_iteration_with_include_filtering_by_option(self):
        ""
        util.writefile( 'tname.vvt', """
            #VVT: include (option=foobar) : incl.txt
            #VVT: link : somefile.txt
            """ )
        util.writefile( 'incl.txt', """
            #VVT: parameterize : np = 1 8
            """ )

        specL = parser_iteration( 'tname.vvt', optlist=['foobar'] )
        self.assertEqual( specL, [
                ( 'parameterize', None, 'np = 1 8'),
                ( 'link', None, 'somefile.txt'),
            ] )

        specL = parser_iteration( 'tname.vvt', optlist=['justsayno'] )
        self.assertEqual( specL, [
                ( 'link', None, 'somefile.txt'),
            ] )

        specL = parser_iteration( 'tname.vvt', optlist=[] )
        self.assertEqual( specL, [
                ( 'link', None, 'somefile.txt'),
            ] )

    def test_directive_iteration_with_include_filtering_by_testname(self):
        ""
        util.writefile( 'tname.vvt', """
            #VVT: include (testname=foobar) : incl.txt
            #VVT: link : somefile.txt
            """ )
        util.writefile( 'incl.txt', """
            #VVT: parameterize : np = 1 8
            """ )

        specL = parser_iteration( 'tname.vvt', testname='foobar' )
        self.assertEqual( specL, [
                ( 'parameterize', None, 'np = 1 8'),
                ( 'link', None, 'somefile.txt'),
            ] )

        specL = parser_iteration( 'tname.vvt', testname='justsayno' )
        self.assertEqual( specL, [
                ( 'link', None, 'somefile.txt'),
            ] )

        specL = parser_iteration( 'tname.vvt', testname=None )
        self.assertEqual( specL, [
                ( 'link', None, 'somefile.txt'),
            ] )

    def test_run_vvtest_on_a_file_with_an_insert_directive(self):
        ""
        util.writefile( 'subdir/directive_file.txt', """
            #VVT: parameterize : size = 1 2
            """ )
        util.writefile( 'explode.txt', """
            #VVT: parameterize : fuse = 1 2 4 8 16 32 64 128 256
            """ )
        util.writescript( 'script.vvt', """
            #!"""+sys.executable+"""
            #VVT: include : subdir/directive_file.txt
            #VVT: link (parameters="size=2") : foo
            #VVT: link (parameters="size=1") : bar
            import os
            import vvtest_util as vvt
            if vvt.size == '1':
                assert os.path.exists( 'bar' )
                assert not os.path.exists( 'foo' )
            elif vvt.size == '2':
                assert os.path.exists( 'foo' )
                assert not os.path.exists( 'bar' )
            else:
                assert False
            """ )
        util.writefile( 'two.vvt', """
            #VVT: insert directive file (testname=dummy) : explode.txt
            #VVT: include (testname=two) : subdir/directive_file.txt
            """ )

        util.writefile( 'foo', "foofile\n" )
        util.writefile( 'bar', "barfile\n" )

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=4, npass=4 )
        self.assertEqual( vrun.countTestLines( 'fuse' ), 0 )


class parsing_errors( vtu.vvtestTestCase ):

    def test_invalid_directive_in_an_inserted_file(self):
        ""
        util.writefile( 'insertme.txt', """
            # ignore this line
            #VVT: link (options="opt") oops : somefile
            """ )
        util.writefile( 'script.vvt', """
            #VVT: include = insertme.txt
            pass
            """ )

        # make sure the insertme.txt file contains invalid syntax
        try:
            ScriptReader( 'insertme.txt' )
        except TestSpecError:
            assert 'insertme.txt:3' in str( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

        # then include the invalid file in a script
        try:
            ScriptReader( 'script.vvt' )
        except TestSpecError:
            assert 'insertme.txt:3' in str( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

    def test_inserted_file_does_not_exist(self):
        ""
        util.writefile( 'script.vvt', """
            #VVT: include = foobar.txt
            pass
            """ )

        try:
            ScriptReader( 'script.vvt' )
        except TestSpecError:
            assert 'script.vvt:2' in str( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

    def test_error_in_insert_directive_itself(self):
        ""
        util.writefile( 'script.vvt', """
            #VVT: include = 
            pass
            """ )

        try:
            ScriptReader( 'script.vvt' )
        except TestSpecError:
            assert 'script.vvt:2' in str( sys.exc_info()[1] )
        else:
            raise Exception( 'expected an exception' )

    def test_include_attributes_can_only_be_testname_platform_and_option(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: include (parameter="foo=bar") : incl.txt
            """ )
        util.writefile( 'btest.vvt', """
            #VVT: include (foo=bar) : incl.txt
            """ )
        util.writefile( 'incl.txt', """
            #VVT: keywords : baz
            """ )

        self.assertRaises( TestSpecError, parser_iteration, 'atest.vvt' )
        self.assertRaises( TestSpecError, parser_iteration, 'btest.vvt' )


def assert_speclist( speclist, *key_value_pairs ):
    ""
    assert len( speclist ) == len( key_value_pairs )
    for i,spec in enumerate(speclist):
        key,val = key_value_pairs[i]
        assert spec.keyword == key, 'keyword not equal: '+repr(spec.keyword)+' '+repr(key)
        assert spec.value == val, 'value not equal: '+repr(spec.value)+' '+repr(val)


def parser_iteration( filename, *keywords, **kwargs ):
    ""
    testname = kwargs.get( 'testname', 'fakename' )
    platname = kwargs.get( 'platname', None )
    optlist  = kwargs.get( 'optlist', [] )

    parser = parsevvt.ScriptTestParser( filename,
                                        platname=platname,
                                        optionlist=optlist )

    specL = []
    for spec in parser.itr_specs( testname, *keywords ):
        specL.append( (spec.keyword, spec.attrs, spec.value.strip()) )

    return specL


def flatten_key_values( speclist ):
    ""
    specL = []

    for spec in speclist:
        if spec.keyword == 'include':
            specL.extend( flatten_key_values( spec.value ) )
        else:
            specL.append( ( spec.keyword, spec.value ) )

    return specL


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
