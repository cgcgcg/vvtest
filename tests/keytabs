#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import dirname, abspath, expanduser
from os.path import join as pjoin
import time
import stat
import unittest

import trigtestutils as trigutil
import testutils as util
from testutils import print3

# the module being tested
import keytab

ktfile = pjoin( dirname(trigutil.testsrcdir), 'keytab.py' )


class catchall( unittest.TestCase ):

    def setUp(self):
        ""
        util.setup_test()

        make_fake_keytab_programs()

        os.environ['KEYTAB_USER_HOME_DIR'] = os.getcwd()

    def test_man_page(self):
        ""
        x,out = util.runcmd( ktfile+' -h' )
        assert 'QUICK START' in out

        x,out = util.runcmd( ktfile+' --help' )
        assert 'QUICK START' in out

    def test_getting_user_name(self):
        ""
        usr = keytab.get_user_name()
        print3( 'user', usr )
        assert usr and usr.strip() and usr == usr.strip()

    def test_list_of_keytab_file_locations(self):
        ""
        cwd = os.getcwd()
        homedir = expanduser( '~' )
        sshdir = expanduser( '~/.ssh' )

        with util.set_environ( KEYTAB_USER_HOME_DIR=None ):
            paths = keytab.get_keytab_search_paths()

        assert len( paths ) == 2
        for p in paths:
            d = os.path.dirname( p )
            assert self.is_home_dir(d) or \
                   self.is_home_ssh_dir(d)

        paths = keytab.get_keytab_search_paths()
        for p in paths:
            d = os.path.dirname( p )
            assert not self.is_home_dir(d) and \
                   not self.is_home_ssh_dir(d)
            assert d.startswith( cwd )

    def is_home_dir(self, path):
        ""
        homedir = expanduser( '~' )
        assert os.path.exists( homedir )

        if os.path.exists( path ) and os.path.samefile( homedir, path ):
            return True

        return False

    def is_home_ssh_dir(self, path):
        ""
        homedir = expanduser( '~' )
        assert os.path.exists( homedir )

        d,b = os.path.split( path )
        if os.path.exists( d ) and os.path.samefile( d, homedir ):
            return b == '.ssh'

        return False

    def test_first_keytab_file_location_is_in_ssh_directory(self):
        ""
        with util.set_environ( KEYTAB_USER_HOME_DIR=None ):
            paths = keytab.get_keytab_search_paths()

        assert paths[0].startswith( expanduser( '~/.ssh' ) )

    def test_find_keytab_returns_first_existing_path(self):
        ""
        util.writefile( 'fakekeytab', 'fake contents' )
        time.sleep(1)

        path = keytab.find_keytab( [ abspath('blah'), abspath('fakekeytab') ] )
        assert path == abspath('fakekeytab')

    def test_find_keytab_fails_if_keytab_not_found(self):
        ""
        self.assertRaises( Exception, keytab.find_keytab, [ '/does/not/exist' ] )

    def test_generate_keytab(self):
        ""
        keytab.generate_keytab()

        util.runcmd( ktfile+' generate', verbose=2 )

    def test_delete_keytab_file(self):
        ""
        # does not fail
        keytab.delete_keytab_file( '/foo/bar/baz.txt' )

        util.writefile( 'junkfile.txt', "contents" )
        time.sleep(1)

        keytab.delete_keytab_file( 'junkfile.txt' )
        time.sleep(1)
        assert not os.path.exists( 'junkfile.txt' )

    def test_command_line_init_ticket_should_only_echo_the_cache_file(self):
        ""
        util.writefile( '.ssh/krb5keytab', "fake tab" )
        time.sleep(1)

        util.run_redirect( ktfile+' init', 'init.log' )

        time.sleep(1)
        fname = util.readfile( 'init.log' ).strip()
        check_ticket_cache_and_remove_it( fname )

    def test_init_ticket_modifies_environment(self):
        ""
        util.writefile( '.ssh/krb5keytab', "fake tab" )
        time.sleep(1)

        with util.set_environ( KRB5CCNAME='fakevalue' ):

            return_fname = keytab.init_ticket()

            time.sleep(1)
            assert os.environ['PREVIOUS_KRB5CCNAME'] == 'fakevalue'

            fname = os.environ['KRB5CCNAME']
            assert fname == return_fname
            check_ticket_cache_and_remove_it( fname )

            # should still work if KRB5CCNAME is not defined in the environment

            os.environ.pop( 'KRB5CCNAME' )
            return_fname = keytab.init_ticket()

            fname = os.environ['KRB5CCNAME']
            assert fname == return_fname
            check_ticket_cache_and_remove_it( fname )

    def test_command_line_init_ticket_followed_by_destroy_ticket(self):
        ""
        util.writefile( '.ssh/krb5keytab', "fake tab" )
        time.sleep(1)

        util.run_redirect( ktfile+' init', 'init.log' )

        time.sleep(1)
        fname = util.readfile( 'init.log' ).strip()
        assert os.path.exists( dirname(fname) )

        util.writefile( fname, 'junk contents' )

        # have to set this manually to test (used in destroy_ticket() )
        with util.set_environ( KRB5CCNAME=fname ):
            util.runcmd( ktfile+' destroy', verbose=2 )

        assert not os.path.exists( fname )
        assert not os.path.exists( dirname(fname) )

    def test_programmatic_init_ticket_followed_by_destroy_ticket(self):
        ""
        util.writefile( '.ssh/krb5keytab', "fake tab" )
        time.sleep(1)

        with util.set_environ( KRB5CCNAME='fakevalue' ):

            fname = keytab.init_ticket()

            time.sleep(1)
            assert os.path.exists( dirname(fname) )
            assert os.environ['KRB5CCNAME'] == fname
            assert os.environ['PREVIOUS_KRB5CCNAME'] == 'fakevalue'

            util.writefile( fname, 'junk contents' )
            time.sleep(1)

            keytab.destroy_ticket()

            time.sleep(1)
            assert not os.path.exists( fname )
            assert not os.path.exists( dirname(fname) )
            assert 'PREVIOUS_KRB5CCNAME' not in os.environ
            assert os.environ['KRB5CCNAME'] == 'fakevalue'


######################################################################

def check_ticket_cache_and_remove_it( filename ):
    ""
    cachedir,bname = os.path.split( filename )
    assert bname == 'krb5ccache'
    assert os.path.isdir( cachedir )

    fmode = os.stat( cachedir ).st_mode
    assert ( fmode & stat.S_IRWXG ) == 0
    assert ( fmode & stat.S_IRWXO ) == 0

    # if this fails because there is a file in the directory, then that is
    # a real error - the cache file should not have been created in testing
    os.rmdir( cachedir )


def make_fake_keytab_programs():
    ""
    util.writescript( 'fakeprogs/ktutil', """
        #!"""+sys.executable+"""
        pass
        """ )
    util.writescript( 'fakeprogs/kinit', """
        #!"""+sys.executable+"""
        pass
        """ )
    util.writescript( 'fakeprogs/kdestroy', """
        #!"""+sys.executable+"""
        pass
        """ )

    if 'PATH' in os.environ:
        os.environ['PATH'] = abspath( 'fakeprogs' )+':'+os.environ['PATH']
    else:
        os.environ['PATH'] = abspath( 'fakeprogs' )


######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
