#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import re
import time
import signal
import textwrap

try:
    from StringIO import StringIO
except Exception:
    from io import StringIO

import vvtestutils as vtu
import testutils as util

import libvvtest.printinfo as printinfo
import libvvtest.batchutils as batchutils
import batch.batching as batching
from batch.namer import BatchFileNamer
from libvvtest.execlist import TestExecList
from libvvtest.testlist import TestList
import libvvtest.consolewriter as consolewriter
from libvvtest.tcfactory import TestCaseFactory


class InformationPrinter( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp( self, cleanout=False )

        self.tlist, self.xlist = make_fake_TestExecList()
        self.testdir = os.getcwd()

    def test_print_list_information(self):
        ""
        obj = printinfo.DirectInfoPrinter( self.testdir, self.xlist, self.tlist.numActive() )

        time.sleep(2)
        rtn,out,err = util.call_capture_output( obj.writeInfo )

        print ( out )

        lines = out.strip().split('\n')

        assert lines[0].startswith( 'Information:' )

        assert lines[1].strip().startswith( '* Total runtime: 0:00:0' )
        t = int( lines[1].strip()[-1] )
        assert t > 0 and t < 5

        assert lines[2].strip().startswith( '* 2 running' )

        for i in [3,4]:
            st = lines[i].strip()
            assert st.startswith( '* sdir/atest' )
            t = int( st.split( '0:00:0' )[1].split()[0] )
            assert t > 0 and t < 5

    def test_print_batch_information(self):
        ""
        batch = make_fake_Batcher( self.tlist )
        obj = printinfo.BatchInfoPrinter( self.testdir, self.tlist, batch )

        time.sleep(2)

        rtn,out,err = util.call_capture_output( obj.writeInfo )

        print ( out )

        lines = out.strip().split('\n')

        assert lines[0].startswith( 'Information:' )
        assert lines[1].strip().startswith( '* Total runtime: 0:00:0' )
        t = int( lines[1].strip()[-1] )
        assert t > 0 and t < 5
        assert lines[2].strip().startswith( '* 1 batch job' )

        st = lines[3].strip()
        assert st.startswith( '* qbat' )
        t = int( st.split( '0:00:0' )[1].split()[0] )
        assert t > 0 and t < 5

        assert lines[4].strip().startswith( '* sdir/atest' )
        assert lines[4].strip().startswith( '* sdir/atest' )

    def test_check_for_standard_input_then_print(self):
        ""
        def fake_input_check():
            return True

        obj = printinfo.DirectInfoPrinter( self.testdir, self.xlist, self.tlist.numActive() )
        obj.setInputChecker( fake_input_check )
        rtn,out,err = util.call_capture_output( obj.checkPrint )
        assert 'Information:' in out

        batch = make_fake_Batcher( self.tlist )
        obj = printinfo.BatchInfoPrinter( self.testdir, self.tlist, batch )
        obj.setInputChecker( fake_input_check )
        rtn,out,err = util.call_capture_output( obj.checkPrint )
        assert 'Information:' in out


class timing_output_tests( vtu.vvtestTestCase ):

    def test_timeout_and_runtime_test_list_output(self):
        ""
        tL = vtu.make_TestCase_list( timespec='timeout' )

        class MockTestList:
            def getTests(self): return tL

        conwr = consolewriter.ConsoleWriter()
        conwr.initialize( {'rundir':os.getcwd()} )
        rtn,out,err = util.call_capture_output( conwr.timings, MockTestList() )

        print ( out )

        gold = textwrap.dedent( """\
            TIMEOUT  RUNTIME TEST
                0:11          sdir/atest0.np=1
                0:12          sdir/atest0.np=2
                0:21          sdir/atest1.np=1
                0:22          sdir/atest1.np=2
            TIMEOUT SUM = 1:06""" )
        assert out.strip() == gold.strip()

    def test_execution_paths_for_timeout_info(self):
        ""
        util.writefile( 'atest.vvt', """
            pass
            """ )
        util.writefile( 'btest.vvt', """
            #VVT: timeout : 123
            """ )
        util.writefile( 'ctest.vvt', """
            pass
            """ )

        util.writefile( 'myconfig/vvtest_user_plugin.py', """
            def test_timeout( specs ):
                if specs['name'] == 'ctest':
                    return 1024
            """ )
        myconfig = abspath( 'myconfig' )
        time.sleep(1)

        vrun = vtu.runvvtest( '--config '+myconfig+' -i -t' )
        tdir = vrun.resultsDir()
        tL,tsum = vrun.getTimeoutInfoSection()

        plat = vtu.core_platform_name()

        def check_times( testL, timesum, subdir='TestResults.'+plat ):
            ""
            if subdir: subdir += '/'
            assert len( testL ) == 3
            assert testL[0][0] ==  123 and testL[0][2] == subdir+'btest'
            assert testL[1][0] == 1024 and testL[1][2] == subdir+'ctest'
            assert testL[2][0] == 3600 and testL[2][2] == subdir+'atest'
            assert timesum == 123+1024+3600

        check_times( tL, tsum )

        vrun = vtu.runvvtest( '--config '+myconfig )
        vrun.assertCounts( total=3, npass=3 )
        tdir = vrun.resultsDir()

        vrun = vtu.runvvtest( '--config '+myconfig+' -i --show-times' )
        tL,tsum = vrun.getTimeoutInfoSection()
        check_times( tL, tsum )

        vrun = vtu.runvvtest( '--config '+myconfig+' -i -t', chdir=tdir )
        tL,tsum = vrun.getTimeoutInfoSection()
        check_times( tL, tsum, subdir='' )

        vrun = vtu.runvvtest( '--config '+myconfig+' -T 0 -i -t', chdir=tdir )
        tL,tsum = vrun.getTimeoutInfoSection()
        assert tL[0][0] == 0 and tL[1][0] == 0 and tL[2][0] == 0

        vrun = vtu.runvvtest( '--config '+myconfig+' -T -1 -i -t', chdir=tdir )
        tL,tsum = vrun.getTimeoutInfoSection()
        assert tL[0][0] == 0 and tL[1][0] == 0 and tL[2][0] == 0

        vrun = vtu.runvvtest( '--config '+myconfig+' -T -1 -i -t' )
        tL,tsum = vrun.getTimeoutInfoSection()
        assert tL[0][0] == 0 and tL[1][0] == 0 and tL[2][0] == 0


def make_fake_TestExecList():
    ""
    tlist = TestList( TestCaseFactory() )
    tlist.countActive()

    txL = []

    for i in range(2):
        ts = vtu.make_fake_TestCase( 'running', name='atest'+str(i) )
        tlist.addTest( ts )

    xlist = TestExecList( tlist, vtu.FakeHandler() )

    # mark the tests as running by consuming the backlog
    for texec in xlist.consumeBacklog():
        texec.getTestCase().getStat().markStarted( time.time() )

    return tlist, xlist


def make_fake_Batcher( tlist ):
    """
    construct and return a Batcher object with one started job
    """
    namer = BatchFileNamer( os.getcwd() )
    jobhandler = batching.BatchJobHandler( 5, 5, 'clean', namer )

    batch = batchutils.Batcher( None,
                                tlist, None,
                                None, None,
                                None, None, jobhandler )

    bjob = jobhandler.createJob()
    bjob.setJobObject( tlist )

    jid = 42
    jobhandler.markJobStarted( bjob, jid )

    return batch


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
