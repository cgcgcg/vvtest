#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import shutil
import unittest

import trigtestutils as trigutil
import testutils as util
from testutils import print3

import webgen


# Many of these tests produce html files that can only be verified by
# visual inspection in a browser.  Do this by running each test one at a
# time and add the -i option, which launches a browser on the file.


class WebFileTestCase( trigutil.trigTestCase ):

    def setUp(self):
        ""
        trigutil.trigTestCase.setUp( self )
        self.webfile = None

    def setWebFile(self, filename):
        ""
        assert os.path.exists( filename )
        self.webfile = filename

    def tearDown(self):
        ""
        if '-i' in util.runoptions:
            import webbrowser
            if self.webfile:
                assert os.path.exists( self.webfile )
                webbrowser.open( self.webfile )
                raw_input( 'Press <Enter> to continue...' )
            elif os.path.exists( 'testpage.htm' ):
                webbrowser.open( 'testpage.htm' )
                raw_input( 'Press <Enter> to continue...' )


class free_function_tests( trigutil.trigTestCase ):

    def test_making_a_string_URL_safe(self):
        """
        https://stackoverflow.com/questions/695438/safe-characters-for-friendly-url

        The reserved characters are:

        ampersand ("&")
        dollar ("$")
        plus sign ("+")
        comma (",")
        forward slash ("/")
        colon (":")
        semi-colon (";")
        equals ("=")
        question mark ("?")
        'At' symbol ("@")
        pound ("#")

        The characters generally considered unsafe are:

        space (" ")
        less than and greater than ("<>")
        open and close brackets ("[]")
        open and close braces ("{}")
        pipe ("|")
        backslash ("\\")
        caret ("^")
        percent ("%")
        """
        assert webgen.url_safe_string( 'foobar' ) == 'foobar'
        assert webgen.url_safe_string( '&$+,/:;=?@#' ) == 'adpcsoieqth'
        assert webgen.url_safe_string( ' <>[]{}|\\^%' ) == '_lgbBrRvkun'


class head_and_body_tests( WebFileTestCase ):

    def test_create_hello_world_html_document(self):
        ""
        doc = webgen.HTMLDocument( 'testpage.htm' )
        doc.add( webgen.Head( 'Hello Title' ) )
        body = doc.add( webgen.Body() )
        body.add( webgen.Paragraph( 'Hello World.' ) )
        doc.close()

    def test_duplicate_title_error(self):
        ""
        doc = webgen.HTMLDocument( 'junk.htm' )
        head = doc.add( webgen.Head( 'Hello Title' ) )
        self.assertRaises( webgen.WebGenError, head.setTitle, 'Dup Title' )

    def test_body_background_color(self):
        ""
        doc = webgen.HTMLDocument( 'testpage.htm' )
        head = doc.add( webgen.Head() )
        head.setTitle( 'Hello Title' )
        body = doc.add( webgen.Body( background='bisque' ) )
        body.add( webgen.Paragraph( 'background=bisque' ) )
        doc.close()

    def test_unknown_body_attribute_error(self):
        ""
        doc = webgen.HTMLDocument( 'junk.htm' )
        head = doc.add( webgen.Head( 'Hello Title' ) )
        self.assertRaises( webgen.WebGenError,
                           doc.add, webgen.Body( unknownattr='foobar' ) )


class DocumentTestCase( WebFileTestCase ):

    def setUp(self):
        ""
        WebFileTestCase.setUp(self)

        self.doc = webgen.HTMLDocument( 'testpage.htm' )
        self.doc.add( webgen.Head() )  # magic: can the test name be put here for title??
        self.body = self.doc.add( webgen.Body() )

    def tearDown(self):
        ""
        self.doc.close()
        WebFileTestCase.tearDown(self)

    def test_heading_element(self):
        ""
        self.body.add( webgen.Heading( 'Centered heading', align='center' ) )
        self.body.add( webgen.Heading( 'Left alignment heading', align='left' ) )
        self.body.add( webgen.Heading( 'Right alignment heading', align='right' ) )
        self.body.add( webgen.Heading( 'Default alignment heading' ) )

    def test_create_table_with_border(self):
        ""
        self.body.add( webgen.Paragraph( 'default' ) )

        tab = self.body.add( webgen.Table() )
        tab.add( 'one', 'two' )
        tab.add( 1, 2 )
        tab = self.body.add( webgen.Table() )
        tab.add( 'uno' )

        self.body.add( webgen.Paragraph( 'border=surround' ) )

        tab = self.body.add( webgen.Table( border='surround' ) )
        tab.add( 'one', 'two' )
        tab.add( 1, 2 )
        tab = self.body.add( webgen.Table( border='surround' ) )
        tab.add( 'uno' )

        self.body.add( webgen.Paragraph( 'border=surround and spacing=5' ) )

        tab = self.body.add( webgen.Table( border='surround', spacing=5 ) )
        tab.add( 'one', 'two' )
        tab.add( 1, 2 )
        tab = self.body.add( webgen.Table( border='surround', spacing=5 ) )
        tab.add( 'uno' )

        self.body.add( webgen.Paragraph( 'border=internal' ) )

        tab = self.body.add( webgen.Table( border='internal' ) )
        tab.add( 'one', 'two' )
        tab.add( 1, 2 )
        tab = self.body.add( webgen.Table( border='internal' ) )
        tab.add( 'uno' )

        self.body.add( webgen.Paragraph( 'border=internal and spacing=5' ) )

        tab = self.body.add( webgen.Table( border='internal', spacing=5 ) )
        tab.add( 'one', 'two' )
        tab.add( 1, 2 )
        tab = self.body.add( webgen.Table( border='internal', spacing=5 ) )
        tab.add( 'uno' )

        self.body.add( webgen.Paragraph( 'border=all' ) )

        tab = self.body.add( webgen.Table( border='all' ) )
        tab.add( 'one', 'two' )
        tab.add( 1, 2 )
        tab = self.body.add( webgen.Table( border='all' ) )
        tab.add( 'uno' )

        self.body.add( webgen.Paragraph( 'border=all and spacing=5' ) )

        tab = self.body.add( webgen.Table( border='all', spacing=5 ) )
        tab.add( 'one', 'two' )
        tab.add( 1, 2 )
        tab = self.body.add( webgen.Table( border='all', spacing=5 ) )
        tab.add( 'uno' )

        self.body.add( webgen.Paragraph(
            'no surround, background=red, spacing=5, cell borders=all' ) )

        tab = self.body.add( webgen.Table( background='tomato', spacing=5 ) )
        tab.add( 'one', 'two', border='all' )
        row = tab.add( border='all' )
        row.add( 1, 2 )

    def test_create_table_with_cell_padding(self):
        ""
        self.body.add( webgen.Paragraph( 'default padding' ) )

        tab = self.body.add( webgen.Table( border='all' ) )
        tab.add( 'one', 'two', 'thr' )
        tab.add( 1, 2, 3 )
        tab.add( 'a', 'b', 'c' )

        self.body.add( webgen.Paragraph( 'padding=0' ) )

        tab = self.body.add( webgen.Table( border='all', padding=0 ) )
        tab.add( 'one', 'two', 'thr' )
        tab.add( 1, 2, 3 )
        tab.add( 'a', 'b', 'c' )

        self.body.add( webgen.Paragraph(
            'padding=5, 2nd row w/ color, last row right aligned' ) )

        tab = self.body.add( webgen.Table( border='all', padding=5 ) )
        tab.add( 'one', 'two', 'thr' )
        row = tab.add()
        row.add( 1, 2, 3, background='tomato' )
        row = tab.add()
        row.add( 'a', 'b', 'c', align='right' )

    def test_create_table_with_background_color_by_entry(self):
        ""
        self.body.add( webgen.Paragraph( 'some cells have color' ) )

        tab = self.body.add( webgen.Table() )
        row = tab.add( 'a' )
        row.add( 'b', background='lightblue' )
        row = tab.add()
        row.add( 10, background='tomato' )
        row.add( 0 )

        self.body.add( webgen.Paragraph(
            'some cell colors, border=all spacing=2' ) )

        tab = self.body.add( webgen.Table( border='all', spacing=2 ) )
        row = tab.add()
        row.add( 10, background='tomato' )
        row.add( 0, background='lightgreen' )
        tab.add( 'a', 'b' )

        self.body.add( webgen.Paragraph( 'blue background, top left ' + \
            'is red, top right and bottom is green' ) )

        tab = webgen.Table( border='all', spacing=3, background='blue' )
        self.body.add( tab )
        row = tab.add( background='tomato' )
        row.add( 10 )
        row.add( 0, background='lightgreen' )
        row = tab.add( 'a', background='lightgreen' )
        row.add( 'b' )

    def test_create_table_with_header(self):
        ""
        self.body.add( webgen.Paragraph(
            'first row is headers, second row has color, bottom right is empty' ) )

        tab = self.body.add( webgen.Table() )
        row = tab.add( 'these', 'are', 'header', 'entries', header=True )
        row = tab.add()
        row.add( 10, 'foo', 1.4, None, background='tomato' )

        self.body.add( webgen.Paragraph(
            'first row is headers with color, borders=all' ) )

        tab = self.body.add( webgen.Table( border='all' ) )
        row = tab.add( header=True )
        row.add( 'foo', 'bar', background='lightcyan' )
        row = tab.add()
        row.add( 3.144444, 2.188888 )

    def test_create_table_with_text_alignment(self):
        ""
        self.body.add( webgen.Paragraph(
            'alignment within cells, bottom center one is lavender' ) )

        tab = self.body.add( webgen.Table( border='all' ) )
        row = tab.add( 'aaaaaaa', 'bbbbbbb', 'ccccccc', 'ddddddd' )
        row = tab.add()
        row.add( 'lft', align='left' )
        row.add( 'ctr', align='center', background='lavender' )
        row.add( 'rgt', align='right' )
        row.add( 'none' )

    def test_create_table_with_page_alignment(self):
        ""
        self.body.add( webgen.Paragraph( 'align=left' ) )

        tab = self.body.add( webgen.Table( border='surround', align='left' ) )
        tab.add( 'left', 'left' )
        tab.add( 'left', 'left' )

        self.body.add( webgen.Paragraph( 'align=right' ) )

        tab = self.body.add( webgen.Table( border='surround', align='right' ) )
        tab.add( 'right', 'right' )
        tab.add( 'right', 'right' )

        self.body.add( webgen.Paragraph( 'align=center' ) )

        tab = self.body.add( webgen.Table( border='surround', align='center' ) )
        tab.add( 'center', 'center' )
        tab.add( 'center', 'center' )

        self.body.add( webgen.Paragraph( 'no align' ) )

        tab = self.body.add( webgen.Table( border='surround' ) )
        tab.add( 'default', 'default' )
        tab.add( 'default', 'default' )

    def test_create_table_with_rounded_borders(self):
        ""
        self.body.add( webgen.Paragraph( 'radius=10' ) )

        tab = self.body.add( webgen.Table( background='lightblue', radius=10 ) )
        tab.add( 'earth', 'moon' )
        tab.add( 'saturn', 'titan' )

        self.body.add( webgen.Paragraph( 'radius=10 and border=internal' ) )

        tab = self.body.add( webgen.Table( border='internal',
                                           background='lightblue',
                                           radius=10 ) )
        tab.add( 'earth', 'moon' )
        tab.add( 'saturn', 'titan' )

        self.body.add( webgen.Paragraph( 'radius=10 and border=surround' ) )

        tab = self.body.add( webgen.Table( border='surround',
                                           background='lightblue',
                                           radius=10 ) )
        tab.add( 'earth', 'moon' )
        tab.add( 'saturn', 'titan' )

        self.body.add( webgen.Paragraph( 'radius=5 border=all spacing=10' ) )

        tab = self.body.add( webgen.Table( border='all', spacing=10,
                                           background='lightblue',
                                           radius=5 ) )
        tab.add( 'earth', 'moon' )
        tab.add( 'saturn', 'titan' )

    def test_table_row_use_cases(self):
        ""
        self.body.add( webgen.Paragraph(
            '4 entries 3 colors: lightcyan, tomato, bisque, then lightcyan' ) )

        tab = self.body.add( webgen.Table( background='lightcyan' ) )
        row = tab.add( 1 )
        row.add( 'a', background='tomato' )
        ent = row.add( 3.14, background='bisque' )
        row.add( 'bg' )

    def test_table_entry_use_cases(self):
        ""
        self.body.add( webgen.Paragraph(
            'cat is paragraph element, dog is string' ) )

        tab = self.body.add( webgen.Table( border='all', radius=5 ) )
        row = tab.add()
        par0 = webgen.Paragraph( 'cat' )
        par1 = row.add( par0 )
        assert id(par0) == id(par1)
        row = tab.add( 'dog' )

        self.body.add( webgen.Paragraph(
            'object of last entry is returned, ' + \
            '"str" then "tag" should be on bottom right' ) )

        tab = self.body.add( webgen.Table( border='all', radius=5 ) )
        row = tab.add()
        par0 = webgen.Paragraph( 'cat' )
        par1 = row.add( 'dog', par0 )
        assert id(par0) == id(par1)
        row = tab.add()
        ent = row.add( webgen.Paragraph( 'par' ), 'str' )
        ent.add( webgen.Paragraph( 'tag' ) )

        self.body.add( webgen.Paragraph(
            'row.add() without object gives back an empty TableEntry' ) )

        tab = self.body.add( webgen.Table( border='all', radius=5 ) )
        row = tab.add()
        ent = row.add()
        ent.add( 'a string' )

    def test_make_hyperlink(self):
        ""
        lnk = webgen.make_hyperlink( 'https://foo.bar.com/', 'Go to foobar!' )
        self.body.add( webgen.Paragraph( 'Link is ' + lnk ) )
        self.body.add( webgen.Paragraph( 'Separate paragraph', lnk, 'argument.' ) )

    def test_make_image(self):
        ""
        shutil.copy( trigutil.testsrcdir+'/hello.png', 'hello.png' )

        img = webgen.make_image( 'hello.png' )
        self.body.add( webgen.Paragraph( 'single argument' ) )
        self.body.add( webgen.Paragraph( img ) )
        self.body.add( webgen.Paragraph(
            'Inline image '+img+' followed by more text.' ) )

        img = webgen.make_image( 'failure_adfauskldhjdf.png' )
        self.body.add( webgen.Paragraph( 'failure: ', img ) )

        img = webgen.make_image( 'hello.png', width=200, height=50 )
        self.body.add( webgen.Paragraph( 'width=200 height=50 ', img ) )

        img = webgen.make_image( 'hello.png', position='relative', left=-50 )
        self.body.add( webgen.Paragraph( img, 'position=relative left=-50' ) )

    def test_make_image_positioned_relative_to_browser_window(self):
        ""
        shutil.copy( trigutil.testsrcdir+'/hello.png', 'hello.png' )

        self.body.add( webgen.Paragraph(
            'four images, one near each browser window corner' ) )

        img = webgen.make_image( 'hello.png', position='fixed', left=50, top=100 )
        self.body.add( webgen.Paragraph( img ) )

        img = webgen.make_image( 'hello.png', position='fixed', right=50, top=100 )
        self.body.add( webgen.Paragraph( img ) )

        img = webgen.make_image( 'hello.png', position='fixed', left=50, bottom=100 )
        self.body.add( webgen.Paragraph( img ) )

        img = webgen.make_image( 'hello.png', position='fixed', right=50, bottom=100 )
        self.body.add( webgen.Paragraph( img ) )


if sys.version_info[0] > 2:
    raw_input = input


#######################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
