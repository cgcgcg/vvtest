#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import time
import glob
import tempfile
import shutil
import json

import vvtestutils as vtu
import testutils as util

import results_util as ru

import libvvtest.fmtresults as fmtresults
import libvvtest.testcase as testcase


class integration_tests( vtu.vvtestTestCase ):

    def test_saving_results_when_the_root_cannot_be_determined(self):
        ""
        # use /tmp dir to avoid accidental .git repository being in path
        tmpd = tempfile.mkdtemp('','vvt_tmpdir_')
        try:
            ru.write_tests_cat_dog_circle( tmpd )

            vrun = vtu.runvvtest( tmpd, '--save-results' )
            vrun.assertCounts( total=3, npass=3 )

            resultsfname = util.globfile('vvtresults.*')
            fileinfo,testinfo = ru.read_results_file( resultsfname )
            self.assertEqual( len(testinfo), 3 )
            for testD in testinfo:
                self.assertTrue( testD['pathid'] is None )

        finally:
            shutil.rmtree( tmpd )

    def test_timings_are_saved_in_results_file(self):
        ""
        ru.write_tests_cat_dog_circle()

        vrun = vtu.runvvtest( '--save-results' )
        vrun.assertCounts( total=3, npass=3 )
        tdir = vrun.resultsDir()

        ru.assert_cat_dog_circle_testresults_contents( util.globfile('vvtresults.*') )

    def test_save_results_with_tests_having_multiple_parameters(self):
        ""
        util.writefile( "cat.vvt", """
            #VVT: parameterize : direction = front rear
            #VVT: parameterize : side = left right
            """ )

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=4, npass=4 )

        resultsfname = ru.create_runtimes_and_results_file( vrun.resultsDir() )

        ru.assert_results_file_has_tests(
                resultsfname,
                ('cat.vvt','direction=front','side=left'),
                ('cat.vvt','direction=front','side=right'),
                ('cat.vvt','direction=rear','side=left'),
                ('cat.vvt','direction=rear','side=right') )

    def test_save_results_with_multiple_parameterize_and_an_analyze(self):
        ""
        util.writefile( "cat.vvt", """
            #VVT: parameterize: direction = front rear
            #VVT: parameterize: side = left right
            #VVT: analyze: -a
            pass
            """ )

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=5, npass=5 )

        resultsfname = ru.create_runtimes_and_results_file( vrun.resultsDir() )

        ru.assert_results_file_has_tests(
                resultsfname,
                ('cat.vvt',),
                ('cat.vvt','direction=front','side=left'),
                ('cat.vvt','direction=front','side=right'),
                ('cat.vvt','direction=rear','side=left'),
                ('cat.vvt','direction=rear','side=right') )

    def test_save_results_with_zipped_parameterize_and_an_analyze(self):
        ""
        util.writefile( "cat.vvt", """
            #VVT: parameterize : direction,side = front,left rear,right
            #VVT: analyze : --analyze
            pass
            """ )

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=3, npass=3 )

        resultsfname = ru.create_runtimes_and_results_file( vrun.resultsDir() )

        ru.assert_results_file_has_tests(
                resultsfname,
                ('cat.vvt',),
                ('cat.vvt', 'direction=front','side=left'),
                ('cat.vvt', 'direction=rear', 'side=right') )


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
