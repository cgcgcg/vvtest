#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import time
import glob
import tempfile
import shutil
import json

import vvtestutils as vtu
import testutils as util

import libvvtest.testcase as testcase


class integration_tests( vtu.vvtestTestCase ):

    def test_saving_results_when_the_root_cannot_be_determined(self):
        ""
        # use /tmp dir to avoid accidental .git repository being in path
        tmpd = tempfile.mkdtemp('','vvt_tmpdir_')
        try:
            write_tests_cat_dog_circle( tmpd )

            vrun = vtu.runvvtest( tmpd, '--save-results' )
            vrun.assertCounts( total=3, npass=3 )

            resultsfname = util.globfile('vvtresults.*')
            fileinfo,testinfo = vtu.read_results_file( resultsfname )
            self.assertEqual( len(testinfo), 3 )
            for testD in testinfo:
                self.assertTrue( testD['pathid'] is None )

        finally:
            shutil.rmtree( tmpd )

    def test_timings_are_saved_in_results_file(self):
        ""
        write_tests_cat_dog_circle()

        vrun = vtu.runvvtest( '--save-results' )
        vrun.assertCounts( total=3, npass=3 )
        tdir = vrun.resultsDir()

        assert_cat_dog_circle_testresults_contents( util.globfile('vvtresults.*') )

    def test_save_results_with_tests_having_multiple_parameters(self):
        ""
        util.writefile( "cat.vvt", """
            #VVT: parameterize : direction = front rear
            #VVT: parameterize : side = left right
            """ )

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=4, npass=4 )

        resultsfname = create_runtimes_and_results_file( vrun.resultsDir() )

        assert_results_file_has_tests(
                resultsfname,
                ('cat.vvt','direction=front','side=left'),
                ('cat.vvt','direction=front','side=right'),
                ('cat.vvt','direction=rear','side=left'),
                ('cat.vvt','direction=rear','side=right') )

    def test_save_results_with_multiple_parameterize_and_an_analyze(self):
        ""
        util.writefile( "cat.vvt", """
            #VVT: parameterize: direction = front rear
            #VVT: parameterize: side = left right
            #VVT: analyze: -a
            pass
            """ )

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=5, npass=5 )

        resultsfname = create_runtimes_and_results_file( vrun.resultsDir() )

        assert_results_file_has_tests(
                resultsfname,
                ('cat.vvt',),
                ('cat.vvt','direction=front','side=left'),
                ('cat.vvt','direction=front','side=right'),
                ('cat.vvt','direction=rear','side=left'),
                ('cat.vvt','direction=rear','side=right') )

    def test_save_results_with_zipped_parameterize_and_an_analyze(self):
        ""
        util.writefile( "cat.vvt", """
            #VVT: parameterize : direction,side = front,left rear,right
            #VVT: analyze : --analyze
            pass
            """ )

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=3, npass=3 )

        resultsfname = create_runtimes_and_results_file( vrun.resultsDir() )

        assert_results_file_has_tests(
                resultsfname,
                ('cat.vvt',),
                ('cat.vvt', 'direction=front','side=left'),
                ('cat.vvt', 'direction=rear', 'side=right') )



def write_tests_cat_dog_circle( in_subdir=None ):
    ""
    cwd = os.getcwd()

    if in_subdir:
        if not os.path.exists( in_subdir ):
            os.mkdir( in_subdir )
            time.sleep(1)

        os.chdir( in_subdir )

    try:
        write_test_cat()
        write_test_dog()
        write_test_circle()

    finally:
        if in_subdir:
            os.chdir( cwd )

def write_test_cat( sleep_time=1 ):
    ""
    util.writefile( "one/cat.vvt", """
        import time
        time.sleep("""+str(sleep_time)+""")
        """ )

def write_test_dog( sleep_time=2 ):
    ""
    util.writefile( "one/dog.vvt", """
        import time
        time.sleep("""+str(sleep_time)+""")
        """ )

def write_test_circle():
    ""
    util.writefile( "two/circle.vvt", """
        import time
        time.sleep(3)
        """ )


def assert_cat_dog_circle_testresults_contents( resultsfname ):
    ""
    fileinfo,testinfo = vtu.read_results_file( resultsfname )

    assert len(testinfo) == 3
    assert list( testinfo[0]['testid'] ) == ['one/cat.vvt', 'cat']
    assert testinfo[0]['runtime'] >= 1
    assert list( testinfo[1]['testid'] ) == ['one/dog.vvt', 'dog']
    assert testinfo[1]['runtime'] >= 2
    assert list( testinfo[2]['testid'] ) == ['two/circle.vvt', 'circle']
    assert testinfo[2]['runtime'] >= 3


def create_runtimes_and_results_file( testresults_dir, testsrcdir=None ):
    """
    Save test results from the 'testresults_dir' to the TESTING_DIRECTORY
    and return the results filename.
    """
    vtu.runvvtest( '-i --save-results', chdir=testresults_dir )
    resultsfname = get_latest_results_filename()
    return resultsfname


def assert_results_file_has_tests( filename, *tests, **kwargs ):
    ""
    fileinfo,testinfo = vtu.read_results_file( filename )

    for i,tst in enumerate(tests):
        tD = testinfo[i]
        tid = list( tD['testid'] )
        tstL = list( tst )
        assert tid[0] == tstL[0]
        assert tid[2:] == tstL[1:], 'test params not equal: '+str(tid[2:])+' != '+str(tstL[1:])


def get_latest_results_filename():
    ""
    testingdir = os.environ['TESTING_DIRECTORY']
    if os.path.samefile( os.getcwd(), testingdir ):
        testingdir = ''
    else:
        testingdir += '/'

    fnL = []
    for fn in glob.glob( testingdir+'vvtresults.*' ):
        fnL.append( ( os.path.getmtime(fn), fn ) )

    fnL.sort()

    return fnL[-1][1]


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
