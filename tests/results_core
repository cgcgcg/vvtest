#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import join as pjoin
import time
from os.path import getsize as getfsize
import glob
import tempfile
import shutil

import vvtestutils as vtu
import testutils as util

import libvvtest.outpututils as outpututils
from libvvtest.outpututils import (
    make_date_stamp,
    pretty_time,
    colon_separated_time,
    file_read_with_limit,
    get_test_result_string,
)
from libvvtest.listwriter import ListWriter
import libvvtest.pathid as pathid
from libvvtest.testlist import TestList
from libvvtest.location import Locator
from libvvtest.teststatus import TestStatus, DIFF_EXIT_STATUS, SKIP_EXIT_STATUS

from testutils import windows
np = os.path.normpath  # for windows testing, use normpath when comparing paths
abspath = util.abspath  # this abspath prevents Windows issues

vvtroot = pathid.VVTEST_ROOT_FILENAME


class misc_tests( vtu.vvtestTestCase ):

    def test_make_date_stamp(self):
        ""
        tm0 = time.mktime( time.strptime( 'Sun Oct 11 13:20:58 2018' ) )
        tm1 = tm0 + 600

        s = make_date_stamp( tm0, None )
        self.assertEqual( s, '2018_10_11_13h_20m_58s' )

        s = make_date_stamp( tm0, None, "%Y-%m-%d_%H:%M:%S" )
        self.assertEqual( s, '2018-10-11_13:20:58' )

        s = make_date_stamp( tm0, 'foobar' )
        self.assertEqual( s, 'foobar' )

        s = make_date_stamp( tm0, tm1, "%Y-%m-%d_%H:%M:%S" )
        self.assertEqual( s, '2018-10-11_13:30:58' )

    def test_pretty_time(self):
        ""
        assert pretty_time( 0 ) == '1s'
        assert pretty_time( 1 ) == '1s'
        assert pretty_time( 5.2 ) == '5s'
        assert pretty_time( 67.3 ) == '1m 7s'
        assert pretty_time( 3*60*60 + 67.3 ) == '3h 1m 7s'

    def test_colon_separated_time(self):
        ""
        assert colon_separated_time( 0 ) == '0:00'
        assert colon_separated_time( 1 ) == '0:01'
        assert colon_separated_time( 5.2 ) == '0:05'
        assert colon_separated_time( 67.3 ) == '1:07'
        assert colon_separated_time( 3*60*60 + 67.3 ) == '3:01:07'
        assert colon_separated_time( 30*60*60 + 67.3 ) == '30:01:07'

    def test_reading_file_with_size_limit(self):
        ""
        util.writefile( 'afile.txt', """
            line one is number one
            line two is last one wins
            """ )

        buf = file_read_with_limit( 'afile.txt', 10 )
        assert len( buf.splitlines() ) > 2
        assert len( util.greplines( 'line one', buf ) ) == 1
        assert len( util.greplines( 'line two', buf ) ) == 1

    def test_reading_a_file_that_has_its_middle_taken_out(self):
        ""
        line = 'All work and no play makes Jack a dull boy.\n'
        with open( 'afile.txt', 'w' ) as fp:
            fp.write( 'The Overlook Hotel.\n' )
            fp.write( line * 10000 )
            fp.write( 'REDRUM!  REDRUM!\n' )

        assert getfsize( 'afile.txt' ) > 1*1024
        buf = file_read_with_limit( 'afile.txt', 1 )
        assert len( buf ) <= 1*1024
        assert len( buf.splitlines() ) > 10
        assert buf.lstrip().startswith( 'The Overlook Hotel' )
        assert buf.rstrip().endswith( 'REDRUM!  REDRUM!' )
        assert len( util.greplines(
                        'middle of this file has been removed', buf ) ) == 1

    def test_getting_result_string_for_a_test(self):
        ""
        tm = time.time()

        self.assertRaises( Exception, get_test_result_string, None )

        ts = TestStatus()
        self.assertEqual( get_test_result_string(ts), 'notrun' )

        ts = TestStatus(); ts.markSkipByPlatform()
        self.assertEqual( get_test_result_string(ts), 'skip' )

        ts = TestStatus(); ts.resetResults()
        self.assertEqual( get_test_result_string(ts), 'notrun' )

        ts = TestStatus(); ts.resetResults(); ts.markStarted(tm)
        self.assertEqual( get_test_result_string(ts), 'running' )

        ts = TestStatus(); ts.resetResults(); ts.markStarted(tm)
        ts.markDone(0)
        self.assertEqual( get_test_result_string(ts), 'pass' )

        ts = TestStatus(); ts.resetResults(); ts.markStarted(tm)
        ts.markDone(1)
        self.assertEqual( get_test_result_string(ts), 'fail' )

        ts = TestStatus(); ts.resetResults(); ts.markStarted(tm)
        ts.markDone( DIFF_EXIT_STATUS )
        self.assertEqual( get_test_result_string(ts), 'diff' )

        ts = TestStatus(); ts.resetResults(); ts.markStarted(tm)
        ts.markDone( SKIP_EXIT_STATUS )
        self.assertEqual( get_test_result_string(ts), 'runskip' )

        ts = TestStatus(); ts.resetResults(); ts.markStarted(tm)
        ts.markTimedOut()
        self.assertEqual( get_test_result_string(ts), 'timeout' )


class pathid_tests( vtu.vvtestTestCase ):

    def test_path_identification_by_repo(self):
        ""
        # shorten the function names
        func = pathid.get_path_list_by_git_or_svn_repo
        rp = os.path.realpath

        # these checks call get_path_list_by_git_or_svn_repo() directly just in
        # case a vvtest root marker file exists in a parent directory somehow
        for cm in ['.git','.svn']:

            if os.path.exists('top'):
                util.fault_tolerant_remove( 'top' )

            util.writefile( 'top/'+cm+'/config', '' )
            util.writefile( 'top/baz.vvt', '' )
            util.writefile( 'top/foo/bar.vvt', '' )
            util.writefile( 'top/foo/sub/bar.vvt', '' )
            self.assertEqual( func( rp('top/foo') ), ['foo'] )
            self.assertEqual( func( rp('top') ), [] )
            self.assertEqual( func( rp('top/foo/sub') ), ['foo','sub'] )

        # when the file is not in a repo, None should be returned
        idr = pathid.TestPathIdentification()
        tmpd = tempfile.mkdtemp('','vvt_tmpdir_')
        try:
            subd = pjoin(tmpd,'sub1','sub2')
            fn = pjoin(subd,'foo.vvt')
            util.writefile( fn, '' )
            self.assertTrue( idr.get_path_id(fn) is None )
            with util.change_directory( subd ):
                self.assertTrue( idr.get_path_id('foo.vvt') is None )
        finally:
            shutil.rmtree( tmpd )

        if not windows:
            # soft links are removed from the id path (by using os.path.realpath)
            idr = pathid.TestPathIdentification()
            tmpd = tempfile.mkdtemp('','vvt_tmpdir_')
            try:
                util.writefile( tmpd+'/top1/.git/config', '' )
                util.writefile( tmpd+'/top1/sub/foo.vvt', '' )
                util.writefile( tmpd+'/top2/.git/config', '' )
                util.writefile( tmpd+'/top2/here/bar.vvt', '' )
                os.symlink( '../top2/here', tmpd+'/top1/seeya' )

                fn = tmpd+'/top1/seeya/bar.vvt'
                self.assertEqual( idr.get_path_id(fn), 'here/bar.vvt' )
                with util.change_directory( tmpd+'/top1' ):
                    self.assertEqual( idr.get_path_id('seeya/bar.vvt'), 'here/bar.vvt' )
            finally:
                shutil.rmtree( tmpd )

    def test_path_identification_by_vvtest_root_file(self):
        ""
        idr = pathid.TestPathIdentification()
        util.writefile( 'top/'+vvtroot, '' )
        util.writefile( 'top/foo.vvt', '' )
        util.writefile( 'top/sub/bar.vvt', '' )
        self.assertEqual( idr.get_path_id( 'top/foo.vvt' ), 'foo.vvt' )
        self.assertEqual( idr.get_path_id( 'top/sub/bar.vvt' ), np('sub/bar.vvt') )
        with util.change_directory( 'top' ):
            self.assertEqual( idr.get_path_id( 'sub/bar.vvt' ), np('sub/bar.vvt') )
        with util.change_directory( 'top/sub' ):
            self.assertEqual( idr.get_path_id( 'bar.vvt' ), np('sub/bar.vvt') )

        for val in [ 'ROOTPATH=cool',
                     '  ROOTPATH = cool',
                     '# comment then\nROOTPATH =cool\n' ]:

            util.fault_tolerant_remove( 'top' )

            idr = pathid.TestPathIdentification()
            util.writefile( 'top/'+vvtroot, val )
            util.writefile( 'top/foo.vvt', '' )
            util.writefile( 'top/sub/bar.vvt', '' )
            self.assertEqual( idr.get_path_id( 'top/foo.vvt' ), np('cool/foo.vvt') )
            self.assertEqual( idr.get_path_id( 'top/sub/bar.vvt' ), np('cool/sub/bar.vvt') )

        util.fault_tolerant_remove( 'top' )

        # a nested vvtest root file
        idr = pathid.TestPathIdentification()
        util.writefile( 'top/'+vvtroot, 'ROOTPATH=cool' )
        util.writefile( 'top/sub/foo.vvt', '' )
        util.writefile( 'top/sub/two/tri/bar.vvt', '' )
        util.writefile( 'top/sub/two/'+vvtroot, 'ROOTPATH=cool/sub/two' )
        self.assertEqual( idr.get_path_id( 'top/sub/foo.vvt' ), np('cool/sub/foo.vvt') )
        self.assertEqual( idr.get_path_id( 'top/sub/two/tri/bar.vvt' ), np('cool/sub/two/tri/bar.vvt') )
        with util.change_directory( 'top/sub/two/tri' ):
            self.assertEqual( idr.get_path_id( 'bar.vvt' ), np('cool/sub/two/tri/bar.vvt') )

    def test_path_identification_by_vvtest_root_file_and_git(self):
        ""
        # a vvtest root file takes precedence
        idr = pathid.TestPathIdentification()
        util.writefile( 'top/'+vvtroot, 'ROOTPATH=cool' )
        util.writefile( 'top/sub/.git/config', '' )
        util.writefile( 'top/sub/two/foo.vvt', '' )
        self.assertEqual( idr.get_path_id( 'top/sub/two/foo.vvt' ), np('cool/sub/two/foo.vvt') )

    def test_path_identification_caches_by_directory(self):
        ""
        idr = pathid.TestPathIdentification()
        util.writefile( 'top/'+vvtroot, '' )
        util.writefile( 'top/sub/foo.vvt', '' )
        util.writefile( 'top/sub/two/bar.vvt', '' )
        util.writefile( 'top/sub/two/baz.vvt', '' )
        self.assertEqual( idr.get_path_id( 'top/sub/foo.vvt' ), np('sub/foo.vvt') )
        self.assertEqual( idr.get_path_id( 'top/sub/two/bar.vvt' ), np('sub/two/bar.vvt') )
        # second time
        self.assertEqual( idr.get_path_id( 'top/sub/foo.vvt' ), np('sub/foo.vvt') )
        self.assertEqual( idr.get_path_id( 'top/sub/two/bar.vvt' ), np('sub/two/bar.vvt') )
        self.assertEqual( idr.get_path_id( 'top/sub/two/baz.vvt' ), np('sub/two/baz.vvt') )


class save_results_output( vtu.vvtestTestCase ):

    def test_methods_for_specifying_the_save_results_directory(self):
        """
        precedence order:

            1) command line --save-results option
            2) environment variable VVTEST_RESULTS_DIR
            3) user plugin file using function results_directory(platname,options)
        """
        os.mkdir( 'plugout' )
        os.mkdir( 'envout' )
        os.mkdir( 'cmdout' )

        util.writefile( 'atest.vvt', """
            #VVT: parameterize: np=1 4
            pass
            """ )

        util.writefile( "adir/vvtest_user_plugin.py", """
            def results_directory( platname, options ):
                return '"""+abspath('plugout')+"""'
            """ )

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=2, npass=2 )

        with util.set_environ( VVTEST_RESULTS_DIR=None,
                               TESTING_DIRECTORY=None,  # deprecated; remove Oct 2024
                             ):

            vrun = vtu.runvvtest( '-i --save-results', raise_on_error=False )
            assert vrun.x != 0
            assert 'vvtest error' in vrun.out

            vrun = vtu.runvvtest( '-i --save-results --config '+abspath('adir') )
            assert len( glob.glob( 'plugout/vvtresults.*' ) ) == 1

            assert len( glob.glob( 'envout/*' ) ) == 0
            os.environ['VVTEST_RESULTS_DIR'] = abspath('envout')
            vrun = vtu.runvvtest( '-i --save-results --config '+abspath('adir') )
            assert len( glob.glob( 'envout/vvtresults.*' ) ) == 1

            assert len( glob.glob( 'cmdout/*' ) ) == 0
            vrun = vtu.runvvtest( '-i --save-results='+abspath('cmdout'),
                                  '--config '+abspath('adir') )
            assert len( glob.glob( 'cmdout/vvtresults.*' ) ) == 1


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
