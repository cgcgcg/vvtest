#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import glob
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.depend as depend

import libvvtest.FilterExpressions as FilterExpressions


class dependency_result_expressions( vtu.vvtestTestCase ):

    def test_by_default_failed_dependencies_stop_execution(self):
        ""
        util.writescript( 'testX.vvt', """
            #!"""+sys.executable+"""
            #VVT: depends on : testY
            import os, sys, time
            sys.stdout.write( 'time='+str(time.time())+os.linesep )
            """ )
        util.writescript( 'testY.vvt', """
            #!"""+sys.executable+"""
            import os, sys, time
            raise Exception( 'fake exception' )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, fail=1, notrun=1 )

            assert len( glob.glob( 'TestResults*/testX/execute.log' ) ) == 0

    def test_allow_dependent_to_run_even_if_dependency_fails(self):
        ""
        util.writescript( 'testX.vvt', """
            #!"""+sys.executable+"""
            #VVT: depends on (result="pass or diff or fail"): testY
            import os, sys, time
            sys.stdout.write( 'time='+str(time.time())+os.linesep )
            """ )
        util.writescript( 'testY.vvt', """
            #!"""+sys.executable+"""
            import os, sys, time
            raise Exception( 'fake exception' )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, npass=1, fail=1 )

            lineL = util.grepfiles( 'time=', 'TestResults*/testX/execute.log' )
            assert len( lineL ) == 1

    def test_use_wildcard_value_to_ignore_dependency_result(self):
        ""
        util.writescript( 'testX.vvt', """
            #!"""+sys.executable+"""
            #VVT: depends on (result="*"): testY
            import os, sys, time
            sys.stdout.write( 'time='+str(time.time())+os.linesep )
            """ )
        util.writescript( 'testY.vvt', """
            #!"""+sys.executable+"""
            import os, sys, time
            raise Exception( 'fake exception' )
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, npass=1, fail=1 )

            lineL = util.grepfiles( 'time=', 'TestResults*/testX/execute.log' )
            assert len( lineL ) == 1

    def test_get_blocking_dependencies_that_are_done(self):
        ""
        tcase = make_TestCase_with_a_dependency( 'pass' )
        assert tcase.getBlockingDependency() == None

        tcase = make_TestCase_with_a_dependency( 'fail' )
        assert tcase.getBlockingDependency() != None

        tcase = make_TestCase_with_a_dependency( 'fail', '*' )
        assert tcase.getBlockingDependency() == None

        tcase = make_TestCase_with_a_dependency( 'fail', 'pass or fail' )
        assert tcase.getBlockingDependency() == None

    def test_get_blocking_dependencies_that_are_running(self):
        ""
        tcase = make_TestCase_with_a_dependency( 'running' )
        assert tcase.getBlockingDependency() != None

        tcase = make_TestCase_with_a_dependency( 'pass' )
        assert tcase.getBlockingDependency() == None
        add_dependency( tcase, 'running' )
        assert tcase.getBlockingDependency() != None

    def test_get_blocking_dependencies_that_are_skipped(self):
        ""
        tcase = make_TestCase_with_a_dependency( 'skip' )
        assert tcase.getBlockingDependency() != None

        tcase = make_TestCase_with_a_dependency( 'skip', '*' )
        assert tcase.getBlockingDependency() == None

    def test_get_blocking_dependencies_that_have_not_run_yet(self):
        ""
        tcase = make_TestCase_with_a_dependency( 'pass' )
        assert tcase.getBlockingDependency() == None
        add_dependency( tcase, 'notrun' )
        assert tcase.getBlockingDependency() != None

    def test_will_never_run_logic(self):
        ""
        tcase = make_TestCase_with_a_dependency( 'pass' )
        assert not tcase.willNeverRun()

        tcase = make_TestCase_with_a_dependency( 'fail' )
        assert tcase.willNeverRun()

        tcase = make_TestCase_with_a_dependency( 'fail', '*' )
        assert not tcase.willNeverRun()

        tcase = make_TestCase_with_a_dependency( 'skip' )
        assert tcase.willNeverRun()

        tcase = make_TestCase_with_a_dependency( 'skip', '*' )
        assert not tcase.willNeverRun()

        tcase = make_TestCase_with_a_dependency( 'skippass' )
        assert not tcase.willNeverRun()

        tcase = make_TestCase_with_a_dependency( 'skipfail' )
        assert tcase.willNeverRun()

        tcase = make_TestCase_with_a_dependency( 'notdone' )
        assert not tcase.willNeverRun()

        tcase = make_TestCase_with_a_dependency( 'notdone', '*' )
        assert not tcase.willNeverRun()

        tcase = make_TestCase_with_a_dependency( 'notrun' )
        assert not tcase.willNeverRun()

        tcase = make_TestCase_with_a_dependency( 'notrun', '*' )
        assert not tcase.willNeverRun()

        tcase = make_TestCase_with_a_dependency(
                            'notrun',
                            second_level_result='fail' )
        assert tcase.willNeverRun()

        tcase = make_TestCase_with_a_dependency(
                            'notrun', '*',
                            second_level_result='fail' )
        assert not tcase.willNeverRun()

        tcase = make_TestCase_with_a_dependency(
                            'notrun',
                            second_level_result='pass' )
        assert not tcase.willNeverRun()

    def test_get_blocking_dependencies_that_will_never_run(self):
        ""
        # a dep which has to be run, but will never run
        tcase = make_TestCase_with_a_dependency(
                            'notrun',
                            second_level_result='fail' )
        assert tcase.getBlockingDependency() != None

        # a dep which does NOT have to be run, and will never run
        tcase = make_TestCase_with_a_dependency(
                            'notrun', result_expr='*',
                            second_level_result='fail' )
        assert tcase.getBlockingDependency() == None

        # a dep which does not have to be run, but not known yet if it will run
        tcase = make_TestCase_with_a_dependency(
                            'notrun', result_expr='*',
                            second_level_result='notrun' )
        assert tcase.getBlockingDependency() != None

        # a dep which does not have to be run, and will never run due to skip
        tcase = make_TestCase_with_a_dependency(
                            'notrun', result_expr='*',
                            second_level_result='skip' )
        assert tcase.getBlockingDependency() == None

        # a dep which does not have to be run, but must wait to run
        tcase = make_TestCase_with_a_dependency(
                            'notrun', result_expr='*',
                            second_level_result='skippass' )
        assert tcase.getBlockingDependency() != None

    def test_a_result_wildcard_will_ignore_a_skipped_dependency(self):
        ""
        util.writefile( 'testA.vvt', """
            #VVT: depends on (result="*") : testB testC
            import os
            import vvtest_util as vvt
            print ( vvt.DEPDIRS )
            assert len( vvt.DEPDIRS ) == 2
            if os.path.exists( vvt.DEPDIRS[0] ):
                assert os.path.basename( vvt.DEPDIRS[0] ) == 'testB'
                assert os.path.basename( vvt.DEPDIRS[1] ) == 'testC'
                assert not os.path.exists( vvt.DEPDIRS[1] )
            else:
                assert os.path.basename( vvt.DEPDIRS[0] ) == 'testC'
                assert os.path.basename( vvt.DEPDIRS[1] ) == 'testB'
                assert os.path.exists( vvt.DEPDIRS[1] )
            """ )
        util.writefile( 'testB.vvt', """
            import os, time
            time.sleep(5)
            with open( 'checkfile', 'w' ) as fp:
                fp.write( 'hello'+os.linesep )
            """ )
        util.writefile( 'testC.vvt', """
            pass
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-vv -k testA/testB', batch=batch )
            vrun.assertCounts( total=3, npass=2, skip=1 )


def make_TestCase_with_a_dependency( test_result, result_expr=None,
                                     second_level_result=None ):
    ""
    src_tcase = vtu.make_fake_TestCase( name='srctest' )
    tcase = vtu.make_fake_TestCase( test_result )

    wordexpr = make_word_expression( result_expr )

    src_tcase.addDependency( tcase, None, wordexpr )

    if second_level_result:
        tcase2 = vtu.make_fake_TestCase( second_level_result, name='btest' )
        wordexpr2 = make_word_expression( None )
        tcase.addDependency( tcase2, None, wordexpr2 )

    return src_tcase


def add_dependency( tcase, test_result ):
    ""
    dep_tcase = vtu.make_fake_TestCase( test_result )
    tcase.addDependency( dep_tcase, None, None )


def make_word_expression( string_expr ):
    ""
    if string_expr == None:
        wx = None
    elif string_expr == '*':
        wx = FilterExpressions.WordExpression()
    else:
        wx = FilterExpressions.WordExpression( string_expr )

    return wx


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
