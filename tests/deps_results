#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import basename
import glob
import time

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.depend as depend


def write_testX_depends_on_testY( result=None ):
    ""
    attr = ''
    if result != None:
        attr = '(result="'+result+'")'

    util.writescript( 'testX.vvt', """
        #!"""+sys.executable+"""
        #VVT: depends on """+attr+""": testY
        import os, sys, time
        sys.stdout.write( 'time='+str(time.time())+os.linesep )
        """ )
    util.writescript( 'testY.vvt', """
        #!"""+sys.executable+"""
        import os, sys, time
        raise Exception( 'fake exception' )
        """ )


class dependency_result_expressions( vtu.vvtestTestCase ):

    def test_by_default_failed_dependencies_stop_execution(self):
        ""
        write_testX_depends_on_testY()
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, fail=1, notrun=1 )

            assert len( glob.glob( 'TestResults*/*/execute.log' ) ) == 1

            lines = vrun.out.splitlines()
            idx = util.findline( 'testX*notrun due to dependency', lines )
            assert idx > 0 and 'testY' in lines[idx+1]

    def test_allow_dependent_to_run_even_if_dependency_fails(self):
        ""
        write_testX_depends_on_testY( 'pass or diff or fail' )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, npass=1, fail=1 )

            lineL = util.grepfiles( 'time=', 'TestResults*/testX/execute.log' )
            assert len( lineL ) == 1

    def test_use_wildcard_value_to_ignore_dependency_result(self):
        ""
        write_testX_depends_on_testY( '*' )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, npass=1, fail=1 )

            lineL = util.grepfiles( 'time=', 'TestResults*/testX/execute.log' )
            assert len( lineL ) == 1

    def test_get_blocking_dependencies_that_are_done(self):
        ""
        tcase = vtu.make_TestCase_with_a_dependency( 'pass' )
        assert not tcase.isBlocked()

        tcase = vtu.make_TestCase_with_a_dependency( 'fail' )
        assert tcase.isBlocked()
        assert 'sdir/atest.np=4' in str( tcase.getBlockedReason() )

        tcase = vtu.make_TestCase_with_a_dependency( 'fail', '*' )
        assert not tcase.isBlocked()

        tcase = vtu.make_TestCase_with_a_dependency( 'fail', 'pass or fail' )
        assert not tcase.isBlocked()

    def test_get_blocking_dependencies_that_are_running(self):
        ""
        tcase = vtu.make_TestCase_with_a_dependency( 'running' )
        assert tcase.isBlocked()

        tcase = vtu.make_TestCase_with_a_dependency( 'pass' )
        assert not tcase.isBlocked()
        vtu.add_dependency( tcase, 'running' )
        assert tcase.isBlocked()

    def test_get_blocking_dependencies_that_are_skipped(self):
        ""
        tcase = vtu.make_TestCase_with_a_dependency( 'skip' )
        assert tcase.isBlocked()

        tcase = vtu.make_TestCase_with_a_dependency( 'skip', '*' )
        assert not tcase.isBlocked()

    def test_get_blocking_dependencies_that_have_not_run_yet(self):
        ""
        tcase = vtu.make_TestCase_with_a_dependency( 'pass' )
        assert not tcase.isBlocked()
        vtu.add_dependency( tcase, 'notrun' )
        assert tcase.isBlocked()

    def test_get_blocking_dependencies_that_will_never_run(self):
        ""
        # a dep which has to be run, but will never run
        tcase = vtu.make_TestCase_with_a_dependency(
                            'notrun',
                            second_level_result='fail' )
        assert tcase.isBlocked()

        # a dep which does NOT have to be run, and will never run
        tcase = vtu.make_TestCase_with_a_dependency(
                            'notrun', result_expr='*',
                            second_level_result='fail' )
        assert not tcase.isBlocked()

        # a dep which does not have to be run, but not known yet if it will run
        tcase = vtu.make_TestCase_with_a_dependency(
                            'notrun', result_expr='*',
                            second_level_result='notrun' )
        assert tcase.isBlocked()

        # a dep which does not have to be run, and will never run due to skip
        tcase = vtu.make_TestCase_with_a_dependency(
                            'notrun', result_expr='*',
                            second_level_result='skip' )
        assert not tcase.isBlocked()

        # a dep which does not have to be run, but must wait to run
        tcase = vtu.make_TestCase_with_a_dependency(
                            'notrun', result_expr='*',
                            second_level_result='skippass' )
        assert tcase.isBlocked()

    def test_a_result_wildcard_will_ignore_a_skipped_dependency(self):
        ""
        util.writefile( 'testA.vvt', """
            #VVT: depends on (result="*") : testB
            #VVT: depends on (result=*) : testC
            import os
            import vvtest_util as vvt
            print ( 'DEPDIRS='+repr(vvt.DEPDIRS) )
            for dp in vvt.DEPDIRS:
                assert os.path.exists( dp )
            """ )
        util.writefile( 'testB.vvt', """
            import os, time
            time.sleep(5)
            with open( 'checkfile', 'w' ) as fp:
                fp.write( 'hello'+os.linesep )
            """ )
        util.writefile( 'testC.vvt', """
            pass
            """ )
        time.sleep(1)

        def getDEPDIRS( vrun ):
            lineL = vrun.greplogs( 'DEPDIRS=' )
            assert len( lineL ) == 1
            depdirs = eval( lineL[0].strip().split('DEPDIRS=',1)[1].strip() )
            bnL = [ basename(dn) for dn in depdirs ]
            bnL.sort()
            return bnL

        for batch in [False,True]:

            vtu.remove_results()

            # testC should not be in the DEPDIRS because it will not run

            vrun = vtu.runvvtest( '-vv -k testA/testB', batch=batch )
            vrun.assertCounts( total=3, npass=2, skip=1 )
            tdir = vrun.resultsDir()
            assert getDEPDIRS( vrun ) == ['testB']

            vrun = vtu.runvvtest( '-vv -R -k testA', batch=batch )
            vrun.assertCounts( total=3, npass=1, skip=2 )
            assert getDEPDIRS( vrun ) == ['testB']

            vrun = vtu.runvvtest( '-vv -R -k testA', chdir=tdir, batch=batch )
            vrun.assertCounts( total=3, npass=1, skip=2 )
            assert getDEPDIRS( vrun ) == ['testB']

            # if testC is run at least once, it should show up in DEPDIRS

            vrun = vtu.runvvtest( '-vv -k testC', batch=batch )
            vrun.assertCounts( total=3, npass=1, skip=2 )

            vrun = vtu.runvvtest( '-vv -R -k testA/testB', batch=batch )
            vrun.assertCounts( total=3, npass=2, skip=1 )
            assert getDEPDIRS( vrun ) == ['testB','testC']

            vrun = vtu.runvvtest( '-vv -R -k testA', chdir=tdir, batch=batch )
            vrun.assertCounts( total=3, npass=1, skip=2 )
            assert getDEPDIRS( vrun ) == ['testB','testC']

    def test_that_a_test_with_unmatched_dependencies_is_not_run(self):
        ""
        util.writefile( 'testA.vvt', """
            #VVT: depends on : testB
            pass
            """ )
        util.writefile( 'testC.vvt', """
            pass
            """ )
        util.writefile( 'testD.vvt', """
            #VVT: depends on (expect=*): testB
            pass
            """ )
        util.writefile( 'testE.vvt', """
            #VVT: depends on (expect='?'): testB
            pass
            """ )
        util.writefile( 'testF.vvt', """
            #VVT: depends on (expect=2): test[CD]
            pass
            """ )
        util.writefile( 'testG.vvt', """
            #VVT: depends on (expect=?): test[CD]
            pass
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-vv', batch=batch )
            vrun.assertCounts( total=6, npass=4, notrun=2 )
            assert len( glob.glob( 'TestResults*/testA/execute.log' ) ) == 0
            assert len( glob.glob( 'TestResults*/testC/execute.log' ) ) == 1
            assert len( glob.glob( 'TestResults*/testD/execute.log' ) ) == 1
            assert len( glob.glob( 'TestResults*/testE/execute.log' ) ) == 1
            assert len( glob.glob( 'TestResults*/testF/execute.log' ) ) == 1
            assert len( glob.glob( 'TestResults*/testG/execute.log' ) ) == 0


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
