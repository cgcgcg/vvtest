#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util

import libvvtest.testlist as testlist
from libvvtest.RuntimeConfig import RuntimeConfig
from libvvtest.scanner import TestFileScanner
from libvvtest.tcfactory import TestCaseFactory
from libvvtest.location import Locator


class TestList_scan_behavior( vtu.vvtestTestCase ):

    def test_getting_the_valid_test_extensions(self):
        ""
        creator = vtu.creator()

        # default is just *.vvt
        self.assertEquals( sorted(creator.getValidFileExtensions()), ['.vvt'] )

        self.assertEquals( sorted(creator.getValidFileExtensions(['vvt'])), ['.vvt'] )

        self.assertEquals( sorted(creator.getValidFileExtensions([])), ['.vvt'] )
        self.assertEquals( sorted(creator.getValidFileExtensions(None)), ['.vvt'] )

    def test_scan_a_directory_for_tests(self):
        ""
        util.writefile( 'subdir/scr.vvt', """
            pass
            """ )

        tlist,scan = construct_TestList_and_TestFileScanner( specform=['vvt'] )
        scan.scanPath( tlist, 'subdir' )

        tL = list( tlist.getTests() )
        assert len( tL ) == 1
        self.assertEqual( tL[0].getSpec().getName(), 'scr' )
        self.assertEqual( tL[0].getSpec().getFilepath(), 'scr.vvt' )

    def test_scan_a_single_test_file(self):
        ""
        util.writefile( 'scr.vvt', """
            pass
            """ )

        tlist,scan = construct_TestList_and_TestFileScanner()
        scan.scanPath( tlist, 'scr.vvt' )

        tL = list( tlist.getTests() )
        assert len( tL ) == 1
        assert tL[0].getSpec().getName() == 'scr'
        assert tL[0].getSpec().getFilepath() == 'scr.vvt'

    def test_scan_a_path_that_does_not_exist(self):
        ""
        cmd = vtu.vvtest_command_line( 'mypath' )
        x,out = util.runcmd( cmd, raise_on_error=False )

        assert x != 0
        assert 'does not exist' in out and 'mypath' in out

    def test_restrict_scan_to_one_extension(self):
        ""
        util.writefile( 'scr.vvt', """
            pass
            """ )

        tlist,scan = construct_TestList_and_TestFileScanner( specform=['vvt'] )
        scan.scanPath( tlist, '.' )

        tL = list( tlist.getTests() )
        assert len( tL ) == 1
        assert tL[0].getSpec().getName() == 'scr'
        assert tL[0].getSpec().getFilepath() == 'scr.vvt'

        tlist,scan = construct_TestList_and_TestFileScanner( specform=['foobar'] )
        scan.scanPath( tlist, '.' )

        tL = list( tlist.getTests() )
        assert len( tL ) == 0

    def test_command_line_interface_to_scan_type_restriction(self):
        ""
        util.writefile( 'scr.vvt', """
            pass
            """ )

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == [ 'scr' ]

        vrun = vtu.runvvtest( '-w --scan-type vvt' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == [ 'scr' ]

    def test_scans_ignore_previous_results_directories(self):
        ""
        os.mkdir( 'xdir1' )
        os.mkdir( 'xdir2' )

        util.writefile( 'src/atest.vvt', """
            pass
            """ )

        with util.change_directory( 'src' ):
            vtu.runvvtest().assertCounts( total=1, npass=1 )

        with util.change_directory( 'xdir1' ):
            vtu.runvvtest( '../src' ).assertCounts( total=1, npass=1 )

        with util.change_directory( 'src' ):
            vtu.runvvtest( '--run-dir rdir' ).assertCounts( total=1, npass=1 )

        with util.change_directory( 'xdir2' ):
            vtu.runvvtest( '../src' ).assertCounts( total=1, npass=1 )


def construct_TestList_and_TestFileScanner( specform=None ):
    ""
    loc = Locator( os.getcwd() )
    creator = vtu.creator()
    tlist = testlist.TestList( TestCaseFactory() )

    scan = TestFileScanner( loc, creator, TestCaseFactory(), specform=specform )

    return tlist,scan


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
