#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

try:
    from StringIO import StringIO
except Exception:
    from io import StringIO

import vvtestutils as vtu
import testutils as util

import libvvtest.TestList as TestList
from libvvtest.RuntimeConfig import RuntimeConfig
from libvvtest.scanner import TestFileScanner
from libvvtest.tcfactory import TestCaseFactory


class TestList_scan_behavior( vtu.vvtestTestCase ):

    def test_getting_the_valid_test_extensions(self):
        ""
        creator = vtu.creator()

        # default is just *.vvt now [June 2022]
        self.assertEquals( sorted(creator.getValidFileExtensions()), ['.vvt'] )

        self.assertEquals( sorted(creator.getValidFileExtensions(['vvt'])), ['.vvt'] )
        self.assertEquals( sorted(creator.getValidFileExtensions(['xml'])), ['.xml'] )
        self.assertEquals( sorted(creator.getValidFileExtensions(['xml','vvt'])), ['.vvt','.xml'] )

        self.assertEquals( sorted(creator.getValidFileExtensions([])), ['.vvt'] )
        self.assertEquals( sorted(creator.getValidFileExtensions(None)), ['.vvt'] )

    def test_scan_a_directory_for_tests(self):
        ""
        util.writefile( 'subdir/scr.vvt', """
            pass
            """ )
        util.writefile( 'subdir/old.xml', """
            <rtest name="old">
                <execute>
                    echo "hello"
                </execute>
            </rtest>
            """ )
        time.sleep(1)

        # as of June 2022, the default extension became only *.vvt files

        tlist,scan = construct_TestList_and_TestFileScanner( specform=['vvt','xml'] )
        scan.scanPath( tlist, 'subdir' )

        tL = list( tlist.getTests() )
        assert len( tL ) == 2
        if tL[0].getSpec().getName() == 'scr':
            assert tL[0].getSpec().getFilepath() == 'scr.vvt'
            assert tL[1].getSpec().getFilepath() == 'old.xml'
        else:
            assert tL[1].getSpec().getFilepath() == 'scr.vvt'
            assert tL[0].getSpec().getFilepath() == 'old.xml'

    def test_scan_a_single_test_file(self):
        ""
        util.writefile( 'scr.vvt', """
            pass
            """ )
        time.sleep(1)

        tlist,scan = construct_TestList_and_TestFileScanner()
        scan.scanPath( tlist, 'scr.vvt' )

        tL = list( tlist.getTests() )
        assert len( tL ) == 1
        assert tL[0].getSpec().getName() == 'scr'
        assert tL[0].getSpec().getFilepath() == 'scr.vvt'

    def test_scan_a_path_that_does_not_exist(self):
        ""
        cmd = vtu.vvtest_command_line( 'mypath' )
        x,out = util.runcmd( cmd, raise_on_error=False )

        assert x != 0
        assert 'does not exist' in out and 'mypath' in out

    def write_vvt_and_xml_test_files(self):
        ""
        util.writefile( 'scr.vvt', """
            pass
            """ )
        util.writefile( 'atest.xml', """
            <rtest name="atest">
                <execute> echo "hello" </execute>
            </rtest>
            """ )

    def test_restrict_scan_to_one_extension(self):
        ""
        self.write_vvt_and_xml_test_files()
        time.sleep(1)

        tlist,scan = construct_TestList_and_TestFileScanner( specform=['vvt'] )
        scan.scanPath( tlist, '.' )

        tL = list( tlist.getTests() )
        assert len( tL ) == 1
        assert tL[0].getSpec().getName() == 'scr'
        assert tL[0].getSpec().getFilepath() == 'scr.vvt'

        tlist,scan = construct_TestList_and_TestFileScanner( specform=['xml'] )
        scan.scanPath( tlist, '.' )

        tL = list( tlist.getTests() )
        assert len( tL ) == 1
        assert tL[0].getSpec().getName() == 'atest'
        assert tL[0].getSpec().getFilepath() == 'atest.xml'

    def test_command_line_interface_to_scan_type_restriction(self):
        ""
        self.write_vvt_and_xml_test_files()
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=2, npass=2 )
        assert vrun.getTestIds() == [ 'atest', 'scr' ]

        vrun = vtu.runvvtest( '-w --scan-type vvt' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == [ 'scr' ]

        vrun = vtu.runvvtest( '-w --scan-type xml' )
        vrun.assertCounts( total=1, npass=1 )
        assert vrun.getTestIds() == [ 'atest' ]

    def test_bad_xml_warnings(self):
        ""
        util.writefile( 'A/atest.xml', """
            <rtest name="atest">
                <execute> echo "hello" </execute>
            </rtest>
            """ )

        util.writefile( 'B/atest.xml', """
            <rtest name="atest">
                <execute> echo "hello" <execute>
            </rtest>
            """ )

        util.writefile( 'C/note.xml', """\
<?xml version="1.0" encoding="UTF-8"?>
<note>
  <to>Tove</to>
  <from>Jani</from>
  <heading>Reminder</heading>
  <body>Don't forget me this weekend!</body>
</note>
""" )

        # file with an error in the XML
        util.writefile( 'D/note.xml', """\
<?xml version="1.0" encoding="UTF-8"?>
<note>
  <to>Tove</to>
  <from>Jani<from>
  <heading>Reminder</heading>
  <body>Don't forget me this weekend!</body>
</note>
""" )
        time.sleep(1)

        tL,out = scan_path_with_warnings_output( 'A' )
        assert not out.strip()
        assert len( tL ) == 1

        tL,out = scan_path_with_warnings_output( 'B' )
        assert util.greplines( 'warning*skipping file*B/atest.xml', out )
        assert len( tL ) == 0

        tL,out = scan_path_with_warnings_output( 'C' )
        assert not out.strip()
        assert len( tL ) == 0

        tL,out = scan_path_with_warnings_output( 'D' )
        assert not out.strip()
        assert len( tL ) == 0

    def test_scans_ignore_previous_results_directories(self):
        ""
        os.mkdir( 'xdir1' )
        os.mkdir( 'xdir2' )

        util.writefile( 'src/atest.vvt', """
            pass
            """ )

        with util.change_directory( 'src' ):
            vtu.runvvtest().assertCounts( total=1, npass=1 )

        with util.change_directory( 'xdir1' ):
            vtu.runvvtest( '../src' ).assertCounts( total=1, npass=1 )

        with util.change_directory( 'src' ):
            vtu.runvvtest( '--run-dir rdir' ).assertCounts( total=1, npass=1 )

        with util.change_directory( 'xdir2' ):
            vtu.runvvtest( '../src' ).assertCounts( total=1, npass=1 )


def scan_path_with_warnings_output( path, specform=['vvt','xml'] ):
    ""
    sio = StringIO()
    tlist,scan = construct_TestList_and_TestFileScanner( specform=specform, ostream=sio )
    scan.scanPath( tlist, path )
    val = sio.getvalue()

    return tlist.getTests(), val.strip()


def construct_TestList_and_TestFileScanner( specform=None, ostream=None ):
    ""
    creator = vtu.creator()
    tlist = TestList.TestList( TestCaseFactory() )

    if ostream:
        scan = TestFileScanner( creator, TestCaseFactory(),
                                specform=specform,
                                warning_output_stream=ostream )
    else:
        scan = TestFileScanner( creator, TestCaseFactory(),
                                specform=specform )

    return tlist,scan


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
