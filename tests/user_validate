#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST: vvtest

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time

import vvtestutils as vtu
import testutils as util

from libvvtest.RuntimeConfig import RuntimeConfig
from libvvtest.filtering import TestFilter
from libvvtest.userplugin import UserPluginBridge, import_module_by_name


class validate_plugin_unit_tests( vtu.vvtestTestCase ):

    def test_plugin_not_found(self):
        ""
        sys.path.insert( 0, os.getcwd() )
        try:
            mod, out, err = util.call_capture_output(
                import_module_by_name, vtu.make_plugin_filename() )
        finally:
            sys.path.pop( 0 )

        assert 'Traceback' not in out and 'Traceback' not in err

        plug = UserPluginBridge( RuntimeConfig(), mod )

        tcase = vtu.make_fake_TestCase()
        assert not plug.validateTest( tcase )

    def test_empty_plugin_found(self):
        ""
        plug = vtu.make_user_plugin( """
            pass
            """ )

        tcase = vtu.make_fake_TestCase()
        assert not plug.validateTest( tcase )

    def test_a_plugin_with_an_error_during_import(self):
        ""
        plugname = vtu.make_plugin_filename()

        util.writefile( 'adir/'+plugname+'.py', """
            function_that_does_not_exist()
            """ )
        time.sleep(1)

        sys.path.insert( 0, os.path.abspath('adir') )
        try:
            mod, out, err = util.call_capture_output(
                import_module_by_name, plugname )
        except UserPluginError:
            sys.path.pop( 0 )
        except Exception:
            sys.path.pop( 0 )
            raise  # expected a UserPluginError

        assert 'Traceback' in out
        assert 'function_that_does_not_exist' in out
        assert 'UserPluginError' in err

    def test_user_validate_plugin_function(self):
        ""
        plug = vtu.make_user_plugin( """
            def validate_test( specs ):
                ""
                keys = specs['keywords']
                if not ( 'fast' in keys or 'medium' in keys or 'long' in keys ):
                    return "keywords must contain fast, medium, or long"
            """ )

        tcase = vtu.make_fake_TestCase( keywords=['lightning','fast'] )
        assert not plug.validateTest( tcase )

        tcase.getSpec().setKeywords( ['lightning','fist'] )
        rtn = plug.validateTest( tcase )
        assert rtn and rtn == "keywords must contain fast, medium, or long"

    def test_user_validate_function_that_fails_with_an_exception(self):
        ""
        plug = vtu.make_user_plugin( """
            def validate_test( specs ):
                raise Exception( 'fake exception' )
            """ )

        tcase = vtu.make_fake_TestCase()
        rtn, out, err = util.call_capture_output( plug.validateTest, tcase )
        assert 'Exception' in rtn and 'fake exception' in rtn
        assert 'Exception' in out and 'fake exception' in out
        assert 'Traceback' in out

        # multiple exceptions are not printed (uniquified by exception string)
        tcase = vtu.make_fake_TestCase( name='btest' )
        rtn, out, err = util.call_capture_output( plug.validateTest, tcase )
        assert 'Exception' in rtn and 'fake exception' in rtn
        assert 'Exception' not in out and 'fake exception' not in out
        assert 'Traceback' not in out

    def test_filter_function(self):
        ""
        class FakePluginModule:
            def validate_test(self, specs):
                if 'bad' in specs['keywords']:
                    return 'bad boys not allowed'

        rtconfig = vtu.make_RuntimeConfig( 'XBox', None )

        plug = UserPluginBridge( rtconfig, FakePluginModule() )
        tf = TestFilter( rtconfig, plug )

        tcase = vtu.make_fake_TestCase( keywords=['good'] )
        assert tf.userValidation( tcase )
        assert not tcase.getStat().skipTest()

        tcase = vtu.make_fake_TestCase( keywords=['good','bad'] )
        assert not tf.userValidation( tcase )
        assert tcase.getStat().skipTest()

        tcase = vtu.make_fake_TestCase( keywords=['good'] )
        tf.applyPermanent( { tcase.getSpec().getID() : tcase } )
        assert not tcase.getStat().skipTest()

        tcase = vtu.make_fake_TestCase( keywords=['bad','good'] )
        tf.applyPermanent( { tcase.getSpec().getID() : tcase } )
        assert tcase.getStat().skipTest()

    def test_validate_function_receives_test_parameters(self):
        ""
        plug = vtu.make_user_plugin( """
            def validate_test( specs ):
                ""
                keys = specs['keywords']
                params = specs['parameters']
                if params['np'] != '4':
                    return 'param np must be 4'
            """ )

        tcase = vtu.make_fake_TestCase()
        assert not plug.validateTest( tcase )

    def test_validate_function_keywords_do_not_include_parameters(self):
        ""
        plug = vtu.make_user_plugin( """
            def validate_test( specs ):
                ""
                kwds = specs['keywords']
                assert 'np' not in kwds
            """ )

        tcase = vtu.make_fake_TestCase()
        assert not plug.validateTest( tcase )

    def test_validate_function_receives_test_name_and_its_not_in_keywords(self):
        ""
        plug = vtu.make_user_plugin( """
            def validate_test( specs ):
                ""
                tname = specs['name']
                assert tname == 'atest'
                kwds = specs['keywords']
                assert tname not in kwds
            """ )

        tcase = vtu.make_fake_TestCase()
        assert not plug.validateTest( tcase )

    def test_validate_function_receives_options_and_platform_name(self):
        ""
        plug = vtu.make_user_plugin( """
            def validate_test( specs ):
                ""
                plat = specs['platform']
                opts = specs['options']
                if plat == 'Atari' and 'dbg' in opts:
                    return 'Houston, we have a problem up here'
            """,
            platname='Atari',
            options=['dbg','gcc'] )

        tcase = vtu.make_fake_TestCase()
        rtn = plug.validateTest( tcase )
        assert rtn == 'Houston, we have a problem up here'


class validate_plugin_integration_tests( vtu.vvtestTestCase ):

    def test_validating_keywords(self):
        ""
        util.writefile( 'testA.vvt', """
            #VVT: keywords = blue long
            """ )
        util.writefile( 'testB.vvt', """
            #VVT: keywords = violet
            """ )
        util.writefile( 'adir/vvtest_user_plugin.py', """
            def validate_test( specs ):
                ""
                keys = specs['keywords']
                if not ( 'fast' in keys or 'medium' in keys or 'long' in keys ):
                    return "keywords must contain fast, medium, or long"
            """ )
        adir = os.path.abspath( 'adir' )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( batch=batch )
            vrun.assertCounts( total=2, npass=2 )

            vtu.remove_results()
            vrun = vtu.runvvtest( '-vv --config', adir, batch=batch )
            vrun.assertCounts( npass=1, skip=1 )
            assert len( vrun.grepTestLines( 'pass *testA' ) ) == 1
            assert len( vrun.grepTestLines( 'skip *testB' ) ) == 1
            assert len( vrun.grepTestLines(
                        'keywords must contain fast, medium, or long' ) ) == 1

    def test_integration_with_error_in_plugin(self):
        ""
        util.writefile( 'testA.vvt', """
            #VVT: keywords = blue long
            """ )
        util.writefile( 'adir/vvtest_user_plugin.py', """
            function_that_does_not_exist()
            """ )
        adir = os.path.abspath( 'adir' )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-vv --config', adir, batch=batch )
            vrun.assertCounts( total=1, npass=1 )
            assert vrun.countLines( 'Traceback' ) > 0
            assert vrun.countLines( 'function_that_does_not_exist' ) > 0
            assert vrun.countLines( 'failed to import vvtest_user_plugin' ) == 1

    def test_integration_with_error_in_the_test_validate_function(self):
        ""
        util.writefile( 'testA.vvt', """
            #VVT: keywords = blue long
            """ )
        util.writefile( 'testB.vvt', """
            #VVT: keywords = pink fast
            """ )
        util.writefile( 'adir/vvtest_user_plugin.py', """
            def validate_test( specs ):
                function_that_does_not_exist()
            """ )
        adir = os.path.abspath( 'adir' )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-vv --config', adir, batch=batch )
            assert vrun.countLines( 'Traceback' ) == 1
            assert vrun.countLines( 'function_that_does_not_exist' ) > 0
            assert vrun.countLines( 'skipped:* 2' ) == 1

    def test_validate_function_using_options_and_platform(self):
        ""
        util.writefile( 'testA.vvt', """
            #VVT: parameterize : np = 1 4
            """ )
        util.writefile( 'adir/vvtest_user_plugin.py', """
            def validate_test( specs ):
                ""
                plat = specs['platform']
                opts = specs['options']
                np = int( specs['parameters'].get( 'np', 1 ) )
                if plat == 'ATS' and 'dbg' in opts and np > 2:
                    return 'large debug tests are excluded on ATS'
            """ )
        adir = os.path.abspath( 'adir' )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-vv -o dbg --plat ATS --config', adir,
                                  batch=batch )
            vrun.assertCounts( total=2, npass=1, skip=1 )
            assert vrun.countTestLines( 'large debug tests are excluded on ATS' ) == 1


############################################################################

util.run_test_cases(sys.argv, sys.modules[__name__])
