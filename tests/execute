#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import re
import glob
import time

import vvtestutils as vtu
import testutils as util

from vvtestutils import windows, not_windows

import libvvtest.testexec as testexec


class execute_tests( vtu.vvtestTestCase ):

    def test_simple_script_test_file(self):
        ""
        util.writescript( 'helloworld.vvt', """
            #!/bin/bash
            source vvtest_util.sh
            ${SRCDIR}/helloworld.sh || exit 1
            """ )

        util.writescript( 'helloworld.sh', """
            #!/bin/bash
            echo "hello world"
            exit 0
            """ )

        vtu.runvvtest().assertCounts( total=1, npass=1 )
        sL = util.grepfiles( 'hello world', 'TestResults*/helloworld/execute.log' )
        assert len( sL ) == 1

    def test_file_link_and_copy_globbing(self):
        ""
        util.writefile( "glob1.txt", """
            this is glob1.txt
            """)
        util.writefile( "glob2.txt", """
            this is glob2.txt
            """)
        util.writefile( "Aglob.txt", """
            this is Aglob2.txt
            """)

        util.writefile( "glob.vvt", """
            #VVT: link : glob?.txt
            #VVT: copy : Aglob.*
            import os, vvtest_util as vvt
            assert os.path.exists( 'glob1.txt' )
            assert os.path.exists( 'glob2.txt' )
            assert os.path.exists( 'Aglob.txt' )
            """)

        vtu.runvvtest().assertCounts( total=1, npass=1 )

    def test_link_and_copy_files_that_do_not_exist(self):
        ""
        util.writefile( "link1.vvt", """
            #VVT: link : file.txt
            import os
            for fn in os.listdir('.'):
                print ( 'lsfile '+fn )
            """)
        util.writefile( "copy1.vvt", """
            #VVT: copy : file.txt
            import os
            for fn in os.listdir('.'):
                print ( 'lsfile '+fn )
            """)

        vtu.runvvtest().assertCounts( total=2, fail=2 )

        sL = util.grepfiles( 'lsfile ', 'TestResults.*/*/execute.log' )
        assert len( sL ) == 0

        # now make it exist and run through to see if the tests work

        util.writefile( "file.txt", """
            this is file.txt
            """)
        time.sleep(1)

        vtu.runvvtest( '-R' ).assertCounts( total=2, npass=2 )

        sL = util.grepfiles( 'lsfile file.txt', 'TestResults.*/*/execute.log' )
        assert len( sL ) == 2

    def test_link_and_copy_files_that_refer_to_parent_directory(self):
        ""
        util.writefile( "subdir/links.vvt", """
            #VVT: link : ../file.txt
            #VVT: copy : ../files/gfile*.txt
            import os
            for fn in os.listdir('.'):
                print ( 'lsfile '+fn )
            """)
        util.writefile( "file.txt", "the text file" )
        util.writefile( "files/gfile1.txt", "G text file 1" )
        util.writefile( "files/gfileA.txt", "G text file A" )

        vrun = vtu.runvvtest( 'subdir' )
        vrun.assertCounts( total=1, npass=1 )

        assert vrun.countGrepLogs( 'lsfile file.txt' ) == 1
        assert vrun.countGrepLogs( 'lsfile gfile1.txt' ) == 1
        assert vrun.countGrepLogs( 'lsfile gfileA.txt' ) == 1

        fL = util.findfiles( 'file.txt', 'TestResults*' )
        assert len(fL) == 1 and os.path.islink( fL[0] )
        fL = util.findfiles( 'gfile1.txt', 'TestResults*' )
        assert len(fL) == 1 and not os.path.islink( fL[0] )
        fL = util.findfiles( 'gfileA.txt', 'TestResults*' )
        assert len(fL) == 1 and not os.path.islink( fL[0] )

    def test_different_test_exit_statuses(self):
        ""
        util.writefile( "PassTest.vvt", """
            print ( "Exiting with pass status" )
            """)
        util.writefile( "FailTest.vvt", """
            print ( "Exiting with failure status" )
            raise Exception( 'fake failure' )
            """)
        util.writefile( "DiffTest.vvt", """
            import sys, vvtest_util as vvt
            print ( "Exiting with diff status" )
            sys.exit( vvt.diff_exit_status )
            """)
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=3, npass=1, diff=1, fail=1 )

        # use -L option (and wipe)

        vrun = vtu.runvvtest( '-w -L -n 1' )
        vrun.assertCounts( total=3, npass=1, diff=1, fail=1 )
        assert vrun.countLines( 'Exiting with ' ) == 3

        # check running within the test results directory

        os.chdir( vrun.resultsDir()+'/PassTest' )
        vtu.runvvtest( '-R' ).assertCounts( total=1, npass=1 )

    def test_generate_test_area_with_option_g_then_run(self):
        ""
        util.writefile( 'helloworld.vvt', """
            import subprocess, vvtest_util as vvt
            subprocess.check_call( vvt.SRCDIR+'/helloworld.sh' )
            """ )
        util.writescript( 'helloworld.sh', """
            #!/bin/bash
            echo "hello world"
            exit 0
            """ )

        vrun = vtu.runvvtest( '-g' )
        vrun.assertCounts( total=1, notrun=1 )

        os.chdir( vrun.resultsDir()+'/helloworld' )
        vtu.runvvtest().assertCounts( total=1, npass=1 )

        assert len( util.grepfiles( 'hello world', 'execute.log' ) ) == 1

    def test_that_the_test_specification_file_is_automatically_soft_linked(self):
        ""
        util.writefile( "auto1.vvt", """
            import os
            assert os.path.exists( 'auto1.vvt' )
            """ )
        util.writefile( "auto2.vvt", """
            #VVT: link : auto2.vvt
            import os
            assert os.path.exists( 'auto2.vvt' ) and os.path.islink( 'auto2.vvt' )
            """ )

        vtu.runvvtest().assertCounts( total=2, npass=2 )

    def test_behavior_when_two_tests_have_the_same_filename_path(self):
        ""
        util.writefile( "adir/subdir/dup.vvt", """
            print ( "test adir" )
            """ )

        util.writefile( "bdir/subdir/dup.vvt", """
            print ( "test bdir" )
            """ )
        time.sleep(1)

        # the bdir test should be selected because it is scanned first
        vrun = vtu.runvvtest( 'bdir adir' )
        assert vrun.countLines( 'arning*duplicate' ) == 1
        vrun.assertCounts( total=1, npass=1 )

        assert vrun.countGrepLogs( 'test bdir' ) == 1
        assert vrun.countGrepLogs( 'test adir' ) == 0

        fL = util.findfiles( 'dup.vvt', 'TestResults.*' )
        assert len( fL ) == 1
        fn = os.readlink( fL[0] )
        assert fn.endswith( 'bdir/subdir/dup.vvt' )

        vtu.remove_results()

        # now the adir test should be selected
        vrun = vtu.runvvtest( 'adir bdir' )
        vrun.assertCounts( total=1, npass=1 )

        assert vrun.countGrepLogs( 'test bdir' ) == 0
        assert vrun.countGrepLogs( 'test adir' ) == 1

        fL = util.findfiles( 'dup.vvt', 'TestResults.*' )
        assert len( fL ) == 1
        fn = os.readlink( fL[0] )
        assert fn.endswith( 'adir/subdir/dup.vvt' )

    def test_os_fork_with_retry(self):
        ""
        save_os_fork = os.fork

        def fake_os_fork():
            return 42

        try:
            os.fork = fake_os_fork
            pid = testexec.os_fork_with_retry( 2 )
        finally:
            os.fork = save_os_fork
        assert pid == 42

        def os_fork_always_OSError():
            raise OSError( 'fake it' )

        try:
            os.fork = os_fork_always_OSError
            try:
                pid = testexec.os_fork_with_retry( 2 )
            except OSError:
                pass
            else:
                raise Exception( 'expected OSError' )
        finally:
            os.fork = save_os_fork

        testexec._fork_count = 0
        def os_fork_eventually_works():
            if testexec._fork_count < 2:
                testexec._fork_count += 1
                raise OSError( 'fake it' )
            return 43

        try:
            os.fork = os_fork_eventually_works
            pid = testexec.os_fork_with_retry( 5 )
        finally:
            os.fork = save_os_fork
        assert pid == 43


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
