#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import glob

import vvtestutils as vtu
import testutils as util

from libvvtest.testspec import TestSpec
import libvvtest.testcreator as testcreator
from libvvtest.filtering import TestFilter


class exclude_tests( vtu.vvtestTestCase ):

    def test_exclude_and_include_on_current_platform(self):
        ""
        platname = vtu.core_platform_name()

        for batch in [False,True]:

            vtu.remove_results()

            util.writefile( 'exclude.vvt', """
                pass
                """ )
            vtu.runvvtest( batch=batch ).assertCounts( total=1, npass=1 )

            vtu.remove_results()

            util.writefile( 'exclude.vvt', """
                #VVT: enable (platforms=not """+platname+""")
                """ )
            vtu.runvvtest( batch=batch ).assertCounts( total=0 )

            # include the current platform

            vtu.remove_results()

            util.writefile( 'exclude.vvt', """
                #VVT: enable (platforms="""+platname+""")
                """ )
            vtu.runvvtest( batch=batch ).assertCounts( total=1, npass=1 )

            # add both an include and an exclude

            vtu.remove_results()

            util.writefile( 'exclude.vvt', """
                #VVT: enable (platforms="""+platname+""")
                #VVT: enable (platforms=not """+platname+""")
                """ )
            vtu.runvvtest( batch=batch ).assertCounts( total=0 )

            # add -A option to ignore the include/exclude tags

            vtu.remove_results()

            vtu.runvvtest( '-A', batch=batch ).assertCounts( total=1, npass=1 )

            # an empty include

            vtu.remove_results()

            util.writefile( 'exclude.vvt', """
                #VVT: enable (platforms=)
                """ )
            vtu.runvvtest( batch=batch ).assertCounts( total=0 )

    def test_using_an_option_attribute_with_include(self):
        ""
        util.writefile( "opt_exclude.vvt", '''
            #VVT: enable (options="2D and (tridev or tri8)")
            ''' )

        vtu.runvvtest().assertCounts( total=0 )

        vrun = vtu.runvvtest( '-w -o 2D+tridev' )
        vrun.assertCounts( total=1, npass=1 )

        vrun = vtu.runvvtest( '-w -o 2D+tri8' )
        vrun.assertCounts( total=1, npass=1 )

        vrun = vtu.runvvtest( '-w -o 2D -o tri8' )
        vrun.assertCounts( total=1, npass=1 )

        vrun = vtu.runvvtest( '-w -o 3D -o tri8' )
        vrun.assertCounts( total=0 )

        util.writefile( "opt_exclude.vvt", '''
            #VVT: enable (options="2D and ( tdev or t8 )")
            ''' )

        vtu.runvvtest( '-w' ).assertCounts( total=0 )

        vtu.runvvtest( '-w -o 2D+tdev' ).assertCounts( total=1, npass=1 )

    def test_include_option_expression_corner_cases(self):
        ""
        util.writefile( 'ctest.vvt', """
            #VVT: enable (options="foo or b^r")
            """ )
        util.writefile( 'dtest.vvt', """
            #VVT: enable (options="foo or b$r")
            """ )
        util.writefile( 'ytest.vvt', """
            #VVT: enable (options="foo or bar-*")
            """ )

        tspec = vtu.parse_single_test_file( 'ctest.vvt' )
        assert tspec.getOptionEnableExpression().evaluate( 'b^r' )

        self.assertRaises( testcreator.TestSpecError,
                           vtu.parse_single_test_file, 'dtest.vvt' )

        tspec = vtu.parse_single_test_file( 'ytest.vvt' )
        wx = tspec.getOptionEnableExpression()
        assert not wx.evaluate( 'bar' )
        assert     wx.evaluate( 'bar-baz' )

    def test_using_a_platform_name_that_is_not_the_current_one(self):
        ""
        platname = vtu.core_platform_name()

        assert platname != "Fake"
        fakeplatname = "Fake"

        util.writefile( "plats.vvt", '''
            #VVT: enable (platforms='''+fakeplatname+''')
            ''' )

        vtu.runvvtest().assertCounts( total=0 )

        vtu.runvvtest( '-x '+fakeplatname ).assertCounts( total=1, npass=1 )

        vtu.remove_results()

        util.writefile( "plats.vvt", '''
            #VVT: enable (platforms="'''+fakeplatname+''' or Dummy")
            ''')

        vtu.runvvtest().assertCounts( total=0 )

        vtu.runvvtest( '-x '+fakeplatname ).assertCounts( total=1, npass=1 )

        vtu.remove_results()

        vtu.runvvtest( '-x '+platname+'/Junk' ).assertCounts( total=0 )

        vrun = vtu.runvvtest( '-x '+fakeplatname+'/Junk' )
        vrun.assertCounts( total=1, npass=1 )

        vtu.remove_results()

        util.writefile( "plats.vvt", '''
            pass
            ''' )

        vtu.runvvtest().assertCounts( total=1, npass=1 )

        vtu.remove_results()

        vtu.runvvtest( '-x '+fakeplatname ).assertCounts( total=1, npass=1 )

        vtu.remove_results()

        vtu.runvvtest( '-X '+fakeplatname ).assertCounts( total=0 )

        vrun = vtu.runvvtest( '-x '+platname+' -X '+fakeplatname )
        vrun.assertCounts( total=0 )

    def test_command_line_platform_expressions(self):
        ""
        util.writefile( 'atest.vvt', """
            #VVT: enable (platforms=Linux or Darwin)
            """ )
        util.writefile( 'btest.vvt', """
            #VVT: enable (platforms=XBox^1)
            """ )
        util.writefile( 'ctest.vvt', """
            #VVT: enable (platforms=foo or PS*)
            """ )
        time.sleep(1)

        vtu.runvvtest( '--plat pooky' ).assertCounts( total=0 )

        vrun = vtu.runvvtest( '-w --plat pooky -x "XBox or Darwin"' )
        vrun.assertCounts( total=1,  npass=1 )
        assert vrun.getTestIds() == ['atest']

        vrun = vtu.runvvtest( '-w --plat pooky -x "XBox^1 or PS2"' )
        vrun.assertCounts( total=2,  npass=2 )
        assert vrun.getTestIds() == ['btest','ctest']

        vrun = vtu.runvvtest( '-w --plat pooky -x "XBox^1 or Da*rwin"',
                              raise_on_error=False )
        assert vrun.x != 0
        assert len( vrun.grepLines( 'invalid expression word' ) ) == 1

    def test_using_include_on_test_file_with_more_than_one_test_name(self):
        ""
        platname = vtu.core_platform_name()

        assert platname != "Fake"
        fakeplatname = "Fake"

        util.writefile( "multi.vvt", '''
            #VVT: testname = multi
            #VVT: testname = dual
            #VVT: enable (testname=multi, platforms='''+fakeplatname+''')
            #VVT: enable (testname=dual, platforms='''+platname+''')
            ''' )

        vtu.runvvtest().assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults.*/dual/execute.log' ) ) == 1

        vtu.runvvtest( '-w -x '+platname ).assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults.*/dual/execute.log' ) ) == 1

        vtu.runvvtest( '-w -X '+platname ).assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults.*/multi/execute.log' ) ) == 1

        vrun = vtu.runvvtest( '-w -x '+platname+'/'+fakeplatname )
        vrun.assertCounts( total=2, npass=2 )
        assert len( glob.glob( 'TestResults.*/multi/execute.log' ) ) == 1
        assert len( glob.glob( 'TestResults.*/dual/execute.log' ) ) == 1

    def test_the_enable_directive_on_script_test(self):
        ""
        platname = vtu.core_platform_name()

        # disable current platform
        util.writescript( 'exclude.vvt', """
            #!/bin/sh
            #VVT: enable (platforms=not """+platname+""")
            echo "hello world"
            """ )

        vtu.runvvtest().assertCounts( total=0 )

        # enable current platform
        util.writescript( 'exclude.vvt', """
            #!/bin/sh
            #VVT: enable (platforms="""+platname+""")
            echo "hello world"
            """ )

        vtu.runvvtest( '-w' ).assertCounts( total=1, npass=1 )

        # add both an enable and disable
        util.writescript( 'exclude.vvt', """
            #!/bin/sh
            #VVT: enable (platforms=not """+platname+""")
            #VVT: enable (platforms="""+platname+""")
            echo "hello world"
            """ )

        vtu.runvvtest( '-w' ).assertCounts( total=0 )

        # use -A to ignore enable/disable
        vtu.runvvtest( '-w -A' ).assertCounts( total=1, npass=1 )

        # an empty platform enable
        util.writescript( 'exclude.vvt', """
            #!/bin/sh
            #VVT: name=empty1
            #VVT: name=empty2
            #VVT: enable (testname=empty1, platforms=)
            echo "hello world"
            """ )

        vtu.runvvtest( '-w' ).assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults*/empty2/execute.log' ) ) == 1

        util.writescript( 'exclude.vvt', """
            #!/bin/sh
            #VVT: name=empty1
            #VVT: name=empty2
            #VVT: enable (testname=empty2, platforms)
            echo "hello world"
            """ )

        vtu.runvvtest( '-w' ).assertCounts( total=1, npass=1 )
        assert len( glob.glob( 'TestResults*/empty1/execute.log' ) ) == 1

    def test_using_option_attributes_in_an_enable_directive(self):
        ""
        platname = vtu.core_platform_name()

        # some complex option expression
        util.writescript( 'opts.vvt', """
            #!/bin/sh
            #VVT: enable ( options="2D and ( tridev or tri8 )" )
            echo "hello world"
            """ )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=0 )

        vtu.runvvtest( '-w -o 2D+tridev' ).assertCounts( total=1, npass=1 )

        vtu.runvvtest( '-w -o 2D+tri8' ).assertCounts( total=1, npass=1 )

        vtu.runvvtest( '-w -o 2D -o tri8' ).assertCounts( total=1, npass=1 )

        vtu.runvvtest( '-w -o 3D -o tri8' ).assertCounts( total=0 )

        # combine platform with option expression
        util.writescript( 'opts.vvt', """
            #!/bin/sh
            #VVT: enable (options="2D and ( tridev or tri8 )",""" + \
                    """platforms="""+platname+""")
            echo "hello world"
            """ )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=0 )

        vtu.runvvtest( '-w -o 2D+tridev' ).assertCounts( total=1, npass=1 )

        vrun = vtu.runvvtest( '-w -o 2D+tridev -X '+platname )
        vrun.assertCounts( total=0 )

        vrun = vtu.runvvtest( '-w -o 2D+tridev -x '+platname )
        vrun.assertCounts( total=1, npass=1 )

        # reverse the order (and add an extra comma in the attributes)
        util.writescript( 'opts.vvt', """
            #!/bin/sh
            #VVT: enable ( platforms="""+platname+", " + \
                       """options="2D and ( tridev or tri8 )", )
            echo "hello world"
            """ )
        time.sleep(1)

        vtu.runvvtest().assertCounts( total=0 )

        vtu.runvvtest( '-w -o 2D+tridev' ).assertCounts( total=1, npass=1 )

        vrun = vtu.runvvtest( '-w -o 2D+tridev -X '+platname )
        vrun.assertCounts( total=0 )

    def test_parse_enable_directive(self):
        ""
        util.writefile( 'blue.vvt', """
            #VVT: enable (platforms=)
            """ )
        util.writefile( 'red.vvt', """
            #VVT: enable (platforms=XBox)
            """ )
        util.writefile( 'red2.vvt', """
            #VVT: enable ( platforms = XBox )
            """ )
        util.writefile( 'green1.vvt', """
            #VVT: enable
            """ )
        util.writefile( 'green2.vvt', """
            #VVT: enable = True
            """ )
        util.writefile( 'green3.vvt', """
            #VVT: enable = False
            """ )
        util.writefile( 'green4.vvt', """
            #VVT: enable : false
            """ )
        util.writefile( 'pink1.vvt', """
            #VVT: enable (platforms=) : false
            # this is an error
            """ )
        util.writefile( 'pink2.vvt', """
            #VVT: enable (options=) = false
            # this is an error
            """ )
        util.writefile( 'pink3.vvt', """
            #VVT: enable (options=foo) = true
            # this is ok but redundent/unnecessary
            """ )
        util.writefile( 'pink4.vvt', """
            #VVT: enable = foobar
            """ )
        time.sleep(1)

        tspec = vtu.parse_single_test_file( 'blue.vvt' )
        assert tspec.isEnabled()
        expr = tspec.getPlatformEnableExpression()
        assert not expr.evaluate( 'XBox' )
        assert not expr.evaluate( 'Linux' )

        tspec = vtu.parse_single_test_file( 'red.vvt' )
        expr = tspec.getPlatformEnableExpression()
        assert     expr.evaluate( 'XBox' )
        assert not expr.evaluate( 'PS2' )

        tspec = vtu.parse_single_test_file( 'red2.vvt' )
        expr = tspec.getPlatformEnableExpression()
        assert     expr.evaluate( 'XBox' )
        assert not expr.evaluate( 'PS2' )

        tspec = vtu.parse_single_test_file( 'green1.vvt' )
        assert tspec.isEnabled()

        tspec = vtu.parse_single_test_file( 'green2.vvt' )
        assert tspec.isEnabled()

        tspec = vtu.parse_single_test_file( 'green3.vvt' )
        assert not tspec.isEnabled()

        tspec = vtu.parse_single_test_file( 'green4.vvt' )
        assert not tspec.isEnabled()

        self.assertRaises( testcreator.TestSpecError,
                           vtu.parse_single_test_file, 'pink1.vvt' )

        self.assertRaises( testcreator.TestSpecError,
                           vtu.parse_single_test_file, 'pink2.vvt' )

        tspec = vtu.parse_single_test_file( 'pink3.vvt' )
        assert tspec.isEnabled()
        assert tspec.getOptionEnableExpression() is not None

        self.assertRaises( testcreator.TestSpecError,
                           vtu.parse_single_test_file, 'pink4.vvt' )

    def test_filtering_out_tests_by_enable(self):
        ""
        tcase = vtu.make_fake_TestCase()
        tf = TestFilter( None, None )
        assert tf.checkEnabled( tcase )

        tcase.getSpec().setEnabled( False )
        assert not tf.checkEnabled( tcase )

    def test_parse_enable_integration_test(self):
        ""
        util.writefile( 'blue.vvt', """
            #VVT: enable : True
            import vvtest_util
            """ )
        util.writefile( 'red.vvt', """
            #VVT: enable : False
            import vvtest_util
            """ )
        time.sleep(1)

        vrun = vtu.runvvtest( '-vv' )
        vrun.assertCounts( total=2, npass=1, skip=1 )
        assert vrun.countTestLines( 'pass *blue' ) == 1
        assert vrun.countTestLines( 'skip *red' ) == 1


########################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
