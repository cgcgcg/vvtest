#!/usr/bin/env python

import os, sys
import glob
import time

# this will os.chdir() to a subdirectory
from testutils import *

def main():
    """
    """
    argL = get_arg_list()

    if len(argL) == 0:
        argL = """test01 test02 test03 test04 test05 test06 test07
                  test08 test09 test10 test11 test12
                  test13 test14 test15 test16
               """.split()

    # set these for the pipeline tests
    os.environ['VVTEST_BATCH_READ_DELAY'] = '5'
    os.environ['VVTEST_BATCH_READ_DELAY_MAX'] = '15'
    os.environ['VVTEST_BATCH_SLEEP_LENGTH'] = '1'
    
    savedir = os.getcwd()
    for func in argL:
        os.chdir( savedir )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )
        eval( func+'()' )


#####################################################################

def test01():
    """
    put a parameterize/analyze test at the top level
    """
    writefile( 'top/param_analyze.xml', """
        <rtest name="param_analyze">
          <keywords> fast medium </keywords>
          <parameterize keywords="fast"     np="1"/>
          <parameterize not_keywords="fast" np="2 4"/>
          <link_files> $NAME.inp </link_files>
          <execute>
             touch execute_file.np=$np || exit 1
             ls $NAME.inp || exit 1
          </execute>
          <analyze keywords="fast">
             ls ../param_analyze.np=1/execute_file.np=1 || exit 1
          </analyze>
          <analyze not_keywords="fast">
             ls ../param_analyze.np=2/execute_file.np=2 || exit 1
             ls ../param_analyze.np=4/execute_file.np=4 || exit 1
          </analyze>
        </rtest>""" )

    writefile( 'top/param_analyze.inp', """
        some sort of input deck
        """ )

    writefile( 'parentchild/good.xml', """
        <rtest name="good">
          <keywords> fast medium </keywords>
          <parameterize timestep="1 2"/>
          <execute>
            touch afile.$timestep
          </execute>
          <analyze>
             ls ../good.timestep=1/afile.1 || exit 1
             ls ../good.timestep=2/afile.2 || exit 1
          </analyze>
        </rtest>""" )

    writefile( 'parentchild/bad.xml', """
        <rtest name="bad">
          <keywords> fast medium </keywords>
          <parameterize timestep="1 2"/>
          <execute>
            echo "fake failure"
            exit 1
          </execute>
          <analyze>
             ls ../bad.timestep=1/bfile.1 || exit 1
             ls ../bad.timestep=2/bfile.2 || exit 1
          </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( "parentchild" )
    assert np == 3 and nd == 0 and nf == 2 and nn == 1

    # "fix" the bad test
    writefile( 'parentchild/bad.xml', """
        <rtest name="bad">
          <keywords> fast medium </keywords>
          <parameterize timestep="1 2"/>
          <execute>
            touch bfile.$timestep
          </execute>
          <analyze>
             ls ../bad.timestep=1/bfile.1 || exit 1
             ls ../bad.timestep=2/bfile.2 || exit 1
          </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( '-R -k notdone/notrun/fail parentchild' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0


def test02():
    """
    exercise logic with only one analyze
    """
    writefile( 'parentchild/good.xml', """
        <rtest name="good">
          <keywords> fast medium </keywords>
          <parameterize timestep="1 2"/>
          <execute>
            touch afile.$timestep
          </execute>
          <analyze>
             ls ../good.timestep=1/afile.1 || exit 1
             ls ../good.timestep=2/afile.2 || exit 1
          </analyze>
        </rtest>""" )
    
    writefile( 'parentchild/bad.xml', """
    <rtest name="bad">
      <keywords> fast medium </keywords>
      <parameterize timestep="1 2"/>
      <execute>
        if ( "$timestep" == 2 ) then
          echo "fake failure"
          exit 1
        else
          touch bfile.$timestep
        endif
      </execute>
      <analyze>
         ls ../bad.timestep=1/bfile.1 || exit 1
         ls ../bad.timestep=2/bfile.2 || exit 1
      </analyze>
    </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( '-k bad parentchild' )
    assert np == 1 and nd == 0 and nf == 1 and nn == 1

    # "fix" the bad test
    writefile( 'parentchild/bad.xml', """
    <rtest name="bad">
      <keywords> fast medium </keywords>
      <parameterize timestep="1 2"/>
      <execute>
        touch bfile.$timestep
      </execute>
      <analyze>
         ls ../bad.timestep=1/bfile.1 || exit 1
         ls ../bad.timestep=2/bfile.2 || exit 1
      </analyze>
    </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( '-R -k notdone/notrun/fail -k bad parentchild' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0


def test03():
    """
    same as test02 but use pipeline
    """
    # determine the platform
    writefile( "null.xml", """
        <rtest name="null">
        </rtest>""" )
    out,np,nd,nf,nn = run_vvtest()
    platname = platform_name( out )
    os.remove( 'null.xml' )
    remove_results()
    
    if platname in batchplatforms:
      
      writefile( 'parentchild/good.xml', """
          <rtest name="good">
            <keywords> fast medium </keywords>
            <parameterize timestep="1 2"/>
            <execute>
              touch afile.$timestep
            </execute>
            <analyze>
               ls ../good.timestep=1/afile.1 || exit 1
               ls ../good.timestep=2/afile.2 || exit 1
            </analyze>
          </rtest>""" )
      
      writefile( 'parentchild/bad.xml', """
          <rtest name="bad">
            <keywords> fast medium </keywords>
            <parameterize timestep="1 2"/>
            <execute>
              echo "fake failure"
              exit 1
            </execute>
            <analyze>
               ls ../bad.timestep=1/bfile.1 || exit 1
               ls ../bad.timestep=2/bfile.2 || exit 1
            </analyze>
          </rtest>""" )
      
      out,np,nd,nf,nn = run_vvtest( '--pipeline parentchild' )
      assert np == 3 and nd == 0 and nf == 2 and nn == 1
      
      # "fix" the bad test
      writefile( 'parentchild/bad.xml', """
          <rtest name="bad">
            <keywords> fast medium </keywords>
            <parameterize timestep="1 2"/>
            <execute>
              touch bfile.$timestep
            </execute>
            <analyze>
               ls ../bad.timestep=1/bfile.1 || exit 1
               ls ../bad.timestep=2/bfile.2 || exit 1
            </analyze>
          </rtest>""" )
      
      out,np,nd,nf,nn = run_vvtest( '--pipeline -R -k notdone/notrun/fail parentchild' )
      assert np == 3 and nd == 0 and nf == 0 and nn == 0
      
      remove_results()
      
      # exercise logic with only one analyze
      
      writefile( 'parentchild/bad.xml', """
          <rtest name="bad">
            <keywords> fast medium </keywords>
            <parameterize timestep="1 2"/>
            <execute>
              if ( "$timestep" == 2 ) then
                echo "fake failure"
                exit 1
              else
                touch bfile.$timestep
              endif
            </execute>
            <analyze>
               ls ../bad.timestep=1/bfile.1 || exit 1
               ls ../bad.timestep=2/bfile.2 || exit 1
            </analyze>
          </rtest>""" )
      
      out,np,nd,nf,nn = run_vvtest( '--pipeline -k bad parentchild' )
      assert np == 1 and nd == 0 and nf == 1 and nn == 1
      
      # "fix" the bad test
      writefile( 'parentchild/bad.xml', """
          <rtest name="bad">
            <keywords> fast medium </keywords>
            <parameterize timestep="1 2"/>
            <execute>
              touch bfile.$timestep
            </execute>
            <analyze>
               ls ../bad.timestep=1/bfile.1 || exit 1
               ls ../bad.timestep=2/bfile.2 || exit 1
            </analyze>
          </rtest>""" )
      
      out,np,nd,nf,nn = run_vvtest( '--pipeline -R -k notdone/notrun/fail -k bad parentchild' )
      assert np == 2 and nd == 0 and nf == 0 and nn == 0


def test04():
    """
    check that the keywords in an analyze are included in the test keywords
    """
    writefile( 'keyw.xml', """
        <rtest name="keyw">
          <keywords> fast medium </keywords>
          <parameterize np="1 2"/>
          <analyze not_keywords="full"> echo "is not full" </analyze>
          <analyze keywords="full"> echo "is full" </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/keyw/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'is not full' ) ) >= 1

    out,np,nd,nf,nn = run_vvtest( '-w -k full' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/keyw/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'is full' ) ) >= 1


def test05():
    """
    check the case where no parameterize but an analyze is given
    """
    writefile( 'noparam.xml', """
        <rtest name="noparam">
          <keywords> fast medium </keywords>
          <execute> echo "exec standard" </execute>
          <analyze>
            echo "exec analyze"
          </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 0 and nd == 0 and nf == 0 and nn == 0
    assert len( grep( out, 'skipping .*noparam'  ) ) == 1


def test06():
    """
    using testname filter with analyze
    """
    writefile( 'multi.xml', """
        <rtest name="multi">
          <rtest name="multi2"/>
          <parameterize param="one two"/>
          <execute> echo "exec test $NAME param $param" </execute>
          <analyze testname="multi">
            echo "analyze test $NAME (multi)"
          </analyze>
          <analyze testname="multi2">
            echo "analyze test $NAME (multi2)"
          </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 6 and nd == 0 and nf == 0 and nn == 0
    
    fL = glob.glob( 'TestResults.*/multi.param=one/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi.param=two/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'analyze test multi ' ) ) >= 1
    
    fL = glob.glob( 'TestResults.*/multi2.param=one/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi2 ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2.param=two/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi2 ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'analyze test multi2 ' ) ) >= 1


def test07():
    """
    testname filter with analyze where one test does not have an analyze
    """
    writefile( 'multi.xml', """
        <rtest name="multi">
          <rtest name="multi2"/>
          <parameterize param="one two"/>
          <execute> echo "exec test $NAME param $param" </execute>
          <analyze testname="multi2">
            echo "analyze test $NAME (multi2)"
          </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 5 and nd == 0 and nf == 0 and nn == 0
    
    fL = glob.glob( 'TestResults.*/multi.param=one/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi.param=two/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi/execute.log' )
    assert len(fL) == 0
    
    fL = glob.glob( 'TestResults.*/multi2.param=one/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi2 ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2.param=two/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi2 ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'analyze test multi2 ' ) ) >= 1


########################################################################

def test08():
    """
    analyze tests should not wait until the end to run
    """
    writefile( 'test1.xml', """
        <rtest name="test1">
          <parameterize timestep="1 2"/>
          <execute>
            sleep 1
            touch afile.$timestep
          </execute>
          <analyze>
             ls ../test1.timestep=1/afile.1 || exit 1
             ls ../test1.timestep=2/afile.2 || exit 1
          </analyze>
        </rtest>""" )
    writefile( 'test2.xml', """
        <rtest name="test2">
          <execute>
            sleep 10
            echo "that was a nice nap"
          </execute>
        </rtest>""" )
    
    out,np,nd,nf,nn = run_vvtest( '-n 4 --sort x' )
    assert np == 4 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )

    tL = testtimes( out )
    assert len(tL) == 4
    assert tL[0][0] == tdir+'/test1'
    assert tL[1][0] == tdir+'/test1.timestep=1'
    assert tL[2][0] == tdir+'/test1.timestep=2'
    assert tL[3][0] == tdir+'/test2'
    assert tL[0][1] >= tL[1][2] and tL[0][1] >= tL[2][2]
    assert tL[0][1] < tL[3][2]
    
    if platname in batchplatforms:
        
        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '-n 4 --sort x --pipeline --qsub-limit 5' )
        assert np == 4 and nd == 0 and nf == 0 and nn == 0

        tL = testtimes( out )
        assert len(tL) == 4
        assert tL[0][0] == tdir+'/test1'
        assert tL[1][0] == tdir+'/test1.timestep=1'
        assert tL[2][0] == tdir+'/test1.timestep=2'
        assert tL[3][0] == tdir+'/test2'
        assert tL[0][1] >= tL[1][2] and tL[0][1] >= tL[2][2]
        assert tL[0][1] < tL[3][2]


def test09():
    """
    analyze should not run if a child failed previously
    """
    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize timestep="1 2"/>
          <execute>
            if ( "$timestep" == 2 ) then
              echo "fake failure"
              exit 1
            else
              touch afile.$timestep
            endif
          </execute>
          <analyze>
             ls ../atest.timestep=1/afile.1 || exit 1
             ls ../atest.timestep=2/afile.2 || exit 1
          </analyze>
        </rtest>""" )
    
    # the analyze should not run because a child fails
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 1 and nn == 1
    tdir = results_dir()
    platname = platform_name( out )

    # the analyze should not run here
    out,np,nd,nf,nn = run_vvtest()
    assert np == 0 and nd == 0 and nf == 0 and nn == 0
    
    # double check the state
    out,np,nd,nf,nn = run_vvtest( "-i" )
    assert np == 1 and nd == 0 and nf == 1 and nn == 1
    
    # "fix" the failure
    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize timestep="1 2"/>
          <execute>
            touch afile.$timestep
          </execute>
          <analyze>
             ls ../atest.timestep=1/afile.1 || exit 1
             ls ../atest.timestep=2/afile.2 || exit 1
          </analyze>
        </rtest>""" )
    
    # rerun the failure
    out,np,nd,nf,nn = run_vvtest( '-k fail' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    
    # now the analyze should run
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    
    out,np,nd,nf,nn = run_vvtest( "-i" )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    
    if platname in batchplatforms:
        
        remove_results()
        
        writefile( 'atest.xml', """
            <rtest name="atest">
              <parameterize timestep="1 2"/>
              <execute>
                if ( "$timestep" == 2 ) then
                  echo "fake failure"
                  exit 1
                else
                  touch afile.$timestep
                endif
              </execute>
              <analyze>
                 ls ../atest.timestep=1/afile.1 || exit 1
                 ls ../atest.timestep=2/afile.2 || exit 1
              </analyze>
            </rtest>""" )
        
        # the analyze should not run because a child fails
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 1 and nd == 0 and nf == 1 and nn == 1
        tdir = results_dir()
        platname = platform_name( out )

        # the analyze should not run here
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 0 and nd == 0 and nf == 0 and nn == 0
        
        # double check the state
        out,np,nd,nf,nn = run_vvtest( '-i' )
        assert np == 1 and nd == 0 and nf == 1 and nn == 1
        
        # "fix" the failure
        writefile( 'atest.xml', """
            <rtest name="atest">
              <parameterize timestep="1 2"/>
              <execute>
                touch afile.$timestep
              </execute>
              <analyze>
                 ls ../atest.timestep=1/afile.1 || exit 1
                 ls ../atest.timestep=2/afile.2 || exit 1
              </analyze>
            </rtest>""" )
        
        # rerun the failure
        out,np,nd,nf,nn = run_vvtest( '-k fail --pipeline' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        
        # now the analyze should run
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        
        out,np,nd,nf,nn = run_vvtest( '-i' )
        assert np == 3 and nd == 0 and nf == 0 and nn == 0


def test10():
    """
    behavior with previous children test results
    """
    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize timestep="1 2"/>
          <execute>
            sleep 5
            touch afile.$timestep
          </execute>
          <analyze>
             ls ../atest.timestep=1/bfile.1 || exit 1
             ls ../atest.timestep=2/bfile.2 || exit 1
          </analyze>
        </rtest>""" )
    
    # the analyze should fail
    out,np,nd,nf,nn = run_vvtest( '-n 3' )
    assert np == 2 and nd == 0 and nf == 1 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )

    # "fix" the execute
    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize timestep="1 2"/>
          <execute>
            sleep 5
            touch bfile.$timestep
          </execute>
          <analyze>
             ls ../atest.timestep=1/bfile.1 || exit 1
             ls ../atest.timestep=2/bfile.2 || exit 1
          </analyze>
        </rtest>""" )
    
    # the analyze test should NOT run at the same time as the children
    # (if it does in this case, then the analyze test will show a fail)
    out,np,nd,nf,nn = run_vvtest( '-R -n 3' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    
    if platname in batchplatforms:
        
        remove_results()

        writefile( 'atest.xml', """
            <rtest name="atest">
              <timeout value="15"/>
              <parameterize timestep="1 2"/>
              <execute>
                sleep 5
                touch afile.$timestep
              </execute>
              <analyze>
                 ls ../atest.timestep=1/bfile.1 || exit 1
                 ls ../atest.timestep=2/bfile.2 || exit 1
              </analyze>
            </rtest>""" )
        
        # the analyze should fail
        out,np,nd,nf,nn = run_vvtest( '--pipeline --qsub-length 1 --qsub-limit 5' )
        assert np == 2 and nd == 0 and nf == 1 and nn == 0

        # "fix" the execute
        writefile( 'atest.xml', """
            <rtest name="atest">
              <timeout value="15"/>
              <parameterize timestep="1 2"/>
              <execute>
                sleep 5
                touch bfile.$timestep
              </execute>
              <analyze>
                 ls ../atest.timestep=1/bfile.1 || exit 1
                 ls ../atest.timestep=2/bfile.2 || exit 1
              </analyze>
            </rtest>""" )
        
        # the analyze test should not run at the same time as the children
        # (if the analyze job does, then the analyze test will show a fail)
        out,np,nd,nf,nn = run_vvtest( '-R --pipeline --qsub-length 1 --qsub-limit 5' )
        assert np == 3 and nd == 0 and nf == 0 and nn == 0


def test11():
    """
    make sure if a child test takes more processors than available, then
    the analyze will still wait for all the children to finish
    """
    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize np="1 1 2 2" foo="bar baz bar baz"/>
          <execute>
            sleep 4
            touch afile.$foo.$np
          </execute>
          <analyze>
             ls ../atest.foo=bar.np=1/afile.bar.1 || exit 1
             ls ../atest.foo=baz.np=1/afile.baz.1 || exit 1
             ls ../atest.foo=bar.np=2/afile.bar.2 || exit 1
             ls ../atest.foo=baz.np=2/afile.baz.2 || exit 1
          </analyze>
        </rtest>""" )
    
    out,np,nd,nf,nn = run_vvtest( '-n 1' )
    assert np == 5 and nd == 0 and nf == 0 and nn == 0


def test12():
    """
    analyze tests that have bad children are not pruned when using -i
    """
    writefile( 'bad.xml', """
    <rtest name="bad">
      <keywords> fast medium </keywords>
      <parameterize timestep="1 2"/>
      <execute>
        if ( "$timestep" == 2 ) then
          echo "fake failure"
          exit 1
        else
          touch bfile.$timestep
        endif
      </execute>
      <analyze>
         ls ../bad.timestep=1/bfile.1 || exit 1
         ls ../bad.timestep=2/bfile.2 || exit 1
      </analyze>
    </rtest>""" )

    # the analyze should be run here
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 1 and nn == 1

    # the analyze should show up in the listing here
    out,np,nd,nf,nn = run_vvtest( '-i -k notrun/pass' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 1


########################################################################

def test13():
    """
    execute/analyze in a script test
    """    
    writescript( 'ana.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : V=a b
        #VVT: analyze : -a
        import os, sys
        import vvtest_util as vvt
        if '-a' in sys.argv:
            print ( 'running analyze' )
        else:
            print ( 'running execute' )
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )

    assert len( glob.glob( tdir+'/ana*/execute.log' ) ) == 3
    assert len( filegrep( tdir+'/ana.V=a/execute.log', 'running execute' ) ) == 1
    assert len( filegrep( tdir+'/ana.V=b/execute.log', 'running execute' ) ) == 1
    assert len( filegrep( tdir+'/ana/execute.log', 'running analyze' ) ) == 1
    
    if platname in batchplatforms:
        
        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 3 and nd == 0 and nf == 0 and nn == 0

        assert len( glob.glob( tdir+'/ana*/execute.log' ) ) == 3
        assert len( filegrep( tdir+'/ana.V=a/execute.log', 'running execute' ) ) == 1
        assert len( filegrep( tdir+'/ana.V=b/execute.log', 'running execute' ) ) == 1
        assert len( filegrep( tdir+'/ana/execute.log', 'running analyze' ) ) == 1

    # with only a single parameter value
    remove_results()
    writescript( 'ana.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : V=a
        #VVT: analyze : -a
        import os, sys
        import vvtest_util as vvt
        if '-a' in sys.argv:
            print ( 'running analyze' )
        else:
            print ( 'running execute' )
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )

    assert len( glob.glob( tdir+'/ana*/execute.log' ) ) == 2
    assert len( filegrep( tdir+'/ana.V=a/execute.log', 'running execute' ) ) == 1
    assert len( filegrep( tdir+'/ana/execute.log', 'running analyze' ) ) == 1
    
    if platname in batchplatforms:
        
        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0

        assert len( glob.glob( tdir+'/ana*/execute.log' ) ) == 2
        assert len( filegrep( tdir+'/ana.V=a/execute.log', 'running execute' ) ) == 1
        assert len( filegrep( tdir+'/ana/execute.log', 'running analyze' ) ) == 1


def test14():
    """
    execute/analyze in a script test where the analyze is a script
    """    
    writescript( 'ana.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : V=a b
        #VVT: analyze : ana.sh
        import os, sys
        import vvtest_util as vvt
        print ( 'running execute with param '+vvt.V )
        """ )
    writescript( 'ana.sh', """
        #!/bin/sh
        source vvtest_util.sh
        echo "running analyze"
        echo "name is $NAME with children params $PARAM_V"
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )

    assert len( glob.glob( tdir+'/ana*/execute.log' ) ) == 3
    assert len( filegrep( tdir+'/ana.V=a/execute.log', 'running execute' ) ) == 1
    assert len( filegrep( tdir+'/ana.V=a/execute.log', 'param a' ) ) == 1
    assert len( filegrep( tdir+'/ana.V=b/execute.log', 'running execute' ) ) == 1
    assert len( filegrep( tdir+'/ana.V=b/execute.log', 'param b' ) ) == 1
    assert len( filegrep( tdir+'/ana/execute.log', 'running analyze' ) ) == 1
    assert len( filegrep( tdir+'/ana/execute.log', 'params a b' ) ) == 1
    
    if platname in batchplatforms:
        
        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 3 and nd == 0 and nf == 0 and nn == 0

        assert len( glob.glob( tdir+'/ana*/execute.log' ) ) == 3
        assert len( filegrep( tdir+'/ana.V=a/execute.log', 'running execute' ) ) == 1
        assert len( filegrep( tdir+'/ana.V=a/execute.log', 'param a' ) ) == 1
        assert len( filegrep( tdir+'/ana.V=b/execute.log', 'running execute' ) ) == 1
        assert len( filegrep( tdir+'/ana.V=b/execute.log', 'param b' ) ) == 1
        assert len( filegrep( tdir+'/ana/execute.log', 'running analyze' ) ) == 1
        assert len( filegrep( tdir+'/ana/execute.log', 'params a b' ) ) == 1


def test15():
    """
    execute/analyze in a script test where the analyze method is chosen
    """    
    writescript( 'ana1.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : V=a b
        #VVT: analyze (file) : -ana.sh
        import os, sys
        import vvtest_util as vvt
        print ( 'running py execute' )
        """ )
    writescript( '-ana.sh', """
        #!/bin/sh
        source vvtest_util.sh
        echo "running sh analyze"
        """ )
    writescript( 'ana2.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : V=a b
        #VVT: analyze (argument) : yep
        import os, sys
        import vvtest_util as vvt
        if 'yep' in sys.argv[1:]:
            print ( 'running analyze' )
        else:
            print ( 'running execute' )
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 6 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )
    
    assert len( glob.glob( tdir+'/ana1*/execute.log' ) ) == 3
    assert len( filegrep( tdir+'/ana1.V=a/execute.log', 'running py execute' ) ) == 1
    assert len( filegrep( tdir+'/ana1.V=b/execute.log', 'running py execute' ) ) == 1
    assert len( filegrep( tdir+'/ana1/execute.log', 'running sh analyze' ) ) == 1
    assert len( glob.glob( tdir+'/ana2*/execute.log' ) ) == 3
    assert len( filegrep( tdir+'/ana2.V=a/execute.log', 'running execute' ) ) == 1
    assert len( filegrep( tdir+'/ana2.V=b/execute.log', 'running execute' ) ) == 1
    assert len( filegrep( tdir+'/ana2/execute.log', 'running analyze' ) ) == 1
    
    if platname in batchplatforms:
        
        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 6 and nd == 0 and nf == 0 and nn == 0
        
        assert len( glob.glob( tdir+'/ana1*/execute.log' ) ) == 3
        assert len( filegrep( tdir+'/ana1.V=a/execute.log', 'running py execute' ) ) == 1
        assert len( filegrep( tdir+'/ana1.V=b/execute.log', 'running py execute' ) ) == 1
        assert len( filegrep( tdir+'/ana1/execute.log', 'running sh analyze' ) ) == 1
        assert len( glob.glob( tdir+'/ana2*/execute.log' ) ) == 3
        assert len( filegrep( tdir+'/ana2.V=a/execute.log', 'running execute' ) ) == 1
        assert len( filegrep( tdir+'/ana2.V=b/execute.log', 'running execute' ) ) == 1
        assert len( filegrep( tdir+'/ana2/execute.log', 'running analyze' ) ) == 1


def test16():
    """
    execute/analyze where all but one parameter value is filtered out
    """    
    writescript( 'scr.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : V=a b
        #VVT: analyze : -a
        import os, sys
        import vvtest_util as vvt
        if '-a' in sys.argv:
            print ( 'running analyze with V='+repr(vvt.PARAM_V) )
        else:
            print ( 'running execute' )
        """ )
    
    ok,out = run_cmd( [vvtest,'-p', 'V<b or !V'] )
    assert ok
    np,nd,nf,nn = numpass(out),numdiff(out),numfail(out),numnotrun(out)
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )

    assert len( glob.glob( tdir+'/scr*/execute.log' ) ) == 2
    assert len( filegrep( tdir+'/scr.V=a/execute.log', 'running execute' ) ) == 1
    assert not os.path.exists( tdir+'/scr.V=b/execute.log' )
    assert len( filegrep( tdir+'/scr/execute.log', 'running analyze' ) ) == 1
    
    if platname in batchplatforms:
        
        remove_results()
        
        ok,out = run_cmd( [vvtest,'-p', 'V<b or !V', '--pipeline'] )
        assert ok
        np,nd,nf,nn = numpass(out),numdiff(out),numfail(out),numnotrun(out)
        assert np == 2 and nd == 0 and nf == 0 and nn == 0

        assert len( glob.glob( tdir+'/scr*/execute.log' ) ) == 2
        assert len( filegrep( tdir+'/scr.V=a/execute.log', 'running execute' ) ) == 1
        assert not os.path.exists( tdir+'/scr.V=b/execute.log' )
        assert len( filegrep( tdir+'/scr/execute.log', 'running analyze' ) ) == 1


########################################################################

main()
