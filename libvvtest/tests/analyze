#!/usr/bin/env python

import os, sys
import glob
import time

# this will os.chdir() to a subdirectory
from testutils import *

def main():
    """
    """
    argL = get_arg_list()

    if len(argL) == 0:
        argL = """test01 test02 test03 test04 test05 test06 test07
                  test08
               """.split()

    savedir = os.getcwd()
    for func in argL:
        os.chdir( savedir )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )
        eval( func+'()' )


#####################################################################

def test01():
    """
    put a parameterize/analyze test at the top level
    """
    writefile( 'top/param_analyze.xml', """
        <rtest name="param_analyze">
          <keywords> fast medium </keywords>
          <parameterize keywords="fast"     np="1"/>
          <parameterize not_keywords="fast" np="2 4"/>
          <link_files> $NAME.inp </link_files>
          <execute>
             touch execute_file.np=$np || exit 1
             ls $NAME.inp || exit 1
          </execute>
          <analyze keywords="fast">
             ls ../param_analyze.np=1/execute_file.np=1 || exit 1
          </analyze>
          <analyze not_keywords="fast">
             ls ../param_analyze.np=2/execute_file.np=2 || exit 1
             ls ../param_analyze.np=4/execute_file.np=4 || exit 1
          </analyze>
        </rtest>""" )

    writefile( 'top/param_analyze.inp', """
        some sort of input deck
        """ )

    writefile( 'parentchild/good.xml', """
        <rtest name="good">
          <keywords> fast medium </keywords>
          <parameterize timestep="1 2"/>
          <execute>
            touch afile.$timestep
          </execute>
          <analyze>
             ls ../good.timestep=1/afile.1 || exit 1
             ls ../good.timestep=2/afile.2 || exit 1
          </analyze>
        </rtest>""" )

    writefile( 'parentchild/bad.xml', """
        <rtest name="bad">
          <keywords> fast medium </keywords>
          <parameterize timestep="1 2"/>
          <execute>
            echo "fake failure"
            exit 1
          </execute>
          <analyze>
             ls ../bad.timestep=1/bfile.1 || exit 1
             ls ../bad.timestep=2/bfile.2 || exit 1
          </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( "parentchild" )
    assert np == 3 and nd == 0 and nf == 2 and nn == 1

    # "fix" the bad test
    writefile( 'parentchild/bad.xml', """
        <rtest name="bad">
          <keywords> fast medium </keywords>
          <parameterize timestep="1 2"/>
          <execute>
            touch bfile.$timestep
          </execute>
          <analyze>
             ls ../bad.timestep=1/bfile.1 || exit 1
             ls ../bad.timestep=2/bfile.2 || exit 1
          </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( '-R -k notdone/notrun/fail parentchild' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0


def test02():
    """
    exercise logic with only one analyze
    """
    writefile( 'parentchild/good.xml', """
        <rtest name="good">
          <keywords> fast medium </keywords>
          <parameterize timestep="1 2"/>
          <execute>
            touch afile.$timestep
          </execute>
          <analyze>
             ls ../good.timestep=1/afile.1 || exit 1
             ls ../good.timestep=2/afile.2 || exit 1
          </analyze>
        </rtest>""" )
    
    writefile( 'parentchild/bad.xml', """
    <rtest name="bad">
      <keywords> fast medium </keywords>
      <parameterize timestep="1 2"/>
      <execute>
        if ( "$timestep" == 2 ) then
          echo "fake failure"
          exit 1
        else
          touch bfile.$timestep
        endif
      </execute>
      <analyze>
         ls ../bad.timestep=1/bfile.1 || exit 1
         ls ../bad.timestep=2/bfile.2 || exit 1
      </analyze>
    </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( '-k bad parentchild' )
    assert np == 1 and nd == 0 and nf == 1 and nn == 1

    # "fix" the bad test
    writefile( 'parentchild/bad.xml', """
    <rtest name="bad">
      <keywords> fast medium </keywords>
      <parameterize timestep="1 2"/>
      <execute>
        touch bfile.$timestep
      </execute>
      <analyze>
         ls ../bad.timestep=1/bfile.1 || exit 1
         ls ../bad.timestep=2/bfile.2 || exit 1
      </analyze>
    </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( '-R -k notdone/notrun/fail -k bad parentchild' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0


def test03():
    """
    same as test02 but use pipeline
    """
    # determine the platform
    writefile( "null.xml", """
        <rtest name="null">
        </rtest>""" )
    out,np,nd,nf,nn = run_vvtest()
    platname = platform_name( out )
    os.remove( 'null.xml' )
    remove_results()
    
    if platname in batchplatforms:
      
      writefile( 'parentchild/good.xml', """
          <rtest name="good">
            <keywords> fast medium </keywords>
            <parameterize timestep="1 2"/>
            <execute>
              touch afile.$timestep
            </execute>
            <analyze>
               ls ../good.timestep=1/afile.1 || exit 1
               ls ../good.timestep=2/afile.2 || exit 1
            </analyze>
          </rtest>""" )
      
      writefile( 'parentchild/bad.xml', """
          <rtest name="bad">
            <keywords> fast medium </keywords>
            <parameterize timestep="1 2"/>
            <execute>
              echo "fake failure"
              exit 1
            </execute>
            <analyze>
               ls ../bad.timestep=1/bfile.1 || exit 1
               ls ../bad.timestep=2/bfile.2 || exit 1
            </analyze>
          </rtest>""" )
      
      out,np,nd,nf,nn = run_vvtest( '--pipeline parentchild' )
      assert np == 3 and nd == 0 and nf == 2 and nn == 1
      
      # "fix" the bad test
      writefile( 'parentchild/bad.xml', """
          <rtest name="bad">
            <keywords> fast medium </keywords>
            <parameterize timestep="1 2"/>
            <execute>
              touch bfile.$timestep
            </execute>
            <analyze>
               ls ../bad.timestep=1/bfile.1 || exit 1
               ls ../bad.timestep=2/bfile.2 || exit 1
            </analyze>
          </rtest>""" )
      
      out,np,nd,nf,nn = run_vvtest( '--pipeline -R -k notdone/notrun/fail parentchild' )
      assert np == 3 and nd == 0 and nf == 0 and nn == 0
      
      remove_results()
      
      # exercise logic with only one analyze
      
      writefile( 'parentchild/bad.xml', """
          <rtest name="bad">
            <keywords> fast medium </keywords>
            <parameterize timestep="1 2"/>
            <execute>
              if ( "$timestep" == 2 ) then
                echo "fake failure"
                exit 1
              else
                touch bfile.$timestep
              endif
            </execute>
            <analyze>
               ls ../bad.timestep=1/bfile.1 || exit 1
               ls ../bad.timestep=2/bfile.2 || exit 1
            </analyze>
          </rtest>""" )
      
      out,np,nd,nf,nn = run_vvtest( '--pipeline -k bad parentchild' )
      assert np == 1 and nd == 0 and nf == 1 and nn == 1
      
      # "fix" the bad test
      writefile( 'parentchild/bad.xml', """
          <rtest name="bad">
            <keywords> fast medium </keywords>
            <parameterize timestep="1 2"/>
            <execute>
              touch bfile.$timestep
            </execute>
            <analyze>
               ls ../bad.timestep=1/bfile.1 || exit 1
               ls ../bad.timestep=2/bfile.2 || exit 1
            </analyze>
          </rtest>""" )
      
      out,np,nd,nf,nn = run_vvtest( '--pipeline -R -k notdone/notrun/fail -k bad parentchild' )
      assert np == 2 and nd == 0 and nf == 0 and nn == 0


def test04():
    """
    check that the keywords in an analyze are included in the test keywords
    """
    writefile( 'keyw.xml', """
        <rtest name="keyw">
          <keywords> fast medium </keywords>
          <parameterize np="1 2"/>
          <analyze not_keywords="full"> echo "is not full" </analyze>
          <analyze keywords="full"> echo "is full" </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/keyw/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'is not full' ) ) >= 1

    out,np,nd,nf,nn = run_vvtest( '-w -k full' )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/keyw/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'is full' ) ) >= 1


def test05():
    """
    check the case where no parameterize but an analyze is given
    """
    writefile( 'noparam.xml', """
        <rtest name="noparam">
          <keywords> fast medium </keywords>
          <execute> echo "exec standard" </execute>
          <analyze>
            echo "exec analyze"
          </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/noparam/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec standard' ) ) >= 1
    assert len( filegrep( fL[0], 'exec analyze' ) ) >= 1


def test06():
    """
    using testname filter with analyze
    """
    writefile( 'multi.xml', """
        <rtest name="multi">
          <rtest name="multi2"/>
          <parameterize param="one two"/>
          <execute> echo "exec test $NAME param $param" </execute>
          <analyze testname="multi">
            echo "analyze test $NAME (multi)"
          </analyze>
          <analyze testname="multi2">
            echo "analyze test $NAME (multi2)"
          </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 6 and nd == 0 and nf == 0 and nn == 0
    
    fL = glob.glob( 'TestResults.*/multi.param=one/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi.param=two/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'analyze test multi ' ) ) >= 1
    
    fL = glob.glob( 'TestResults.*/multi2.param=one/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi2 ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2.param=two/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi2 ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'analyze test multi2 ' ) ) >= 1


def test07():
    """
    testname filter with analyze where one test does not have an analyze
    """
    writefile( 'multi.xml', """
        <rtest name="multi">
          <rtest name="multi2"/>
          <parameterize param="one two"/>
          <execute> echo "exec test $NAME param $param" </execute>
          <analyze testname="multi2">
            echo "analyze test $NAME (multi2)"
          </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 5 and nd == 0 and nf == 0 and nn == 0
    
    fL = glob.glob( 'TestResults.*/multi.param=one/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi.param=two/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi/execute.log' )
    assert len(fL) == 0
    
    fL = glob.glob( 'TestResults.*/multi2.param=one/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi2 ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2.param=two/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'exec test multi2 ' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'analyze test multi2 ' ) ) >= 1


########################################################################

def test08():
    """
    analyze tests should not wait until the end to run
    """
    writefile( 'test1.xml', """
        <rtest name="test1">
          <parameterize timestep="1 2"/>
          <execute>
            sleep 1
            touch afile.$timestep
          </execute>
          <analyze>
             ls ../test1.timestep=1/afile.1 || exit 1
             ls ../test1.timestep=2/afile.2 || exit 1
          </analyze>
        </rtest>""" )
    writefile( 'test2.xml', """
        <rtest name="test2">
          <execute>
            sleep 10
            echo "that was a nice nap"
          </execute>
        </rtest>""" )
    
    out,np,nd,nf,nn = run_vvtest( '-n 4 --sort x' )
    assert np == 4 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()

    tL = testtimes( out )
    assert len(tL) == 4
    assert tL[0][0] == tdir+'/test1'
    assert tL[1][0] == tdir+'/test1.timestep=1'
    assert tL[2][0] == tdir+'/test1.timestep=2'
    assert tL[3][0] == tdir+'/test2'
    assert tL[0][1] >= tL[1][2] and tL[0][1] >= tL[2][2]
    assert tL[0][1] < tL[3][2]


########################################################################

main()
