#!/usr/bin/env python

import os, sys
import string, re
import glob

from testutils import *

rmallfiles()


#####################################################################

os.makedirs( 'top/subdir' )

### put a parameterize/analyze test at the top level

writefile( 'top/param_analyze.xml', """
<rtest name="param_analyze">
  <keywords> fast medium </keywords>
  <parameterize keywords="fast"     np="1"/>
  <parameterize not_keywords="fast" np="2 4"/>
  <link_files> $NAME.inp </link_files>
  <execute>
     touch execute_file.np=$np || exit 1
     ls $NAME.inp || exit 1
  </execute>
  <analyze keywords="fast">
     ls ../param_analyze.np=1/execute_file.np=1 || exit 1
  </analyze>
  <analyze not_keywords="fast">
     ls ../param_analyze.np=2/execute_file.np=2 || exit 1
     ls ../param_analyze.np=4/execute_file.np=4 || exit 1
  </analyze>
</rtest>""" )

writefile( 'top/param_analyze.inp', """
some sort of input deck
""" )

####################################

os.makedirs( 'parentchild' )

writefile( 'parentchild/good.xml', """
<rtest name="good">
  <keywords> fast medium </keywords>
  <parameterize timestep="1 2"/>
  <execute>
    touch afile.$timestep
  </execute>
  <analyze>
     ls ../good.timestep=1/afile.1 || exit 1
     ls ../good.timestep=2/afile.2 || exit 1
  </analyze>
</rtest>""" )

writefile( 'parentchild/bad.xml', """
<rtest name="bad">
  <keywords> fast medium </keywords>
  <parameterize timestep="1 2"/>
  <execute>
    echo "fake failure"
    exit 1
  </execute>
  <analyze>
     ls ../bad.timestep=1/bfile.1 || exit 1
     ls ../bad.timestep=2/bfile.2 || exit 1
  </analyze>
</rtest>""" )

out,np,nd,nf,nn = run_vvtest( "parentchild" )
assert np == 3 and nd == 0 and nf == 2 and nn == 1

# "fix" the bad test
writefile( 'parentchild/bad.xml', """
<rtest name="bad">
  <keywords> fast medium </keywords>
  <parameterize timestep="1 2"/>
  <execute>
    touch bfile.$timestep
  </execute>
  <analyze>
     ls ../bad.timestep=1/bfile.1 || exit 1
     ls ../bad.timestep=2/bfile.2 || exit 1
  </analyze>
</rtest>""" )

out,np,nd,nf,nn = run_vvtest( '-F -k notdone/notrun/fail parentchild' )
assert np == 3 and nd == 0 and nf == 0 and nn == 0

remove_results()

# exercise logic with only one analyze

writefile( 'parentchild/bad.xml', """
<rtest name="bad">
  <keywords> fast medium </keywords>
  <parameterize timestep="1 2"/>
  <execute>
    if ( "$timestep" == 2 ) then
      echo "fake failure"
      exit 1
    else
      touch bfile.$timestep
    endif
  </execute>
  <analyze>
     ls ../bad.timestep=1/bfile.1 || exit 1
     ls ../bad.timestep=2/bfile.2 || exit 1
  </analyze>
</rtest>""" )

out,np,nd,nf,nn = run_vvtest( '-k bad parentchild' )
assert np == 1 and nd == 0 and nf == 1 and nn == 1

# "fix" the bad test
writefile( 'parentchild/bad.xml', """
<rtest name="bad">
  <keywords> fast medium </keywords>
  <parameterize timestep="1 2"/>
  <execute>
    touch bfile.$timestep
  </execute>
  <analyze>
     ls ../bad.timestep=1/bfile.1 || exit 1
     ls ../bad.timestep=2/bfile.2 || exit 1
  </analyze>
</rtest>""" )

out,np,nd,nf,nn = run_vvtest( '-F -k notdone/notrun/fail -k bad parentchild' )
assert np == 2 and nd == 0 and nf == 0 and nn == 0

platname = platform_name( out )
print "Extracted platname =", platname


#########################################

remove_results()

if platname == 'Linux' or platname == 'iDarwin':
  
  # same thing but use pipeline
  
  writefile( 'parentchild/bad.xml', """
  <rtest name="bad">
    <keywords> fast medium </keywords>
    <parameterize timestep="1 2"/>
    <execute>
      echo "fake failure"
      exit 1
    </execute>
    <analyze>
       ls ../bad.timestep=1/bfile.1 || exit 1
       ls ../bad.timestep=2/bfile.2 || exit 1
    </analyze>
  </rtest>""" )
  
  out,np,nd,nf,nn = run_vvtest( '--pipeline parentchild' )
  assert np == 3 and nd == 0 and nf == 2 and nn == 1
  
  # "fix" the bad test
  writefile( 'parentchild/bad.xml', """
  <rtest name="bad">
    <keywords> fast medium </keywords>
    <parameterize timestep="1 2"/>
    <execute>
      touch bfile.$timestep
    </execute>
    <analyze>
       ls ../bad.timestep=1/bfile.1 || exit 1
       ls ../bad.timestep=2/bfile.2 || exit 1
    </analyze>
  </rtest>""" )
  
  out,np,nd,nf,nn = run_vvtest( '--pipeline -F -k notdone/notrun/fail parentchild' )
  assert np == 3 and nd == 0 and nf == 0 and nn == 0
  
  remove_results()
  
  # exercise logic with only one analyze
  
  writefile( 'parentchild/bad.xml', """
  <rtest name="bad">
    <keywords> fast medium </keywords>
    <parameterize timestep="1 2"/>
    <execute>
      if ( "$timestep" == 2 ) then
        echo "fake failure"
        exit 1
      else
        touch bfile.$timestep
      endif
    </execute>
    <analyze>
       ls ../bad.timestep=1/bfile.1 || exit 1
       ls ../bad.timestep=2/bfile.2 || exit 1
    </analyze>
  </rtest>""" )
  
  out,np,nd,nf,nn = run_vvtest( '--pipeline -k bad parentchild' )
  assert np == 1 and nd == 0 and nf == 1 and nn == 1
  
  # "fix" the bad test
  writefile( 'parentchild/bad.xml', """
  <rtest name="bad">
    <keywords> fast medium </keywords>
    <parameterize timestep="1 2"/>
    <execute>
      touch bfile.$timestep
    </execute>
    <analyze>
       ls ../bad.timestep=1/bfile.1 || exit 1
       ls ../bad.timestep=2/bfile.2 || exit 1
    </analyze>
  </rtest>""" )
  
  out,np,nd,nf,nn = run_vvtest( '--pipeline -F -k notdone/notrun/fail -k bad parentchild' )
  assert np == 2 and nd == 0 and nf == 0 and nn == 0


#####################################################################

rmallfiles()

# check that the keywords in an analyze are included in the test keywords

writefile( 'keyw.xml', """
<rtest name="keyw">
  <keywords> fast medium </keywords>
  <parameterize np="1 2"/>
  <analyze not_keywords="full"> echo "is not full" </analyze>
  <analyze keywords="full"> echo "is full" </analyze>
</rtest>""" )

out,np,nd,nf,nn = run_vvtest()
assert np == 3 and nd == 0 and nf == 0 and nn == 0
fL = glob.glob( 'TestResults.*/keyw/execute.log' )
assert len(fL) == 1
assert len( filegrep( fL[0], 'is not full' ) ) >= 1

out,np,nd,nf,nn = run_vvtest( '-w -k full' )
assert np == 3 and nd == 0 and nf == 0 and nn == 0
fL = glob.glob( 'TestResults.*/keyw/execute.log' )
assert len(fL) == 1
assert len( filegrep( fL[0], 'is full' ) ) >= 1

#####################################################################

rmallfiles()

# check the case where no parameterize but an analyze is given

writefile( 'noparam.xml', """
<rtest name="noparam">
  <keywords> fast medium </keywords>
  <execute> echo "exec standard" </execute>
  <analyze>
    echo "exec analyze"
  </analyze>
</rtest>""" )

out,np,nd,nf,nn = run_vvtest()
assert np == 1 and nd == 0 and nf == 0 and nn == 0
fL = glob.glob( 'TestResults.*/noparam/execute.log' )
assert len(fL) == 1
assert len( filegrep( fL[0], 'exec standard' ) ) >= 1
assert len( filegrep( fL[0], 'exec analyze' ) ) >= 1
