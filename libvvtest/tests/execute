#!/usr/bin/env python

import os, sys
import re
import glob
import time
import subprocess

# this will os.chdir() to a subdirectory
from testutils import *


def main():
    """
    """
    argL = get_arg_list()

    if len(argL) == 0:
        argL = """null script links1 links2 links3
                  exitstat xmldir options params
                  keywords autolink tname1 tname2 duplicate
                  postclean force1 force2 force3
                  batch1
               """.split()

    # set these for the pipeline tests
    os.environ['VVTEST_BATCH_READ_DELAY'] = '5'
    os.environ['VVTEST_BATCH_READ_DELAY_MAX'] = '15'
    os.environ['VVTEST_BATCH_SLEEP_LENGTH'] = '1'
    
    cwd = os.getcwd()
    for func in argL:
        os.chdir( cwd )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )
        eval( func+'()' )


#####################################################################

def null():
    """
    check the null test
    """
    writefile( "null.xml", """
        <rtest name="null">
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tL = testlist(out)
    assert len(tL) == 1
    p = tL[0][-1]
    assert os.path.exists(p)


#####################################################################

def script():
    """
    check simple execute script test
    """
    writefile( 'helloworld.xml', """
        <rtest name="helloworld">
          <execute> <![CDATA[
        ${XMLDIR}/helloworld.csh
        ]]>
          </execute>
        </rtest>""" )

    writescript( 'helloworld.csh', """
        #!/bin/csh -f
        echo "hello world"
        exit 0""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tL = testlist(out)
    assert len(tL) == 1
    p = tL[0][-1]
    assert os.path.exists(p)
    assert len( filegrep( p+'/execute.log', "^hello world$" ) ) == 1


#####################################################################

def links1():
    """
    check link & copy file globbing
    """
    writefile( "glob1.txt", """
        this is glob1.txt
        """)
    writefile( "glob2.txt", """
        this is glob2.txt
        """)
    writefile( "Aglob.txt", """
        this is Aglob2.txt
        """)

    writefile( "glob.xml", """
        <rtest name="glob">
          <link_files> glob?.txt </link_files>
          <copy_files> Aglob.* </copy_files>
          <execute> <![CDATA[
            cat glob1.txt || exit 1
            cat glob2.txt || exit 1
            cat Aglob.txt || exit 1
          ]]> 
          </execute>
        </rtest>""")

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0


def links2():
    """
    link & copy files of files that don't exist
    """
    writefile( "link1.xml", """
        <rtest name="link1">
            <link_files> file.txt </link_files>
            <execute>
                foreach f ( `ls` )
                    echo "lsfile $f"
                end
            </execute>
        </rtest>""")
    writefile( "copy1.xml", """
        <rtest name="copy1">
            <copy_files> file.txt </copy_files>
            <execute>
                foreach f ( `ls` )
                    echo "lsfile $f"
                end
            </execute>
        </rtest>""")
    writefile( "link2.xml", """
        <rtest name="link2">
            <link_files linkname="file.txt"> file.txt </link_files>
            <execute>
                foreach f ( `ls` )
                    echo "lsfile $f"
                end
            </execute>
        </rtest>""")
    writefile( "copy2.xml", """
        <rtest name="copy2">
            <copy_files linkname="file.txt"> file.txt </copy_files>
            <execute>
                foreach f ( `ls` )
                    echo "lsfile $f"
                end
            </execute>
        </rtest>""")

    out,np,nd,nf,nn = run_vvtest()
    assert np == 0 and nd == 0 and nf == 4 and nn == 0
    fL = glob.glob( 'TestResults.*/*/execute.log' )
    assert len(fL) == 4
    for f in fL:
        assert len( filegrep( f, "lsfile " ) ) == 0
    
    # now make it exist and run through to see if the tests work

    writefile( "file.txt", """
        this is file.txt
        """)

    out,np,nd,nf,nn = run_vvtest( '-R' )
    assert np == 4 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/*/execute.log' )
    assert len(fL) == 4
    for f in fL:
        assert len( filegrep( f, "lsfile file.txt" ) ) == 1


def links3():
    """
    link & copy files of files that start with ..
    """
    writefile( "subdir/links.xml", """
        <rtest name="links">
            <link_files> ../file.txt </link_files>
            <copy_files> ../files/gfile*.txt </copy_files>
            <execute>
                foreach f ( `ls` )
                    echo "lsfile $f"
                end
            </execute>
        </rtest>""")
    writefile( "file.txt", """the text file""" )
    writefile( "files/gfile1.txt", """G text file 1""" )
    writefile( "files/gfileA.txt", """G text file A""" )
    
    out,np,nd,nf,nn = run_vvtest( 'subdir' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    pL = glob.glob( 'TestResults.*' )
    assert len(pL) == 1
    f = os.path.join( pL[0], 'links', 'execute.log' )
    assert len( filegrep( f, "lsfile file.txt" ) ) == 1
    assert len( filegrep( f, "lsfile gfile1.txt" ) ) == 1
    assert len( filegrep( f, "lsfile gfileA.txt" ) ) == 1
    assert os.path.islink( os.path.join( pL[0], 'links', 'file.txt' ) )
    assert not os.path.islink( os.path.join( pL[0], 'links', 'gfile1.txt' ) )
    assert not os.path.islink( os.path.join( pL[0], 'links', 'gfileA.txt' ) )


#####################################################################

def exitstat():
    """
    check different exit statuses
    """
    writefile( "PassTest.xml", """
        <rtest name="PassTest">
          <execute> <![CDATA[
        sleep 1
        echo "Exiting with pass status"
        ]]>
          </execute>
        </rtest>""")

    writefile( "FailTest.xml", """
        <rtest name="FailTest">
          <execute> <![CDATA[
        sleep 1
        echo "Exiting with failure status"
        exit 1
        ]]>
          </execute>
        </rtest>""")

    writefile( "DiffTest.xml", """
        <rtest name="DiffTest">
          <execute> <![CDATA[
        sleep 1
        echo "Exiting with diff status"
        set have_diff = yes
        ]]>
          </execute>
        </rtest>""")

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 1 and nf == 1 and nn == 0

    # use -L option (and wipe)

    out,np,nd,nf,nn = run_vvtest( "-w -L -n 1" )
    assert np == 1 and nd == 1 and nf == 1 and nn == 0
    L = re.findall( "Starting test:", out )
    assert len(L) == 3, "three tests should have run; got "+str(len(L))

    # check running within the test results directory

    cwd = os.getcwd()
    tdir = results_dir()
    os.chdir(tdir+"/PassTest")

    out,np,nd,nf,nn = run_vvtest( "-R" )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    os.chdir( cwd )


#####################################################################

def xmldir():
    """
    check the XMLDIR variable
    """
    cwd = os.getcwd()

    writefile( "xdir.xml", """
        <rtest name="xdir">
          <execute> <![CDATA[
        set echo
        cd $XMLDIR || exit 1
        set xdir = `pwd`
        cd """+cwd+""" || exit 1
        set cdir = `pwd`
        if ( $xdir != $cdir ) then
          echo "*** XMLDIR not equal to """+cwd+""""
          exit 1
        endif
        ]]>
          </execute>
        </rtest>""")

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    tdir = results_dir()
    remove_results()

    # check using the -M option

    os.mkdir( 'mir' )
    out,np,nd,nf,nn = run_vvtest( "-M "+cwd+"/mir" )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    # cd into a test and run it

    os.chdir( tdir + '/xdir' )
    out,np,nd,nf,nn = run_vvtest( "-R" )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    os.chdir(cwd)


#####################################################################

def options():
    """
    check option -gG
    """
    cwd = os.getcwd()

    writefile( 'helloworld.xml', """
        <rtest name="helloworld">
          <execute> <![CDATA[
        ${XMLDIR}/helloworld.csh
        ]]>
          </execute>
        </rtest>""" )

    writescript( 'helloworld.csh', """
        #!/bin/csh -f
        echo "hello world"
        exit 0""" )

    out,np,nd,nf,nn = run_vvtest( "-gG" )
    tdir = results_dir()
    os.chdir(tdir+'/helloworld')
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tL = testlist(out)
    assert len(tL) == 1
    assert len( filegrep( 'execute.log', "^hello world$" ) ) == 1
    os.chdir(cwd)


#####################################################################

def params():
    """
    check specifying parameters
    """
    writefile( "param.xml", """
        <rtest name="param">
          <parameterize hello="world mars"/>
          <execute> <![CDATA[
        sleep 1
        echo "parm=$hello"
        ]]>
          </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 0 and nf == 0 and nn == 0

    # force a parameter to take on a user defined value

    out,np,nd,nf,nn = run_vvtest( "-S hello=jupiter" )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( "-i" )
    assert np == 3 and nd == 0 and nf == 0 and nn == 0
    tL = testlist(out)
    nj = 0 ; nm = 0 ; nw = 0
    for line in tL:
      if line[-1].find( "hello=jupiter" ) >= 0: nj = nj + 1
      if line[-1].find( "hello=mars" ) >= 0: nm = nm + 1
      if line[-1].find( "hello=world" ) >= 0: nw = nw + 1
    assert nj == 1 and nm == 1 and nw == 1


#####################################################################

def keywords():
    """
    use keywords in <execute> blocks
    """
    writefile( "keys.xml", """
        <rtest name="keys">
          <keywords> mars venus </keywords>
          <execute> echo "in execute" </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/keys/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'in execute' ) ) >= 1

    # note how this one leaves out the <keywords> block (the test keywords
    # should include mars & venus in this case)
    writefile( "keys.xml", """
        <rtest name="keys">
          <execute keywords="mars"> echo "execute mars" </execute>
          <execute keywords="venus"> echo "execute venus" </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( '-w' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/keys/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'execute mars' ) ) == 0
    assert len( filegrep( fL[0], 'execute venus' ) ) == 0

    out,np,nd,nf,nn = run_vvtest( '-w -k mars' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/keys/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'execute mars' ) ) >= 1
    assert len( filegrep( fL[0], 'execute venus' ) ) == 0

    out,np,nd,nf,nn = run_vvtest( '-w -k venus' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/keys/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'execute mars' ) ) == 0
    assert len( filegrep( fL[0], 'execute venus' ) ) >= 1

    writefile( "keys.xml", """
        <rtest name="keys">
          <keywords> mars venus </keywords>
          <execute keywords="mars"> echo "execute mars" </execute>
          <execute not_keywords="mars"> echo "execute venus" </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( '-w -k venus' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/keys/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'execute mars' ) ) == 0
    assert len( filegrep( fL[0], 'execute venus' ) ) >= 1

    out,np,nd,nf,nn = run_vvtest( '-w' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/keys/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'execute mars' ) ) == 0
    assert len( filegrep( fL[0], 'execute venus' ) ) >= 1

    out,np,nd,nf,nn = run_vvtest( '-w -k mars' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/keys/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'execute mars' ) ) >= 1
    assert len( filegrep( fL[0], 'execute venus' ) ) == 0


#####################################################################

def autolink():
    """
    the test specification file should be automatically linked
    """
    writefile( "auto1.xml", """
        <rtest name="auto1">
          <execute>
            set echo=1
            ls -l $NAME.xml || exit 1
          </execute>
        </rtest>""" )

    writefile( "auto2.xml", """
        <rtest name="auto2">
          <link> $NAME.xml </link>
          <execute>
            set echo=1
            ls -l $NAME.xml || exit 1
          </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/auto1/auto1.xml' )
    assert len(fL) == 1
    fL = glob.glob( 'TestResults.*/auto2/auto2.xml' )
    assert len(fL) == 1


#####################################################################

def tname1():
    """
    filtering execute blocks by testname
    """
    writefile( "multi.xml", """
        <rtest name="multi">
            <rtest name="multi2"/>
            <execute testname="multi"> echo "multi only" </execute>
            <execute testname="multi2"> echo "multi2 only" </execute>
            <execute testname="multi or multi2"> echo "both tests" </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/multi/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'multi only' ) ) >= 1
    assert len( filegrep( fL[0], 'both tests' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'multi2 only' ) ) >= 1
    assert len( filegrep( fL[0], 'both tests' ) ) >= 1

def tname2():
    """
    using "not" in the testname filter
    """
    writefile( "multi.xml", """
        <rtest name="multi">
            <rtest name="multi2"/>
            <execute testname="multi"> echo "multi only" </execute>
            <execute testname="not multi"> echo "multi2 only" </execute>
            <execute testname="multi or multi2"> echo "both tests" </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    fL = glob.glob( 'TestResults.*/multi/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'multi only' ) ) >= 1
    assert len( filegrep( fL[0], 'both tests' ) ) >= 1
    fL = glob.glob( 'TestResults.*/multi2/execute.log' )
    assert len(fL) == 1
    assert len( filegrep( fL[0], 'multi2 only' ) ) >= 1
    assert len( filegrep( fL[0], 'both tests' ) ) >= 1


#####################################################################

def duplicate():
    """
    two tests with duplicate path from root to test
    """
    writefile( "adir/subdir/dup.xml", """
        <rtest name="dup">
            <execute> echo "test adir" </execute>
        </rtest>""" )

    writefile( "bdir/subdir/dup.xml", """
        <rtest name="dup">
            <execute> echo "test bdir" </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( 'bdir adir' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    xf = os.path.join( tdir, 'subdir', 'dup', 'execute.log' )
    assert len( filegrep( xf, 'test bdir' ) ) == 1
    assert len( filegrep( xf, 'test adir' ) ) == 0

    fl = os.readlink( os.path.join( tdir, 'subdir', 'dup', 'dup.xml' ) )
    s = 'bdir/subdir/dup.xml'
    assert fl[-len(s):] == s


#####################################################################

def postclean():
    """
    using -C to clean out after the test
    """
    writefile( "pclean.xml", """
        <rtest name="pclean">
            <execute>
                echo "Elvis has left the building" > afile.txt || exit 1
                mkdir asubdir || exit 1
                echo "True that" > asubdir/somefile.txt || exit 1
            </execute>
        </rtest>""" )
    
    writescript( 'ana.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : P = 1 2
        #VVT: analyze : ana.py
        import os
        import script_util as vvt
        print3 = vvt.print3
        fp = open( 'genfile.txt', 'w' )
        fp.write( 'param P='+vvt.P+'\\n' )
        fp.close()
        """ )
    writescript( "ana.py", """
        #!/usr/bin/env python
        import os
        import script_util as vvt
        for P in vvt.PARAM_P:
            fn = '../'+vvt.NAME+'.P='+P+'/genfile.txt'
            assert os.path.exists( fn )
            fp = open( 'anagen.txt', 'a' )
            fp.write( 'file = '+fn+'\\n' )
            fp.close()
        """ )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 4 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()

    assert len( glob.glob( tdir+'/pclean/afile.txt' ) ) == 1
    assert len( glob.glob( tdir+'/pclean/runscript' ) ) == 1
    assert len( glob.glob( tdir+'/pclean/execute.log' ) ) == 1
    assert os.path.isdir( tdir+'/pclean/asubdir' )
    assert len( glob.glob( tdir+'/pclean/asubdir/somefile.txt' ) ) == 1
    
    assert len( glob.glob( tdir+'/ana/ana.vvt' ) ) == 1
    assert len( glob.glob( tdir+'/ana/ana.py' ) ) == 1
    assert len( glob.glob( tdir+'/ana.P=1/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/ana.P=1/ana.py' ) ) == 0
    assert len( glob.glob( tdir+'/ana.P=2/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/ana.P=2/ana.py' ) ) == 0
    assert len( glob.glob( tdir+'/ana/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/ana/anagen.txt' ) ) == 1

    out,np,nd,nf,nn = run_vvtest( '-R -C' )
    assert np == 4 and nd == 0 and nf == 0 and nn == 0

    assert len( glob.glob( tdir+'/pclean/afile.txt' ) ) == 0
    assert len( glob.glob( tdir+'/pclean/runscript' ) ) == 1
    assert len( glob.glob( tdir+'/pclean/execute.log' ) ) == 1
    assert not os.path.exists( tdir+'/pclean/asubdir' )
    assert not os.path.exists( tdir+'/pclean/asubdir/somefile.txt' )
    
    # note that the ana.P=1 & 2 tests still have genfile.txt (which if they
    # were not, the analyze test would fail); that is, the postclean is not
    # applied to child tests
    assert len( glob.glob( tdir+'/ana/ana.vvt' ) ) == 1
    assert len( glob.glob( tdir+'/ana/ana.py' ) ) == 1
    assert len( glob.glob( tdir+'/ana.P=1/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/ana.P=1/ana.py' ) ) == 0
    assert len( glob.glob( tdir+'/ana.P=2/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/ana.P=2/ana.py' ) ) == 0
    assert len( glob.glob( tdir+'/ana/execute.log' ) ) == 1
    assert len( glob.glob( tdir+'/ana/anagen.txt' ) ) == 0


############################################################################

def force1():
    """
    a concurrent vvtest invocation should refuse to run
    """
    writefile( "sleeper.xml", """
        <rtest name="sleeper">
            <execute> sleep 10 </execute>
        </rtest>""" )

    bg = Background( vvtest, 'log' )
    bg.wait()
    fp = open( 'log', 'r' ) ; out = fp.read() ; fp.close()
    print out
    np,nd,nf,nn = numpass(out),numdiff(out),numfail(out),numnotrun(out)
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    remove_results()

    bg = Background( vvtest, 'log' )
    time.sleep(4)
    xok,out = run_cmd( vvtest + ' -R' )

    bg.wait( 10 )
    assert not xok
    assert len( grep( out, 'rror.*another process' ) ) == 1


def force2():
    """
    same as force1 except cd into TestResults directory
    """
    writefile( "null.xml", """
        <rtest name="null">
        </rtest>""" )
    out,np,nd,nf,nn = run_vvtest()
    tdir = results_dir()
    os.remove( 'null.xml' )
    remove_results()

    writefile( "sleeper.xml", """
        <rtest name="sleeper">
            <execute> sleep 10 </execute>
        </rtest>""" )

    bg = Background( vvtest, 'log' )
    time.sleep(4)
    xok,out = run_cmd( vvtest + ' -R', directory=tdir )

    bg.wait( 10 )
    assert not xok
    assert len( grep( out, 'rror.*another process' ) ) == 1



class Background:

    def __init__(self, cmd, logfile=None):
        """
        """
        self.cmd = cmd
        if logfile != None:
            fp = open( logfile, 'w' )
            self.p = subprocess.Popen( cmd, shell=True,
                                       stdout=fp.fileno(), 
                                       stderr=fp.fileno() )
            fp.close()
        else:
            self.p = subprocess.Popen( cmd, shell=True, close_fds=True )

    def wait(self, timeout=30):
        """
        """
        if timeout == None:
            self.p.wait()
            return self.p.returncode
        for i in range(timeout):
            self.p.poll()
            if self.p.returncode != None:
                return self.p.returncode
            time.sleep(1)
        self.stop()
        return None
    
    def stop(self):
        try:
            os.kill( self.p.pid, signal.SIGINT )
            self.p.wait()
        except:
            if hasattr( self.p, 'terminate' ):
                try: self.p.terminate()
                except: pass


def force3():
    """
    can force concurrent by using --force
    """
    writefile( "sleeper1.xml", """
        <rtest name="sleeper1">
            <timeout value="20"/>
            <execute> sleep 5 </execute>
        </rtest>""" )
    writefile( "sleeper2.xml", """
        <rtest name="sleeper2">
            <timeout value="20"/>
            <execute> sleep 5 </execute>
        </rtest>""" )

    # using SIGKILL prevents the "finished" mark from getting placed
    os.environ['VVTEST_INTERRUPT_COUNT'] = '1'
    os.environ['VVTEST_SIGNAL'] = 'SIGKILL'
    xok,out = run_cmd( vvtest + ' -n 1' )
    del os.environ['VVTEST_INTERRUPT_COUNT']
    del os.environ['VVTEST_SIGNAL']
    
    # this one should fail
    xok,out = run_cmd( vvtest + ' -R' )
    assert not xok
    assert len( grep( out, 'rror.*another process' ) ) == 1
    
    # this one should be forced to run
    xok,out = run_cmd( vvtest + ' -R --force' )
    assert xok
    assert len( grep( out, 'rror.*another process' ) ) == 0

    platname = platform_name( out )
    if platname in batchplatforms:
        
        remove_results()
        
        # using SIGKILL prevents the "finished" mark from getting placed
        os.environ['VVTEST_INTERRUPT_BATCH'] = '1'
        os.environ['VVTEST_SIGNAL_BATCH'] = 'SIGKILL'
        xok,out = run_cmd( vvtest + ' --pipeline --qsub-limit 1 --qsub-length 1' )
        del os.environ['VVTEST_INTERRUPT_BATCH']
        del os.environ['VVTEST_SIGNAL_BATCH']
        
        # this one should fail
        xok,out = run_cmd( vvtest + ' --pipeline -R' )
        assert not xok
        assert len( grep( out, 'rror.*another process' ) ) == 1
        
        # this one should be forced to run
        xok,out = run_cmd( vvtest + ' --pipeline -R --force' )
        assert xok
        assert len( grep( out, 'rror.*another process' ) ) == 0


############################################################################

def batch1():
    """
    behavior of a batch job failing
    """
    writefile( "null.xml", """
        <rtest name="null">
        </rtest>""" )
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    platname = platform_name( out )
    remove_results()
    os.remove( 'null.xml' )

    if platname in batchplatforms:

        writefile( "sleeper1.xml", """
            <rtest name="sleeper1">
                <timeout value="15"/>
                <execute> sleep 5 </execute>
            </rtest>""" )
        writefile( "sleeper2.xml", """
            <rtest name="sleeper2">
                <timeout value="15"/>
                <execute> sleep 5 </execute>
            </rtest>""" )
        writefile( "sleeper3.xml", """
            <rtest name="sleeper3">
                <timeout value="15"/>
                <execute> sleep 5 </execute>
            </rtest>""" )
        writefile( "sleeper4.xml", """
            <rtest name="sleeper4">
                <timeout value="15"/>
                <execute> sleep 5 </execute>
            </rtest>""" )
        
        # these four tests are run in two pipelines
        # pipeline zero will be ok, while pipeline one will crash
        # this should cause pipeline one to show "did not seem to finish"

        os.environ['VVTEST_INTERRUPT_COUNT'] = '1'
        os.environ['VVTEST_INTERRUPT_QID'] = '1'
        xok,out = run_cmd( vvtest + ' --pipeline --qsub-limit 1 --qsub-length 40' )
        del os.environ['VVTEST_INTERRUPT_COUNT']
        del os.environ['VVTEST_INTERRUPT_QID']

        L = grep( out, 'did not seem to finish:' )
        assert len(L) == 1
        L2 = L[0].split(':')[-1].split()
        L2 = [ int(s) for s in L2 ]
        assert L2 == [1]

        assert len( greptestlist( out, 'sleeper[1-4]' ) ) == 4
        assert len( greptestlist( out, 'sleeper[1-4] .*pass' ) ) == 3



############################################################################

main()
