#!/usr/bin/env python

import os, sys, re
import time, glob, shutil

# this will os.chdir() to a subdirectory
from testutils import *

def main():
    """
    """
    argL = get_arg_list()

    if len(argL) == 0:
        argL = """test01 test02 test03 test04 test05
               """.split()
    
    # set these for the pipeline tests
    os.environ['VVTEST_BATCH_READ_DELAY'] = '5'
    os.environ['VVTEST_BATCH_READ_DELAY_MAX'] = '15'
    os.environ['VVTEST_BATCH_SLEEP_LENGTH'] = '1'
    
    cwd = os.getcwd()
    for func in argL:
        os.chdir( cwd )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )
        eval( func+'()' )


########################################################################

def test01():
    """
    use a file idplatform.py in a specified config directory
    """
    writefile( "cat.xml", """
        <rtest name="cat">
          <execute> sleep 1 </execute>
        </rtest>""" )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )
    tdir = results_dir()

    writefile( "config/idplatform.py", """
        def platform( opts ):
            return "XBox"
        def compiler( platname, opts ):
            return "BASIC"
        """ )

    out,np,nd,nf,nn = run_vvtest( '--config config' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    L = glob.glob( 'TestResults.*' )
    assert tdir in L
    L.remove( tdir )
    assert len(L) == 1
    tdir2 = L[0]
    assert tdir2.find( "XBox" ) >= 0
    xlog = os.path.join( tdir2, 'cat', 'execute.log' )
    assert len( filegrep( xlog, "COMPILER = BASIC" ) ) == 1

    writefile( "nonsense/idplatform.py", """
        def platform( opts ):
            return "PlayStation"
        def compiler( platname, opts ):
            return "Fortran"
        """ )

    os.environ['VVTEST_CONFIGDIR'] = 'nonsense'
    out,np,nd,nf,nn = run_vvtest()
    del os.environ['VVTEST_CONFIGDIR']
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    L = glob.glob( 'TestResults.*' )
    assert tdir in L and tdir2 in L
    L.remove( tdir ) ; L.remove( tdir2 )
    assert len(L) == 1
    tdir3 = L[0]
    assert tdir3.find( "PlayStation" ) >= 0
    xlog = os.path.join( tdir3, 'cat', 'execute.log' )
    assert len( filegrep( xlog, "COMPILER = Fortran" ) ) == 1

    if platname in batchplatforms:
        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        tdir = results_dir()
        
        out,np,nd,nf,nn = run_vvtest( '--config config --pipeline' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        L = glob.glob( 'TestResults.*' )
        assert tdir in L
        L.remove( tdir )
        assert len(L) == 1
        tdir2 = L[0]
        assert tdir2.find( "XBox" ) >= 0
        xlog = os.path.join( tdir2, 'cat', 'execute.log' )
        assert len( filegrep( xlog, "COMPILER = BASIC" ) ) == 1

        os.environ['VVTEST_CONFIGDIR'] = 'nonsense'
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        del os.environ['VVTEST_CONFIGDIR']
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        L = glob.glob( 'TestResults.*' )
        assert tdir in L and tdir2 in L
        L.remove( tdir ) ; L.remove( tdir2 )
        assert len(L) == 1
        tdir3 = L[0]
        assert tdir3.find( "PlayStation" ) >= 0
        xlog = os.path.join( tdir3, 'cat', 'execute.log' )
        assert len( filegrep( xlog, "COMPILER = Fortran" ) ) == 1


########################################################################

def test02():
    """
    get max num processors from config
    """
    writescript( 'atest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np=1
        import vvtest_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )
    writescript( 'btest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np=2
        import vvtest_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )
    writescript( 'ctest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np=3
        import vvtest_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )
    writescript( 'dtest.vvt', """
        #!/usr/bin/env python
        #VVT: parameterize : np=4
        import vvtest_util as vvt
        print ( 'executing test, np='+str(vvt.np) )
        """ )

    out,np,nd,nf,nn = run_vvtest()
    assert np > 0
    platname = platform_name( out )
    tdir = results_dir()
    
    # only run this test if the number of processors is at least 4
    L = grep( out, 'max procs' )
    assert len(L) == 1
    maxprocs = L[0].split( 'max procs', 1 )[1].strip().lstrip('=').strip()
    maxprocs = int( maxprocs )

    if maxprocs >= 4:
        assert np == 4 and nd == 0 and nf == 0 and nn == 0
        remove_results()
        
        writefile( "config/platform_plugin.py", """
            import os, sys
            def initialize( plat ):
                plat.setattr( 'maxprocs', 2 )
            """ )
        
        out,np,nd,nf,nn = run_vvtest( '--config config' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0
        tdir = results_dir()
        
        L = grep( out, 'max procs' )
        assert len(L) == 1
        mx = L[0].split( 'max procs', 1 )[1].strip().lstrip('=').strip()
        mx = int( mx )
        assert mx == 2
        
        assert len( glob.glob( tdir+'/atest*/execute.log' ) ) == 1
        assert len( glob.glob( tdir+'/btest*/execute.log' ) ) == 1
        assert len( glob.glob( tdir+'/ctest*/execute.log' ) ) == 0
        assert len( glob.glob( tdir+'/dtest*/execute.log' ) ) == 0

        if platname in batchplatforms:
            remove_results()
            
            out,np,nd,nf,nn = run_vvtest( '--config config --pipeline' )
            assert np == 2 and nd == 0 and nf == 0 and nn == 0
            
            L = grep( out, 'max procs' )
            assert len(L) == 1
            mx = L[0].split( 'max procs', 1 )[1].strip().lstrip('=').strip()
            mx = int( mx )
            assert mx == 2
            
            assert len( glob.glob( tdir+'/atest*/execute.log' ) ) == 1
            assert len( glob.glob( tdir+'/btest*/execute.log' ) ) == 1
            assert len( glob.glob( tdir+'/ctest*/execute.log' ) ) == 0
            assert len( glob.glob( tdir+'/dtest*/execute.log' ) ) == 0


def test03():
    """
    setting platform env vars
    """
    writefile( "config/platform_plugin.py", """
        import os, sys
        def initialize( plat ):
            plat.setenv( 'MY_PLATFORM_VAR', 'my platform value' )
        """ )

    writescript( 'pytest.vvt', """
        #!/usr/bin/env python
        import os, sys
        import vvtest_util as vvt
        vvt.apply_platform_variables()
        sys.stdout.write( 'plat vars = '+str(vvt.PLATFORM_VARIABLES)+'\\n' )
        sys.stdout.write( 'plat var = '+os.environ['MY_PLATFORM_VAR']+'\\n' )
        """ )
    writescript( 'shtest.vvt', """
        #!/bin/sh
        source vvtest_util.sh
        apply_platform_variables
        echo "plat vars = $PLATFORM_VARIABLES"
        echo "my var = $PLATVAR_MY_PLATFORM_VAR"
        echo "my var from env = $MY_PLATFORM_VAR"
        """ )

    out,np,nd,nf,nn = run_vvtest( '--config config' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    
    assert len( filegrep( tdir+'/pytest/execute.log',
                          "plat vars = .*MY_PLATFORM_VAR" ) ) == 1
    assert len( filegrep( tdir+'/pytest/execute.log',
                          "plat var = my platform value" ) ) == 1
    
    assert len( filegrep( tdir+'/shtest/execute.log',
                          "plat vars = .*MY_PLATFORM_VAR" ) ) == 1
    assert len( filegrep( tdir+'/shtest/execute.log',
                          "my var = my platform value" ) ) == 1
    assert len( filegrep( tdir+'/shtest/execute.log',
                          "my var from env = my platform value" ) ) == 1
    

########################################################################

def test04():
    """
    use a script util plugin from the config dir
    """
    writescript( 'pytest.vvt', """
        #!/usr/bin/env python
        from script_util_plugin import *
        special_function()
        """ )
    writescript( 'shtest.vvt', """
        #!/bin/sh
        source vvtest_util.sh
        special_function
        """ )
    
    writefile( "config/script_util_plugin.py", """
        import os, sys
        from script_util import *
        def special_function():
            print3( 'hello from spec func' )
        """ )
    writefile( "config/script_util_plugin.sh", """
        source $VVTESTLIB/script_util.sh
        special_function() {
            echo 'hello from sh spec func'
        }
        """ )
    
    out,np,nd,nf,nn = run_vvtest( '--config config' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    tdir = results_dir()
    
    assert len( filegrep( tdir+'/pytest/execute.log',
                          "hello from spec func" ) ) == 1
    assert len( filegrep( tdir+'/shtest/execute.log',
                          "hello from sh spec func" ) ) == 1


########################################################################

def test05():
    """
    exercise defaults and checking in idplatform.py
    """
    # using an empty config directory ensures the behavior is always as if
    # there is not a config directory (having a config directory may be the
    # case if vvtest is copied into a project in a location with a config
    # subdirectory)
    os.mkdir( 'config' )

    writefile( "tst.xml", """
        <rtest name="tst">
          <execute> echo "the COMPILER is $COMPILER" </execute>
        </rtest>""" )
    
    out,np,nd,nf,nn = run_vvtest( '--config config' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )
    tdir = results_dir()
    L = filegrep( os.path.join( tdir, 'tst', 'execute.log' ),
                  'the COMPILER is' )
    assert len(L) == 1
    cplr = L[0].split()[-1]

    shutil.rmtree( tdir )

    # misspell the function names - they should just not be called
    writefile( "config/idplatform.py", """
        def platforms( opts ):
            return "XBox"
        def compilers( platname, opts ):
            return "BASIC"
        """ )

    out,np,nd,nf,nn = run_vvtest( '--config config' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    plat2 = platform_name( out )
    tdir2 = results_dir()
    L = filegrep( os.path.join( tdir2, 'tst', 'execute.log' ),
                  'the COMPILER is' )
    assert len(L) == 1
    cplr2 = L[0].split()[-1]

    assert plat2 == platname
    assert tdir2 == tdir
    assert cplr2 == cplr
    
    shutil.rmtree( tdir )

    # if the functions return an empty string, the defaults should be used
    writefile( "config/idplatform.py", """
        def platform( opts ):
            return ''
        def compiler( platname, opts ):
            return ''
        """ )

    out,np,nd,nf,nn = run_vvtest( '--config config' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    plat2 = platform_name( out )
    tdir2 = results_dir()
    L = filegrep( os.path.join( tdir2, 'tst', 'execute.log' ),
                  'the COMPILER is' )
    assert len(L) == 1
    cplr2 = L[0].split()[-1]

    assert plat2 == platname
    assert tdir2 == tdir
    assert cplr2 == cplr
    
    shutil.rmtree( tdir )

    # if the functions do not return a value, the defaults should be used
    writefile( "config/idplatform.py", """
        def platform( opts ):
            if False: return "XBox"
        def compiler( platname, opts ):
            if False: return "BASIC"
        """ )

    out,np,nd,nf,nn = run_vvtest( '--config config' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    plat2 = platform_name( out )
    tdir2 = results_dir()
    L = filegrep( os.path.join( tdir2, 'tst', 'execute.log' ),
                  'the COMPILER is' )
    assert len(L) == 1
    cplr2 = L[0].split()[-1]

    assert plat2 == platname
    assert tdir2 == tdir
    assert cplr2 == cplr
    
    shutil.rmtree( tdir )

    # the command line option --plat should take precedence
    writefile( "config/idplatform.py", """
        def platform( opts ):
            return "XBox"
        def compiler( platname, opts ):
            if platname == 'PlayStation': return "BASIC"
        """ )

    out,np,nd,nf,nn = run_vvtest( '--config config --plat PlayStation' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    plat2 = platform_name( out )
    tdir2 = results_dir()
    L = filegrep( os.path.join( tdir2, 'tst', 'execute.log' ),
                  'the COMPILER is' )
    assert len(L) == 1
    cplr2 = L[0].split()[-1]

    assert plat2 == 'PlayStation'
    assert cplr2 == "BASIC"
    
    if platname in batchplatforms:
        remove_results()

        # misspell the function names - they should just not be called
        writefile( "config/idplatform.py", """
            def platforms( opts ):
                return "XBox"
            def compilers( platname, opts ):
                return "BASIC"
            """ )

        out,np,nd,nf,nn = run_vvtest( '--pipeline --config config' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        plat2 = platform_name( out )
        tdir2 = results_dir()
        L = filegrep( os.path.join( tdir2, 'tst', 'execute.log' ),
                      'the COMPILER is' )
        assert len(L) == 1
        cplr2 = L[0].split()[-1]

        assert plat2 == platname
        assert tdir2 == tdir
        assert cplr2 == cplr
        
        shutil.rmtree( tdir )

        # if the functions return an empty string, the defaults should be used
        writefile( "config/idplatform.py", """
            def platform( opts ):
                return ''
            def compiler( platname, opts ):
                return ''
            """ )

        out,np,nd,nf,nn = run_vvtest( '--pipeline --config config' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        plat2 = platform_name( out )
        tdir2 = results_dir()
        L = filegrep( os.path.join( tdir2, 'tst', 'execute.log' ),
                      'the COMPILER is' )
        assert len(L) == 1
        cplr2 = L[0].split()[-1]

        assert plat2 == platname
        assert tdir2 == tdir
        assert cplr2 == cplr
        
        shutil.rmtree( tdir )

        # if the functions do not return a value, the defaults should be used
        writefile( "config/idplatform.py", """
            def platform( opts ):
                if False: return "XBox"
            def compiler( platname, opts ):
                if False: return "BASIC"
            """ )

        out,np,nd,nf,nn = run_vvtest( '--pipeline --config config' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        plat2 = platform_name( out )
        tdir2 = results_dir()
        L = filegrep( os.path.join( tdir2, 'tst', 'execute.log' ),
                      'the COMPILER is' )
        assert len(L) == 1
        cplr2 = L[0].split()[-1]

        assert plat2 == platname
        assert tdir2 == tdir
        assert cplr2 == cplr
        
        shutil.rmtree( tdir )

        # the command line option --plat should take precedence
        writefile( "config/idplatform.py", """
            def platform( opts ):
                return "XBox"
            def compiler( platname, opts ):
                if platname == 'PlayStation': return "BASIC"
            """ )

        out,np,nd,nf,nn = run_vvtest(
                            '--pipeline --config config --plat PlayStation' )
        assert np == 1 and nd == 0 and nf == 0 and nn == 0

        plat2 = platform_name( out )
        tdir2 = results_dir()
        L = filegrep( os.path.join( tdir2, 'tst', 'execute.log' ),
                      'the COMPILER is' )
        assert len(L) == 1
        cplr2 = L[0].split()[-1]

        assert plat2 == 'PlayStation'
        assert cplr2 == "BASIC"


########################################################################

main()
