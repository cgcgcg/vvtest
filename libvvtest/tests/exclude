#!/usr/bin/env python

import os, sys
import time
import glob

# this will os.chdir() to a subdirectory
from testutils import *

def main():
    """
    """
    argL = get_arg_list()

    if len(argL) == 0:
        argL = """test01 test02 test03 test04 test05
               """.split()

    cwd = os.getcwd()
    for func in argL:
        os.chdir( cwd )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )
        eval( func+'()' )

########################################################################

def test01():
    """
    exclude & include current platform
    """
    writefile( "none.xml", """
        <rtest name="none">
          <execute> echo "in test none" </execute>
        </rtest>""" )
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )
    print "Extracted platname =", platname
    os.remove( 'none.xml' )
    remove_results()

    writefile( "exclude.xml", """
        <rtest name="exclude">
          <include platforms="not """+platname+""""/>'
          <execute>
            echo "in test none"
            sleep 1
          </execute>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest( '-w' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    # include the current platform

    os.remove( 'exclude.xml' )
    writefile( "include.xml", '''
        <rtest name="include">
          <include platforms="'''+platname+'''"/>
          <execute>
            echo "in test none"
            sleep 1
          </execute>
        </rtest>''' )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    # add both an include and an exclude
    
    os.remove( 'include.xml' )
    writefile( "both.xml", '''
    <rtest name="both">
      <include platforms="'''+platname+'''"/>
      <include platforms="not '''+platname+'''"/>
      <execute>
        echo "in test none"
        sleep 1
      </execute>
    </rtest>''' )
    
    out,np,nd,nf,nn = run_vvtest( '-w' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0
    
    # add -A option to ignore the include/exclude tags
    
    out,np,nd,nf,nn = run_vvtest( '-A' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    # an empty include

    os.remove( 'both.xml' )
    writefile( "include.xml", '''
        <rtest name="include">
          <include platforms=""/>
          <execute>
            echo "in test include"
            sleep 1
          </execute>
        </rtest>''' )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 0 and nd == 0 and nf == 0 and nn == 0


def test02():
    """
    use platform to exclude an execute block
    """
    writefile( "none.xml", """
        <rtest name="none">
          <execute> echo "in test none" </execute>
        </rtest>""" )
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )
    os.remove( 'none.xml' )
    remove_results()

    writefile( "exe_exclude.xml", '''
        <rtest name="exe_exclude">
          <execute platforms="not '''+platname+'''">
            echo "findme line not excluded"
          </execute>
          <execute>
            echo "findme line number two included"
            sleep 1
          </execute>
        </rtest>''' )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    L = filegrep( results_dir()+'/exe_exclude/execute.log', "findme" )
    assert len(L) == 1


def test03():
    """
    options attribute with include
    """
    writefile( "opt_exclude.xml", '''
        <rtest name="opt_exclude">
          <include options="2D and ( tridev or tri8 )"/>
          <execute>
            echo "findme line number one executed"
            sleep 1
          </execute>
        </rtest>''' )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-w -o 2D+tridev' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-w -o 2D+tri8' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-w -o 2D -o tri8' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-w -o 3D -o tri8' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    writefile( "opt_exclude.xml", '''
        <rtest name="opt_exclude">
          <include options="2D and ( tdev or t8 )"/>
          <execute>
            echo "findme line number one executed"
            sleep 1
          </execute>
        </rtest>''' )

    out,np,nd,nf,nn = run_vvtest( '-w' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0

    out,np,nd,nf,nn = run_vvtest( '-w -o 2D+tdev' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0


def test04():
    """
    platform name other than the current
    """
    writefile( "none.xml", """
        <rtest name="none">
          <execute> echo "in test none" </execute>
        </rtest>""" )
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )
    os.remove( 'none.xml' )
    remove_results()

    assert platname != "Fake"
    otherplatname = "Fake"
    
    writefile( "plats.xml", '''
        <rtest name="plats">
        <include platforms="'''+otherplatname+'''"/>
        </rtest>''' )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 0 and nd == 0 and nf == 0 and nn == 0
    
    out,np,nd,nf,nn = run_vvtest( '-x '+otherplatname )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    
    remove_results()
    
    writefile( "plats.xml", '''
        <rtest name="plats">
        <include platforms="'''+otherplatname+''' or Dummy"/>
        </rtest>''')
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 0 and nd == 0 and nf == 0 and nn == 0
    
    out,np,nd,nf,nn = run_vvtest( '-x '+otherplatname )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    
    remove_results()
    
    out,np,nd,nf,nn = run_vvtest( '-x '+platname+'/Junk' )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0
    
    out,np,nd,nf,nn = run_vvtest( '-x '+otherplatname+'/Junk' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    
    remove_results()
    
    writefile( "plats.xml", '''
        <rtest name="plats">
        </rtest>''' )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    
    remove_results()
    
    out,np,nd,nf,nn = run_vvtest( '-x '+otherplatname )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    
    remove_results()
    
    out,np,nd,nf,nn = run_vvtest( '-X '+otherplatname )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0
    
    out,np,nd,nf,nn = run_vvtest( '-x '+platname+' -X '+otherplatname )
    assert np == 0 and nd == 0 and nf == 0 and nn == 0


def test05():
    """
    include on spec having more than one test
    """
    writefile( "none.xml", """
        <rtest name="none">
          <execute> echo "in test none" </execute>
        </rtest>""" )
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    platname = platform_name( out )
    os.remove( 'none.xml' )
    remove_results()
    
    assert platname != "Fake"
    otherplatname = "Fake"

    writefile( "multi.xml", '''
        <rtest name="multi">
          <rtest name="dual"/>
          <include testname="multi" platforms="'''+otherplatname+'''"/>
          <include testname="dual" platforms="'''+platname+'''"/>
          <execute> echo "hello world" </execute>
        </rtest>''' )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( glob.glob( 'TestResults.*/dual/execute.log' ) ) == 1
    
    out,np,nd,nf,nn = run_vvtest( '-w -x '+platname )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( glob.glob( 'TestResults.*/dual/execute.log' ) ) == 1
    
    out,np,nd,nf,nn = run_vvtest( '-w -X '+platname )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( glob.glob( 'TestResults.*/multi/execute.log' ) ) == 1
    
    out,np,nd,nf,nn = run_vvtest( '-w -x '+platname+'/'+otherplatname )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert len( glob.glob( 'TestResults.*/multi/execute.log' ) ) == 1
    assert len( glob.glob( 'TestResults.*/dual/execute.log' ) ) == 1


########################################################################

main()
