#!/usr/bin/env python

import os, sys
import time
import glob

# this will os.chdir() to a subdirectory
from testutils import *


def main():
    """
    """
    argL = get_arg_list()

    if len(argL) == 0:
        argL = """test01 test01b test02 test03 test04 test05 test06
                  test07 test08
               """.split()

    cwd = os.getcwd()
    for func in argL:
        os.chdir( cwd )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )
        eval( func+'()' )


########################################################################

def test01():
    """
    an executable script as a test file
    """
    writescript( 'hello.vvt', """
        #!/bin/sh
        echo "hello from the hello test script"
        """ )

    out,np,nd,nf,nn = run_vvtest()
    tdir = results_dir()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*hello') ) == 1

    assert len( filegrep( tdir+'/hello/execute.log',
                          "hello from the hello test script" ) ) == 1


def test01b():
    """
    the test can be named different than the script name
    """
    writescript( 'hello.vvt', """
        #!/bin/sh
        #VVT: name=world
        echo "hello from the hello/world test script"
        """ )

    out,np,nd,nf,nn = run_vvtest()
    tdir = results_dir()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*hello') ) == 0
    assert len( greptestlist(out,'pass.*world') ) == 1

    assert len( filegrep( tdir+'/world/execute.log',
                          "hello from the hello/world test script" ) ) == 1


########################################################################

def test02():
    """
    script is not executable but contains a shebang
    """
    writefile( 'hello.vvt', """#!/bin/sh
        echo "hello from the hello test script"
        """ )

    out,np,nd,nf,nn = run_vvtest()
    tdir = results_dir()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*hello') ) == 1

    assert len( filegrep( tdir+'/hello/execute.log',
                          "hello from the hello test script" ) ) == 1


########################################################################

def test03():
    """
    script has an embedded extension
    """
    writefile( 'hello.py.vvt', """
        import os, sys
        print ( "hello from the python test script" )
        """ )
    writefile( 'hello.csh.vvt', """
        setenv HELLO "world"
        echo "hello $HELLO from the csh script"
        """ )

    out,np,nd,nf,nn = run_vvtest()
    tdir = results_dir()
    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*hello') ) == 2
    assert len( greptestlist(out,'pass.*hello.py') ) == 1
    assert len( greptestlist(out,'pass.*hello.csh') ) == 1

    assert len( filegrep( tdir+'/hello.py/execute.log',
                          "hello from the python test script" ) ) == 1
    assert len( filegrep( tdir+'/hello.csh/execute.log',
                          "hello world from the csh script" ) ) == 1


########################################################################

def test04():
    """
    script that imports the helper fragment
    """
    writefile( 'hello.py.vvt', """
        import os, sys
        print ( "hello from the python test script" )
        import vvtest_util as vvt
        print ( 'hello, dir=', dir(vvt) )

        assert hasattr( vvt, 'NAME' )
        assert hasattr( vvt, 'PLATFORM' )
        assert hasattr( vvt, 'COMPILER' )
        assert hasattr( vvt, 'VVTESTSRC' )
        assert hasattr( vvt, 'PROJECT' )
        assert hasattr( vvt, 'OPTIONS' )
        assert hasattr( vvt, 'OPTIONS_OFF' )
        assert hasattr( vvt, 'SRCDIR' )

        assert vvt.NAME == 'hello.py'
        print ( 'PROJECT = '+vvt.PROJECT )
        assert vvt.OPTIONS == ['dbg']
        """ )

    os.mkdir( 'bin' )

    out,np,nd,nf,nn = run_vvtest( '-j bin -o dbg' )
    tdir = results_dir()
    platname = platform_name( out )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*hello.py') ) == 1

    assert len( filegrep( tdir+'/hello.py/execute.log',
                          "hello from the python test script" ) ) == 1
    L = filegrep( tdir+'/hello.py/execute.log', "PROJECT =" )
    assert len(L) == 1
    assert L[0].split('=',1)[1].strip() == os.path.abspath('bin')
    
    if platname in batchplatforms:

        # same thing in pipeline mode

        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline -j bin -o dbg' )
        tdir = results_dir()
        assert np == 1 and nd == 0 and nf == 0 and nn == 0
        assert len( greptestlist(out,'pass.*hello.py') ) == 1

        assert len( filegrep( tdir+'/hello.py/execute.log',
                              "hello from the python test script" ) ) == 1
        L = filegrep( tdir+'/hello.py/execute.log', "PROJECT =" )
        assert len(L) == 1
        assert L[0].split('=',1)[1].strip() == os.path.abspath('bin')


def test05():
    """
    python test that exits with a diff a pass and a fail
    """
    writescript( 'tpass.vvt', """
        #!/usr/bin/env python
        import os, sys
        import vvtest_util as vvt
        """ )
    writescript( 'tdiff.vvt', """
        #!/usr/bin/env python
        import os, sys
        import vvtest_util as vvt
        vvt.have_diff = True
        vvt.if_diff_then_exit()
        """ )
    writescript( 'tfail.vvt', """
        #!/usr/bin/env python
        import os, sys
        import vvtest_util as vvt
        def myfunc():
            raise Exception( "test failed" )
        myfunc()
        """ )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 1 and nf == 1 and nn == 0
    platname = platform_name( out )

    if platname in batchplatforms:

        # same thing in pipeline mode

        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 1 and nd == 1 and nf == 1 and nn == 0


def test06():
    """
    multiple tests in one script file
    """
    writescript( 'multi.vvt', """
        #!/usr/bin/env python
        #VVT: name=multi
        #VVT: name=multi2
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )

    out,np,nd,nf,nn = run_vvtest()
    tdir = results_dir()
    platname = platform_name( out )

    assert np == 2 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*multi') ) == 2
    assert len( greptestlist(out,'pass.*multi2') ) == 1

    assert len( filegrep( tdir+'/multi/execute.log',
                          "hello from the multi test" ) ) == 1
    assert len( filegrep( tdir+'/multi2/execute.log',
                          "hello from the multi2 test" ) ) == 1
    
    if platname in batchplatforms:

        remove_results()
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0

        assert len( greptestlist(out,'pass.*multi') ) == 2
        assert len( greptestlist(out,'pass.*multi2') ) == 1

        assert len( filegrep( tdir+'/multi/execute.log',
                              "hello from the multi test" ) ) == 1
        assert len( filegrep( tdir+'/multi2/execute.log',
                              "hello from the multi2 test" ) ) == 1


def test07():
    """
    check header specification comment variations
    """
    writescript( 'tst1.vvt', """
        #!/usr/bin/env python

        #VVT: name=test1
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst2.vvt', """
        #!/usr/bin/env python
        # 
        #VVT: name=test2
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst3.vvt', """
        #!/usr/bin/env python
        import vvtest_util as vvt
        #VVT: name=test3
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst4.vvt', """
        #!/usr/bin/env python
        #VVT: name=test4a

        #VVT: name=test4b

        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )

    out,np,nd,nf,nn = run_vvtest()
    tdir = results_dir()
    assert np == 5 and nd == 0 and nf == 0 and nn == 0
    assert len( greptestlist(out,'pass.*tst1') ) == 0
    assert len( greptestlist(out,'pass.*test1') ) == 1
    assert len( greptestlist(out,'pass.*tst2') ) == 0
    assert len( greptestlist(out,'pass.*test2') ) == 1
    assert len( greptestlist(out,'pass.*tst3') ) == 1
    assert len( greptestlist(out,'pass.*test3') ) == 0
    assert len( greptestlist(out,'pass.*test4a') ) == 1
    assert len( greptestlist(out,'pass.*test4b') ) == 1

    assert len( filegrep( tdir+'/test1/execute.log',
                          "hello from the test1 test" ) ) == 1
    assert len( filegrep( tdir+'/test2/execute.log',
                          "hello from the test2 test" ) ) == 1
    assert len( filegrep( tdir+'/tst3/execute.log',
                          "hello from the tst3 test" ) ) == 1
    assert len( filegrep( tdir+'/test4a/execute.log',
                          "hello from the test4a test" ) ) == 1
    assert len( filegrep( tdir+'/test4b/execute.log',
                          "hello from the test4b test" ) ) == 1


def test08():
    """
    incorrect specification syntax
    """
    writescript( 'tst1.vvt', """
        #!/usr/bin/env python
        #VVT: =junk
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst2.vvt', """
        #!/usr/bin/env python
        #VVT: keywords (testname=tst2) foo : bar
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst2b.vvt', """
        #!/usr/bin/env python
        #VVT: keywords (testname=tst2b) foo
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst2c.vvt', """
        #!/usr/bin/env python
        #VVT: keywords (testname=tst2c) (testname=tst2b)
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst3.vvt', """
        #!/usr/bin/env python
        #VVT: keywords (testname=tst3) : junk
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst4.vvt', """
        #!/usr/bin/env python
        #VVT::
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst5.vvt', """
        #!/usr/bin/env python
        #VVT: keywords (=tst5) : foo bar
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst6.vvt', """
        #!/usr/bin/env python
        #VVT: keywords (foo=bar,=) : foo bar
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    writescript( 'tst7.vvt', """
        #!/usr/bin/env python
        #VVT: keywords (foo=bar : foo bar
        import vvtest_util as vvt
        print ( "hello from the "+vvt.NAME+" test" )
        """ )
    
    out,np,nd,nf,nn = run_vvtest()
    tdir = results_dir()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0

    assert len( grep( out, 'skipping .*tst1.vvt'  ) ) == 1
    assert len( grep( out, 'skipping .*tst2.vvt'  ) ) == 1
    assert len( grep( out, 'skipping .*tst2b.vvt' ) ) == 1
    assert len( grep( out, 'skipping .*tst2c.vvt' ) ) == 1
    assert os.path.exists( os.path.join( tdir, 'tst3', 'execute.log' ) )
    assert len( grep( out, 'skipping .*tst4.vvt' ) ) == 1
    assert len( grep( out, 'skipping .*tst5.vvt' ) ) == 1
    assert len( grep( out, 'skipping .*tst6.vvt' ) ) == 1
    assert len( grep( out, 'skipping .*tst7.vvt' ) ) == 1


########################################################################

main()
