#!/usr/bin/env python

import os, sys
import time

# this will os.chdir() to a subdirectory
from testutils import *

def main():
    """
    """
    argL = get_arg_list()

    if len(argL) == 0:
        argL = """test01 test02 test03
               """.split()

    # set these for the pipeline tests
    os.environ['VVTEST_BATCH_READ_DELAY'] = '5'
    os.environ['VVTEST_BATCH_READ_DELAY_MAX'] = '15'
    os.environ['VVTEST_BATCH_SLEEP_LENGTH'] = '1'
    
    cwd = os.getcwd()
    for func in argL:
        os.chdir( cwd )
        rmallfiles()
        time.sleep(1)
        print3( '====> ', func )
        eval( func+'()' )


#######################################################################

def test01():
    """
    tests notrun or notdone get run upon restart
    """
    writefile( "param.xml", """
        <rtest name="param">
          <parameterize hello="world mars"/>
          <execute> <![CDATA[
            sleep 1
            echo "parm=$hello"
          ]]>
          </execute>
        </rtest>""" )

    writefile( "FailTest.xml", """
        <rtest name="FailTest">
          <execute> <![CDATA[
            sleep 1
            echo "Exiting with failure status"
            exit 1
          ]]>
          </execute>
        </rtest>""")

    writefile( "DiffTest.xml", """
        <rtest name="DiffTest">
          <execute> <![CDATA[
            sleep 1
            echo "Exiting with diff status"
            set have_diff = yes
          ]]>
          </execute>
        </rtest>""")

    # run the test set but provide a false interruption
    os.environ['VVTEST_INTERRUPT_COUNT'] = '1'
    out,np,nd,nf,nn = run_vvtest( "-n 2", ignore_errors=1 )
    del os.environ['VVTEST_INTERRUPT_COUNT']
    out,np,nd,nf,nn = run_vvtest( '-i' )
    assert np+nd+nf+nn == 4
    assert np < 2 or nd < 1 or nf < 1

    # restart with no keywords
    out,np,nd,nf,nn = run_vvtest( '-n 2' )
    out,np,nd,nf,nn = run_vvtest( '-i' )
    assert np == 2 and nd == 1 and nf == 1 and nn == 0

    # restart using results keyword
    os.environ['VVTEST_INTERRUPT_COUNT'] = '1'
    out,np,nd,nf,nn = run_vvtest( '-n 2 -w', ignore_errors=1 )
    del os.environ['VVTEST_INTERRUPT_COUNT']
    out,np,nd,nf,nn = run_vvtest( '-i' )
    assert np+nd+nf+nn == 4
    assert np < 2 or nd < 1 or nf < 1
    out,np,nd,nf,nn = run_vvtest( '-n 2 -k notrun/notdone' )
    out,np,nd,nf,nn = run_vvtest( '-i' )
    assert np+nd+nf+nn == 4

    # none should restart now
    out,np,nd,nf,nn = run_vvtest( '-n 2' )
    assert np+nd+nf+nn == 0

    # all of them should run again (the -F has been replaced by -R but use it
    # here to test it still works, can be removed in the future [May 2016])
    out,np,nd,nf,nn = run_vvtest( '-n 2 -F' )
    assert np+nd+nf+nn == 4


def test02():
    """
    check prerun file cleanout
    """
    writefile( "clean.xml", """
        <rtest name="clean">
          <execute> <![CDATA[
            foreach f ( `ls` )
              echo "existing file = $f"
            end
            set noclobber
            echo "gen file contents" > generated_file.txt || exit 1
          ]]>
          </execute>
        </rtest>""" )
    
    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    tdir = os.path.abspath( results_dir() )
    assert os.path.exists( tdir+'/clean/generated_file.txt' )

    # run again should remove the generated file
    out,np,nd,nf,nn = run_vvtest( '-R' )
    assert np == 1 and nd == 0 and nf == 0 and nn == 0
    assert len( filegrep( tdir+'/clean/execute.log', 'existing.*generated' ) ) == 0

    # running again with -m option should fail
    out,np,nd,nf,nn = run_vvtest( '-R -m' )
    assert np == 0 and nd == 0 and nf == 1 and nn == 0
    assert len( filegrep( tdir+'/clean/execute.log', 'existing.*generated' ) ) == 1


#######################################################################

def test03():
    """
    restart with pipeline
    """
    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize timestep="1 2"/>
          <execute>
            if ( "$timestep" == 2 ) then
              echo "fake failure"
              exit 1
            else
              touch atest.$timestep
            endif
          </execute>
          <analyze>
             ls ../atest.timestep=1/atest.1 || exit 1
             ls ../atest.timestep=2/atest.2 || exit 1
          </analyze>
        </rtest>""" )

    out,np,nd,nf,nn = run_vvtest()
    assert np == 1 and nd == 0 and nf == 1 and nn == 1
    tdir = os.path.abspath( results_dir() )
    platname = platform_name( out )

    # "fix" the test and restart
    writefile( 'atest.xml', """
        <rtest name="atest">
          <parameterize timestep="1 2"/>
          <execute>
            touch atest.$timestep
          </execute>
          <analyze>
             ls ../atest.timestep=1/atest.1 || exit 1
             ls ../atest.timestep=2/atest.2 || exit 1
          </analyze>
        </rtest>""" )
    
    out,np,nd,nf,nn = run_vvtest( '-k fail/notrun' )
    assert np == 2 and nd == 0 and nf == 0 and nn == 0

    if platname in batchplatforms:

        # same thing in pipeline mode

        remove_results()

        writefile( 'atest.xml', """
            <rtest name="atest">
              <parameterize timestep="1 2"/>
              <execute>
                if ( "$timestep" == 2 ) then
                  echo "fake failure"
                  exit 1
                else
                  touch atest.$timestep
                endif
              </execute>
              <analyze>
                 ls ../atest.timestep=1/atest.1 || exit 1
                 ls ../atest.timestep=2/atest.2 || exit 1
              </analyze>
            </rtest>""" )

        out,np,nd,nf,nn = run_vvtest( '--pipeline' )
        assert np == 1 and nd == 0 and nf == 1 and nn == 1
        tdir = os.path.abspath( results_dir() )
        platname = platform_name( out )

        # "fix" the test and restart
        writefile( 'atest.xml', """
            <rtest name="atest">
              <parameterize timestep="1 2"/>
              <execute>
                touch atest.$timestep
              </execute>
              <analyze>
                 ls ../atest.timestep=1/atest.1 || exit 1
                 ls ../atest.timestep=2/atest.2 || exit 1
              </analyze>
            </rtest>""" )
        
        out,np,nd,nf,nn = run_vvtest( '--pipeline -k fail/notrun' )
        assert np == 2 and nd == 0 and nf == 0 and nn == 0


########################################################################

main()
